<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ChatGPT学习模式（study mode）介绍和体验</title>
    <link href="/ai/chatgpt-study-mode-first-try/"/>
    <url>/ai/chatgpt-study-mode-first-try/</url>
    
    <content type="html"><![CDATA[<h1 id="ChatGPT学习模式（study-mode）介绍和体验"><a href="#ChatGPT学习模式（study-mode）介绍和体验" class="headerlink" title="ChatGPT学习模式（study mode）介绍和体验"></a>ChatGPT学习模式（study mode）介绍和体验</h1><p>近期，ChatGPT推出了学习模式（study mode）。不管是iOS、安卓、web或者桌面端都可以使用。免费版本、Plus、Pro版本都可以使用。这个模式也支持中文。</p><p>你可以把学习模式当做是一个在线的全科老师，此模式具备交互功能，可以一问一答。或者把ChatGPT当做是“私人学习助手”，家教老师，题库练习机，学习规划师，英语对话伙伴，地理百科全书等等。</p><p>这个模式重点在于交互、问答和引导。如果要ChatGPT一次性出一份练习题，可以用普通模式。</p><p>下面我们来试一下学习模式（网络不好的情况下请全局开🪜）</p><p>先打开ChatGPT的学习模式，本文以网页版为例，工具 - 研究与学习</p><p><img src="chatgpt-tools-study-mode.png" alt="研究与学习"></p><h2 id="做题练习模式"><a href="#做题练习模式" class="headerlink" title="做题练习模式"></a>做题练习模式</h2><p>先告诉ChatGPT自己的情况，然后要求出对应科目的题目。</p><p>例如作为一个小学2年级学生，想要练习数学题目。<br>告诉ChatGPT：<br><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">我是一个小学二年级学生，想练习数学题目。请出2道数学练习题<br></code></pre></td></tr></table></figure></p><p>ChatGPT的回答：<br><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs text">👍 很棒！你已经动脑筋认真做题了！我们来一起看看对不对\~<br><br>---<br><br>### ✅ 第1题：<br><br>**题目：** 小红有12个苹果，送给小明5个，还剩下（   ）个苹果。<br>**你的答案：** 7<br>✔ **正确！** 因为：<br>12 - 5 = 7<br>你减得很准，说明你掌握了“从一个数中减去一部分”的方法。<br><br>---<br><br>### ✅ 第2题：<br><br>**题目：** 下面哪一个算式的结果是20？<br>A. 10 + 10<br>B. 15 + 3<br>C. 25 - 4<br>**你的选择：** A<br>✔ **正确！** 因为：<br>A. 10 + 10 = 20 ✅<br>B. 15 + 3 = 18<br>C. 25 - 4 = 21<br><br>---<br><br>👏 两题都对了！你真的很棒，而且计算很快！<br><br>你想继续练习两道吗？还是想试试别的题型，比如“应用题”或者“连加连减”？<br></code></pre></td></tr></table></figure></p><p>除了判断答案，还给出了一些简单解析。我们再输入：<br><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">出一个应用题<br></code></pre></td></tr></table></figure></p><p>ChatGPT出了新的题目：<br><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs text">太好了！二年级的应用题正适合你来挑战一下，我来出一题：<br><br>---<br><br>### 🍬 应用题：<br><br>小亮有8颗糖果，妈妈又给了他6颗。他自己吃了5颗。<br>现在小亮还剩下多少颗糖果？<br><br>---<br><br>你可以一步一步想：<br><br>1. 一开始有多少？<br>2. 后来又得到了多少？<br>3. 吃掉了多少？<br>4. 现在还剩下多少？<br><br>你来算一算，写出你的答案吧\~<br></code></pre></td></tr></table></figure></p><p>再输入我们的答案<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">9颗<br></code></pre></td></tr></table></figure><br>ChatGPT的回答：<br><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs text">👍 好，咱们一起来检查一下你的思路和答案，看看哪里做得对，哪里还能更清楚！<br><br>---<br><br>### 🍬 题目回顾：<br><br>小亮有8颗糖果，妈妈又给了6颗，他吃了5颗。还剩多少颗？<br><br>我们可以一步步来算：<br><br>#### 第一步：原来有8颗，妈妈又给了6颗<br><br>👉 8 + 6 = **14**（现在有14颗糖果）<br><br>#### 第二步：他吃了5颗<br><br>👉 14 - 5 = **9**<br><br>---<br><br>🎉 所以，你的答案是 **9颗**——\*\*完全正确！\*\*👏<br>你已经学会了“先加再减”的应用题思路，很棒！<br><br>---<br><br>你想继续做一个类似的题？还是想挑战一下稍微长一点的问题？或者换个题型练练？<br></code></pre></td></tr></table></figure><br>可以看到给出了思路和解析步骤。</p><p>对于二年级学生来说，用电脑键盘输入自己的答案可能难度太高，这个打字步骤可以由家长或者老师代为完成。</p>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-c78f1f31" role="button" aria-expanded="false" aria-controls="collapse-c78f1f31">        <div class="fold-arrow">▶</div>小学二年级数学学习案例截图      </div>      <div class="fold-collapse collapse" id="collapse-c78f1f31">        <div class="fold-content">          <p><img src="chatgpt-study-mode-case1.png" alt="二年级数学"></p>        </div>      </div>    </div><h2 id="知识讲解模式"><a href="#知识讲解模式" class="headerlink" title="知识讲解模式"></a>知识讲解模式</h2><p>把用户年级告诉他，并且指定要求讲解某一块知识点</p><p>比如输入：<br><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">我是初二的学生，讲一讲初二英语的要点<br></code></pre></td></tr></table></figure><br>ChatGPT会更新前面的记录，并对应初二英语给出回答<br><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs text">太好了，初二是英语学习很关键的一年！我们一起来看看 **初二英语的重点内容**，我会讲得清楚明了，还会穿插小问题帮你检查有没有听懂。<br><br>---<br><br>## 🧩 一、语法重点<br><br>### 1. **时态**<br><br>初二最重要的语法是时态，尤其是：<br><br>* **一般过去时**：I visited my grandma yesterday.<br>* **现在进行时**：She is doing her homework now.<br>* **一般将来时**：I will go to the park tomorrow.<br><br>❓小测一下：<br>句子 “He \_\_\_\_\_\_ (go) to school yesterday.” 应该填什么？<br>A. goes B. is going C. went<br><br>---<br><br>### 2. **比较级和最高级**<br><br>形容词/副词的比较：<br><br>* big → **bigger** → **the biggest**<br>* carefully → **more carefully** → **the most carefully**<br><br>我们通常这样比较：<br><br>* A比B高：A is **taller** than B.<br>* A是最高的：A is **the tallest**.<br><br>---<br><br>### 3. **动词不定式和动名词**<br><br>* like **to play** / like **playing** 都可以表示“喜欢玩”<br>* want **to do** sth（想做某事）<br><br>---<br><br>## 🧱 二、词汇和短语<br><br>### 常见话题词汇：<br><br>* 健康（health）：exercise, illness, medicine<br>* 环境（environment）：pollution, protect, clean up<br>* 日常生活：routine, hobby, chores<br>* 学校：subject, exam, timetable<br><br>我们也常学一些 **短语**：<br><br>* get up 起床<br>* take care of 照顾<br>* be good at 擅长于<br>* look forward to 期待<br><br>---<br><br>## 📖 三、阅读理解和写作<br><br>### 阅读理解：<br><br>要学会：<br><br>* 找主旨句（通常在第一段或最后一段）<br>* 理解细节（用扫读法找具体信息）<br>* 推理判断（比如作者的观点）<br><br>### 写作：<br><br>常写话题有：<br><br>* 我的朋友 / 我的周末<br>* 一次难忘的经历<br>* 如何保持健康 / 爱护环境<br><br>句子要简洁，最好有**三段结构**：<br><br>1. 开头：引出话题<br>2. 中间：说明细节<br>3. 结尾：表达感受或总结<br><br>---<br><br>你有没有特别想练习的部分？比如“过去时用法”、“短语记忆”、“阅读题技巧”还是“英语写作”？我们可以针对你最想提高的来练！<br></code></pre></td></tr></table></figure><br>给出了多个要点。并且继续询问接下来想学习的部分。直接输入“过去时用法”或者“短语记忆”，它就给出对应知识点，并且穿插着一些小练习</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">短语记忆<br></code></pre></td></tr></table></figure><p>输出：<br><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs text">好眼光！短语是英语中的“积木”，句子少不了它，考试也爱考它。那我们就来进入【短语记忆模式】🧠，一边学、一边记！<br><br>---<br><br>## 🌟 初二常见短语分类记忆法<br><br>我会用“场景+短语+例句”的方式，帮助你快速理解并记住。<br><br>---<br><br>### 📅 日常生活类<br><br>| 中文意思 | 短语             | 例句                            |<br>| ---- | -------------- | ----------------------------- |<br>| 起床   | get up         | I get up at 7 a.m. every day. |<br>| 上学   | go to school   | She goes to school by bike.   |<br>| 做作业  | do homework    | He is doing his homework now. |<br>| 吃早饭  | have breakfast | They have breakfast together. |<br><br>🔍 小问一问：<br>你每天几点 **get up**？可以用英文回答我试试看吗？<br><br>---<br><br>### 🧑‍🤝‍🧑 人际关系类<br><br>| 中文意思    | 短语                 | 例句                                   |<br>| ------- | ------------------ | ------------------------------------ |<br>| 和……相处融洽 | get along with     | I get along well with my classmates. |<br>| 对……友好   | be friendly to     | He is friendly to new students.      |<br>| 和……保持联系 | keep in touch with | I keep in touch with my old friends. |<br><br>🎯 小练一下：<br>你还记得“和……相处融洽”怎么说吗？能不能用它说一句话？<br><br>---<br><br>### 🎒 学习相关类<br><br>| 中文意思 | 短语            | 例句                                           |<br>| ---- | ------------- | -------------------------------------------- |<br>| 擅长   | be good at    | She is good at math.                         |<br>| 准备…… | get ready for | I’m getting ready for the English test.      |<br>| 查找   | look up       | You can look up new words in the dictionary. |<br><br>---<br><br>## 🎲 小活动：翻译挑战！<br><br>我们来玩个小游戏，我说中文，你来翻成英文短语👇<br><br>1. 起床 = ?<br>2. 擅长英语 = ?<br>3. 做作业 = ?<br>4. 和妈妈相处得好 = ?<br><br>你来试一试，写完我来帮你检查！如果你想，我也可以帮你做一张“短语卡片集”\~<br></code></pre></td></tr></table></figure><br>既给出了短语的知识点，又顺手给出了几个小问题。</p><h2 id="学习计划模式"><a href="#学习计划模式" class="headerlink" title="学习计划模式"></a>学习计划模式</h2><p>除了练习题目和总结知识点，还可以让ChatGPT给出学习计划。</p><p>比如我们需要初三的英语学习计划<br><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">我是一个初三的学生，请给一个初三英语的学习计划<br></code></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs text">好的！初三英语很关键，不只是为了中考提分，更是为高中打基础。我们来制定一个**实用又不累的英语学习计划**，每天大概花 **40～60分钟**，重点提升词汇、语法、阅读、写作四大块。<br><br>---<br><br>## 🗓️ 初三英语一周学习计划（可循环）<br><br>### 周一｜词汇 + 语法基础<br><br>* 背15个核心单词 + 造句<br>* 学1个语法点（如：过去完成时、宾语从句）<br>* 做5道语法题<br><br>✅ 建议：用错题本记录不熟的词汇和题型<br><br>---<br><br>### 周二｜阅读训练<br><br>* 做1篇短文阅读（近3年中考题或课外阅读）<br>* 划出不会的词句，查词典并记录<br>* 总结主旨、结构、作者观点<br><br>✅ 小技巧：先看题目，再带着问题去读文<br><br>---<br><br>### 周三｜写作专项<br><br>* 模仿一篇范文（比如“我的学习计划”）<br>* 改写或续写一段文字<br>* 自己写一篇80词左右的短文<br><br>✅ 写完后检查：有没有时态错误？有没有短语？<br><br>---<br><br>### 周四｜听力 + 口语练习<br><br>* 听1段材料（可用教材或中考听力真题）<br>* 复述主要内容<br>* 和ChatGPT练1段日常英语对话，比如购物、问路等<br><br>✅ 听不懂没关系，反复听，跟读也有效！<br><br>---<br><br>### 周五｜综合练习 + 错题复盘<br><br>* 做1套小练（含词汇+语法+阅读+写作）<br>* 整理这一周做错的题和记错的词<br>* 复习“错题+重点语法+重点短语”<br><br>✅ 最关键的是总结，而不是做很多<br><br>---<br><br>### 周末（自由复习日）<br><br>任选内容加强练习，也可以：<br><br>* 背中考常考作文模板<br>* 玩“英汉互译”小游戏<br>* 看一小段英文动画或新闻（字幕+听力）<br><br>---<br><br>如果你告诉我你每天有多少时间、想重点练哪一块（比如阅读、作文），我可以再帮你**定制一个更详细的计划表**！<br><br>要不要试试？💡<br></code></pre></td></tr></table></figure><br>ChatGPT会生成一份详细的计划和对应的建议。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>据笔者初步体验来看，这个学习模式也适合老师和家长去给孩子辅导学习。</p><p>如果让孩子直接给ChatGPT输入指令，孩子可能会采取“投机取巧”的办法，比如直接要答案。家长老师在一旁辅助，学习效果可能会更好。也就是ChatGPT成为家长老师的辅导帮手。</p><p>本文体验了小学和初中的数学、英语内容。其他科目内容，以及高中甚至大学内容，这个模式的适用性还有待探索。</p><p>可以肯定的是，小学阶段的日常教学内容对ChatGPT来说是可以应付的。</p>]]></content>
    
    
    <categories>
      
      <category>ai</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ChatGPT</tag>
      
      <tag>AI</tag>
      
      <tag>ChatGPT学习模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2025年AI聊天工具推荐与对比 - ChatGPT/Gemini/DeepSeek/豆包</title>
    <link href="/ai/2025-ai-chat-tools/"/>
    <url>/ai/2025-ai-chat-tools/</url>
    
    <content type="html"><![CDATA[<p>本文对比2025年主流AI聊天工具（ChatGPT、Gemini、DeepSeek、Grok和豆包）的核心功能、使用体验、价格方案及适用场景，帮助读者选择最适合的人工智能助手。<br>以下各工具要能和用户进行自然的交流互动，能理解用户的问题、回应用户的需求，不管是聊天、解答疑问还是提供帮助，都可以通过对话来实现。</p><blockquote><p>本文持续更新中</p></blockquote><h2 id="ChatGPT"><a href="#ChatGPT" class="headerlink" title="ChatGPT"></a>ChatGPT</h2><p>各种对话，解答问题，提供建议，以及协助创意工作。我能处理文本、分析信息，还能生成图像或帮助你修改图像<br>可使用Google、Microsoft、Apple账号登录。可用免费账号进行体验，使用GPT-4o mini。<br>Plus版本$20每月，深度研究、多个推理模型（o4-mini、o4-mini-high 和 o3）以及 GPT-4.5 研究预览版。<br>Pro版本$200每月，访问 GPT-4.5 和 Operator 的研究预览版。</p><p>地址： <a href="https://chatgpt.com/">https://chatgpt.com/</a><br>公司： <a href="https://openai.com/">OpenAI</a></p><p><strong>核心功能</strong>：GPT-4 Turbo模型支持128K上下文、多模态交互、高级数据分析<br><strong>优势</strong>：生态完善，第三方插件丰富，企业级API支持<br><strong>不足</strong>：免费版响应速度较慢，部分高级功能需订阅Plus会员<br><strong>适用场景</strong>：专业内容创作、编程辅助、学术研究</p><blockquote><p>大模型的重磅产品，掀起了AI又一轮浪潮</p></blockquote><h2 id="Gemini"><a href="#Gemini" class="headerlink" title="Gemini"></a>Gemini</h2><p>Google旗下的大语言模型。目前提供2.5Flash和2.5Pro模型。<br>能够进行内容创作、摘要、翻译、重写润色、扩写、格式化、情感分析、关键词提取。代码生成、解释、调试，解释技术概念等等。<br>编者认为询问Google家的技术问题，Gemini的回答会比较专业，因为它是Google的产品。比如Android、Webrtc等等。<br>Gemini也能生成视频。目前PRO用户每天能生成3个视频。</p><p>Google AI Pro原价是$19.99每月。收费方案地址： <a href="https://one.google.com/about/plans">https://one.google.com/about/plans</a></p><p>地址： <a href="https://gemini.google.com/">https://gemini.google.com/</a><br>公司： Google</p><p><strong>核心功能</strong>：多模态理解（文本/图像/音频/视频）、实时网络搜索、代码执行环境<br><strong>优势</strong>：与Google服务深度整合，免费版功能强大<br><strong>不足</strong>：部分高级功能仅限PRO会员<br><strong>适用场景</strong>：多媒体内容处理、实时信息获取、教育学习</p><h2 id="Copilot"><a href="#Copilot" class="headerlink" title="Copilot"></a>Copilot</h2><p>Copilot微软打造的AI伙伴，可以查资料、提供写作创意、写邮件、整理资料等等。</p><p>快速响应（2-3秒），适合日常对话。Think Deeper（约30秒）适合更复杂的主题。</p><p>💰 Microsoft Copilot Pro 每个月 US$20</p><p>地址： <a href="https://copilot.microsoft.com/">https://copilot.microsoft.com/</a><br>公司： Microsoft</p><p>在VS Code 中安装 Copilot 插件，适合软件开发人员。</p><blockquote><p>网络不好的地方需要用🪜</p></blockquote><h2 id="Grok"><a href="#Grok" class="headerlink" title="Grok"></a>Grok</h2><p>Grok 由 xAI 公司开发，是一个功能强大的人工智能助手，旨在提供准确、有用的回答，并协助用户完成多种任务。xAI背后老板是埃隆·马斯克（Elon Musk）。</p><p>Grok可以回答几乎任何问题，从科学、历史到日常生活。也可以搜索网络和X平台上的最新信息。可以用来查询新闻、趋势（Trend）等等。</p><p>支持多模态，文本，图像分析，文件处理。也可生成图表（如柱状图、折线图、饼图等）。</p><p>支持多语言，如中文、英文。</p><p>对软件工程师来说，可以编写简单代码、解释代码逻辑。</p><p>Grok免费版用的是Grok3。Grok4需要付费。</p><ul><li>SuperGrok $30/月<ul><li>Grok 4 权限增加</li></ul></li><li>SuperGrok Heavy $300/月<ul><li>Grok 4 Heavy 独家预览</li></ul></li></ul><p>可以用x账号登录，或者邮箱注册、苹果登录、谷歌登录。</p><p>地址： <a href="https://grok.com/">https://grok.com/</a><br>公司： xAI<br>API接入： <a href="https://x.ai/api">https://x.ai/api</a></p>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-6616ebdc" role="button" aria-expanded="false" aria-controls="collapse-6616ebdc">        <div class="fold-arrow">▶</div>Grok上询问马斯克说了啥      </div>      <div class="fold-collapse collapse" id="collapse-6616ebdc">        <div class="fold-content">          <p>输入：elon musk在x上最近说了什么。以下是部分回答<br><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs text">埃隆·马斯克（Elon Musk）最近在 X 平台上的帖子涵盖了多个话题，以下是截至2025年8月3日他的一些最新动态（基于搜索结果）：<br><br>关于技术与创新：<br><br>2025年8月3日 08:20 HKT：马斯克鼓励用户分享如何制作有趣图片和视频的提示（prompts），以激发创意内容创作。<br>2025年8月2日 13:34 HKT：他提到“让你的想法以最快的速度从脑海流向屏幕”，并分享了一段链接，可能是推广与 AI 或内容创作相关的功能。<br>2025年7月31日 02:43 HKT：马斯克发帖称“关键在于解决限制因素”，可能与 SpaceX、特斯拉或 xAI 的技术挑战有关。<br><br><br>社会与文化评论：<br><br>2025年7月29日 02:20 HKT：马斯克讨论了历史上的文明趋势，指出繁荣且无入侵威胁的文明在几代人后往往出现低生育率的现象，并提到罗马人对此的“持续哀叹”。他强调这是历史相关性，但原因可讨论。<br>2025年7月28日 01:44 HKT：他以自嘲的语气说：“我对技术知道些什么呢？🤷‍♂️”，可能是在回应关于他技术专长的讨论。<br>2025年7月28日 14:08 HKT：马斯克发问：“你有多少次走进一个房间，发现每个人都在盯着手机？”反映他对现代社会科技依赖的观察。<br><br></code></pre></td></tr></table></figure></p>        </div>      </div>    </div><h2 id="DeepSeek-Chat"><a href="#DeepSeek-Chat" class="headerlink" title="DeepSeek Chat"></a>DeepSeek Chat</h2><p>DeepSeek Chat，由 深度求索（DeepSeek） 研发的一款智能 AI 助手。我的核心模型是 DeepSeek-V3，知识截止到 2024年7月，具备强大的 128K 上下文处理能力，可以帮你解答各种问题、处理文档、分析数据，陪用户聊天</p><p>地址： <a href="https://chat.deepseek.com/">https://chat.deepseek.com/</a><br>公司： 深度求索（DeepSeek）<br>deepseek开放平台 <a href="https://platform.deepseek.com/usage">https://platform.deepseek.com/usage</a><br>接口文档 <a href="https://api-docs.deepseek.com/zh-cn/">https://api-docs.deepseek.com/zh-cn/</a></p><p><strong>核心功能</strong>：128K超长上下文、专业领域知识（数学/物理/编程）、文档分析<br><strong>优势</strong>：中文处理能力强，免费版功能无阉割<br><strong>不足</strong>：生态相对较小，插件数量有限<br><strong>适用场景</strong>：中文内容创作、技术文档处理、学术研究</p><p>目前个人使用是免费的。如果要对接API则需要付费。</p><h2 id="豆包"><a href="#豆包" class="headerlink" title="豆包"></a>豆包</h2><p>豆包是字节跳动开发的人工智能助手。功能有AI搜索，写作，AI编程，图像生成，AI阅读等。</p><p>地址： <a href="https://www.doubao.com/">https://www.doubao.com/</a><br>公司： 字节跳动</p><p><strong>核心功能</strong>：AI搜索集成、多模态创作、语音交互、本地化部署<br><strong>优势</strong>：国内访问速度快，本地化服务完善，语音功能领先<br><strong>不足</strong>：国际服务支持较弱<br><strong>适用场景</strong>：日常聊天助手、内容创作、本地生活服务</p><p>目前个人使用免费。有网页版，有电脑版。电脑版功能更多一些，比如和AI进行语音通话。</p><h2 id="通义千问"><a href="#通义千问" class="headerlink" title="通义千问"></a>通义千问</h2><p>通义千问是由通义实验室研发的超大规模语言模型。能够回答问题、创作文字，比如写故事、写公文、写邮件、写剧本、逻辑推理、编程等等，还能表达观点，玩游戏等。</p><p>能支持中文、英文、德语、法语、西班牙语等百种语言。</p><p>可以在阿里云百炼网页端体验，也可以对接API。<br>模型广场有多个模型版本，例如通义千问3、通义千问-Plus、通义千问-Turbo等等。</p><p>地址： <a href="https://bailian.console.aliyun.com/?tab=model">https://bailian.console.aliyun.com/?tab=model</a><br>公司： 阿里巴巴</p><p><strong>核心功能</strong>：自然语言理解、多轮对话交互、代码理解、逻辑推理、情感分析和观点表达<br><strong>优势</strong>：中文理解能力更强，上下文理解能力强大，支持公有云、私有化部署、本地部署<br><strong>不足</strong>：多模态能力不够完善，不支持实时联网<br><strong>适用场景</strong>：智能客服、内容创作、教育辅导、代码开发、数据分析等等</p><p>需要在阿里云百炼大模型模型广场选择模型，开通免费额度。每个模型免费额度各100万Token，有效期为百炼开通后180天内。</p><h2 id="AI聊天工具对比总结表"><a href="#AI聊天工具对比总结表" class="headerlink" title="AI聊天工具对比总结表"></a>AI聊天工具对比总结表</h2><table><thead><tr><th>工具名称</th><th>核心优势</th><th>价格方案</th><th>最佳适用场景</th><th>免费额度</th></tr></thead><tbody><tr><td>ChatGPT</td><td>生态完善，插件丰富</td><td>免费版 / Plus $20/月</td><td>专业创作、编程</td><td>有限制</td></tr><tr><td>Gemini</td><td>多模态处理，谷歌服务整合</td><td>免费版 / Advanced $19.99/月</td><td>多媒体处理、教育</td><td>无限制</td></tr><tr><td>DeepSeek</td><td>中文能力强，超长上下文</td><td>免费版 / API付费</td><td>中文创作</td><td>无限制</td></tr><tr><td>豆包</td><td>语音交互，本地化服务</td><td>免费版 / 会员制</td><td>日常助手、内容创作</td><td>无限制</td></tr><tr><td>通义千问</td><td>中文能力强，超长上下文</td><td>免费版 / Token收费</td><td>日常助手、内容创作</td><td>100w token 开通后180天免费</td></tr></tbody></table><h2 id="如何选择适合自己的AI聊天工具？"><a href="#如何选择适合自己的AI聊天工具？" class="headerlink" title="如何选择适合自己的AI聊天工具？"></a>如何选择适合自己的AI聊天工具？</h2><ol><li><strong>专业需求</strong>（编程/创作）：优先选择ChatGPT或DeepSeek</li><li><strong>多媒体处理</strong>：Gemini的多模态能力更具优势</li><li><strong>中文场景</strong>：DeepSeek和豆包表现更佳</li><li><strong>预算有限</strong>：DeepSeek免费版功能最全面</li><li><strong>国内使用</strong>：豆包访问速度和本地化服务最优</li></ol><h2 id="常见问题解答"><a href="#常见问题解答" class="headerlink" title="常见问题解答"></a>常见问题解答</h2><p><strong>Q: AI聊天工具的数据安全吗？</strong><br>A: 所有主流工具均采用端到端加密，但建议避免输入敏感个人信息。不要把Token之类信息上传。</p><p><strong>Q: 免费版和付费版的核心区别是什么？</strong><br>A: 主要在响应速度、上下文长度、高级功能和优先级支持上有差异。</p><p><strong>Q: 能否用于商业用途？</strong><br>A: 需查看各工具的服务条款，一般免费版禁止商业使用，付费版通常允许。</p>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-94abd699" role="button" aria-expanded="false" aria-controls="collapse-94abd699">        <div class="fold-arrow">▶</div>小鱼时钟      </div>      <div class="fold-collapse collapse" id="collapse-94abd699">        <div class="fold-content">          <p>用AI辅助制作的微信小程序，欢迎体验。使用微信扫码</p><p><img src="/img/fishclock-miniapp-code.jpg" alt="小鱼时钟"></p><p><a href="https://an.rustfisher.com/fishclock/#/">小鱼时钟 - Web</a></p>        </div>      </div>    </div>]]></content>
    
    
    <categories>
      
      <category>ai</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI工具</tag>
      
      <tag>ChatGPT</tag>
      
      <tag>Gemini</tag>
      
      <tag>DeepSeek</tag>
      
      <tag>豆包</tag>
      
      <tag>Grok</tag>
      
      <tag>Copilot</tag>
      
      <tag>人工智能助手</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>下载和使用仿宋GB2312字体，附下载地址（Mac使用）</title>
    <link href="/unclassified/font-gb2312/"/>
    <url>/unclassified/font-gb2312/</url>
    
    <content type="html"><![CDATA[<h1 id="下载和使用仿宋GB2312字体"><a href="#下载和使用仿宋GB2312字体" class="headerlink" title="下载和使用仿宋GB2312字体"></a>下载和使用仿宋GB2312字体</h1><p>仿宋GB2312字体下载：</p><p><a href="仿宋_GB2312.ttf">仿宋_GB2312.ttf</a></p><h2 id="Mac使用字体方法"><a href="#Mac使用字体方法" class="headerlink" title="Mac使用字体方法"></a>Mac使用字体方法</h2><p>双击下载好的字体文件，会自动打开系统的字体设置页面</p><p><img src="Mac字体预览.png" alt="Mac字体预览"></p><p>也可以看到电脑上所有的字体</p><p><img src="Mac所有字体.png" alt="Mac所有字体"></p><p>将Word或者WPS退出再打开，就能看到新增的字体了</p>]]></content>
    
    
    <categories>
      
      <category>unclassified</category>
      
    </categories>
    
    
    <tags>
      
      <tag>仿宋gb2312</tag>
      
      <tag>字体</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>zt-付鹏11.24总结：全球经济格局变化、经济现状与问题、投资策略等多方面</title>
    <link href="/fun/zt-fupeng-2024/"/>
    <url>/fun/zt-fupeng-2024/</url>
    
    <content type="html"><![CDATA[<h1 id="智能小结"><a href="#智能小结" class="headerlink" title="智能小结"></a>智能小结</h1><p>这是付鹏在一场演讲中的内容，主要探讨了全球经济格局变化、经济现状与问题、投资策略等多方面内容。</p><h3 id="1-全球经济格局变化"><a href="#1-全球经济格局变化" class="headerlink" title="1. 全球经济格局变化"></a>1. 全球经济格局变化</h3><ul><li><strong>政治转变与右翼化趋势</strong>：2016年美国特朗普大选开启逆全球化和右翼化进程，此次大选特朗普重新上台且更加右翼化，其组成的团队为实权派、通杀且实干派。全球各国在过去5 - 6年陆续右翼化，表现为政治重要性凸显、选票回归传统、反移民等特征，如加拿大因移民问题导致经济分配矛盾，进而右翼化、反移民；英国出现排华、反穆斯林等现象，还出台对非英国国民征收遗产税政策。</li><li><strong>意识形态影响经济与投资</strong>：左右翼特征影响国家政策和经济发展，全球左翼化时包容融合、共同增长，右翼化时易引发战争。投资应基于全球意识形态变化选择交易路径，避免站队，如美国政治变化对中国压力一致，只是两党压力程度和侧重领域有所不同。</li><li><strong>利率与贫富差距及战争关系</strong>：利率本质反映贫富差距，利率越低贫富差距越大。过去百年利率低点往往是战争起点，如二战前、80年代和2008年次贷危机到疫情期间利率达低点。当前美国大选后政策变化可能影响利率，投资者需关注利率变动对经济和投资的影响，同时中国利率变化与海外相反，投资者应理解这种变化趋势。</li></ul><h3 id="2-中国经济现状与问题"><a href="#2-中国经济现状与问题" class="headerlink" title="2. 中国经济现状与问题"></a>2. 中国经济现状与问题</h3><ul><li><strong>居民部门</strong><ul><li><strong>消费变化</strong>：2019年起有效需求开始下降，今年10月扣除食品和能源后的通胀数据显示有效需求为负，反映中产阶级节衣缩食。经济收缩时底层先吃苦，如网约车司机、外卖员等，随后中产阶级开始收缩，如计算家庭开支、节衣缩食，其收缩对宏观经济冲击最大。消费不仅降级还发生结构性变化，如年轻人消费习惯改变，从追求高端品牌到注重性价比，消费场景从传统社交转向电竞直播等，中国资本市场也准确反映了消费板块的变化。</li><li><strong>居民杠杆率</strong>：中国房地产上涨多年，居民部门杠杆率虽单纯数字对比海外看似不高，但因缺乏高福利保障，实际杠杆压力大，已达极限，如房子交易导致年轻人背负长期债务，若收入不增长，资产负债表将恶化，进而影响消费。</li></ul></li><li><strong>企业部门</strong><ul><li><strong>PPI与市场竞争</strong>：中国经济过去因有需求支撑，如庞大的80后群体带来的内需和全球化外需，企业利润（PPI）良好。但2019年后PPI持续为负，企业陷入恶性竞争，面临债务压力，当前情况与以往不同，有效需求收缩调整，单纯市场竞争难以产生胜者，如企业产能过剩、价格战激烈，最后可能都面临困境，企业需出海寻求市场，但当前国际环境复杂。</li><li><strong>产业政策影响</strong>：中国产业政策具有国家主义特征，如在行业崛起前期，政府会倾注资源支持，企业可轻松盈利，但达到目的后推向市场竞争，PPI可能转负，导致产业过剩淘汰，如新能源汽车等行业，投资者需把握政策投资时机。</li></ul></li><li><strong>政府部门</strong><ul><li><strong>债务与投资逻辑</strong>：政府债务驱动投资行为合理的前提是能收到税，中国特色是通过间接税补直接税，如高铁建设虽成本高但票价低，通过土地增值等间接税实现收支平衡。但当前面临人口拐点、老龄化问题，税源税基减少，大规模基建难以为继，未来主要是修修补补。</li><li><strong>经济政策与内需提振</strong>：当前经济问题是供给过剩与有效需求不足并存，必须提振内需，关键在于进行再分配，包括政府与居民、贫富之间、债务和杠杆之间的分配，否则可能面临类似日本35年的经济困境，如日本通过代际分配实现经济调整，中国也需重视分配问题。</li></ul></li></ul><h3 id="3-投资策略建议"><a href="#3-投资策略建议" class="headerlink" title="3. 投资策略建议"></a>3. 投资策略建议</h3><ul><li><strong>行业选择</strong>：关注结构性机会，要么做高端奢侈品（如爱马仕）等富人消费领域，要么做极致性价比（如优衣库或更低价产品）的穷人消费领域；同时抓住年轻人（如动漫、游戏、二次元等兴趣爱好相关产业）和老年人（如最后一套房、ICU病房等临终消费）的生意，放弃40多岁压力大的中年人群体相关产业；关注国家政策支持的早期产业，在市场热度高时及时退出。</li><li><strong>海外资产配置</strong><ul><li><strong>新兴市场债券</strong>：新兴市场债券类似早期中国，金融体系不完善导致银行利率不能正确反映经济周期资本供求，利率低于实际投资回报率，如越南，可在新兴市场放贷获取高息收益，但需注意当地劳动力市场变化，如越南劳动力成本因工会等因素并不低，且员工罢工现象常见，中国00后整顿职场也类似趋势。</li><li><strong>美股美债</strong>：美股今年呈现高估值、低波动、高回报的异常组合，因人工智能发展带来市场结构变化，如英伟达闪崩事件体现杠杆风险。明年该组合难以持续，可能出现估值、波动和回报的不同变化，投资者应关注产业中期早期估值偏高情况，同时理解巴菲特资产管理策略，防止高波动，可考虑定投，对于普通投资者，美股投资关键在于资产组合中合理评估资值、波动和回报率，关注股息收益稳定的资产。</li></ul></li></ul><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>付鹏：正值年底，虽然刚才汇丰一直强调大家不录音不录像，但大概率你挡不住。我在这儿讲话会谨慎一些，非常小心谨慎，大概率会有人透露出去，放到YouTube上，基本上所有见我都说付总我在YouTube上看过你的视频，我说那都是盗版的，靠盗版发财的也不少。</p><p>今天和大家分享的内容基本上都是官方的，回顾会多一点，展望不多，因为这个月展望完了之后下个月怎么办？有些话对我来讲我倒觉得很简单，本质上原来我们是做Hedge Fund出身，所以我们的逻辑框架整体具有极强的延续性，不是说今年去讨论，或者说明年去讨论。</p><p>惯性思维从 2016 年开始，我一直在跟大家强调这个世界已经完全不一样了。当然经历过过去的几年时间，我相信在座各位应该对这番话的理解变得越发深刻。</p><p>2016 年实际上是美国特朗普的第一次大选，我有一个特点，我的特征是如果我觉得什么地方有投资机会，我可能第一时间去一线调研，我不喜欢看YouTube，我也不喜欢在网上扒。</p><p>当然你会说，现在ChatGPT很强大了，人工智能好像能帮你解决很多问题，但你们有没有想过，可能广泛流传或者广泛传播的很多信息是错的。这一点在 2012 年当时我从日本做完调研回来之后，我的感悟是最深的。</p><p>当然去日本有一个重要的人物，名字叫本森特，很快大家就会非常熟悉他的，目前来讲应该是特朗普政府提名的美国财长。本森特原来是索罗斯基金实际掌控人，因为索大爷已经年龄很大了，去年的时候才刚刚把基金的业务交给他儿子亚历山大，但在这之前，最主要的几场战役本质上来讲都是本森特在主导。</p><p>2012 年当时我从北京去香港约朋友们吃饭的饭局上，当时斯索罗斯基金在香港办公室跟我说，本森特从这儿去了日本。我说OK。我经常说一句话“站在巨人的肩膀上看问题。”</p><p>当然你知道，网民们最可怕的地方是巴菲特“SB”、索罗斯“SB”，我最“牛逼”。你要记住，他们的所有行为一定有很大的变化，很多人可能都不知道，巴菲特第一次去是 2011 年，我们正在讲福岛核电站泄漏，核废水污染以后海鲜不能吃的时候，一个 80 多岁的老头顶着核辐射泄漏去日本吃海鲜了，当然他去日本干吗，这其实很关键。</p><p>之后我们跑到日本做完调研回来之后那几年，我陆陆续续跟很多人讲，日本正在发生变化，日本的利率结构都会随之变化的，当然包括日本的证券市场。今年日本股市终于走出这 35 年了，创下了历史性纪录。</p><p>但网上很多人还在说，我从经济数据里好像没看出什么状况来，这就是我们说的“信息差”，因为有时候你知道人的理解，对社会的理解，对经济的理解带有惯性思维。前几年我经常普及的一点是关于日本的理解，很多人总在想经济增长，有没有一种可能性经济不增长也很爽呢？</p><p>比如说中国过去三四十年改革开放之后我们习惯的就是经济要增长，经济不增长我们就很难过，你有没有想过一种不增长还会把蛋糕吃多的方法呢？答案是分配，你怎么老想着分工、努力、工作、干活儿、挣钱、增长，有没有另外一种可能性是进行再分配？</p><p>你对日本的理解为什么要增长？用我的话说在过去 30 年的时间里保持着这块蛋糕没有变，但现在远端利率抬起来的根本原因是因为年轻人可以吃多了，年轻人为什么可以吃多了？你们知道 2012 年日本的死亡数据是什么吗？你有注意过他的人口结构变化吗？</p><p>到了今天为止，你突然之间发现日本现在招聘怎么会是应聘的在下面坐着，招聘的在上面站着？放心，中国现在不是招聘的问题，是HR砍人的问题，这种变化的根因到底来自于什么？其实很多人只是惯性思维，你不一定能看懂世界。</p><p>过去 40 年已经发生翻天覆地的变化了，从 2016 年开始，中国也不再是过去 40 年的中国，美国也不再是过去 40 年的美国，日本也不再是过去 40 年的日本，东南亚也不再是过去 40 年的东南亚，你资本运转的逻辑框架都在发生着巨变，而这种时刻下，如果你保持着过去的思维，你并不能理解我在讲什么。</p><p>我只能说，大家一切看缘分，我不需要完全说“付总在胡说，我并不认同”，无所谓的，你能听懂你就听懂，你能早理解你就早理解，早理解你就能顺着这条线Get到 2016 年之后世界发生的巨变。</p><p>最新的美国大选，特朗普重新上来，但这次上来跟 2016 年又不一样了，因为他比 2016 年变的更加右翼化了，2016 年大的政治转变本质上就是逆全球化和右翼化。</p><p>2016 年我把我自己的书稿整理过一版，当年也没空没时间把这个东西出版，去年因为我们家孩子回来以后做了传媒公司，原则上来讲我就把书稿送给他作为传媒公司的一部分出版业务去做，这就是大家后来见到的《见证逆潮》。</p><p>但这本书不完整，全文将近 70 万字，你们拿到手的只有 50 万字，中间差不多有 20 万字被删减掉了，这 20 万字其实非常关键，涉及到我们对世界大类资产顶层逻辑的核心框架，金字塔究竟是什么？底层是我们的所有资产和市场，市场其实是在框架中最底层的，大家天天想问的房价的上涨、股票价格，这实际上是金字塔中最底层的。</p><p>稍微往上一点有人说宏观经济很重要，尤其是中国 2008 年次贷危机结束之后，中国的投资人开始发生巨变，2008 年金融危机之前，中国大部分投资人讲的是“擒龙大法”，如何抓涨停。</p><p>但 2008 年的次贷危机，全球的冲击使得很多从事金融交易、资产交易的人开始意识到，原来全球金融市场是这样的，是联动的。自那一刻起，真正意义上的金融才开始在中国慢慢生根发芽。</p><p>稍微有人开始意识到宏观经济的重要性，当然像现在证监会的首经团队中，36个首经里，我一直说我是那个最不正经的，因为我又不是搞学术的，我也不是搞政府出身的，我是市场一线的，我们对很多问题的理解是完全不同的。</p><p>前两天的时候，在Fox News上，本森特和几个诺贝尔经济学家在那儿争吵关于关税作用的时候，你就突然间发现，一个站在市场角度上的人理解关税作为一个手段到底起到什么样的作用，和那帮老学究们去讲的，甚至跟在座各位在新闻联播上看到的关税描述“美帝国主义打关税，使得老百姓生活在水深火热中”，你会发现好像你聪明点的话就知道好多东西并不对，这就是差异性。</p><p>这次特朗普组成的第一是实权派，第二是通杀了，可以理解右翼化已经完全没有牵制了，第三上来的全是实干派。你猜后面的结果是什么？这场仗可不好打，比 2016 年那一届还难拿。</p><p>再往上是什么呢？有人说终于讲到了政治，没错，再往上是政治，民主党、共和党、全球政治的变动。但再往上的顶层，金字塔的最核心是什么东西？实际上是意识形态。</p><p>我教很多研究员说你们在研究世界经济的时候别盲目地做简单的对比，我估计很多研究报告都会犯这样的错误，动不动就做对比，和 70 年代、80 年代做对比，这种对比纯粹写报告凑字数的，换成我的角度，我都不会看完直接撕了就扔垃圾桶了，我其实挺心疼这些券商研究员的，为什么呢？是个事儿就得写个报告，写个报告就得好几万字，好辛苦，结果还没人看。</p><p>大部分时间我们不用Care顶层，因为在过去百年，顶层的方向是固定的，就是从极端右翼不断向左翼在运动，所以顶层方向不变的情况下就会形成下面的一套运转逻辑。</p><p>比如说以美国为代表，你们应该看到Ray Dalio关于债务危机的那本书，里面有个利率曲线，二战前我们的利率就是 0，到 80 年代利率达到顶峰，2008 年次贷危机到疫情期间利率再次达到 0。</p><p>利率的低点到底是什么意思？为什么在过去的百年历史里，利率的低点总是战争的起点？是有原因的，因为利率的本质实际上就是贫富差距，利率越低的时候，贫富差距越大的，利率越高的时候，贫富差距越小的。</p><p>当然，我们每个人都是屁股决定脑袋，比如大家手上拿着一堆金融资产，拿着一堆杠杆，我可以告诉你，你永远高呼的是低利率是对的，就好像大家对于美国的理解一样，永远认为美国在过去的 40 年的逻辑就是不能加息，加息就崩溃，崩溃就降息，利率永远是低的，美元永远是Carry的借贷方，但你从来没有想过这个逻辑会变的。</p><p>几年前我跟很多人讲的时候，我说你记住一点，中国从高利率变低利率，海外从低利率变高利率，所谓的几毛档还动不动说付总说了高利率是多少，4-5 都是高利率。低利率是多少？0、1、2 有多大区别吗？没有的，这是关键的点。</p><p>有人说非得纠，把我的话直接变成了付总说的，中国不会加息，永远降息，美国永远加息不会降息，降一点加一点，加一点降一点，这不很正常吗？比如特朗普上来了，明年有没有另外一种意外性呢？比如说降了 50，降了 25，大概回到 4.75，5 的水平了，突然间又抬回到 5.25 了，这不正常吗？4 和 5 的纠结不重要，重要的是他不会再回到 0、1、2 了，这是很关键的。</p><p>对于劳动力来讲，利率是很关键的，如果利率的抬升来自于劳动收入的增长，这是好事情。你想想中国，你把时间拨回到 20 年前，利率高不高？那时候你难受吗？不难受。现在利率低不低？低，你难受吗？你难受。为什么？所以你要知道是通过劳动获得收入还是通过资本杠杆获得收入的，你对利率的感觉完全是反的。</p><p>但是整体社会去讨论贫富的时候，贫富主要讨论来自于劳动价值，简单讲，天天外面送外卖跑滴滴的，他们就是失去的一代，在过去的二三十年里，靠劳动力的就是被淘汰的一代，没办法，这是社会发展的必然结果。</p><p>但是当这种矛盾压力大了，就会转化成社会矛盾，甚至可以通过选票转化成对政治的影响，对意识形态的影响。所以贫富到极端的时候一定会进行修正，无论是极左的贫富还是极右的贫富，都会最终产生矛盾，这就是社会运转的规律。</p><p>过去百年发生的这一轮大周期就是完整的周期，到 2016 年表面上看叫中美贸易战，表面上看是中美两个大国之间所谓的对抗和博弈，其实是全球各个国家内部的矛盾展示，对内是内部的分配，对外是外部的分配。在这个背景下，战争的风险将加大。</p><p>前两天，我们也看到了，人类历史上第一次使用了洲际弹道导弹，无非就是前面没挂核弹头而已，仅此。你觉得这个东西离你还很远吗？我们这一代可以说是幸福的一代，但我们这一代也将经历不常见的百年之未有大变局了。</p><p>很多人在思考这个世界的时候，真的不要以为我们现在还能回到过去，回不去了，那个全世界包容融合的，不断左翼化推进的，全球化不断推进的路径，这个时代彻底在 2016 年已经开始结束了。</p><p>2016 年很多人判断是错误的，总觉得 2016 年只是一场贸易战，那时候我从华盛顿调研两周回来以后，我跟很多人讲，不是贸易战，不是说哪个党派，民主党、共和党上来对中国就会温和的，不会的，两党的共识，他两者之间只存在着我比你左一点，我比你右一点，但咱俩都是往右的。</p><p>美国政治的变化核心在于不管民主党和共和党，对中国的压力都是一样的，只不过是他俩谁压力多一点谁压力少一点，谁在外交上压力多一点，谁在经济上压力多一点，仅此而已。</p><p>对中国来讲现在也麻烦，在过去的 80 年代、90 年代，西方在不断包容融合右翼化，同时当时的中国也在不断地往右走，当然此处不是指的中国的右倾。</p><p>注意西方右翼概念和中国完全反的，你们不要觉得是错误的，如果你觉得错误的，你先了解了解什么是左派右派、左倾右倾、左翼右翼。如果你不能理解这个东西，你肯定对左和右在中国和西方的框架里完全是颠倒的。</p><p>中国也是朝着包容、融合的，所以我们才有了非常好的入市、WTO、改革开放等一系列的操作。我经常说家庭中女生是天生右翼，右翼有一个典型特征，右翼可以叫民粹，可以叫国家主义，可以叫爱国主义，极端右翼可以叫纳粹。但右翼的特征很明显，“我没错，都是你的错”，这就是右翼。</p><p>家庭中女同志天生带有，当然我不是歧视各位女士，这是你们DNA里带的，两个X里带的，如果家庭中男生是左翼，家庭是幸福的，什么意思呢？“老婆，没事儿没事儿，都是我的错”，男生是个左翼，家庭很好，左+右。</p><p>如果男女都是左翼，这简直是幸福无比了，男生回家了，女生把拖鞋一放说“老婆你打会儿游戏，我正做饭呢，一会儿做好了叫你洗手吃饭”，这个男同志真的去打游戏了，吃完饭了说“你歇一会儿，看会儿剧，我来把碗洗了。”你可千万别当个大直男，锅一甩又去玩儿了，不行，时间长了，她会右翼化的。</p><p>此时你也表现出左翼特征，你家庭就是融合的。家里如果两个右翼就完蛋了，都是你的错我没错，凭什么说是我的错？就是你的错，就是你做错了。</p><p>直男碰上女生，一般来讲没啥好组合，两个右翼就是战争，打架到离婚。不要认为这是在讨论家庭、婚姻，同样在讨论国家，同样在讨论全球。当国家和国家之间的组合出现统统左翼化的时候，就是包容、融合、全球化共同增长的俱佳的历史环境，当全是右翼化的时候，就是战争。</p><p>我们现在的大麻烦在哪儿？就在这儿。全世界在过去 5、6 年时间里已经陆陆续续都在右翼化了，右翼化的特征，政治的重要性已经体现出来了，选票回归传统的特征已经体现出来了，反移民的特征已经体现出来了。</p><p>我之前说过，这两年全球著名的交易就是“多美国，空加拿大”，原因就是加拿大的小土豆放了那么多印度裔进来，就完蛋了，加拿大的核心矛盾是什么？经济增长创造了五个蛋糕，原本加拿大的国民可以一人吃一个，现在放了 10 个阿X进来，加拿大问题是分配，当分配不够的时候，一定会趋于保守，一定会趋于右翼化，一定会趋于反移民。</p><p>各国都一样，70 年代 80 年代的时候，英国那时候有过排华，现在又开始反穆斯林了，这正常。世界的动荡不是简简单单表现在单纯的资产上，前两天英国又出台了新的政策，你只要非英国国民的，原则上来讲要交遗产税的，英国政府也要收你的遗产税。</p><p>我之前跟很多富人说，别天天琢磨避税了，包容融合的时候藏点私房钱是没事儿的，当都右翼化的时候，你再藏私房钱你就完蛋了，现在全世界的大麻烦是什么？找个税率低的地方该缴的缴。当年特朗普上来的时候 20%只要你愿意回流美国，全部合法化，你看有多少资本往回回流？所以你们知道左翼和右翼大概的框架和特征，这才是我那本书里的真正精髓，但被删掉了。</p><p>你把它理解了，你对应的穿透到经济上，穿透到利率上，穿透到资产上，你会门清儿的，这就是大类资产的精髓，真正的精髓。你要问这东西谁创造的，索罗斯那批人，本森特那批人，整体框架大家都是一样的。</p><p>我到底在讲什么？其实我就是在讲回顾，因为从那一刻开始，几个问题就在陆陆续续暴露。美国在进行重构，特朗普上来以后方向继续重构，这里面其实就涉及到民主党为什么是错的，民主党的很多政策为什么是极端左翼，左翼政策不一定是对的，右翼为什么会使得美国进入到增长通胀利率的环境。</p><p>包括有些华人带有意识形态，我只能说一句话，我们作为全球投资人，最佳的选择是没有任何意识形态，对我来讲，我非常清楚左有左的问题，右有右的问题，左有左的好处，右有右的好处，我不会站在任何一侧。</p><p>我的答案是全世界选择往左走，我就知道我的交易路径是什么，全世界选择往右走，我也同样知道我的交易路径是什么，但我绝对不会站队说谁是绝对正确的，否则的话就会压错宝。</p><p>世界有时候不一定按照我们的意识走，美国的这次大选也是典型的结果，其实我也没想到，美国右翼化的速度会这么快，推进速度会如此迅速。本来想的是民主党还能够撑一撑，但现在来看基本上是完败的。</p><p>对于中国来讲，当前我们面临的问题不仅仅是外患的问题，还包括了内忧。综合在一起，会有一个非常奇特的答案，之前很多人问我中国到底和日本一不一样？网上这句话炒的纷纷扬扬的，有人说中国就是会走日本的老路，有人说中国不会走日本的老路，你要问我正确的答案，我会告诉你这个问题没有任何意义，为什么？太泛了，如果拆的细一点我能回答你。</p><p>比如你要问中国的居民部门和日本的居民部门一不一样？我的答案是一样；</p><p>中国的企业部门跟当年日本的企业部门一样不一样？我的答案是不一样；</p><p>中国的政府部门和当年日本的政府部门一不一样？我的答案是不一样；</p><p>中国的金融机构跟当年日本的金融机构不一样？不一样；</p><p>中国当前面临的国际环境和当时 90 年日本面临的国际环境一不一样？不一样。</p><p>你说最后的答案是什么？如果站在纯居民角度来讲，我可以告诉你 99.99%可以复刻，但如果站在大的国际环境上来讲，可能得到的是完全不同于日本的最终答案。用我的话说，你是说一样还是不一样呢？没有意义。</p><p>所以我大部分时间给你们分拆的是日本居民部门和中国居民部门的比对。而日本的企业部门、金融部门、发展模型我也给大家分享过，去年你们应该都知道了，巴菲特买三井、三菱、丸红、伊藤忠商社，大笔发行日元债券购入到日本的三井、三菱、丸红、伊藤忠这些资产中，他到底在干吗？</p><p>那时候第一财经找我说付总你去讲讲巴菲特为什么买，我发现很多评论人员单纯在讲三井、三菱、丸红、伊藤忠资产怎么样，稍微聪明点的会讲到当年的商社们是日本的海外资产，是日本Carry trade套息交易的主要收入端。再聪明一点的会讲到巴菲特在参与日本过去 40 年存量财富的再分配。</p><p>我可能明年把我们家小儿子送到日本去，我跟他讲的很清楚，我不需要你去学习人工智能、AI，为啥呢？你好像没那么聪明，也不是IT技术男，你把日语学好，能考上应庆就不错了，那里面都是一些日本传统贵族的姑娘，你娶一个就行了，最好她们家都是 80 岁 90 岁的，你就躺赢就行，等她们家 80 岁 90 岁的明后年一挂，房是你的，股权是你的，土地是你的，财富是你的，存款是你的，咱们就参与日本存量 40 年财富再分配。</p><p>巴菲特是用钱去参与，我们用人参与，本质上都一样，你买股票，我把儿子嫁过去，这都是参与财富存量分配。</p><p>你们要明白日本的核心究竟是什么？日本的核心是参与分配，而不是参与增长。很多人不太理解，因为他在国内没参与过分配，永远都是增长处在哪个环节，我距离权力近一点，资源近一点，资本近一点，我就多吃点，卖劳动力的就少吃点。</p><p>当经济增长增速不够的时候，最底层就没饭吃了。经济增长 5，可能各个阶层的体感是完全不同的，所以网上会有些人说经济数据造假，真的造假了吗？也许没有。5代表的是整体的蛋糕，而你的体感仅仅代表你的阶层。</p><p>在过去几年中国经济的调研中，我们到底做对了什么？第一，在 2020 年疫情后，那时候长白山论坛我跟大家讲的很清楚，我说的非常赤裸裸，中国居民资产负债表出现问题，那时候券商们都很Happy，因为他们永远需要Happy，只能做多。</p><p>但对于我们做Hedge Fund出身的来讲，我可不能这么做，我这么做我就完蛋了，我的钱在里头。10 月 8 日之后，有人在里头吗？千万别自己麻醉自己，那都扯淡。</p><p>网上一般来讲，拿所谓的这种东西蒙蒙别人可以，你自己信了就完蛋了，就跟当时“6000 点不是梦，1 万点刚起步”，记住那话是说给散户听的，你信了那你就完了。核心是什么？从我们的角度非常明确地大家，大家的预期很高，但现实很残酷。</p><p>那两年跟各家公募基金每个季度做交流的时候，他们没法去理解现在的经济情况，比如说那时候我跟他们讲网约车司机、外卖，那两年我大量的调研样本参数是底层。</p><p>经济增长消费扩张升级的时候，调研样本是富人先进五星级酒店，富人先买超跑，富人先吃海鲜，然后你的样本参数是下沉的，到最后是老百姓吃上海鲜，老百姓开上汽车，老百姓进五星级酒店。</p><p>但是当经济收缩的时候，倒过来的，第一步先收缩的是底层。我前几年我说每年现在新增几千万的网约车司机，你们都没有想想人从哪儿来的吗？有人说了，农村劳动力进城，我说都啥年代了，还农村劳动力进城，这又不是你当年搞大规模基建城镇化建设的时候缺农民工，把农村劳动力大规模转移过来。</p><p>现在的农村你去看看，哪儿还有劳动力，除了老弱病残幼以外，还有劳动力吗？你就没想想这两年突然激增的两千万的网约车司机这些人从哪儿来的？答案很简单，中产阶级的陨落。只不过是你的阶层不一样，你看的问题不一样。</p><p>很多人的调研很有问题的，很多人说美国通胀导致美国居民部门水深火热，我问他为什么？他说你看我打电话问了我在美国的朋友，他们都很惨。</p><p>我说那你美国朋友的样本是个什么状态？他一描述，我说那当然惨了，他们以前爽的时候是老公在中国挣着通胀的钱，老婆在那边花着通缩的钱，享受着社会福利保障体系，还不交税。</p><p>现在倒过来变成了老公在国内挣不着钱了，海外人家上门给你弄个草皮清理一下要多收你 50 美金一小时，你的钱没增长，花的钱多了，你当然难受。</p><p>我要是那个铲草皮的，我会告诉你那点通胀算个屁，5 块钱的三明治涨到 7.5 元，翻了 50%，对我来讲不重要，重要的是我从你们家弄个草皮，挣 50 多一个小时，劳动价值提升了。从事劳动的人就很舒服，从事单纯支出的人来讲你就难受了。</p><p>你要调研的样本是一样的，前两年的样本收缩的是时候是底层先吃苦，但对宏观经济数据影响不大，你们记住一点。我就说网约车司机，如果你在广州做调研，他们的特征就是有钱没钱，今天都吃隆江猪脚饭。</p><p>但注意，北京北四环的网约车司机吃的中午盒饭到多少钱吗？15 块钱送瓶水，还带锅包肉，猪肉炖粉条子，耙子肉，嘎嘎香。但你记住一点，千万别问肉多少年，问你就吃不下了，因为基本上都是 80 年陈酿拉菲，一定是冻肉，一定是冻了 20 年、10 年以上的肉，不然怎么那么便宜。</p><p>所以你们也不要瞧不起预制菜，我觉得预制菜很好，没有预制菜老百姓日子更苦，有预制菜老百姓好一点，为啥？12 块钱能吃饱，还能吃上肉，吃上足够的蛋白质。</p><p>你就记住一点，当你都吃 12 块钱了，你还注意肉多少年吗？现在统计中国在讲需求的时候很有意思，我从来不会用一个数字，从来不会用中国的CPI，中国的CPI一直有一个大的问题，当年宏观经济数据设立的时候中国老百姓第一目标是解决吃穿，解决温饱，所以对我们来讲，物价中的菜价、猪肉价格、粮食价格、油价波动，我们看的比天都大。</p><p>那时候一般来讲，领导们下去做慰问的时候，第一件事儿都是去家里掀锅，动作都很标准，打开锅看看你吃啥，这个动作其实就是因为当年我们的重要问题是解决老百姓的吃穿住行，所以我第一件事情就关注你吃的情况。但改革开放下来以后，到现在为止，吃如果都成问题，那就是大问题了。</p><p>为什么不用数据？因为数据中这部分的波动很大，这部分的波动已经跟需求没关系了。比如说城市里洪涝，那蔬菜价格那几天就会暴涨，那种变动其实影响已经不重要了。</p><p>我们现在讲需求，比如中国经济从 2019 年获得大问题，非常麻烦，你们不要觉得现在的经济问题是现在，是 2019 年就开始了，在今年是恶化的，所以今年的情况你们都不知道有多严峻，数据里已经告诉你，非常严峻，而在调研的时候更严峻。</p><p>8、9 月份的时候，必须转向，那时候很多人不理解，因为过去的一年大家都养成了一种习惯，这也是右翼化的特征，右翼化的特征就是我没错都是你的错，我不许你说我错。你想想，家里的老婆你敢说她错吗？到最后男生就是出门抽烟，不吭。</p><p>过去几年我们的右翼特征当中体现出来的，大家都有一种习惯，国内经济不许说不行，谁说不行谁就是叛徒，谁说不行谁就是不爱国，谁说不行就网上攻击他。问题是诞生了另外一种生意，什么生意？你们懂得，你只要说这东西遥遥领先，8000块钱的东西就能卖 18000。</p><p>在我的角度看很简单，这是社会的整体意识形态变动的核心，但是真正可怕的是如果大家都不去讲，到了关键的时间点上，会使得所有的信息反馈形成谬论性错误，最后你们会发现，连决策层都做出错误判断，那就完蛋了。</p><p>到最后谁是那个误国误民的，历史会有正确评价。最上头在关键的时刻该做调研，该让你发声，还是要发声的。8、9 月份到底中国发生了什么事情？大部分人在当时并不了解，8 月 27 日开始，你们关注一下所有的金融峰会和论坛上，全部让你敞开了讲中国经济的核心问题。</p><p>当然只是说我当时在大湾区论坛上讲话时间不够长，大家传播更为广泛，但不是说我胆大讲。当时下午讲完之后，晚上就有朋友发“付总，这能讲吗？”我说“如果能讲，你要想想为啥？”</p><p>24 小时都不到，大概 12 小时左右，第二天早上易纲同志在上海的外滩金融论坛上马上跟你讲当前中国经济的核心问题，通缩的风险，以及经济有效需求不足，所有人从 8 月份到 9 月份，用的词都是一模一样的，中国经济当前核心问题有效需求不足。</p><p>其实我想说，有效需求从 2019 年开始就在下降了，而此次的有效需求非常麻烦，可以说是我们改革开放之后的百年之未有大变局。</p><p>我在 9 月初的时候，提的政策建议里，我都没有用“解决”，我用的是“对冲”。9 月 11 日我怕大家对这个事儿理解不深刻，当时演讲的原题目是要注意有效需求问题，赶快出政策对冲，9 月 11 日我把东西又给你写出来，再讲了一遍。</p><p>但那时候会发现社会上的整体风气依旧沉浸在“不许说我们不行，我们挺好的”。到现在为止，现实情况是什么？你觉得资本市场起来这一下，猛冲这一下跟经济好有关系吗？</p><p>恰恰出现的情况是经济差才来了这么一下，而不是经济好。现在出的所有政策有没有达到目标呢？有一讲一，没有。能不能达到对冲的目标呢？我觉得对冲一点点，解决肯定不可能，因为你如果仔细地了解这次有效需求的复杂性，意思是告诉你这事儿挺难，因为里面掺杂了中短长期的因素。</p><p>其实在疫情后，我们当时就做出中国国内经济的预期很高但现实很差的根因也来自于有效需求背后的矛盾。有谁记得前两年我在各个公开演讲中，一直跟你强调国内经济的核心变量是什么吗？</p><p>我老跟你们讲到人口的问题，老跟你讲到老龄化的问题，几年前跟你们讲到现在为止，通过金融市场、资本市场、银行背后的数据大概都能看明白到底发生了什么，老龄化对于中国、韩国、日本都不是好事儿。</p><p>西方经济研究中研究移民政策，中国、韩国、日本研究人口出生，因为这几个国家的历史决定了他不会有大规模移民的。你别动不动就来一句，老龄化了人口出生少了，北欧怎么怎么样，好家伙，你这一刀切出去，你玩过《文明》吗？</p><p>马上《文明》就要上新了，大家可以Steam上下载玩一玩，开局资源要素是不一样的，最后你组成的文明和帝国发展战略也是不同的，别动不动做瞎对比，没用的，这就是中国经济的大问题。这是所有这次有效需求的组合，包括下面我们对的政策建议，不用看了，意义不大。</p><p>核心的就用这两张图够了，很简单。第一，我不会用CPI这个数字就是因为里面含了实际上已经跟现在有效需求没太大关系的。用的什么呢？把高清大图放大到 2007 年之后，我们用的是扣除食品和能源以后的通胀。</p><p>简单讲，我要关心的是老百姓吃饱饭以后没事儿干的价格，你没事儿干的价格高，就说明你的有需求好，你没事儿干的价格低，就说明你有效需求差，就这么简单。至于吃饭这件事情，非常容易解决，隆江猪脚饭。</p><p>说实话，你们点 20 块钱 30 块钱的外卖，成本价格就 4 块钱，4 块钱你都吃的嘎嘎香，可以想想，食品工业发展到现在为止，防腐剂、添加剂一加，成本是很低的。</p><p>当然了，做不到既要又要还要，既便宜，又好吃，还健康，还得是厨子现割肉现做，你想多了，你要想吃现割肉现做，你掏 50，我去你家做，你就掏 5 块，那就是预制菜。</p><p>你们要明白，这是解决吃喝拉撒很重要的因素。有的时候，左右两边不可共同都有，健康和便宜不可能同时存在的，所以健康很贵的。</p><p>大家先看放大版的数字，2019 年是整个平台的顶峰期，2019 年后的典型特征是总需求曲线一直在降。</p><p>10 月份的数字是负的，没有疫情，没有 2008 年金融危机的外需崩塌，从 2002—2024 年，长达 22 年的时间里，在没有任何重大风险的情况下，中国第一次出现了有效需求为负。负数啥意思？非常简单，中产阶级节衣缩食，这个宏观数据就告诉你这个答案。</p><p>刚才我讲了，底层老百姓是一点点往上反馈的，不会很快地作用到宏观经济数据里，所以你们在疫情后看到的这个数字大平台还没有快速往下掉，但当时的底层（网约车司机、送外卖）其实一点点在痛苦，但那时候去金融机构做路演，他们都没有这种感觉。</p><p>今年所有金融机构都觉得很痛苦的原因是啥？因为他们被裁员了，他们被降本增效了，他们被要求奖金退回了，板子打到了他们的阶层之后，他们开始感受到了痛苦。你知道这代表什么吗？今年经济为什么从 3 月份之后这个数字一路掉下来，答案非常简单，今年的大麻烦是中产阶级陨落。</p><p>别说今年了，这两年底层慢慢“拼多多”，现在应该是中产阶级开始“拼多多”，今年最好的样本参数调研应该是隔壁的杭州，其实上海也可以做调研，差不多。</p><p>3月份降本裁员裁老张，6 月份降本裁员裁老李，我就问你老王怎么办？回家跟媳妇开个香槟庆祝一下，老张、老李被裁了，我没被裁，是这样吗？</p><p>现实的情况是回家赶紧跟老婆算账，国际学校多少钱，孩子多少钱，面膜多少钱，健身房多少钱，该花的不该花的多少钱，房贷欠了多少钱，一算账列一个数字，假设被裁员怎么办？算完跟老婆说，你的面膜SPA中心别去了，李佳琦的直播间拍一个糊脸上差不多。</p><p>然后你开始节衣缩食收缩，你的收缩是要命的。记住一点，中产阶级的收缩对整个宏观经济是冲击最大的。底层真的是今天干个活儿，跑跑，有钱挣没钱挣都得吃个隆江猪脚饭，反正也不贵。多挣钱了，跑个单王，跟老板说“隆江猪脚饭加个蛋”，今天各位在外卖平台上给打赏 10 块钱就是隆江猪脚饭加个蛋来个腿。</p><p>我没有太多投资的群，但我会潜伏在全国外卖小哥、网约车司机的群里，因为他们是我广大调研阶层的样本参数。我甚至还有个样本参数是全国最大的美容连锁店的老板，我经常拿他当调研样本，为啥？</p><p>他背后的 2000 多家店，以及店后面的那些女人们，那就是标准的消费调研样本参数，他的生意好经济就好，他的生意差经济就差。杭州今年上半年应该有 500 家美容店要转让，你们有谁要的我给你们搭个线。你们会要吗？你要知道，不管是正宫娘娘还是非正宫娘娘，都没钱了，她背后的男人们都没钱了。</p><p>你说消费降级吗？其实不仅仅是降级，你们一定要记住，这个大周期的结束很可怕的，因为这是大部分中国投资人里第一次经历这样的周期。</p><p>中国证券市场反应非常精准，不要再看上证综指，那个意义不大的，我们经常讲有结构性行情，一点错没有，结果里对经济、政策的反应非常准确，不是不准确，是非常准确。</p><p>所以说你真正在这几年对宏观经济的理解，就是告诉你一句话，没有增量，就是结构，对结构怎么把握？这里的结构可不是 40 年前的结构。</p><p>前两天我跟一家公司说了一句话，黑色线是PPI，相信在座各位都明白，PPI是什么呢？简单讲就是企业利润，PPI为负，大家就是在拼命地价格战、竞争，我卷你，你卷我，上游卷完卷下游，下游卷完卷客户，卷到最后就卷到谁能活着，这就是PPI为负的答案。</p><p>中国这二十多年来，从 2002 年开始，我们的经济从来没有遇到大问题的根因非常简单，红色线永远存在，上面的红色线存在。</p><p>中国经济的任何供给问题都是有需求在的，有内部需求有外部需求，外部需求是全球化对我们的支撑，内部需求是什么？</p><p>房地产大佬现在好像在里头踩缝纫机，他当年曾经说过一句经典的话，“什么房地产、供应、需求、土地开发、城镇化，扯淡，就一句话，我们有庞大的 80 后”。我觉得他说的非常诚恳，因为需求内需到底是啥？本质上就是人口收入的债务函数、杠杆函数。</p><p>所以你就知道，中国内需庞大的一代是谁，就是这批 80 后。是“文革”之后人口基数最大的那批，可以花 3 个钱的，可以花过去时，上一代人给你留下的 6 个口袋。可以花当下时，你的企业老板给你的收入函数。可以花未来时，金融机构给你们的杠杆。</p><p>你们是花三代的钱，一代的人口高峰，那就是中国内需的所有底牌。中国经济的任何问题都可以由这部分人买单，所有债务问题、经济问题均由这代人买，那就不会有真正意义上的经济的风险。</p><p>比如说 2008 年，现在也会发现，有些政策跟 2008 年很像，房地产放开、限购放开、购置税减免、消费补贴、刺激消费，但你们都会发现，还能产生 2008 年效果吗？能回去吗？我可以明确告诉你，回不去的。</p><p>你们记住一点，那句忽悠了老百姓这几年的一句话叫“做内债不是债”，我不知道谁让这句话传出来的，很多人在那儿喊“内债不是债”，这是我们家祖传对联之一，下句是什么？</p><p>“内债不是债，只要人还在”横批“万税万税万万税”。任何国家的本币债务就是对自己本国居民的征税权，税等于什么呢？税基×税率，税基等于人口和收入函数，一叠加就是人口收入×税率，这就是税和债务。</p><p>中国现在的化债化什么？要么增加税率，要么增加人口，要么增加收入，人口不增，收入不增，答案只有一个，增税率。</p><p>那你猜你的遗产税跑得了吗？你猜你的房产税跑得了吗？想啥呢，年轻人不生，咱收不着他们了，那就收老年人的，一样的。你要知道，债务不会像你想的“内债不是债”，你想多了，本质是税源。</p><p>政府债务驱动的投资行为只要能收到税，所有投资行为理论上都是合理的，2008年两个经济学家在那儿讨论高铁到底应不应该修，当时他们俩的讨论中我站后者，当时应该修，因为修不修就看能不能征到税，但他俩的计算方式是不一样的。</p><p>其中一个是按照标准的市场经济去计算，市场经济计算税就是这个项目能不能挣钱，杭州到上海这条高铁修完了，成本核算完，二等票需要 150 元，老百姓能不能承担得起，能承担得起能运营得起就会项目回本。所以他经常挂在嘴边的口号就是如果项目不能挣钱，那原则上高铁是浪费的，就是纯纯的债。</p><p>他这句话在当年是不对的，因为中国非常奇特，中国的税分为间接和直接的，你刚才所有的成本核算是直接税，但中国的特色是直接税上减免，增收间接税。这就给中国老百姓一种很好的感觉，我们的高铁又快又好还便宜，成本 150 的票价，我们只需要 60 就能坐了，老百姓觉得生活便利。</p><p>你咋那么天真和可爱呢？我就问你，剩下的 65 块钱谁掏？然后就来一句，内债不是债，这钱国家掏。咋可能呢？这钱谁掏？你们知道为什么所有基础设施一定跟着城镇化走吗？一定建在新城吗？一定高铁内新城的土地很便宜，圈完了之后，三通一平做完了，十字格一画，土地一卖，盖上房子，80 后 1 万块钱 2 万块钱买房子，什么意思？这叫间接税，我们是间接收税补直接。</p><p>核心是什么？核心就是只要能收上间接税，所有的投资政府基建全能做，间接税收不下来，项目就完蛋了。你们猜中国以后还会有大规模基建吗？我可以明确告诉你不会有了，只有修修补补，因为最大的税源税基没了，这就是 2015、2016 年中国经济里暴露出来的最大问题。</p><p>知道是什么吗？年轻人，你们咋不生了呢？你不生我咋办？你不生税咋办？当时的人口拐点，大规模老龄化开启，年轻人不再生育，这将是巨大的麻烦，因为我们所有债务的兜底没了，谁给我们兜？</p><p>此时很简单，去海外收税，所以大家就明白，我们要走国际化，国际化的本质就是向海外征税。政府、企业、金融均向居民征税，记住一点，企业征税就是所谓的商品通胀，1 块钱的东西卖 2 块钱，就是向居民部门收 1 块钱的税，但国内PPI持续为负，代表着企业征不上来税，企业恶性循环，企业债务严峻。PPI为正，代表着企业可以通过通胀、价格转移的方式向居民转移，也就是向你征税。</p><p>只要居民部门在，通过供给端的调整，都会带来周期性的PPI恢复，简单讲，供给侧改革一搞，房地产一推，老百姓一买单，企业的债务就不是债务了。所有政府的债务、企业部门的债务、金融部门的债务，只要居民部门能扛得动，都不是债。</p><p>你们知道现在的大问题是什么吗？我现在说了某一个行业，你知道有些人犯的巨大错误是什么？到现在为止跟我讲，付总PPI为负很正常，市场化竞争，优胜劣汰，弱者淘汰，强者赢家通吃。我说现在不是的，现在会出现一种情况，都得死。他没懂，在这个图里你们看得懂吗？</p><p>一是，看 2011—2015 年周期里，2008 年 4 万亿基建，加杠杆，把有效需求扩的非常好，那时候政策一出，绝对管用。现在很多官员犯的错误是觉得老百姓还是曾经的老百姓，还用同样的政策。</p><p>当年的政策是我准备 50 万孝敬丈母娘准备买房子，结果你跟我说首付只需要 40 万，那你知道年轻人怎么做吗？</p><p>40 万首付，10 万装修，还是花 50 万。现在的情况是什么吗？告诉他不需要 50 万，只需要 499，年轻人说我不缺那 10 万，我现在缺那 40 万。</p><p>杠杆到头，消费是完全两个概念，用加杠杆的方式刺激经济，这个手段将失效，我现在唯一投票的全部是降杠杆刺激经济政策，比如说降低存量房贷利率，这是扎扎实实的降杠杆，说白了是银行吐出钱来给在座各位每个月可以少还 800、1000。</p><p>但你还是说降低首付比例，大爷快来，加杠杆哦，我可以告诉你，加不动了，这就是核心。当年产能加上去以后供给过剩，主要是旧产能，出现 36 个月PPI，企业恶性竞争，破产倒闭，银行压力巨大。</p><p>我们干了供给侧改革，然后行政性出清一部分产能，其实是转移到新产能上去了，使得供需把需求再一刺激，老百姓买单。</p><p>当年的大问题是这儿是一个妹子，白富美，下面是俩小帅哥，俩帅哥在那儿竞争，优胜劣汰，一个把一个淘汰之后，最终迎娶白富美，因为白富美需要一个帅哥，所以你们俩金正，胜者为王。</p><p>这句话，充分的市场竞争后胜者为王，假设前提是需求不变，经济的这点活儿放到自媒体、网上真的搞坏了。充分的市场竞争后，胜者为王，赢者通吃的假设前提是需求不变，也就是妹子在，你俩竞争。</p><p>知道现在的数字啥意思吗？红色线没了，0，PPI如果扣掉疫情期间，持续从 2019 年之后为负，两个小伙子在那儿PK，目标是胜者为王，最后卷完了，剩下一个，摇头一看，妹子呢？</p><p>你们等着看吧，这件事情必然是两三年后某些行业必然发生的，会真以为是胜者为王？你的大环境是什么环境？是有效需求面临着中长周期的收缩和调整，这种情况下市场如此恶性竞争和卷是没有赢家的，最后会爆发危机的。我把这话送给某些企业的董事长们。</p><p>跟往年不一样，往年任何过剩的市场竞争，最终都胜者通吃的原因是因为居民部门有效需求永远在，永远能加杠杆，永远能为你的企业产能和利润买单。最后只剩下一条路，你们知道是什么路吗？</p><p>因为这条红色的线只代表着内需，如果国内的姑娘没了，就要迎娶海外白富美，所以他只剩下一条路，出海。这也是网上很多网友们很开心的，我们就是要出海，我们就是要拿下国际市场。</p><p>现在国际环境是什么样？是不是 20 年前、30 年前全球往左翼包容融合的大环境，能让你出去迎娶白富美。当然日本的三井、三菱、丸红、伊藤忠等等，在 90 年之后就是出海迎娶白富美，问题是我们现在能不能？</p><p>我相信大家心里都有杆秤，“想不想”跟在未来的大环境上“能不能”将形成激烈的碰撞，如果不能，国内没有有效需求给你怎么办？</p><p>现在所有经济问题是两个都存在，供给过剩也存在，有效需求不足也存在，我们需要解决问题，答案是必须提振内需，内需的核心就是进行再分配。</p><p>政府和居民之间进行再分配，贫富之间进行再分配，债务和杠杆之间进行再分配，如果不做，那我们就是 35 年日本。日本 35 年周期怎么来的，你们最终知道答案了吧？</p><p>还不知道，我都把儿子送过去了，你们还不懂再分配是什么意思吗？日本战争后获取所有资源要素（岗位、职务、薪资），战争后的第一代和第二代，到了 2012 年开始死亡，代际分配，老同志们死了，年轻人吃的蛋糕就自然多了，就这么简单了。</p><p>你如果能理解到这个的变动，你就能自然地理解到我在说日本经济的核心到底是什么，是代际分配，不是增长，光增长不分配那就是富着恒富、穷着恒穷。这话翻译到股市上你们知道是什么吗？</p><p>上市公司不分红没增长的话，答案永远是富着恒富、穷着恒穷。00 后指望着炒股来分 60 后的财产，你想多了，你还不如去萧山当个上门女婿来得更快一点，还不用努力，把自己倒腾的帅帅的，嫁进萧山豪门，财富代际再分配，躺赢，何必要天天炒股累死累活的，心里想着我能干掉 60 后，那都活成精了，你能干成他？</p><p>换手跑的比你还快，一边喊着“年轻人快上啊，人生唯一一次机会，此次不all in梭哈，未来就没机会了。”他一边all in着，咱们一边换着手撤，让他们站在高高的山冈上。</p><p>市场跟经济是一样的，创造增量的同时也要进行分配，不配没有任何意义。有些事儿都是本质一样的，这就是中国经济当前最大的问题。</p><p>2006 年供给侧改革，我提醒大家一句，有几个错误的观点特别强调一下。为啥说错误的？这观点用我的话说一定咱们要知道，不一定要让老百姓知道。</p><p>举个简单的例子，股票市场创造财富效应，用此来改变国运，这是不是外面经常听到的声音？你想啥呢？</p><p>房子如果没有收入和租金的回报率和住的功能，那换句话说房子不创造自身价值的情况下，纯换手，依旧答案是富着恒富、穷着恒穷，能创造短期财富效应吗？</p><p>能，就像 2015、2016 年我跟你们举过的例子，满仓all in 梭哈，融资杠杆伞形都上，然后你发现股票一个涨停一个涨停，账户里全是钱，出门给老婆买了个包，财富效应。</p><p>然后呢？跌停的时候你知道你后悔买啥吗？你后悔股票没卖掉，放心股票卖不掉的，因为开盘就跌停了。你真正后悔的是，我没给老婆买这包就对了。我经常劝他们，辛苦你给你老婆买了包，因为她至少还剩个包。你要当时没买这个包，你连这个包都不剩了。</p><p>这种换手的游戏只有结果是富着恒富、穷着恒穷，而且后果会越来越差，中国就是典型的这个逻辑。</p><p>不要把泡沫当成家庭财富去忽悠老百姓，这是扯淡的，背离收入的，背离企业增长和股息分红的，这种东西咱都心知肚明，就是为了来换手的，你把它当成家庭财富配置，会死人的，最后对经济会造成今年这种情况。</p><p>换手的时候你看着消费很爽，比如说我这儿给你举的房子，中国的房子上涨幅度最大的真的不是 2008—2015 年，恰恰是 2015、2016 年股灾之后房价是最猛的。</p><p>那时候北京我记得最清楚，2009 年炒房的时候，亚运村是 17500，2015 年年终的时候亚运村房价是 25000，2019 年亚运村的房价是 10 万，黑色线是同比上涨，70 个大中型城市同比上涨，同比上涨+长时间累计就是房价涨幅最大的时候。</p><p>所以我们就是 2015、2016 年那一波，房价带来了大家的消费预期和希望，但从这张图上你们可以非常明显地看到消费背离了收入，这种消费就是大家讲的建立在财富效应上的，但此时的财富并不是收入支撑起来的。</p><p>问题就来了，四年前五年前我拍过一些短视频，跟平台合作让我拍些短视频，我当时就讲得很清楚，房子如果纯换手，到底是什么东西？我 200 万买的房子，600万卖给年轻人，我拿走的就是年轻人未来 40 年青春的当期现金折现。</p><p>我可以为我的未来 40 年潇洒了，他背上这 40 年的债务，他要还的。如果没有收入的增长，他要硬硬地还 40 年，他就是失去的，我替他多活 40 年了，就这么简单。</p><p>股票价格也一样，咱们交换的叫时间价值，我是大股东，我现在拿走，我现在Happy，把你套在里面套 10 年，10 年后能不能解套呢？也许解套了，你觉得你开心吗？你丢了 10 年。金融资产交换成本你们一定要注意时间函数，没有时间函数都是扯淡。</p><p>问题就在于，如果收入不增长，纯换，短期内创造的财富效应毕竟等于另外一批人短期内累积的债务。</p><p>换句话说，我们爽了，他的债务达到一定程度的时候会造成全面的坍塌，整个资产不可能持续的，他买的房子 800 万买的时候，指望 800 万买，1000 万卖给下一个年轻人，结果发现没年轻人了。</p><p>下一个年轻人接不动 1000 万了，此时他的资产负债表就开始恶化了，消费开始出现断崖式的回归，这就是 2019 年后的结果。2019 年后开始逐层断崖往下走，向着真实的收入回归。</p><p>千万不敢跟老百姓讲把股票、房子当成家庭财富，过去有年轻人的时候，他才是我们的财富，不管通过股票还是通过房子，年轻人就是所有人财富的来源。</p><p>说实话，中国的房地产涨了差不多 20 年的根本原因是啥？有一讲一，凭良心讲，任何的房子年轻人能买走，我们就拿走财富了，我的房子就是他们的负债，咱们所有人在吃的就一条东西，就是居民部门杠杆率，所有人吃的就是这根红色线。</p><p>有些研究员说，中国现在居民部门杠杆率比海外低，因为他单纯的对比数字。我可以告诉你不低了，你知道原因是什么吗？我们的杠杆背后没有高福利，高福利国家 70%，低福利国家 60%，你跟我说 60%比 70%低，你自己实际的杠杆压力到底是多少，你心里没点数吗？</p><p>你的教育、医疗、养老，上有老下有小，你需要花多少钱你心里没点数吗？你是社会福利 70 年代 80 年代建立起来国家的居民部门杠杆率吗？不是的。从各种现象上去观察，这个杠杆率到头了。</p><p>资本市场很聪明，从 2002 年一直到现在，长达 18、20 年左右的时间，交易中国的消费升级，不管上证综指是 3000 点还是 3500，不重要，消费板块大周期就是中国居民部门 80 后加杠杆这一带。</p><p>从 2019、2020 年开始，我对中国消费的所有教育逻辑就是：一是消费会发生结构性的变化，这种变化实际上是代际的变化；二是消费开始降级。</p><p>那时候我演讲中讲的那句话，咖啡不再是喝完 20 喝 30，喝完 30 喝 40，喝完 40 喝 50，而是开始喝 9.9 买一赠一，年轻人开始周四攒个肯德基优惠券。</p><p>年轻人开始发生消费型变化，比如我们家孩子喝茶，我看他们喝茶马上告诉我老婆，把囤的普洱的茶饼全甩卖。为啥？</p><p>我们家姑娘怎么喝茶知道吗？去她办公室，红茶绿茶普洱，你说红茶，东方树叶拿出来拧开，连水都不用，倒壶里，卡哇伊的小杯子往那儿一放，往那儿一倒，请。她不会给你拿个饼搓半天，然后再一泡，那是上一代人。</p><p>日本当年经济顶峰期的时候，做日本的清酒和威士忌，结果 1990 年之后真正火起来的是三得利、Jim Beam 嗨棒。年轻人说 1000 块钱的酒，啥酒？我要的就是 10 块钱，口味偏甜，RIO喝起来微醺，能醉吗？</p><p>能，行了。我的社交场景已经变了，我不会有请客吃饭坐在那儿了，我的消费场景已经变成俩孩子往那儿一坐，看电竞比赛直播。</p><p>这种年代已经到了，你可千万不要以为没到，你囤的邮票、木头，你记住一点，没得传承的，还囤邮票，我家儿子都不知道邮票长啥样？他倒知道小马宝莉值钱，这就是时代的变化，消费在发生结构性变化及总量上的变化。</p><p>中国的资本市场对经济的反应是完全准确的，你们可以看看整个的板块指数，房地产结束了，居民部门的食品、饮料、消费、零售结束了。新能源汽车到底结没结束，我的答案是你们等着瞧。其实现在只有一个板块在扩张，半导体。</p><p>你们看懂啥意思了吗？银行的对联叫“只做锦上添花，绝不雪中送炭”，横批“我家银行”。你要是经营不善，我们家第一个干的事儿是抽贷。“内债不是债，只要税还在”，还有一个秘诀是关于中国特色的经济，海外没有的，我们是非市场经济下的“J、Q、K”。</p><p>“J”是什么意思？大爷快来。“Q”，大爷，投点钱吧，把钱圈住。“K”是出去，KO。中国能够高速经济发展实际上和这只手有密切关系，大家炒股票都知道，经济越差的时候，你炒的是这只手动不动，有人问中国的股市跟经济到底有没有关系，我可以告诉你，两头是反向关系，中间是正向关系。</p><p>两头反向关系就是经济越差，这只手会出动，你会有反向关系，中间一定重新回归到跟经济相关，然后再往那头，过于亢奋了，也是行政关系。举个例子，2015、 2016 年当时非常典型，我发了个微博，最后一个月，我说你们谁爱玩谁玩，我们要撤了，拜拜了您。当然好处我没做空中国，我做空了香港，我要是做空中国我就回不来了。</p><p>那时候我跑到江浙沪调研当时的伞形信托场外融资配置，证监会一出政策，我说很简单，你们谁爱玩谁玩，老子撤了，根本原因这只手才是关键，你现在的市场什么 6000 点不是梦，10000 点刚起步，你哪一条支持了？</p><p>债务杠杆再一撤，游戏就崩了，赶紧跑。你们不觉得这玩意要出事？那也是手，不是经济，中间这一段才是正常经济发展，而中国的指数编制将决定了大部分时间经济反映出来的是结构，不是增量。现在出来个A500，是想试图让A500 类似标普那样能反映总量加结构。</p><p>JQK什么意思呢？中国非常奇特，在投资的过程中，只做JQ环节，绝不做K。JQ环节是什么呢？行业有没有崛起呢？没有。行业有没有国家主义的意义呢？有。</p><p>你们一定要记住一点，我们是右翼，右翼的产业政策全是偏向于国家主义的，所以说国家主义干任何事情不是要挣钱，要的是有，你们记住这句话。所以JQ的所有目的是为了政绩，是为了有。</p><p>老股民都懂，看新闻联播炒股的逻辑是啥，你告诉我你看新闻联播是炒经济吗？你看新闻联播炒股就是炒的他哪儿没有他想要，你就投。这时候是没有证伪的，而他会倾注所有资源给你，倾注土地、税收、地方引导基金，倾注一切资源，股市也是资源，用来融资的，会把一切资源给你，你是最爽的。</p><p>而你一旦做到了遥遥领先，他的政治目的达到以后，就会把你甩到市场上进行市场经济的KO，此时你们就会发现PPI的秘密。你们就会发现PPI的周期性，PPI的周期性很简单，你如果把PPI里的行业再分一下，生产资料、生活资料，再细拆就会发现周期性和政策的关系。</p><p>啥东西呢？我没有，就会让PPI为正，我倾注一切资源和方式可以让你在里头挣到钱，而且不需要竞争。</p><p>但我一旦达到目的，把你扔到市场经济的时候，你们会迅速发展，如果是正式的市场经济，竞争波动会比较温和的，也就是说稍微一有点钱挣，就有人进来了，就会烫平，周期拉的比较长，需要 30 年才能崛起一个大型企业。</p><p>但在中国不是，中国是 5 年，产业链就要做到全球遥遥领先，在JQ的保护期内，大家都可以活，但同样会造成很多“大家”，一旦保护期一到，扔到市场经济的时候，你们就会发现大家就变成了非自己人，开始PK、竞争、内卷，PPI开始转负，就这么简单。</p><p>然后一轮产业过剩，开始淘汰，政府驱动再引导新的产业。用这种前浪推后浪的方式，推动整个产业各个环节的周期缩短到五年，但是代价就是很多行业会以很快的速度进入到PPI为负，而所有能到PPI为负的产业，最后能活下来都得感谢有自己的负债端，居民部门能买单，一旦内需不够还这么搞，就会出危机，就是现在这种状态。</p><p>老百姓的投资是说你看新能源渗透率到了多少多少了，老百姓开的越来越多了，怎么股票一直跌呢？这就是他的错误，他没有理解政策到底什么时候投资，成熟的时候是不能投的，因为能放给市场的时候一定不那么挣钱了，不放给市场的时候一定是特别挣钱的。</p><p>当然，这里面还牵扯到一点就是当年供给侧改革，你们可能都没有人会想到供给侧改革跟当年的股灾和楼市是有高度关系的。当年周金涛在世的时候，2015年底 2016 年初在上海搞了个会议让我讲供给侧改革，我说供给侧改革很简单，1997年朱镕基总理翻一下，供给侧改革这个词就来自于那儿。</p><p>中国这一轮所有的起点是 2002 年，PPI为正，核心CPI为正，有效需求为正，持续到了 2012 年，供给开始过剩，但有效需求可以继续加杠杆，在这儿就是供给矛盾，2009 年供需双落，这就是中国这一轮从 2012 年开始的大周期的末端。</p><p>上一次末端是什么时间呢？改革开放一直到 90 年代末，2000 年初。出门京东上 150 块钱买《朱镕基总理答记者问》，三卷本，里面所有的事儿都发生过，房地产泡沫、金融经济危机，鼓励老百姓要有信心。</p><p>你知道当年怎么鼓励老百姓有信心吗？“心若在，梦就在，大不了从头再来”，刘欢同志从此从那儿活起来的，那就是当年鼓励你们有信心。</p><p>把年轻人的失业率不能拉那么高，你们知道当年怎么做的吗？大学本科扩招，因为我们的年轻失业率统计上是不统计在校生的。把你都赶到大学里，失业率就能往后延三年。</p><p>今年清北附交本硕的比例是多少吗？1 比 3，5000 本科，15000 硕士，当然，当年那种政策最后直接结果造成的什么？曾经本科很值钱，然后本科不值钱。</p><p>我大概率觉得以后硕士可能也不咋值钱了，如果三年后经济的问题还不基础，我估计开始鼓励你们读博了，读到 30 岁再开始就业吧。在座家里有孩子的，你孩子不是富二代的，就别卷了，富二代就更不用卷了。用我的话说，想清楚了，后面卷学历没什么太大价值了。</p><p>当年还干过啥？银行风险，四大资产管理公司处理不良，供给侧改革，化债，股票和政府化债。如果你想知道股票市场到底用来干啥的，请品品当年。2002—2004年，经济已经恢复了，A股跌到 2004 年的原因是啥？</p><p>都有，所以你们知道债务到底怎么化吗？答案非常简单，所有的债务记住上下联，“只要人还在，啥债都能化”。只要人不在，这债怎么化？税率。量收不上来，就抓率。</p><p>以前有人说中国是高税率，是居民部门高税率，企业部门低税率，因为各种退税、补贴给你的是低税率的，大家要懂得，该抓税率的时候要抓税率，不然是不够的。这一段大周期到现在为止进入到末端，这就是当前最麻烦的点以及外围环境。</p><p>海外我就不分析了，因为你倒过去就OK了，你把过去的 40 年倒过来就是海外正在慢慢发生变化，产业在回归，贸易关系在重塑。我这两天刚从新加坡回来，新加坡、东南亚、马来西亚、印度尼西亚、越南，开句玩笑话说，2016 年之后真的是受益于你俩人打架，因为他们在走正向反馈和循环，他的正向反馈循环就是我们转移的。</p><p>最后送大家一句话，这张图是全球很重要的，当财政需要扩张，当利率在下降，你们可以想想财政花钱短期内挣不到，国内经济的有效需求不够，储蓄过剩，投资回报率下降，利率下降，在这种背景下，汇率就代表着你的实际回报率以及本币购买力，是减弱的。</p><p>所以新兴市场一般来讲，如果出现这种状况一是利差会推着汇率贬值；二是政府的债务会推着汇率的贬值，会导致资本流出，会导致你需要加息去应对，但一加息，经济崩，资本进一步流出，这就是新兴市场危机。</p><p>注意，新兴市场危机不单纯是美国加息，这是很多人错误的认知。我可以告诉你，中国以前从来不会崩，因为不管老美加到几，中国的投资回报率都远远高于老美的话，我不会有新兴市场危机的，本质上是对内投资回报率和债务。</p><p>大家老是讲一句，老美加息就会收割别人。我开句玩笑话说，你如果没有借那么多钱，且投资回报率很强，他加息对你没影响。有一讲一，老讲成阴谋论，不是左就是右了，是偏颇的，我们站在中立的角度看，左有左的问题，右有右的问题，两边都有。</p><p>全世界在低利率和政府财政扩张情况下能保证汇率稳定的只有欧美、日本，他采用的模式很简单，自己家里不能挣钱，又要保证自己的信用和币值的稳定，答案就是我可以作为资本方到海外挣钱，这也是全球化必然在当年会发生的路径，拿海外的carry trading套利资产作为背书，支撑汇率。</p><p>我可不认为《广场协议》把日本打败了，你去日本访问，他们会告诉你日本当年的官员都是偏国家主义的右翼，因为从二战后过来的，他们在写自己所有回忆录的时候都说，我们日本发展的挺好，我们的政策没有错，都怪美帝国主义。</p><p>你想想，哪个右翼会写本书说我错了，你们家老婆会说自己错了吗？想多了，怎么着都得说你错了。当年你们看日本官员书的时候，就会形成错误的右翼认知，原来是美帝国主义把日本打败的，而他不会去反思自己的问题。日本中立的这批人相反在做历史分析和回顾的时候，那个答案更准确。</p><p>在那个背景下，《广场协议》以后日元大幅度升值，日本形成了低息日元，强势汇率，什么意思？到海外去，购买海外资产吧，日元carry trading套息，到海外去形成，这就是日本的三井、三菱、丸红、伊藤忠，他们承载了日本海外所有财富。</p><p>而更关键的是日本政府债务用于了对那一代居民的补偿，教育、医疗、养老对你们的支撑。当然，没有增长了，所以他的内心是痛苦的，肉体不痛苦，所以日本是内心痛苦，肉体不痛苦，答案就是抑郁症、焦虑症、自杀森林，如果肉体痛苦，那就不是自杀，那是杀别人。</p><p>在这种背景下，财政转向、利率下降，carry trading套息，用海外资产兜住，形成汇率，这就是当年很著名的，日本只要国内有地震，全球资产就会马上出现抛售潮，日元套息交易会迅速支撑日本，重要的就是这部分资产会回流。</p><p>美国也是一样，1980 年后，美元套息交易，所以全球就形成了低利率美元、借贷美元，永远借贷，美国不能加息，永远降息，美元永远是借贷方，不是投资方。这种背景下，用他的财政扩张和低利率，支撑汇率的就是美元的跨国资产，也就是美股里的所有上市公司和跨国企业。</p><p>但是他造成的结果是，三井、三菱、丸红、伊藤忠富了，老百姓穷了，也不叫穷，就是不增长了。老美也是同样的道理，跨国企业高管富了，老百姓穷了，而老百姓最终会用选票红脖子投出特朗普进行逆转。逆转了游戏就颠倒了，低利率就会回归，套利会回归，产业会回归，债务会下降，汇率会走向，就这个逻辑。</p><p>中国也想这么干，但做不到，我们现在的问题是利率低又不能低到那么低，财政想帮老百姓又不能真的帮到老百姓，汇率升值，我不知道当年有多少人你们咋想的升到 5 块 6 块，不是指 2016 年，是指这两年突然间有人说人民币将来升到 5 块 4块，你靠啥升？你用什么升？</p><p>现在说白了就是一种平衡，利率不能那么低，财政不能那么扩，汇率不能那么贬，三者之间找平衡点。比如说 2 的利率，对应的就是 7-7.3 的汇率，财政对应的就是能救救地方政府。如果明年打贸易战，变的更加严峻了，那利率可以更低点，比如破 2，汇率可以往上放一下，7.3-7.6，7.3-7.8，财政可以再扩一点，这是我们现在手上唯一剩下的牌，怎么可能一次给你打出去呢？</p><p>咋打，打出去以后没有海外市场给你做背书，我们就是新兴市场了。这个游戏就是现在国内的逻辑，止和稳，没有刺激，靠啥刺激？你对国内所有资产理解透了，大概率也就是明年的一些东西了。</p><p>说句实在话，全球这两年战争风险不断加大，某些资产计入的可不是利率、汇率、货币，某些资产在计入的是战争和脱钩，此处请参考俄罗斯。</p><p>时间原因，留几分钟给大家提问。</p><p>现场提问：付总我问一个问题，您刚才也在报告里提到了，这么大的人口国家，也到了 1 万美金以上的人均收入，结构性机会会在哪些行业或者哪些领域里有？</p><p>付鹏：你就记住一点，你现在要么做富的，要么做穷的，放弃中产吧，这就是答案，做富的不受影响。比如说刚才的奢侈品，富的是啥？各位女士们，记住一点，只买爱马仕，香奈儿、LV、GUCCI、Prada通通放弃，从新品到二手都会崩的，这叫富的。</p><p>穷的怎么做？杭州已经开始了，香奈儿一个包一天租金 25，二奢已经都玩不转了，现在玩的都是租一天 25，干吗呢？租给名媛们拍拍照打打卡，这就是极致的两头。</p><p>优衣库，要么就往上走，要么就是升级到始祖鸟，要么就往下降级到优衣库，不过现在年轻人更猛，他们都觉得优衣库贵，这都没辙了，我发现优衣库在国内的销售数据在下降。为啥呢？年轻人一问，优衣库挺贵，这没法去理解了，优衣库。就是往两头，中间的部分不做。</p><p>第二，年轻人的生意做，老年人的生意做，40 多岁中年不做，因为他基本上是上有老下有小，还着债，苦哈哈的中年牛马，这部分放弃。年轻人做就是他的兴趣爱好会发生很大的变化，他们不一样，不管有钱没钱，他们的兴趣爱好完全不一样。</p><p>比如动漫、游戏、二次元，就像年轻人买包，我们家姑娘买啥包？什么LV、GUCCI、爱马仕统统不买，人家买“痛包”，知道啥是痛包吗？知道里面塞一堆吧唧是啥东西吗？这就是他们那个时代的消费。</p><p>老年人你们知道做什么吗？老年人记住一点，人生中最后一刻花钱，一定是最后一个房子，ICU病房。中间 60、70 岁你也没啥好花的，我一直鼓励中国应该尽早退休，趁着这代人有财富的，能花的时候让他花，把岗位职务让出来给年轻人。</p><p>你真学日本，老着站着，年轻的上不去，你会发现该花的没花还在工作，该挣的挣不着，时间就拖了，中国也一样，放弃中间。</p><p>剩下的是什么呢？国家让你干哪些产业你就干，而且一定干早期，早期干完，后期一定过剩，干早期，达到顶峰的时候就是市场热度极高，要名有名，要利有利的时候，撤。</p><p>现场提问：半导体到了吗？</p><p>付鹏：没到，很简单，我们还没宣布我们“遥遥领先”，着啥急。会不惜一切代价，哪怕 10 个公司中有 9 个是骗子，他都认，这没办法，你必须明白国家主义的特征。</p><p>现场提问：感谢付总，想问关于海外资产配置的问题，个人在海外资产美股、美债、新兴市场的债券和股票，有什么建议？</p><p>付鹏：新兴市场的债券就是中国，原则上你购买他。比如说你们配置型的会配新兴市场债券，我们投机倒把型的直接在新兴市场放高利贷，任何新兴市场早期第一件事情都进去放贷。</p><p>2015 年去越南，我原来是做小米总代的，干着干着开始放贷，为什么？中国早些年也是放贷的，新兴市场有个特征，金融体系不完善的情况下，央行和银行的利率并不能正确地反映经济周期的资本供应和需求，所以说银行的利率一定低于实际经济的投资回报率。</p><p>我们的“搬运工”直接搬到最高的利率上就可以了，放小贷违约率很低的，现在在中国敢放贷吗？</p><p>举个例子，在座各位 2 分有没有人借钱给我，你们大概第一反应是 2 分，你要我本金的吧？但把时间倒回 10 年前，2 分，开发商问你借，你借不借？那时候你们担心违约吗？</p><p>不担心，原因跟你放多少息没关系，是对经济的判断，我可以告诉你，新兴市场在这个维度上就是当年的中国。</p><p>人家的员工 00 后就是 00 后，2015 年有一些产业转移跟我们去越南，我跟老板说的很清楚，你不要觉得越南劳动力成本低，不低的。他说这不是挺便宜的，我说加班是要给加班费的，4 点 59 是必须下班的，工会真会罢工的。中国劳动力成本低的原因是啥？牛马可以随便压榨，这才是劳动力低的根因。</p><p>这两年又有些企业想往回迁的原因是啥？越南这两年年轻人动不动就罢工，罢工了人家工会就上，你不给加薪人家就不干的，老板拿着没辙的，中国老板很不适应，就想迁回来。我说你也别迁了，因为中国的 00 后们也很快崛起了，他们整顿职场已经开始了。</p><p>这两天香港闹的很凶的是华为的HR招聘，一样的道理，这个时代到了。</p><p>新兴市场的债券，本质上确实是高息的，这很好，美股美债就不用说了，美元资产的投资回报率你自然琢磨去，当然美股明年会有点特殊，因为今年创造奇迹了，今年是美股的奇迹年，你们可能都没注意过回报率、波动率、估值，高估值，低波动，高回报，这三种组合理论上不会同时出现的，但今年同时出现了，是绝对异常的。</p><p>这就是前几年我跟你讲的，你们必须要明白人工智能已经开始了。前几年我说美股会从人工智能的集中到慢慢扩散，很多人说不可能，他对股市结构的理解不够深刻的。</p><p>当然今年最辉煌的一仗就是英伟达闪崩之前我们明确告诉国内所有的公募基金，你们要注意英伟达场外杠杆，那天晚上崩了，崩完了之后，第二天晚上马上做了将近 8000 人的直播，跟各家公募基金说，这就是波动率的高点，因为经济没有问题，市场没有问题，其实就是过低的波动率带来很多人加了杠杆，把这帮人干掉就完了。</p><p>当时新加坡有些朋友给我打电话说付总这怎么办？我说你今天晚上把保证金补上，明天就能活，补不上死的就是你。这跟英伟达、人工智能没任何关系，妥妥的就是爆杠杆，爆完了就完了，我们也爆完，去完杠杆，英伟达重新回到 3 万亿，现在是这种情况。</p><p>但这种组合明年应该不会持续，高估值、低波动、高回报，不会。明年要么保持着高估值，保持着低波动，回报率就得下降，要么就是保持着高波动，回报率下降，高估值，要么就是直接杀估值，我目前看还看不到杀估值的路径，杀杠杆是有可能的，杀估值的可能性不大，产业的中期早期估值都是偏高的。到明年去看，美股确实不太一样。</p><p>但我还是那句话，大部分时间你要琢磨琢磨百年美股为啥都是上涨的，是有原因的。对于老百姓来讲，美股不是因为它高的所以高了，是防止高波动就行了，你只要防止高波动，大部分时间就是让你定投了，这没啥选的。</p><p>还有一点，记住，巴菲特是资产管理，不是大散户，老百姓一理解巴菲特持有那么多现金，是不是美股要崩了？现金是啥？是零波动率 4.5%股息的股票，你去品品这句话就OK了。</p><p>在资产组合中你就是评估资值、波动、回报率，当三者之间异常的时候，你的比重会调到 0 波动率的股息，4.5%的股票上，这就是现金，千万别把巴菲特搞成大散户，说巴菲特买现金说因为美股要崩，做做短视频蒙蒙老百姓可以，咱们自己就别这么干了，这大概就是美股。</p>]]></content>
    
    
    <categories>
      
      <category>fun</category>
      
    </categories>
    
    
    <tags>
      
      <tag>经济</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>哪些事是你当了领导才明白的？态王的回答（知乎）</title>
    <link href="/Career/zt-zhihu-68467783-answer-2560111521/"/>
    <url>/Career/zt-zhihu-68467783-answer-2560111521/</url>
    
    <content type="html"><![CDATA[<div class="note note-quote">            <p>作者：态王<br>链接：<a href="https://www.zhihu.com/question/68467783/answer/2560111521">https://www.zhihu.com/question/68467783/answer/2560111521</a><br>来源：知乎</p>          </div><p>慢慢看清了私企管理的本质。</p><p>咱们这辈人的很多父母，谈到私企就直摇头：“私企不适合长期干”“不稳定”。</p><p>你问他们为啥，他们又说不上来。</p><p>但其实，他们没能说服你不代表他们的结论是错的，只是因为他们没有想明白。</p><p>我自己目前就在一个实力强劲的私企，干过员工，两个部门的主管，再到部门经理，也入了股。</p><p>在这里试着把你爸妈没能说出来的这些话写出来，咱们互相讨论。</p><h2 id="1-私企的本质"><a href="#1-私企的本质" class="headerlink" title="1.私企的本质"></a>1.私企的本质</h2><p>私企的本质用一句话来说是——<strong><span style="color:#0000FF;">追求利润最大化</strong>。</span></p><p>老板要做的很简单：用一些东西（场地、工具、原材料、人等）来生产产品，产品卖出去获得利润，同时外部存在竞争。</p><p>注意：员工也只是生产工具，相当于按月租赁的一台生产机器。</p><p>一个公司里只有2类人：资本家和打工人。</p><p>资本家追求利润最大化，对于打工人来说意味着以下几件事情：</p><h3 id="1-必须确保所有人都是可替换的"><a href="#1-必须确保所有人都是可替换的" class="headerlink" title="1.必须确保所有人都是可替换的"></a>1.必须确保所有人都是可替换的</h3><p><span style="color:#FF0000;">所有人。</span></p><p>做过中层及以上领导的人都明白，一个企业要想活的久，从最开始设计架构的时候就要尽可能增加人的可替换性，减少对人的依赖。</p><p>虽然有得力的人工作真的是会非常顺，甚至有多方面的进步。但是在一个公司的所有生产工具里，人是最有能动性的，但也是最不可靠的。</p><p>你的一个得力干将，可能因为女朋友要去另外一个城市而离职，因为父母病了要照顾而离职，因为自己病了不能上班而离职，因为有更好的公司邀请而离职，因为岗位发展方向离职……原因太多了。</p><p>你是公司老板，你会让公司依赖一个掌握大量不可替代的技术、掌握很多秘密的人么？</p><p>他走了公司可能直接就完了。比如说，我会让员工把自己干的任何事情，都写成非常细致的操作文档，特别是遇到什么问题该怎么解决，这样哪怕他请假了辞职了，另一个人也能立马顶上。</p><h3 id="2-什么时候会把你替换掉，取决于你的相对价值。"><a href="#2-什么时候会把你替换掉，取决于你的相对价值。" class="headerlink" title="2.什么时候会把你替换掉，取决于你的相对价值。"></a>2.什么时候会把你替换掉，取决于你的相对价值。</h3><p>（1）在说相对价值之前，先说说对于公司来说你的绝对价值是什么，也就是你的不可替换性所在。</p><p>按照重要性排序：信任＞秘密掌握＞人脉＞听话＞硬技能≈软技能。</p><p>① <strong>信任</strong>：其实在老板眼里，很多东西都比你引以为豪的技能更重要，首当其冲就是信任。<br>为什么很多老板的亲信大部分是亲朋好友，特别是公司前期，即使这些人能力并不出众？“信得过”这三个字值千金，技能再强，不信任你你永远进入不了核心圈子；</p><blockquote><p>编者按：血缘应该也属于这个</p></blockquote><p>② <strong>秘密掌握</strong>：你掌握了公司的一些核心机密，老板一般不会随便让你走人；</p><p>③ <strong>人脉</strong>：难以复制，较难替代；</p><p>④ <strong>听话</strong>：你没看错，仅仅是听话都比你的技能更重要。我经历过几个能力很强但是不听话、有时候会动摇军心的下属，这种人因为暂时还离不开，领导一般都会先找这个人聊几次提醒注意，如果没效果，就会立马暗中找替换人选；</p><p>⑤ <strong>硬技能</strong>：常说的经验技术，比如写代码能力。引用公司老板的一句原话“其实说实话，别看他是个博后，他不干我立马能找个其他人换上去”；</p><p>⑥ <strong>软技能</strong>：计划调研沟通组织管理等能力。不同岗位对软硬技能需求不一样，但很多时候软技能的不可替代性要比硬技能更高。【这里自问一句：这些价值哪些是你具备的？你到底有几把硬刷子，公司离开你是不是真的就转不动了？】</p><p>（2）在绝对价值的基础上，再说相对价值，就是和同样具备以上这些价值的人相比，你还有没有价值。</p><p>看问题不能静态、局部地看，要动态、全局地看。</p><p><strong>一定要记住，你对公司的价值不是绝对值，是相对值。</strong></p><p>影响你的相对价值的点主要有3方面：</p><p>① 人才供需关系。就是你的竞争对手情况。不是说你有公司这个岗位需要的能力，公司就要你。</p><p>另一个人也有这些能力，甚至能力还稍不如你，但是要的工资低，那你就可能被替换掉，哪怕你是部门经理甚至总经理。</p><p>顺便说一句，这也是内卷的本质，大家都越来越强，但是得到的却越来越少。【这里自问一句：你能保证一直不会有更能干、更听话、更便宜的人来把你挤掉？】</p><p>② 产品供需关系。就是公司的竞争对手情况。【这里自问一句：你能保证你公司这种产品一直有市场？保证不会有别的公司有更便宜好用的产品？】</p><p>③ 变化。</p><p><strong>外部的变化：技术在不断更新，市场需求在不断改变，而且越变越快。</strong></p><p>大部分普通员工的价值，都会随着时间变得失去竞争力。</p><p>再加上老挝特色的政策制定，一纸命令一个行业就没了，几百万人灵活就业，真好玩。【这里自问一句：你能保证一直学好最新的技术？保证你的行业不会被一纸命令掉？】</p><p><strong>个人的变化：随着年龄变大，时间和精力都会减少，这是生物规律。</strong></p><p>对公司来说，年龄大的员工要的工资高，还加不了班，技术也跟不上了，又混成了老油条，知道怎么既能摸鱼还表现得很努力，又因为资历老不好管，已然变成了不良资产，肯定要想办法处理掉。【这里再自问一遍开头的问题：你是有几把硬刷子，即使40岁了干得少拿得多公司还是得养着你？】</p><p>这就是为什么35岁以上的人很少有高相对价值的。</p><p>而你爸没说出来的那句话其实是这句：你能保证你一直能力匹配、一直精力充沛、一直学新技术、一直不涨工资、一直非常听话、一直非你不可、公司一直活着、产品一直牛逼吗？</p><h3 id="3-成本和竞争决定了老板必须榨干你"><a href="#3-成本和竞争决定了老板必须榨干你" class="headerlink" title="3.成本和竞争决定了老板必须榨干你"></a>3.成本和竞争决定了老板必须榨干你</h3><p>（1）从内部来说，你的工资是老板的成本，所有私企老板内心里都希望有一种药，给员工吃了以后，不用给一毛钱工资就可以让他们自愿996干到死，最好住在公司里夜以继日地干，干不动了换一个人继续。</p><p>所以老板提倡加班，提倡奋斗，希望榨干你所有的价值，同时只给你刚好能让你干活的钱，绝对不能多给，这样才能让他付给你的每一块钱工资都花的“非常非常值”。</p><p>对于老板来说，加班的好处有很多，你多干了活，还少了很多其他思考，生活中只有工作每天就只会想工作，每天下班的时间刚好够充满电进行第二天的工作，就这样不停地充放电循环。</p><p>所有看似的对你好的成本投入，都是为了能榨取你更大的价值，比如加班到8点晚餐免费，加班到10点报销打车费。</p><p>（2）从外部来说，你停下来想一想，其实我们这个社会所有人都在互相伤害。<br>你的甲方要求你必须加急，你要求你的供应商加急，要求你的员工加班，要求外卖员尽快送餐，你的甲方又有他的甲方，大家都很急，都是24小时待命，都是节假日照常开机，最终整个社会都很急，空气中弥漫着焦虑、戾气与压抑。</p><p>为什么我们的社会这么急？因为竞争、人性和管理。</p><p>你不如别人的时候，想着赶上别人不被欺负；你是国内巨头的时候，想着赶超国际巨头；你是行业龙头的时候，又想着别让别人赶超；你看那些有了豪车还要游艇，有了游艇还要飞机，成了首富还想当首长的人，可能他小时候的梦想是能天天买得起雪糕就满足了。</p><p>竞争永远存在，欲望没有尽头。再加上老挝的管理者把国家当做一个大规模私企来管理，所以普通人当然就只能一刻不停地放电到电量耗尽。</p><p>留给打工人的是什么呢？没有时间，没有健康，没有对象，只有压力。</p><h2 id="2-私企为什么有这些特点"><a href="#2-私企为什么有这些特点" class="headerlink" title="2.私企为什么有这些特点"></a>2.私企为什么有这些特点</h2><p>接下来我们再站在更高的角度——<strong>资本主义</strong>，来看看私企老板为什么要这么治理。</p><p>公司是一辆汽车，老板是司机，员工是一个轮子或者一个刹车片，这辆车的目的是和其他车比赛谁走在前面。</p><p>记住很重要的一点：这辆车的运作方式和谁来开它没有任何关系。这辆车的操控方式是出厂前就设置好的。</p><p>怎么用它获得比赛也是由赛场规律决定的。</p><p>不管是谁来做这个司机，这辆车的操控方式只有一种（比如换挡就要先踩离合再拨档把）；要想赢比赛，这辆车的开法也只有一个唯一的最优解（什么时候踩油门、踩刹车、换挡、超车）。直线就是要猛加速然后过弯时猛刹车，刹车片废掉了就换一个。</p><p>你心疼刹车片不想这么干，你就赢不了比赛。这就是资本对人的异化，这个异化不仅针对员工，也针对老板，针对所有上了这辆车的人。</p><p>上了这辆车，参与了这个游戏，你就只能这么玩，谁不会玩、不敢玩，谁就被淘汰。大家要慢慢明白，老板的个人人品和在公司做的事，是两码事。不是资本家都是坏人，而是不做坏人就当不了资本家。哪怕你把特蕾莎修女抓来让她开这辆车，她也得这么开。</p><p>那么国企、外企为什么好像不像上边说的私企这样呢？因为有制衡。</p><p>（1）国企事业单位公务员这些：老板不是严格意义的资本家，对应管理方式也有很大不同。人员冗余度高（三个萝卜一个坑），离职率低（一干一辈子），对个人能力要求低（让硕士做专科生的事），对成本不敏感，国家撑腰不会死，垄断不怕竞争。这些特点大大弱化了成本、竞争等问题；</p><p>（2）国内外企：不敢违反法律，特别是劳动法。毕竟是在别人的地盘上赚别人的钱，外企首先要保证的就是合规，再说盈利。所以外企打工人能活的像个人一些。</p><p>（3）国外外企：有工会，对供需关系形成制衡。这工会是真的由打工人组成、为打工人争取利益的，而不是像国内要么没工会，要有也是资本家的走狗。</p><h2 id="3-一直没被替代，就能混得好吗？"><a href="#3-一直没被替代，就能混得好吗？" class="headerlink" title="3.一直没被替代，就能混得好吗？"></a>3.一直没被替代，就能混得好吗？</h2><p>（1）即使你用了很多年做到了高管，年龄虽大也没有被替代，但是你得到的是什么？失去的又是什么？</p><p>你得到的可能是一些钱、管理经验、一些见识。</p><p>但是失去的是身体健康、心理健康、自己的时间、亲密关系、感受生活，对于大部分人来说，还有本来能干自己正真喜欢的事情、做出成就获得快乐的机会成本。这些每一样都是生命中最珍贵的东西。</p><p>要知道给你头衔给你涨工资只是表面，对应的是要你承担更多责任、更高的KPI，不行就滚蛋。你要公司的钱，公司要你的命。</p><p>（2）那你说，如果我拿到股份了，是不是就多年媳妇熬成婆，从打工人变成资本家了？</p><p>不好意思，现实情况是即使你拿到了股份，只要你不是大股东，大股东还是随时可以把你踢出去，你还是个打工人。认清自己阶级属性，脑袋清醒屁股别歪。</p><p>我亲眼见证了给公司投了几百万的天使轮股东，在公司发展起来不需要他的钱了之后被大股东踢出去，一分利息都没拿到。</p><p>你才给公司投了多少钱？你和大股东真的是一个阶级吗？</p><p>资本家给打工人洗脑的话术有千千万，但其核心就一句话：<strong>公司好了大家就都好了</strong>。</p><p>这话乍一听真是这么回事。但是很少有人仔细想过，从公司这个集体赚到钱，到你这个个人赚到钱，中间有一个核心的东西——<strong>分配机制</strong>。</p><p>公司赚的钱有百分之几是到了你手里的？承诺给你的收益白纸黑字写在持股协议里了，还是只是口头给你说的？</p><p>你会发现你没日没夜干了10年，公司的业绩已经从100万涨到了1亿（100倍），但是你的工资只是从5000涨到了5万（涨了10倍）。</p><p>那剩余的90倍哪去了呢？除非在这之前你的股份兑现了，那就值了，但是记住你还是个打工人，只是比拧螺丝的哥们收益更多而已。</p><p>（3）最后，你觉得你很早就加入了公司，为公司付出了这么多，甚至和老板私人关系还很好，到时候老板总归是会给你回报的吧？</p><p>比如真的给你股票分红，或者给你一个清闲的职位高工资养着你？</p><p>不好意思，这里就要说从“追求利润最大化”推导出来的资本的另外一个特点：<strong>不看努力看能力，不看存量看增量</strong>。</p><p>你天天干到晚上12点回去被老婆骂也没用，出不来东西你就还是个废物；你做出来很多东西，推动了公司的发展，但是那是以前。</p><p>以前公司没钱，你996工资才5000，现在公司有钱了，你给老板说“我以前付出了很多，那我现在干不动了，955你工资给我10000，这不是理所应当的么？”不好意思，老板不看存量，看增量。</p><p>“以前是以前，现在是现在，以前谁付出的不多？我也付出了很多，我找谁要钱去？你想今后少干活多拿钱？不好意思，做不到。工资可以涨，但是继续撅起屁股卖力干吧，这才过了几天好日子就想着享福？公司不养福利主义懒汉！”</p><p>而且，知道为什么皇帝一坐上皇位，第一件事就是清理当初一起打天下的那些兄弟么？杯酒释兵权是好的，坏的直接赐你毒酒。</p><p>不管你是在一个狗屁小公司，还是阿里腾讯，以上本质都一样。阿里今天刷新这记录明天创造那奇迹，跟你有什么关系？你房贷还完了？还是马云12亿的游艇里有一间房是你的？</p><p>同志们啊，一定要记住：集体利益≠个人利益。</p><h2 id="重点总结"><a href="#重点总结" class="headerlink" title="重点总结"></a>重点总结</h2><ul><li>私企会确保所有人都是可替换的，替换的时机取决于你的相对价值；</li><li>你的相对价值：信任＞秘密掌握＞人脉＞听话＞硬技能≈软技能；</li><li>成本和竞争决定了老板必须榨干你；</li><li>不是资本家都是坏人，而是不做坏人就当不了资本家；</li><li>你要公司的钱，公司要你的命；</li><li>成为高管、有股份都不代表你成为了资本家，脑袋清醒屁股别歪；</li><li>老挝是一个大规模私企</li><li>集体利益≠个人利益</li></ul><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>私企的本质决定了，不管企业规模大小，你永远是从一个坑跳到另一个坑</p><p>什么情况下可以去私企：</p><p>（1）你干的是自己真正喜欢的事情，仅这一点就可以抵消大部分负面影响；</p><p>（2）能够通过股份搞到一大笔钱；</p><p>（3）临时作为跳板。</p><p>除这3种情况外，其他的情况去私企都是得不偿失最后，写这个文章的目的仅仅是提供更多信息，希望能帮到一些人做决策。</p><p>完全没有贬低私企抬高其他企业的意思，也不鼓励大家考公挤独木桥。</p><p>我在央企也待过，每种企业都有其问题，没有绝对的好不好，只有合不合适。</p>]]></content>
    
    
    <categories>
      
      <category>职业发展</category>
      
    </categories>
    
    
    <tags>
      
      <tag>知乎</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IT外传：下班路上（TF男孩｜稀土掘金）</title>
    <link href="/Career/zt-juejin-on-the-way-out-615370768790158/"/>
    <url>/Career/zt-juejin-on-the-way-out-615370768790158/</url>
    
    <content type="html"><![CDATA[<div class="note note-quote">            <p>作者：TF男孩<br>链接：<a href="https://juejin.cn/post/7308782796952502322">https://juejin.cn/post/7308782796952502322</a><br>来源：稀土掘金</p>          </div><blockquote><p>正式声明：以下内容完全为道听途说，肆意杜撰。请勿对号入座，自寻烦恼。</p></blockquote><p>老郑是一家IT公司的一线程序员，他在这个公司干了两年多了。</p><p>这一天晚上下班，老郑回家走到半路，收到一个电话，老郑用蓝牙耳机接通。</p><p>“走了吗？过来开一个紧急调度会！”</p><p>汽车的轰鸣声，伴随着行人的嘈杂，老郑听得很艰难，心想这是谁啊：“哪位？”</p><p>对方一愣，似乎诧异连我都不知道：“我是刘程啊，王总要开一个紧急调度会，你来会议室一趟吧”</p><p>老郑说：“我回家，在路上了！”</p><p>刘程说：“我知道，你能回来一趟吗？王总要开会”</p><p>老郑说：“我今天有事情啊，回不去了”</p><p>刘程说，那我看看，怎么跟王总说一下你来不来了。</p><p>老郑知道刘程，他是王总的技术助理，也是一个技术部门的总监，但是看了看电话，好像没有存过他的号码。</p><p>老郑看了看电话，摇了摇头，想起了这个公司的产品经理。</p><p>老郑待过很多互联网公司，大多数公司都是开发人员的综合素质强于产品经理。好像唯独这家公司，产品经理的各方面都比技术强。</p><p>从沟通方面，产品经理每次给老郑打电话，第一句话都是：“hello，我是李四……”。即便老郑早就把他的号码存成联系人了。</p><p>从技术方面，是的，这里的产品经理比开发还懂技术。很多功能，开发说实现不了，都是产品经理帮忙找代码片段或者开源项目的GitHub地址，而且还都是可用的。从规则讨论上，产品经理一听就懂、一点就透，开发人员转半圈也不知道为什么会这样。</p><p>但是有一点，技术领导很享受当领导的感觉。比如，刘程会觉得全公司都得具备能听出他声音的能力，最起码你得能分辨出电话的那头是他。</p><p>这一点，老郑今天还不是第一次遇到。下午的时候，另一个技术领导风风火火地赶到老郑的工位，说给老郑打电话没接，有紧急的事情找他，于是他只能亲自过来了。问完事情，老郑发现手机上有一个被拦截的外地陌生号码。这个号码是第一次打，老郑查了查这也不是企业钉钉通讯录里面的号码。</p><p>“开调度会……调度会，王总”，老郑上一次参加过一个王总主持的调度会。</p><p>王总在会上说，他想不明白，每次做一个项目，自己问产品，产品说没问题；问开发，开发也说没问题；问测试，测试也说OK；问运维，运维也说可控。但是，一上线就问题百出。这次的项目，一定不要出问题。有什么疑问、难点，现在就抛出来，能给你解决的就解决，不能解决的会解释，后面再出问题，决不轻饶。</p><p>老郑感觉，这个问题不应该是王总想不明白的，反而是王总需要解决的。这就如同一个省长说，问你们哪个市，你们都说很好，但是为什么我们省的经济、政治、文化就是很落后呢？你们几个市长都是责任人，一定要提高整个省的综合竞争力。</p><p>当时，还真有个技术小组长抛出一个问题。</p><p>小组长说：“王总，我们这边整个系统在重构，可能会有风险。”</p><p>王总问：“重构？什么时候开始的？谁批准的？”</p><p>小组长说：“这个我不清楚，我调过来当小组长时候就已经开始了”</p><p>王总问：“你是什么时候调过来？”</p><p>小组长说：“就是上次，上次公司整体组织架构调整”</p><p>“整体组织架构调整多了，你说的是哪次？”</p><p>“就……就最近一次”</p><p>王总感觉这个小组长废话太多了：“什么叫最近一次！几月几号？”</p><p>小组长的脸涨得通红，心理防线崩溃了：“具体日期我记不清了……”</p><p>整个调度会大约一个小时，传达出一个思想：不要出问题。</p><p>老郑心想，幸好今天确实有事，就算去，估计也是开类似的会。</p><p>这个公司的会，90%的时间都是浪费的。即便老郑不是重要岗位，今天他也开了几个。</p><p>上午的一个会，开了90分钟。基本跟老郑无关，他只是被直接领导安排过去听的。因为有可能会问到他问题。其实90分钟的时间，有20分钟在等上一个会议结束，有30分钟在看着发起人一个字一个字在敲会议共识总结。不能回去再敲，得会上现写，确保每一个字大家都认可，不然就不叫共识了。</p><p>下午一个会，开了60分钟。起因是客户反馈过来一些问题，大家一起去分析下。会议发起人也是第一次看到这个问题，他现场打开问题，现场下载资料，这叫第一手新鲜资料，证明他没有加工过，就是客户反馈的。不过，大家都在等着……大约等了30分钟的时候，资料还没有下载完，有人实在等不及了，说下载好了再开吧。会议发起人说不行，大家来都来了，会议得有结论才行，大家都走了会议纪要不能写大家中途退场。最后，50分钟的时候，资料下载完了，结果显示文件被损坏，无法解压缩。</p><p>老郑回到工位上坐下，又有另一个技术领导在钉钉群里找他。群里技术领导@老郑，让老郑自己给自己新建一个工作任务，建完了告诉他一下，他要知道老郑的工作安排。</p><p>虽然老郑觉得任务应该是上级给新建，因为原来公司多是这样操作，有利于上级调度工作。但是，这个公司都是自己给自己建。因此，老郑早上就把这个任务建完了，而且平台操作记录有显示这个领导已阅读过。</p><p>老郑就单独跟这个领导发消息，说自己早上已经建完任务了，并且把任务截图也给他了。</p><p>这个领导回复说：“我从群里问的问题，你得从群里回复”</p><p>其实，他早上自己看过了，现在又私聊告诉他任务建好了，这件事情他是知道的。因此，疑惑的老郑问为什么非要在群里回复？领导咔咔一通讲，有理有据，有软有硬，高谈阔论，又是共识又是示范，此时的老郑无心辩解，因为写代码的任务还没开始，而领导是不用写代码的。</p><p>于是，老郑无奈又去群里@领导，说我的已经建完了。领导又@老郑，说好的，我知道了。老郑在家里时，经常和女儿一起玩这种过家家的游戏。</p><p>好累，老郑一抬头看时间，快下班了。</p><p>赶紧写钉钉日报，日报是每天要写的，要写今天干了啥，大任务是什么，小任务是什么，用了几个小时，干到了什么程度。</p><p>除了日报，还有一个周报，除了周报，还有早会，除了早会，还有周会。这些主要是便于领导一层层向上汇报。高管们周五开周会，向集团汇报本周工作。分公司周四开周会，收集本周工作。部门周三开会，收集本周工作。小组周二开会，收集本周工作。</p><p>写完日报，老郑还要填一个Gitee的工时管理系统，这个系统是登记工时用的，主要写今天干了什么，用了几个小时，还剩几个小时。虽然和日报是重复的，但是它有一个功能，就是能统计工时。</p><p>这一天，老郑真的是很疲惫。感觉啥都干了，因为事情很多。又感觉啥都没干，因为作为一个程序员，没有写上几行代码。</p><p>老郑是一家IT公司的一线程序员。下班了，他走到半路，收到一个电话，老郑用蓝牙耳机接通……</p>]]></content>
    
    
    <categories>
      
      <category>职业发展</category>
      
    </categories>
    
    
    <tags>
      
      <tag>掘金</tag>
      
      <tag>IT外传</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【深度思考】一线开发大头兵对于工作的感悟分享（CodeBlogMan|cnblog）</title>
    <link href="/Career/zt-cnblog-soft-engineer-work-thinking/"/>
    <url>/Career/zt-cnblog-soft-engineer-work-thinking/</url>
    
    <content type="html"><![CDATA[<div class="note note-quote">            <p>作者：CodeBlogMan<br>链接：<a href="https://www.cnblogs.com/CodeBlogMan/p/17983370">https://www.cnblogs.com/CodeBlogMan/p/17983370</a><br>来源：cnblog</p>          </div><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>写在前面的是关于自己的一点介绍，21年本科毕业，学的是计算机科学与技术专业，到现在工作（实习）也有两三年了。自己本身对编程和开发是有兴趣的，同时也对项目管理、团队建设方面有兴趣。</p><p>目前有两段工作经历，都是在一线当开发大头兵，职级倒是随着跳槽而有所上升。做过从0-1的SaaS、PaaS的自研项目，也做过多租户的定制化开发项目，还有过半年的 PM 的经历…这些都让我有了一些关于工作上的感悟。现在简单总结一下，拿出来和大家做分享交流。</p><p>下面主要从工作的方式方法、构建知识体系、尽早规划职业这三个大的方面展开。文章有点长，但都是自己一步步实践总结得来的，有写得不好的地方，还希望大家多包涵。</p><h2 id="一、工作方式方法"><a href="#一、工作方式方法" class="headerlink" title="一、工作方式方法"></a>一、工作方式方法</h2><p><strong>在企业上班/打工的这一根本前提，决定了我们是企业的劳动力这个最大的基本盘。</strong></p><p>所以既然是工作，那么就可以有一些工作上的方式方法值得总结和分享。</p><p>想要自己创业或者考公/考编，或者做自由职业的朋友可以绕道了，可能这篇文章对你的帮助不是很大。</p><h3 id="1-1先尽人事"><a href="#1-1先尽人事" class="headerlink" title="1.1先尽人事"></a>1.1先尽人事</h3><ul><li><p><strong>拿出积极的态度</strong>：首先需要自己努力去解决问题，其次包括调动资源、团队协助，最好要让领导/同事知晓你的情况。</p></li><li><p><strong>摆烂并不可取，劳动是用来换取报酬的。</strong>如果平时的工作表现/绩效过不去，那么将可能会直接影响到我们的收入。</p></li><li><p><strong>对于工作量的估算要留有余地。</strong>学会平衡别人的预期，如果 3 天内能完成，那最好回复一个星期：总有别的事情会打扰你。</p></li><li><p><strong>遵守基本的职业道德</strong>：如果你负责的服务出现故障或发现一个严重的 bug ，作为开发我们应该马上对其进行修复/解决。</p></li><li><p><strong>少一些牢骚和抱怨</strong>：面对难题或者挑战时，更多地应该思考可行的解决方案，并做好与干系人的沟通和反馈。</p></li><li><p><strong>工作里对事不对人</strong>：我们需要推进的是项目，是一件件具体的事情，聚焦于如何解决问题，而不是和人做无效拉扯。</p></li></ul><p>做好上面这些，假如是对于刚毕业的我来说可能并不容易，但过了两年自己开始负责项目了以后，我就能慢慢理解并适应了。</p><h3 id="1-2关注个人成长"><a href="#1-2关注个人成长" class="headerlink" title="1.2关注个人成长"></a>1.2关注个人成长</h3><p><strong>人对于企业没有100%的忠诚度，规章制度才是可靠的。</strong></p><p>所以我们可以有意识地提炼日常工作成果，<strong>形成自己的个人源码库和工具库、解决某类问题的通用系统体系结构、甚至进化为框架</strong>。</p><p>众所周知对软件开发人员而言，有、无经验的一个显著区别是：新手无论完成什么开发任务都从头开始，而有经验的开发往往通过重组自己的可复用模块、类库来解决问题。</p><p>这并不是说所有可复用的东西都必须自己实现，别人成熟的、通过测试的成果也可以收集、整理到自己的知识库中。</p><h3 id="1-3work-amp-life-balance"><a href="#1-3work-amp-life-balance" class="headerlink" title="1.3work&amp;life balance"></a>1.3work&amp;life balance</h3><p>工作与生活的平衡，这是个老生常谈的话题。</p><p>实际程序员们可能很难做到：总有一些会议拉上你去 battle，总有一些线上的 bug 困扰着你，总会有领导安排的其它事情让你分身乏力…还有很多。工作是为了更好的生活这个主旨不会变，所以我也有自己的一些想法：</p><ul><li>拒绝无效加班。注重上班8个小时内的工作效率，即使有紧急任务，也不要自己一个人默默加班，而是看团队安排。</li><li>健康的生活方式。不抽烟、不喝酒、不熬夜，不吃太饱，中午尽量休息 30-60 mins，也可以适当健身锻炼锻炼身体。</li><li>合理化解压力。寻求家人/伴侣的陪伴和支持，吃完饭一起到楼下散散步溜溜弯，始终要有良好的心态去化解工作上的压力。</li><li>有点兴趣爱好。周末爬爬山、去周边城市旅旅游、和家人/伴侣一起包顿饺子…都可以让我们的生活充满更多乐趣。</li></ul><h2 id="二、构建知识体系"><a href="#二、构建知识体系" class="headerlink" title="二、构建知识体系"></a>二、构建知识体系</h2><p>知识体系是系统化的知识，具有连续性的特点，反映了一个人经过学习后所拥有的知识构成情况与结合方式。如果一个开发人员在1、2年内都没有更新过自己的知识，那么他可能已经不再属于这个行业了。</p><h3 id="2-1夯实基础"><a href="#2-1夯实基础" class="headerlink" title="2.1夯实基础"></a>2.1夯实基础</h3><p>万层高楼平地起，基础的扎实程度，可以决定开发人员在技术的道路上能走多远。</p><p>一个开发无论工作了多少年，越是到后面就越能体会，再高级的东西拆解后，就是基础知识。</p><p>我自己是在工作中切实地感受到了基础的重要性，在夯实基础方面总结了以下几点：</p><ul><li>Java 最基本概念，包括类、接口和抽象类、方法和类属性</li><li>面向对象的思想，继承、封装、多态的运用</li><li>Java 的集合、其它数据结构、常用工具类，Stream 流</li><li>Spring 框架的 AOP、IOC 和 Bean 的原理与应用</li><li>编程思想的培养，代码与业务的结合，积累解决问题的经验等等</li><li>……</li></ul><h3 id="2-2抽象思维"><a href="#2-2抽象思维" class="headerlink" title="2.2抽象思维"></a>2.2抽象思维</h3><p>抽象思维能够超越感官直接感知信息，通过对事物的本质属性和规律的把握，使人们在认识活动中获得更深层次的知识。</p><p>程序员如何培养抽象思维？在这里我也分享一下自己的理解：</p><p>多阅读优秀的代码，多思考本质和原因，多通过实践来检验<br>写出可阅读的、简洁易懂、可维护的代码，应该是程序员在工作中都需要追求的。在实现业务的时候，通过借助模仿优秀的开源实现，学习他人在提高代码效率、逻辑思维、处理高并发等方面是怎么做的。</p><p>学会总结复盘，从中抽取有价值的经验，将成长记录下来<br>复盘的内容，可以是一次线上 bug 的处理过程，可以是一次代码重构优化的过程，也可以是对一个中间件的新认识等等。复盘不是问责也不是甩锅，而是聚焦于好和不好，知其然再知其所以然，同时避免重蹈覆辙。</p><p>不是所有人都愿意直面自己的缺点和不足，我自己最开始也不明白复盘有什么用处，觉得对领导和业务能有交代就行。但随着自己做过的项目多了起来，受到身边优秀同事的影响也在日益增多，我才明白复盘是可以让人迅速成长的不二法宝。</p><p>有意识地站在更高的角度去看待问题，可能会得到不一样的答案<br>作为一线开发我们更多关注的，可能是接口的参数和实现逻辑，数据库字段的设计，中间件的使用，异常的处理等实际编码问题；</p><p>而你的 TeamLeader 可能关注的是项目的高可用，处理高并发的性能，硬件资源的成本，服务挂了怎么降低对业务的影响等；</p><p>部门的总监则可能在考虑这个项目要不要做二期三期？对业务方有什么价值？能带来多少新用户？让谁来负责后续的运营等。</p><h3 id="2-3广度与深度"><a href="#2-3广度与深度" class="headerlink" title="2.3广度与深度"></a>2.3广度与深度</h3><p>我认为广度和深度在每个阶段的侧重点可能有所不同：</p><p>初/中级可以先从广度出发，多见识一些主流技术或者解决方案，这样在面对业务的时候可以更从容地进行设计，也能更清楚自己 CURD 的目的是什么。</p><p>高级/资深可能就要精通某一或者某几方面的通用架构/解决方案了，同时对于负责的业务有深刻的认识，可能也要负责团队的建设，从更广阔的视角去思考问题。</p><p>但其实无论是深度还是广度，都是可以遵循：先掌握基础结构，然后熟悉基本使用，最后输出解决方案。</p><h2 id="三、尽早规划职业"><a href="#三、尽早规划职业" class="headerlink" title="三、尽早规划职业"></a>三、尽早规划职业</h2><p>我是在工作一年半左右慢慢有了对未来进行职业规划的想法，因为时间会向前走，人也会渐渐地成长。对于未来想要什么，可以慢慢给自己多找找方向去尝试。</p><p>尽管我们的工作很可能对于改变这个世界没有多大意义，但还是可以在每天的工作中用自己的方式创造价值。</p><h3 id="3-1市场现状"><a href="#3-1市场现状" class="headerlink" title="3.1市场现状"></a>3.1市场现状</h3><p>首先，最重要的是目前的市场趋于饱和。</p><p>2010-2020 这十年，互联网发展如火如荼，各种公司如雨后春笋般冒出来，那时候招聘需求量大，互联网就业市场一片欣欣向荣。</p><p>而现在没有了当年的辉煌，很多互联网公司业务发展停滞，同时经过前面多年的发展，产品架构已经成熟稳定，不再需要这么多的程序员，势必要进行结构优化，那优化的对象自然是性价比低的人群。</p><p>其次，IT互联网行业高薪的宣传又吸引了一大批年轻人跑步进场，需求变少的情况下人又变多，内卷就这么产生了。高学历的人才多了很多，所谓学历贬值的论调在这几年一直都有出现。</p><h3 id="3-2如何破局"><a href="#3-2如何破局" class="headerlink" title="3.2如何破局"></a>3.2如何破局</h3><p>让我们透过现象看本质：IT互联网行业的特殊性在于产出是可迭代的。这个行业程序员的产出就是软件&amp;代码，而这个东西就是可以不断的迭代的。</p><p>分析了上面的原因，就有针对性了。软件代码这些东西是可迭代的，但有些东西是没法复制和迭代的：像是沟通协调能力、解决问题能力、规划组织能力、管理能力和人脉资源等等。这些其实就是我们经常说的软实力，这些能力才是越久越吃香。</p><p>这些能力不仅可以在日常工作中有意识的积累，也可以通过考取相关的证书来掌握理论知识，比如：软考高项（信息系统项目管理师、系统架构师）、PMP认证、阿里云/华为云高级认证等。</p><p>打开认知的局限，不只着眼于手里掌握的技术，拓展自己职业的综合能力，明白不是只有靠技术才能活下去，才能更好地“破局”。</p><h2 id="四、文章小结"><a href="#四、文章小结" class="headerlink" title="四、文章小结"></a>四、文章小结</h2><p>文章最后，我还有一些想说的。的确，技术逐渐会变得越来越“廉价”，不再是必须要工作多年的大佬才能驾驭的高级东西。</p><p>这里面有个很重要的原因，就是开源的力量。大家可以想一想自己参与的一些项目，用到了多少开源的东西？以一个典型的后端项目为例，可能涉及到了 MySQL、Redis、ElasticSearch、RocketMQ、Nginx、SprintBoot、Jenkins、CI/CD、Docker……</p><p>程序员要做的就是根据业务需求，把上面那一堆组件按照规则合理地堆在一起。一般就是 Nginx 负载均衡，Spring Boot/Cloud 写后端业务逻辑，Redis 做缓存，MySQL、ES、MongoDB 做数据存储，OSS/COS 做云对象存储，RocketMQ/Kafka 做消息队列，最后进行 CI/CD 操作塞到 Docker 里面部署运行。现在绝大多数的功能，开源组件都能提供，再加上现在是云的时代，各种服务都上云了，那么问题就更简单了。</p><p>既然我们身处在这个行业，那么就要做好持续学习的准备，不断打怪升级，锻炼综合能力，做到让经验随着年龄的增长成真正的正比。</p><p>毕竟，<strong>所有平凡的日子加起来，就将汇集成为你的一生。</strong></p><p>编者按：</p><p>原文下<a href="https://home.cnblogs.com/u/sayokun">小夜鲲</a>的评论：</p><blockquote><p>1.拿出甩锅的态度。<br>2.躺平就行不用摆烂。<br>3.还有工作不停的分你头上，就该反思自己是不成了工具人。<br>4.有职业道德对你的薪资没有任何帮助。<br>5.发牢骚和抱怨要分对象，不要跟谁都什么都说，那样只会害了你。<br>6.工作里要看人下菜，搞清楚什么时候该对事什么时候该对人。<br>当然这些都不重要，重要的是精准定位自己，明白自己是什么层级的，不要瞎操心，不该自己管的事永远不要碰，哪怕下一秒它就会导致系统崩溃，一旦你碰了以后有问题只会找最后一个修改的人背锅。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>职业发展</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业发展</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>猫站在滑滑梯上（文摘）</title>
    <link href="/fun/zt-cat-huati/"/>
    <url>/fun/zt-cat-huati/</url>
    
    <content type="html"><![CDATA[<div class="note note-quote">            <p>来源：互联网</p>          </div><p>猫站在滑滑梯上，有点为难。</p><p>滑滑梯是小孩玩的，可猫既不是小孩，也不是小猫了。</p><p>要说是大人，猫也没有什么正经工作，要说是大猫，又没有什么看家本领。</p><p>一个中猫吧，猫想，我是一个中猫。</p><p>中猫就是这样的，爬上来，没站一会，就要准备往下滑了。</p><p><img src="image.png" alt="猫站在滑滑梯上"></p>]]></content>
    
    
    <categories>
      
      <category>散文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>散文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>外婆在拔花生，外婆种的花生不多（抖音）</title>
    <link href="/fun/zt-douyin-waipodehuasheng/"/>
    <url>/fun/zt-douyin-waipodehuasheng/</url>
    
    <content type="html"><![CDATA[<div class="note note-quote">            <p>来源：抖音</p>          </div><p>外婆在拔花生，外婆种的花生不多。</p><p>也不是花生不多，是外婆的地不多。</p><p>说是外婆的地，一直以来，外婆都没有地，别人瞧不上丢掉的荒芜的边边角角，就是外婆的地。</p><p>有时候外婆辛辛苦苦除草、松土，好不容易整理出来一小块，别人又会占回去，也不能说占，因为本来就是人家的，他们本来瞧不上那些边边角角，可外婆整理了、像样了，他们又瞧上了。</p><p>从来都是如此，一些不起眼的东西，一旦别人瞧上，就是好东西。</p><p>从我记事起，外婆就是到处平地，好不容易平出来的一小片地，别人说收就收回去，外婆似乎也习惯了，这里不行，就去别处。</p><p>外婆就是用这些别人瞧不上丢掉的边边角角，养活了我父母瞧不上丢掉的我。</p>]]></content>
    
    
    <categories>
      
      <category>散文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>散文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>日寄（2024-01-11，Anlin，知乎）</title>
    <link href="/fun/zt-zhihu-riji/riji-2024-1-11/"/>
    <url>/fun/zt-zhihu-riji/riji-2024-1-11/</url>
    
    <content type="html"><![CDATA[<div class="note note-quote">            <p>作者：Anlin<br>链接：<a href="https://zhuanlan.zhihu.com/p/677326021">https://zhuanlan.zhihu.com/p/677326021</a><br>来源：知乎</p>          </div><p>被裁了。</p><p>接到通知书的那一刻，没有想象中的激动和喜悦，</p><p>更多的，还是一种水到渠成之后，如释重负的平静，</p><p>一直以来的拼搏和汗水，在这一刻终于开花结果，</p><p>星光不负赶路人，时光不负有心人，</p><p>但行好事，莫问前程，一切都有最好的安排。</p><p>前面这段是两年前准备的考研上岸文案，一直没机会发来着。</p><p>早上被闹钟吵醒，又工作日，这鬼日子什么时候是个头，</p><p>朋友发消息问我被裁了没，</p><p>我说不道啊，没听说啊，借你吉言吧，</p><p>真借到了，</p><p>到公司就被叫进了会议室，投影开着视频会议，领导们一些在墙上，一些在桌子上，很正式。</p><p>鬼日子这就到头了，</p><p>这一定就是念念不忘必有回响，</p><p>问朋友怎么知道裁员消息的，</p><p>他说这几天好几个技术交流群，很邪门，居然开始聊技术了。</p><p>有个很经典的问题</p><p>“如果唐僧的取经团队要裁掉一个人，应该裁谁“，</p><p>小时候总是和朋友吵得不可开交，</p><p>现在懂了，</p><p>发个招聘启事，朝廷项目，一把手重点关注，填补国内空白领域，500年资深技术员牵头，团队内有师徒机制，结项全员给大唐天庭双编制，</p><p>以拿不动金箍棒无法胜任工作为由开掉，哪有指标下来直接砍骨干的。</p><p>以为会失眠，</p><p>毕竟吃了大半年褪黑素，</p><p>没想到睡了半年来最安稳的一觉。</p><p>原来人并不会像玻璃一样“bulingbuling”脆脆地碎掉，</p><p>它更类似于锈蚀、腐烂、低温烫伤，</p><p>温和地、毫无痛楚地，越来越麻木，越来越迟钝，</p><p>直到某一天，再也说不出“我到了一百岁还可爱”这种话。</p><p>不知道怎么回事关注了个40多的阿姨，每天点开就看到她发读书笔记人生感悟，</p><p>没什么共同话题，</p><p>她平常看《鬼谷子的心理学》《王阳明的人生哲理》，我比较爱看斗破苍穹之什么什么的，</p><p>她打算下个周天出门，因为天气预报说是晴天，</p><p>她在要不要涂口红这件事上纠结了一个星期，</p><p>她说这管口红买来还没涂过，</p><p>最后一天晚上，她很正式地决定要涂口红，给自己打气，句子后面全是感叹号。</p><p>所有人都会老的，</p><p>“春风若有怜花意，可否许我再少年“这样的诗句，只有少年念出来才意气风发。</p><p>晚上不用加班，</p><p>虽然不知道心里到底什么感觉，但打算先吃顿烧烤，这玩意好，开心不开心都适合吃，</p><p>楼下有家烧烤店，</p><p>好吃，但很脏，在日本能拍好几集纪录片的那种，</p><p>有天白天路过，看到在大扫除，黑黄黑黄一层一层往下冲，看着特舒服，</p><p>当天晚上立马点了一大把回家，</p><p>没内味了。</p><p>看评论有大哥说我一定在知乎赚了很多钱吧，</p><p>我寻思有道理啊，</p><p>激动地混身颤抖，</p><p>心想难道不知不觉间我已经财富自由了？</p><p><img src="image.png" alt="知乎"></p><p>啊没事了，要手动开的，</p><p>15.15是回了一个值乎来的，当时看收到的问题没什么资格回答，纯打赏拿着受之有愧，索性关了就。</p><p>后来才知道17块太贵了，还好也没收多少。</p><p>虽说知识付费的精髓就在于，不买超过经济能力的课就觉得没用，</p><p>但还是算了。</p><p>翻了翻之前的日寄，真羡慕，想不明白怎么写出来的，</p><p>我妈说，你试试能不能养活自己吧，能的话随你，</p><p>于是我开始按能养活自己的标准打工，才发现，为生活奔波的时候，没精力和大爷聊天，也没心情抬头看朝霞日落，连电梯上升的加速度都压得人腿软。</p>]]></content>
    
    
    <categories>
      
      <category>职业发展</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业发展</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>思考 | 公司活力（芦半山｜稀土掘金）</title>
    <link href="/Career/zt-juejin-company-dynamism/"/>
    <url>/Career/zt-juejin-company-dynamism/</url>
    
    <content type="html"><![CDATA[<div class="note note-quote">            <p>作者：芦半山<br>链接：<a href="https://juejin.cn/post/7239617977364168763">https://juejin.cn/post/7239617977364168763</a><br>来源：稀土掘金</p>          </div><p>经常看到一些互联网公司，尤其是创业公司，宣传自己的年轻员工占比高，公司充满活力。久而久之，大家都开始习惯这套说辞，认为一家公司有没有活力的标志就是年轻人多不多。可是当我们说一家公司充满活力时，到底在说什么？</p><p>我们是在说这家公司员工的体力充沛么？肯定不是，毕竟我们不用比拼打螺丝的速度，也不用比拼抡大锤的力度。再说，抡大锤，小年轻们不一定比得过中年大叔呢。</p><p>我们是在说这家公司员工满面红光、笑容可掬么？那也不是，毕竟要论这两项，高速收费口的工作人员早把各位杀的片甲不留。</p><p>我们是在说这家公司盈利颇丰么？那更不是，毕竟谁也不会把中烟草和活力二字扯上关系。可是若论赚钱能力，互联网的各位在中烟草面前都是弟弟。</p><p>那我们到底在说什么？</p><p>想必各位都看到今年上半年AI圈的迅猛增势，这些公司中有创业公司，譬如OpenAI和Midjourney，也有巨头公司，譬如Nvidia和Google。它们都可以称得上充满活力，原因并非它们拥有年轻的员工，而是它们一直做着创新突破的工作，是真正把大家带入更好未来的公司。</p><p>所以当我们说一家公司充满活力时，并不是想说它的员工充满活力，而是它的产品、它的创新工作充满活力。</p><p>事实上，Nvidia和Google这类公司中，大龄工程师并不少，而且多数都是研发的主力。举个例子，在我接触过的Google工程师中(Runtime和ART团队居多)，多数都拥有10年以上的工作经历。那这是否说明大龄工程师更具优势？难道国内的35岁理论要失效了？</p><p>问题的关键其实不在于工程师的年纪，而是工程师是否优秀。一个优秀的工程师25岁时表现优秀，等到50岁时就会变得卓越。而一个平庸的工程师，不论25岁还是50岁，都不会有多少突破性的工作。这就好比，不是老人坏了，而是坏人老了。你非要拿着年龄去衡量工程师的水平，多半会徒劳无功。</p><p>那这么说，年龄不是标准？其实年龄也是标准。因为优秀的工程师终归是少数，刚工作的时候泥沙俱下，分不清好坏。工作愈久，大浪淘沙的效应就愈明显。最终，那些少数优秀的大龄工程师都身居了要位，而剩下的那些，则频繁地活跃在求职市场。</p><p>国内职场令人吊诡的一点是，优秀的人才最终都走向了管理的位置，或者说，如果你走不到管理的位置，就不会被认定为优秀。这在技术领域其实是有严重问题的。专业人才得不到足够的重视和认可，站在背后指手画脚的人却被捧上了天，搞得大家都去研究PPT，学习向上管理，却忽略了创新不同于打仗，它主要来自于直接的实践，而非稳坐后方的指挥。</p><p>不过现实的残酷在于，创新只属于一小撮人。大多数的工作谈不上创新，只是时间和精力的耗散。不然为什么会有“人力资源”这个词？当把创新或者人的主观能动性从工作中剥离后，人便是资源，和矿产无异，而管理者的高贵就体现在如何支配这些资源。</p><p>我希望有一天，50岁的人也可以写代码，写出很漂亮的代码。毕竟，我们都有50岁的一天。  </p>]]></content>
    
    
    <categories>
      
      <category>职业发展</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业发展</tag>
      
      <tag>掘金</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>技术并不一定比其他高级（通往自由之路｜稀土掘金）</title>
    <link href="/Career/zt-juejin-tech-is-not-so-high-level/"/>
    <url>/Career/zt-juejin-tech-is-not-so-high-level/</url>
    
    <content type="html"><![CDATA[<div class="note note-quote">            <p>作者：通往自由之路<br>链接：<a href="https://juejin.cn/post/7304598711991795750">https://juejin.cn/post/7304598711991795750</a><br>来源：稀土掘金</p>          </div><p>这里的技术可以是计算机或者别的什么技术。当然首先指的是开发技术。</p><p>很长一段时间里，就我个人有一种天然的技术高于其他的感觉，虽未明示，但骨子里有一种谦虚的傲慢。认为开发高于产品、设计、测试等。</p><p>不知道其他人是否有过这种想法。或者我觉得那种典型的技术人的思维，要么思维不够开放，要么就是一种谦虚的傲慢。</p><p>这种傲慢最可怕的是因为漠视掉其它的价值，导致技术人的格局不够。格局不够会看不到更大世界的运行规律，导致无法做出更加正确的决策。有一副著名的对联</p><p>能攻心则反侧自消,自古知兵非好战</p><p>不审势即宽严皆误,后来治蜀要深思</p><p>我觉得这是对格局不够后果最直接准确的描述：宽严皆误。说下我是怎么想到技术并不一定比其他高级的？</p><p>前几天群里同组的同学@我让我改一篇文章，我才知道公司开始举办一年一度的一年一词活动，开始面向全体征稿。第一年的时候我参与了，但没有选中。第二年没有参与。</p><p>我看了下同组同学那篇文章，觉得不怎么滴啊，也是这激起我的求胜心，决定自己写一篇，今年再参加一次。于是那天下午我就写完了初稿。初稿的题目是造轮子，第一句</p><blockquote><p>一般来说说造轮子的都是程序员，因为开发从某个意义上来讲就是在重复造轮子，亦如太阳底下没有新鲜事，也亦如任何历史都是当代史。</p></blockquote><p>为了能够被选上，我认真又做了几次修改，重读了几次。我有点福至心灵的发现我在开发上犯了一个错误，就是我似乎一直认为技术才是最重要的，不管是有意无意的，这是事实。但是开发从某个意义上来讲就是在重复造轮子，正如太阳底下没有新鲜事，也亦如任何历史都是当代史，技术和其他一样，也是重复的单元。</p><p>要想尽快搞清楚技术，只要找到其中代表性的重复单元就可以了。而实际也早就有人总结了这些单元，比如功能单元的代表各种ui组件库，业务单元的代表往往是对功能单元的再加工。好比功能单元是原型机，而业务单元是定制化。</p><p>前几天也看到一篇文章的题目《不过是享受了互联网的十年红利期而已》。遂想到行业高速发展时期，技术实现是第一位的；但行业进入饱和期，产品、运营应该才是创造利润的关键。正如计算机底层技术开发人员，过了计算机技术爆发的年代，反倒不如业务开发赚的多。</p><p>这一切的一切不过是特定时期的表现。技术并不一定比其他高级，现在就是技术不再处于第一优先级的时刻。</p>]]></content>
    
    
    <categories>
      
      <category>职业发展</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业发展</tag>
      
      <tag>掘金</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《纳瓦尔宝典》读书笔记</title>
    <link href="/reading/SocialScience/The-Almanack-of-Naval-Ravikant-note/"/>
    <url>/reading/SocialScience/The-Almanack-of-Naval-Ravikant-note/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><image src="cover-Naval.jpg" style="height:260px"><div class="note note-info">            <p>《纳瓦尔宝典》</p><p>作者：埃里克·乔根森</p><p>这本书是对纳瓦尔的介绍，包含了他探索最深入的两个主题：财富和幸福。</p>          </div><h2 id="摘抄与笔记"><a href="#摘抄与笔记" class="headerlink" title="摘抄与笔记"></a>摘抄与笔记</h2><h3 id="第一章-积累财富"><a href="#第一章-积累财富" class="headerlink" title="第一章 积累财富"></a>第一章 积累财富</h3><p>赚钱跟工作的努力程度没什么必然联系。</p><p>如果还不知道自己应该做什么，那么你先要弄清楚这个问题。在这之前，不要盲目发力。</p><p>追求财富，而不是金钱或地位。财富是指在你睡觉时仍能为你赚钱的资产。金钱是我们转换时间和财富的方式。地位是你在社会等级体系中所处的位置。</p><p>获得财富的一个途径，就是为社会提供其有需求但无从获得的东西，并实现规模化。</p><p>选择一个有长期发展前景的行业，找到可以长期合作的人。</p><p>选择聪明过人、精力充沛的商业伙伴，但更重要的是，他们要正直诚信。</p><p>不要跟愤世嫉俗和消极悲观的人合作。他们的预言会自我实现。</p><p>学会销售，学会构建，两技傍身，势不可当。</p><p>专长指的是无法通过培训获得的知识。如果社会可以培训你，那么社会也可以培训他人来取代你。</p><p>要想有所专长，就要追求真正的兴趣和热爱，而不是盲目追逐热点。</p><p>累积专长的过程，对你而言就像玩耍，对他人来说则很吃力。</p><p>专长往往具有高度的技术性或创造性，不能被外包或自动化。</p><p>培养责任感，勇于以个人名义承担商业风险。社会将根据责任大小、股权多少和杠杆效应回报你。</p><p>要想获得财富，就必须充分利用杠杆效应。商业杠杆来自资本、劳动力和复制边际成本为零的产品（代码和媒体）。</p><p>劳动力杠杆就是让别人为你工作。这是最古老、争夺最激烈的一种杠杆。拥有劳动力杠杆会让你的父母觉得你很了不起，但不要过度追逐劳动力杠杆。</p><p>代码和媒体是不需要许可就能使用的杠杆。这两个杠杆是新富阶层背后的杠杆。你可以创建软件和媒体，让它们在你睡觉时为你工作。</p><p>如果不会写代码，那就出书、写博客、做视频、录播客。</p><blockquote><p>即 自媒体（仅供参考）</p></blockquote><p>学习微观经济学、博弈论、心理学、说服术、伦理学、数学和计算机。</p><p>读比听快，做比看快。</p><p>设定一个大胆的个人时薪，并严格执行。如果解决一个问题节省的成本低于时薪，那就忽略问题；如果外包一项任务的成本低于时薪，那就选择外包。</p><p>工作时要拼尽全力，毫无保留。不过，共事的人和工作的内容比努力程度更重要。</p><p>世界上没有快速致富的教程。即使有，那也只是提供教程的人想从你身上赚钱。</p><p>运用专长，发挥杠杆效应，最终你会得到自己应得的。</p><p>总结：把自己产品化。</p><blockquote><p>个人ip？打造自己的产品？<br>或者做出自己的产品，让产品持续为你赚钱。</p></blockquote><p>“自己”具有独特性，“产品化”是发挥杠杆效应；“自己”具有责任感，“产品化”需要专长。“自己”其实也具有专长。因此，这两个重点就可以概括上述所有的理念。</p><p>如果想要实现致富的长期目标，你就应该问问自己：“这是我真正想要的东西吗？我的规划目标是我真正想要的吗？”得到肯定的答案后，再问问自己：“我实现产品化了吗？我实现规模化了吗？我选择规模化的方式是劳动力、资本，还是代码或媒体？”</p><p>我能提供什么独特的价值？</p><p>金钱是我们转移财富的方式。金钱是社会的信用符号，具有调用别人时间的能力。</p><blockquote><p>金钱是权力的一种</p></blockquote><p>所以，我对财富的定义是在睡觉时也能带来收入的企业和资产</p><p>销售技能是一种专长。</p><p>专长无法被教授，但可以被学习。</p><p>关于个人天赋和专长，举例如下：· 销售技巧。· 音乐天赋：学习任何乐器都不费力。· 专注力强：容易沉浸在一个事物中，并很快记住相关知识点。· 热爱科幻：喜欢读科幻小说，吸收新知识的能力特别强。· 擅长游戏：对博弈论了解得透彻深刻。· 喜欢八卦：深入挖掘朋友的社交网络，将来可能成为有所建树的记者。</p><p>社会、商业和金钱是技术的下游产物，而技术本身又是科学的下游产物。应用科学是推动人类社会发展的引擎。由此得出的推论是，应用科学家是世界上最有权威的人。这一点在未来几年会更加突出。</p><p>只要在网上进行独特的自我表达，你就有机会传播快乐，累积财富，打造产品，创立企业。</p><p>致富最重要的技能是成为终身学习者，无论想学什么，你都得找到途径和方法。</p><p>如今，在9到12个月内成为一个全新领域的专家比在很久以前选择了“正确的”专业要重要得多。只有掌握好基础知识，才能不忌惮任何书籍。如果在图书馆读到一本自己无法理解的书，那么你先要了解读懂这本书需要哪些基础知识，打好基础后再深入研究。基础是极为重要的。</p><p>投资交友，着眼长远</p><p>出发点并不重要，行为本身才重要。因此，遵守道德标准并非易事。</p><blockquote><p>论迹不论心</p></blockquote><p>99%的努力终将白费。</p><blockquote><p>即使白费，也还是要投入</p></blockquote><p>显然，没有一种努力是完全白费的，因为我们总能在努力的过程中学到一些东西。任何经历都可以成为学习的机会。举例来说，回顾求学生涯，当时写的论文、读的书、做的练习，99%不适用于现实社会。学到的一些地理和历史知识你从未派上用场，学的一门外语你早已不再使用，一些数学知识你也早已全然忘记。</p><p>努力找到不会被浪费的1%。这1%对你是有意义的，值得你用余生去追求。一旦找到，你就要心无旁骛，全力以赴。</p><p>勇于以个人名义承担商业风险。社会将根据责任、股权和杠杆效应回报你。</p><p>要努力工作，直到有能力拥有企业股权。你可以买入企业的股票，成为小股东，也可以创办一家属于自己的企业。总而言之，要想方设法拥有企业的所有权，这一点真的非常重要。</p><p>如果一件事物一开始让你兴致盎然，后来又让你觉得索然无味，那么它只是暂时分散了你的注意力，并不是你心智上真正的好奇所在。请继续寻找。</p><p>无论做什么事情，我都以事情本身为目标。这也是艺术创作的一个鲜明特征。无论是创业、健身还是恋爱、交友，我始终都认为生命的意义在于专注于事情本身，体验过程，享受当下。神奇的是，当专注于事情本身时，你反而能做得更好。即使是赚钱，你也能成为赚得最多的那个。</p><blockquote><p>就当做是真的吧</p></blockquote><p>对一件事情的欲望越小，顾虑就越少，执念就越少，反而越会顺其自然，遵循内心。你会以自己擅长的方式，始终不渝地做下去，工作质量也会因此提高。</p><p>第一种是劳动力杠杆，也就是让别人给你打工。</p><p>资本是第二种相对较好的杠杆形式。资本杠杆就是用钱来扩大决策的影响力。</p><p>最后一种杠杆是最新出现的，也是普通人最触手可及的。这种杠杆就是“复制边际成本为零的产品”。</p><p>靠出租自己的时间是永远无法致富的。</p><p>无论处于人生的哪个阶段，努力的目标都是不断提高自己的独立性，而不是升职加薪。拥有独立性，为自己独特的产出成果负责（而不是像打工一样为投入的时间负责），这才是最理想的状态</p><p>想加入一家伟大的科技公司，销售技能和构建技能必备其一。如果二者都不具备，那就去学习。</p><p>我认为每个人都应该立志掌握某些领域的专业知识，并以此赚取经济回报。</p><p>给自己的时间设定价格，用时薪计算时间价值。如果用花钱的方式节省的时间价值更高，那就花钱，不要犹豫。要想真的赚到钱，先要相信你自己很值钱。</p><p>这世上的游戏不外乎两种。第一种是金钱游戏。金钱不能解决所有问题，但可以解决所有和金钱有关的问题。大家都明白这一点，所以每个人都想赚钱。但与此同时，许多人内心深处觉得自己是赚不到钱的，所以，他们不喜欢看到创造财富的故事。他们会攻击整个商业体系，宣称“赚钱是邪恶的，不应该赚钱”。但其实他们在玩第二种游戏，这种游戏叫地位游戏。他们之所以说“我不需要钱，我不想要钱”，是因为他们想占领高地，让别人高看一眼。地位就是一个人在社会等级中的位置。</p><p>地位游戏会一直存在，这是无法回避的。当你努力创造财富时，你可能会受到别人的攻击。这时，你需要意识到，大多数时候，他们是在试图牺牲你以提高自己的地位。他们玩的是另一个游戏，是一个不可取的游戏，因为它是一个零和游戏，而不是一个正和游戏。</p><p>人生早期有三个重大决定：在哪里生活，和谁在一起，从事什么职业。</p><p>找到自己擅长的领域，然后用自己的技能去帮助他人：提供免费的产品或服务，主动向世界传递善意。</p><p>赚钱的目的是解决财务问题，满足物质需求。我认为，摆脱金钱贪念最好的办法就是，赚了钱之后不要升级自己的生活方式。赚到钱的人往往会自然而然地提高生活水准。假设你一次性赚到一大笔钱，而不是靠日积月累。此时你依然保持着原有的生活方式，还没来得及升级，你的金钱就会远远超出你的实际需求和欲望，这反而让你达到一种财务自由的状态。</p><p>我把自由看得高于一切。我说的自由是多种多样的：想做什么就做什么的自由，不想做什么就不去做的自由，不受自我情绪或外界影响的自由，等等。自由是我最珍视的价值。</p><p>获得好运的方法：</p><ul><li>希望好运不期而至。</li><li>不停地折腾，直到撞上大运。</li><li>做好心理准备，对别人错过的机会保持敏感。</li><li>把你所做的事情做到极致。精益求精，直到名副其实。让机会自动找到你，让运气成为必然。</li></ul><p>“在一个长线游戏中，似乎每个人都在让彼此变得富有。而在一个短线游戏中，似乎每个人都在让自己变得富有。”</p><p>我认为商业社交纯属浪费时间。</p><p>“做一个创造者，创造出人们想要的有趣的东西。展示你的技能，练习你的技能，最终会有合适的人找到你。”</p><p>如果一个人大谈特谈自己有多诚实，那么他很可能是不诚实的。这只是我学到的一个小小的警示信号。当一个人不断宣扬自己的价值观，或者自我吹嘘时，那就意味着他在掩饰什么。</p><p>成功需要时间。即使万事俱备——你已经把成功所需的各个要素收入囊中，需要投入的时间也具有不确定性。而如果一直在掐算时间，在成功真正到来之前，你的耐心就会被消磨殆尽。</p><p>“但行好事，莫问前程”不容易，不仅不容易，而且难于上青天。“只求付出，不求回报”是人生中最难做到的一件事，但也是让人收获最大的一件事。</p><p>人生真正的履历，其实就是一生所承受痛苦的集合。</p><p>在物质世界里，金钱不能给人带来快乐，不能解决人的健康问题，不能让所有家庭变得美满和睦，不能让人免受情绪波动的困扰。但金钱可以买到自由，可以解决许多外在的问题。所以，赚钱是一个合情合理的奋斗目标。</p><h3 id="第二章-增强判断力"><a href="#第二章-增强判断力" class="headerlink" title="第二章 增强判断力"></a>第二章 增强判断力</h3><p>我对智慧的定义是“知道个人行为的长期后果”，用于解决外部问题的智慧其实就是判断力。</p><p>时间的投入是必需的，但判断力更重要。在前进的过程中，方向比速度更重要，特别是运用了杠杆以后。</p><p>要直面现实，就要放下自我，消除自我意识，忘记自我判断，平复自我情绪。</p><p>阻碍我们看清现实的最大因素就是我们对现实“应有的样子”有先入为主的印象。<br>痛苦时刻的一个定义是：当你看到事物的真面目不是你本来想要的样子时，你是痛苦的。</p><p>深知，越是渴望以某种特定的方式解决问题，我就越不可能看清事实</p><p>感受跟事实是两码事。感受只是自我对事实的部分估计。</p><p>悠闲的大脑才能产生伟大的创意</p><p>究其根本，人类的所有发明和成就都是为了解决交配权的分配问题。<br>人生的很多问题都可以从进化论、热力学、信息论和复杂性理论中找到解释和预测。</p><p>一条简单的人生经验：如果在一个艰难的决定上意见不统一，你就应该选择短期内更痛苦的道路。</p><p>每天花一个小时阅读科学、数学和哲学类书籍，7年内，你就可能跻身少数的成功人士之列。</p><p>不要比谁读书更快。书越好，你越要慢慢阅读、慢慢吸收。</p><h3 id="第三章-学习幸福"><a href="#第三章-学习幸福" class="headerlink" title="第三章 学习幸福"></a>第三章 学习幸福</h3><p>对我来说，幸福的含义主要是没有痛苦，没有欲望，不沉溺于对未来或过去的思考，真正拥抱当下，拥抱现状，拥抱现实的一切</p><p>事情总是一件压着一件，处理完这件，下一件会接踵而至，永远有做不完的事，所以焦虑感才会普遍存在。</p><p>工作时，和比自己更成功的人在一起。玩耍时，和比自己更快乐的人在一起。</p><p>如果不想跟一个人共事一生，那就一天都不要和他共事。</p><p>爱生活，无暇理会不快乐的人</p><h3 id="第四章-自我救赎"><a href="#第四章-自我救赎" class="headerlink" title="第四章 自我救赎"></a>第四章 自我救赎</h3><p>我生活中的第一要务是我的身体健康。对我来说，健康的重要性高于幸福，高于家庭，高于工作。我的身体健康是一切的起点，排在第一位，紧随其后的是我的心理健康和精神健康。接着是家人的健康和幸福。在确保了这些之后，我就可以按照自己的意志在这个世界上自由活动了。</p><p>最了不起的超能力就是改变自我的能力</p><p>我犯过很多错。面对错误，我都用同样的方式进行反思和总结。这些错误都是那个年龄段难以避免的，当时并不能觉察，只有事后才会显现出来。为了走出错误的阴影，我扪心自问：“当30岁时，你会给20岁的自己什么建议？当40岁时，你会给30岁的自己什么建议？”（如果年纪更小，你可以每5年为一个时间段这样问自己。）坐下来认真思考自己过去每一年的经历和感受：“2007年，我在做什么，我感觉怎么样？2008年，我在做什么，我感觉怎么样？2009年，我在做什么，我感觉怎么样？”</p><p>如果真的想做一件事，有一个方法就是广而告之，让身边的人都知道。比如，你想戒烟，你可以对你认识的每一个人说：“我戒烟了，我做到了。我向你保证。”</p><blockquote><p>自我实现。或者对别人说“我不抽烟”</p></blockquote><p>有想法就直接采取行动，就是这么简单。但大多数人都会说自己还没准备好，所以也就不会对朋友广而告之了。</p><p>如果有什么事情是你以后想做的，现在就去做，人生没有“以后”。</p><p>第一条原则是阅读，广泛地阅读。阅读面要广，不要局限于社会认可的书，更不要局限于我推荐的书。要为了阅读而阅读，培养对阅读的热爱。即使喜欢读言情小说、侦探书或漫画书也没关系，不存在所谓的垃圾。开卷有益，尽管读吧。假以时日，你会找到那些你应该读和喜欢读的东西。第二条原则是，掌握与阅读技巧相关的数学和说服技能。这两种技能有助于你在现实世界里活得游刃有余、畅行无阻。</p><p>我压根就不评估自己的效率。我不赞成自我评估，我觉得这是一种自我约束、自我惩罚和自我冲突。</p><p>如果他人因对你抱有期待而受伤，那就是他们的问题。如果他们和你有约在先，那就是你的问题。但如果他们只是单方面对你有所期待，那就完全是他们的问题，与你毫无关系。他们会对生活有各种各样的期待，越早打破他们对你的期待越好。</p><p>珍惜自己的时间。你唯一真正拥有的就是时间。时间比金钱更重要，比朋友更重要，比什么都重要。你的时间就是你的一切。不要浪费自己的时间。珍惜时间并不意味着不能放松下来享受生活。只要是做自己想做的事情，你就不是在浪费时间。但是，如果没有把时间花在想做的事情上，既没有赚到钱，也没有学到东西，你就要问问自己到底在瞎忙什么。不要花自己的时间去取悦别人。别人快不快乐是他们的问题，不是你的问题。你快乐了，别人也会快乐。你快乐了，别人会问你是如何快乐起来的，他们会从中学到点儿什么，但是你没有责任让别人快乐。</p><p>忙碌的思绪会加速主观时间的流逝。</p>]]></content>
    
    
    <categories>
      
      <category>reading</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>知乎上有意思的回答 - 汇总</title>
    <link href="/fun/zt-zhihu-summary/"/>
    <url>/fun/zt-zhihu-summary/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="/fun/zt-zhihu-1/" title="知乎有趣的回答1">知乎有趣的回答1 - 不劳而获 | 中国空间站为什么要叫外国人来 | 邻居的猫 | 导师的话1 | 百度 gpt</a></li><li><a href="/fun/zt-zhihu-2/" title="知乎有趣的回答2">知乎有趣的回答2 - 烂尾楼没人管吗？ | 活下去的理由</a></li><li><a href="/fun/zt-zhihu-3/" title="知乎的回答截图3 - 自律">知乎的回答截图3 - 为什么想自律却自律不起来</a></li><li><a href="/fun/zt-zhihu-4/" title="知乎有趣的回答4 - 创业段子">知乎有趣的回答4 - 创业段子</a></li><li><a href="/fun/zt-zhihu-career-civil-1/" title="知乎职场回答 - 体制内1">知乎职场回答 - 体制内1</a></li><li><a href="/fun/zt-zhihu-career-job-1/" title="知乎职场回答1">知乎职场回答1</a></li><li><a href="/fun/zt-zhihu-life-health-1/" title="知乎回答 - 生活与健康1">知乎回答 - 生活与健康1</a></li><li><a href="/fun/zt-zhihu-why-people-said-we-need-to-study-hard/" title="知乎-为什么所有人都在告诉我好好学习？">知乎回答 - 为什么所有人都在告诉我好好学习？</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>fun</category>
      
    </categories>
    
    
    <tags>
      
      <tag>知乎</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于ENVI（.hdr+.img）、.mat、.tif的一些理解</title>
    <link href="/ENVI/note-ENVI-hdr-img-mat-tif/"/>
    <url>/ENVI/note-ENVI-hdr-img-mat-tif/</url>
    
    <content type="html"><![CDATA[<h1 id="关于ENVI（-hdr-img）、-mat、-tif的一些理解"><a href="#关于ENVI（-hdr-img）、-mat、-tif的一些理解" class="headerlink" title="关于ENVI（.hdr+.img）、.mat、.tif的一些理解"></a>关于ENVI（.hdr+.img）、.mat、.tif的一些理解</h1><div class="note note-info">            <p>原文作者：Akari00000<br>原文链接：<a href="https://blog.csdn.net/zx74196870/article/details/130213171">https://blog.csdn.net/zx74196870/article/details/130213171</a></p>          </div><p>书接上篇博客<a href="https://blog.csdn.net/zx74196870/article/details/130160795">c++ envi（.hdr+.img）图像转换成tiff格式 纯c++</a><br>这是一些关于这几个格式的一些探索研究，萌新的探索之旅</p><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>研究这几个格式的初衷是为了解决读的问题，这个时期的我完全不懂格式是什么意思。</p><p>通过mulitbanread（）函数，我可以实现MATLAB读写ENVI，把ENVI转换成.mat，我的.mat是一个三维矩阵，我能不能看到mat是什么样的数据组成呢？</p><p>说到底我只知道ENVI是.hdr+.img，hdr这么小，应该是放不下数据了，如果img装了数据，是怎么装的呢？</p><p>我是否有一个手段来验证multibandread（）转换的.mat正确与否？此时的我还不会使用二进制阅读器</p><p>此时我的目标是用c++调用multibandread（），所以我要通过.mat来研究.img，我要知道</p><p><img src="1.png" alt="函数的形参怎么填"><br>函数的形参怎么填</p><h2 id="对-mat和ENVI的探索"><a href="#对-mat和ENVI的探索" class="headerlink" title="对.mat和ENVI的探索"></a>对.mat和ENVI的探索</h2><p>HDR<br><img src="2.png" alt="在这里插入图片描述"></p><p>ENVI参数是：<br>行：1387<br>列：1829<br>波段数：20<br>数据字节数：2<br>数据存储格式：BIP</p><p>BIP是个啥玩意呢，我一开始也是懵逼的，网上看了很多文档，只看文字我压根看不懂。好在找到一个大佬的文章，有图！<a href="https://blog.csdn.net/m0_46387817/article/details/108467947">遥感图像通用数据格式（BSQ\BIL\BIP）的理解</a>，这里我直接截图关键部分<br><img src="3.png" alt="在这里插入图片描述"><br>通过阅读ENVI图像的文档ANALYZE7.5得知，.img存储的是简单的数据（2字节）</p><p>那我的.img的存储顺序是什么呢，以数学上的二维矩阵举例，如下图</p><p><img src="4.png" alt="在这里插入图片描述"><br>把上图想象成一个由1829个“小矩阵”拼成的大矩阵</p><p>我们知道，无论几位矩阵，在内存里的存储都是连续存储，通过c++遍历输出.img，得知.img存储的短整型数据的每个数字大小，5000~20000的数字（也可以通过二进制阅读器查看）。</p><p>那mat做了什么呢？怎么转换我的数据块的？</p><p>multibanread（）转换<br><img src="5.png" alt="在这里插入图片描述"><br>结果<br><img src="6.png" alt="在这里插入图片描述"><br>无法显示，数据量太大<br><img src="7.png" alt="在这里插入图片描述"><br>load（），输出1第一行<br><img src="8.png" alt="在这里插入图片描述"></p><p>结果可知，mat是个三维数组（废话<br><img src="9.png" alt="在这里插入图片描述"><br>mat行：1829<br>mat列：1387<br>mat波段数：20<br>按照mat的理解应该是 1829 （行）<em> （1387 </em> 20）（列）<br><img src="10.png" alt="在这里插入图片描述"><br>matlab的第一行有27740个元素，27740 =  1387 * 20</p><p>mat数据排布，20个“小矩阵”拼成的“大矩阵”<br><img src="11.png" alt="在这里插入图片描述"><br>与.img数据排布<br>对比<img src="12.png" alt="在这里插入图片描述"></p><p>然后发现个严肃的问题，我TM img不是这么排的啊？.mat是怎么存储我的每一个数据的呢？27740 =  1387 <em> 20，20我可以理解为是20个波段，1387是img的1387行，这时候我做出了一个假设，有没有可能，.mat是在按波段数存储呢？每张图片是1829</em>1387，存储了20个波段。这样的存储排布，就是上图的“20张图”。</p><p>我现在需要通过我的.img，得到20张（1829<em>1387）的图像。img的数据源是1829张（1387</em>20）图像，把每个数据块（小矩阵）想象成一个数据平面。接下来，我会做出一个“错误”的想象，方便理解，假设数据在内存空间里可以做到立体存储，这个三维数组就可以想象成一个长方体。假设我把每个数据平面叠在一起，就会得到个“立体存储空间”，这样就可以拼凑出一个一个棱长是1829,1387,20的长方体了<br><img src="13.png" alt="在这里插入图片描述"></p><p>沿着左侧面“切”一刀，正好可以“切”20刀，第一个侧面（小矩阵）如图<br><img src="14.png" alt="在这里插入图片描述"><br>长1387，宽1829，这不是很眼熟了呢？<br>把每个侧面拼在一起（20个小矩阵拼在一起）<br>得到一个宽1829，长1387*20的“大矩阵”数据</p><p><img src="15.png" alt="在这里插入图片描述"><br>与.img的数据排布进行对比</p><p><img src="16.png" alt="在这里插入图片描述"></p><p>根据这个假设得到一个假定数据排列顺序，假定结论：.mat把.img的矩阵数据按照波段存储。接下来就是验证.mat是不是把.img的数据这么存储的</p><p>用c++和matlab，索引相同坐标下的5个数据，<br>代码如图<br>c++</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>FILE* P = <span class="hljs-literal">nullptr</span>;<br><span class="hljs-type">short</span> <span class="hljs-type">int</span>* idata = <span class="hljs-keyword">new</span> <span class="hljs-type">short</span> <span class="hljs-type">int</span>[<span class="hljs-number">1829</span> * <span class="hljs-number">1387</span> * <span class="hljs-number">20</span> * <span class="hljs-number">2</span>];<br><br><span class="hljs-built_in">fopen_s</span>(&amp;P, <span class="hljs-string">&quot;C:\\Users\\41128\\Desktop\\matlab\\1.img&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br><span class="hljs-built_in">fread</span>(idata, <span class="hljs-number">2</span>, <span class="hljs-number">1829</span> * <span class="hljs-number">1387</span> * <span class="hljs-number">20</span>, P);<br><br>cout &lt;&lt; <span class="hljs-string">&quot;(2,1,1)   &quot;</span> &lt;&lt; idata[<span class="hljs-number">27740</span>] &lt;&lt; endl;<span class="hljs-comment">//(2,1,1)</span><br>cout &lt;&lt; <span class="hljs-string">&quot;(1,1,2)   &quot;</span> &lt;&lt; idata[<span class="hljs-number">1</span>] &lt;&lt; endl;<span class="hljs-comment">//(1,1,2)</span><br>cout &lt;&lt; <span class="hljs-string">&quot;(1,3,1)   &quot;</span> &lt;&lt; idata[<span class="hljs-number">40</span>] &lt;&lt; endl;<span class="hljs-comment">//(1,3,1)</span><br>cout &lt;&lt; <span class="hljs-string">&quot;(3,1387,1)   &quot;</span> &lt;&lt; idata[<span class="hljs-number">83201</span>] &lt;&lt; endl;<span class="hljs-comment">//(3,1387,1)</span><br>cout &lt;&lt; <span class="hljs-string">&quot;(2,1,2)   &quot;</span> &lt;&lt; idata[<span class="hljs-number">27741</span>] &lt;&lt; endl;<span class="hljs-comment">//(2,1,2)</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>结果<br><img src="17.png" alt="在这里插入图片描述"><br>matlab</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><br>load (<span class="hljs-string">&quot;1.mat&quot;</span>)<br>inputimg(<span class="hljs-number">1</span> , :)<br>inputimg(<span class="hljs-number">2</span> , <span class="hljs-number">1</span> , <span class="hljs-number">1</span>)<br>inputimg(<span class="hljs-number">1</span> , <span class="hljs-number">1</span> , <span class="hljs-number">2</span>)<br>inputimg(<span class="hljs-number">1</span> , <span class="hljs-number">3</span> , <span class="hljs-number">1</span>)<br>inputimg(<span class="hljs-number">3</span> , <span class="hljs-number">1387</span> , <span class="hljs-number">1</span>)<br>inputimg(<span class="hljs-number">2</span> , <span class="hljs-number">1</span> , <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>结果<br><img src="18.png" alt="在这里插入图片描述"><br>c++和matlab的输出结果一致，所以.mat的排布如图所示<br><img src="19.png" alt="在这里插入图片描述"></p><p>所以我可以通过.mat来验证.img的数据，也证明了.mat封装的数据没问题（有兴趣可以多试几个，我的想法有问题的话麻烦指出~）</p><p>结论：.mat把.img的数据按波段，按列顺序存储</p><p>还有一种理解，用存储顺序来理解<br>.img</p><p><img src="20.png" alt="在这里插入图片描述"></p><p><img src="21.png" alt="在这里插入图片描述"></p><p>A、B分别代表相对位置，以下为.mat存储几何示意图（1个小矩阵）<br><img src="22.png" alt="在这里插入图片描述"></p><p>所以.mat可以看做20个宽1829，长1387的矩阵组合成的大“二维矩阵”<br><img src="23.png" alt="在这里插入图片描述"></p><p>.mat的存储逻辑示意图（A1  -&gt; B1829为一个矩阵，地址由小到大）：<br><img src="24.png" alt="在这里插入图片描述"></p><p>即先存储.img每个矩阵的第一列,第一列A1 -&gt; B1 -&gt; A2 -&gt; B2 -&gt; … -&gt; A1829 - &gt;B1829。<br>即       <strong><em>逐列存储</em></strong>，之前在一个文档上印证过这个想法…现在找不到了</p><p>总结：.img转.mat两个格式逻辑排布，我想了4天，包括在写这个文档的时候，我还能想错，实在是太乱了，容易错。我认为思考这个问题的关键点有两点：1. 从数学逻辑思考（类似存储逻辑）2.从几何逻辑思考   3.从存储逻辑思考                                             </p><p>啥，你问我这玩意有啥用…….我只能说，这时候的我认为有用，而且这时我还被批评：4天你就干了个这？<br>好吧我承认我确实工作进度很慢，菜是这样的。不过这也为我未来研究tiff格式打好了基础，这更新了我的思维逻辑，从数据的存储结构去想问题。未来这个存储结构，我会用在c++转.mat的项目上。</p><p>说个有意思的事，我花了4天才搞明白的结构，给一个老师讲，半个小时就讲通了……………不得不感慨，人与人之间的差距是巨大的QAQ，老师还是牛。</p><p>对了，以上的说法均默认行存储，如果是列存储或者“Z”存储就不适用。</p><h2 id="对tiff的研究"><a href="#对tiff的研究" class="headerlink" title="对tiff的研究"></a>对tiff的研究</h2><p>其实我看tiff的时候还算顺利，花了两天（）<br>网上有很多关于tiff的教程，啥都不懂的时候去看看是挺好的。但是最大的问题，网上应该几乎找不到和自己相同的案例吧。所以我认为看格式文档是最关键的，网上的教程只是帮你入门，文档才帮助你学明白的关键。</p><p>对tiff分析的关键，是第一个ifdoffset，从而分析IFD，以下是我学习的时候自己做的分析笔记，该tiff通过enviclassic转换</p><p><img src="25.png" alt="在这里插入图片描述"><br>堆着tiff文档，一个一个分析自己的TIFF。我的图像只有一个IFD，多IFD按照TIFF文档的要求分析就好。</p><h2 id="分享"><a href="#分享" class="headerlink" title="分享"></a>分享</h2><p>envi、tiff格式的文档以及我自己做的我的tiff的分析<br>ANALYZE75、TIFF6、TIFF格式的文档。<br>链接：<a href="https://pan.baidu.com/s/1kaRVsAJysAkLS-S0dqW2rg">https://pan.baidu.com/s/1kaRVsAJysAkLS-S0dqW2rg</a><br>提取码：2nrn</p><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>花了7天干出了个这，我也觉得自己很慢。不过还是受益匪浅，感觉自己对数据结构有了一点点了解。换成大佬来，这估计是个很简单的问题吧（）。<br>如果未来要做c++  envi转.mat，感觉有了一点点思路：）</p>]]></content>
    
    
    <categories>
      
      <category>ENVI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ENVI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《巨人的方法》读书笔记</title>
    <link href="/reading/SocialScience/TRIBE-OF-MENTORS-note/"/>
    <url>/reading/SocialScience/TRIBE-OF-MENTORS-note/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><image src="巨人的方法-封面.jpg" style="height:260px"><div class="note note-info">            <p>作者：蒂姆·费里斯</p><p>通过一些简短的对话，传奇的创业家、投资人、艺术家、作家、科学家、电影人、运动员、教育家，与你分享他们深刻的失败、值得的投资、荒诞的习惯、常当作礼物送给他人的书、听过最糟的建议、忙碌的时候如何放松、如何重拾专注力……</p>          </div><h2 id="摘抄与笔记"><a href="#摘抄与笔记" class="headerlink" title="摘抄与笔记"></a>摘抄与笔记</h2><h3 id="大脑像身体一样有韧性"><a href="#大脑像身体一样有韧性" class="headerlink" title="大脑像身体一样有韧性"></a>大脑像身体一样有韧性</h3><p>痛苦能令人清醒，痛苦的时候你无法再否认当下的真相，你将被迫做出令你不适的改变。</p><p>把你的求知欲聚焦在当前的“热门”事物上。如果你的求知欲把你带到社会最终想要到达的地方，你将获得丰厚的报酬。做任何你想做的事，但不要那么焦虑、痛苦、情绪化。所有事情都是需要时间的。</p><p>忽略不公平，世上没有公平可言。尽你所能发挥自己的才能。</p><h3 id="作家应专注于自己的内心，不要总思考读者想读什么"><a href="#作家应专注于自己的内心，不要总思考读者想读什么" class="headerlink" title="作家应专注于自己的内心，不要总思考读者想读什么"></a>作家应专注于自己的内心，不要总思考读者想读什么</h3><p>如果有截止日期，我就会在那之前完成工作，但如果没有，我的效率就会非常低。我还发现，自己会一直处于工作状态。我很少能长时间全神贯注地工作，也很少能无忧无虑地休息。</p><p>晚上工作会扼杀社交生活，因为大多数社交生活都发生在周末以及工作日的晚上7点至11点之间。如果在这段时间工作，你就会突然成为那个别人永远都约不到的朋友，这种做法是极其短视的，也是不明智的。</p><p>当我设计工作上的接受清单时，我会使用一种方法，我称其为“墓志铭测试”。如果碰到什么机会，我会问自己，如果我的墓志铭写上相关内容，我是否会感到高兴。答案如果明显是否定的，就意味着这个机会对我而言并非十分重要。</p><p>病榻测试会促使我问自己两个问题：“当我临终时，我可能会想这个人吗？”通过这个问题，我可以确保把时间花在合适的人身上。</p><blockquote><p>类似的思考方法还有“遗愿清单”</p></blockquote><h3 id="越深入学习，越会发现自己无知"><a href="#越深入学习，越会发现自己无知" class="headerlink" title="越深入学习，越会发现自己无知"></a>越深入学习，越会发现自己无知</h3><p>批评不等于失败</p><p>改变和成长的秘诀不是意志力，而是积极的互助小组。</p><blockquote><p>圈子，以及志同道合的人</p></blockquote><h3 id="没人欠你任何东西-阿梅莉亚·布恩（Amelia-Boone）"><a href="#没人欠你任何东西-阿梅莉亚·布恩（Amelia-Boone）" class="headerlink" title="没人欠你任何东西 阿梅莉亚·布恩（Amelia Boone）"></a>没人欠你任何东西 阿梅莉亚·布恩（Amelia Boone）</h3><p>当我觉得大脑卡壳的时候，完成一项任务，不管它有多无聊，都会给我重新集中精力的动力。除此之外，我还会运动，最好是越野跑。大自然和内啡肽总能解决问题。</p><blockquote><p>和前面的整理家务类似</p></blockquote><p>你如果想弄清楚自己的人生方向或者对什么充满热情，就关注那些你在意过程而非结果的活动、想法和领域。我们都喜欢那些结果可以证明一切的任务，不过，我发现真正的成就来自对过程的热爱。寻找那些你喜欢过程胜于结果的东西，结果将随之而来。</p><h3 id="活在当下"><a href="#活在当下" class="headerlink" title="活在当下"></a>活在当下</h3><p>“活在当下。”（我一直努力做到这一点，但常常败下阵来。）</p><h3 id="要用一生来学习"><a href="#要用一生来学习" class="headerlink" title="要用一生来学习"></a>要用一生来学习</h3><p>“跟随自己的好奇心，不管它指向何方。”</p><h3 id="比起原创我更看重诚意-约瑟夫·高登-莱维特（Joseph-Gordon-Levitt）"><a href="#比起原创我更看重诚意-约瑟夫·高登-莱维特（Joseph-Gordon-Levitt）" class="headerlink" title="比起原创我更看重诚意 约瑟夫·高登-莱维特（Joseph Gordon-Levitt）"></a>比起原创我更看重诚意 约瑟夫·高登-莱维特（Joseph Gordon-Levitt）</h3><p>谷歌学术和谷歌很像，只不过是用来搜索学术论文和科学研究成果的。如果我想了解什么东西，我不会去读那些吸引眼球的标题党，而是会在谷歌学术上寻找科学的内容。这样做花的时间更长。学术论文不容易读懂。实际上，我经常需要别人的帮助，但一切都是值得的。</p><h3 id="期望值的不确定性也包括在期望值之内-朱莉娅·加莱夫（Julia-Galef）"><a href="#期望值的不确定性也包括在期望值之内-朱莉娅·加莱夫（Julia-Galef）" class="headerlink" title="期望值的不确定性也包括在期望值之内  朱莉娅·加莱夫（Julia Galef）"></a>期望值的不确定性也包括在期望值之内  朱莉娅·加莱夫（Julia Galef）</h3><p>我已经学会远离一种令人分心的东西，那就是向我推送我已经了解且认同的内容的媒体，比如政治媒体。这些信息可能会让人上瘾，因为它们看起来是那么有道理，就像和朋友发泄一样。但是，你从中学不到任何东西，而且我认为，沉迷其中会使你逐渐地无法容忍其他观点。所以，我会提醒自己浪费了这么多时间却什么都学不到，以此防止自己上瘾。</p><blockquote><p>这类东西也能让别人上瘾</p></blockquote><h3 id="37-不要把失败与结果联系在一起"><a href="#37-不要把失败与结果联系在一起" class="headerlink" title="37 不要把失败与结果联系在一起"></a>37 不要把失败与结果联系在一起</h3><p>要寻求异见。一定要努力找到和你意见不同的人，他们可以诚实且富有成效地扮演唱反调的人。挑战自己，真心聆听那些想法和意见与你相异的人。尽可能远离政治泡沫和回音室效应。愿意倾听那些持不同意见的人说的话。尝试每天改变你对一件事的看法。</p><h3 id="41-信息量达到临界值后，额外信息会加深“确认偏见”"><a href="#41-信息量达到临界值后，额外信息会加深“确认偏见”" class="headerlink" title="41 信息量达到临界值后，额外信息会加深“确认偏见”"></a>41 信息量达到临界值后，额外信息会加深“确认偏见”</h3><p>朱利安·杰恩斯的《二分心智的崩塌：人类意识的起源》</p><h3 id="44-时间和注意力是完全不同的两件事"><a href="#44-时间和注意力是完全不同的两件事" class="headerlink" title="44 时间和注意力是完全不同的两件事"></a>44 时间和注意力是完全不同的两件事</h3><p>时间和注意力是完全不同的两件事。它们是你前进过程中最宝贵的资源。</p><p>注意力是工作的媒介。虽然人们经常说没有足够的时间，但你要记住，注意力总是比时间少。全神贯注意味着全力以赴，每个人都想抢走你的注意力，请保护好它。</p><h3 id="47-技术的重点不是赚钱，而是解决问题"><a href="#47-技术的重点不是赚钱，而是解决问题" class="headerlink" title="47 技术的重点不是赚钱，而是解决问题"></a>47 技术的重点不是赚钱，而是解决问题</h3><p>创造的价值要多于你获取的价值</p><blockquote><p>不是技术不值钱，而是产品不值钱</p></blockquote><h3 id="49-优秀与卓越的区别在于善良"><a href="#49-优秀与卓越的区别在于善良" class="headerlink" title="49 优秀与卓越的区别在于善良"></a>49 优秀与卓越的区别在于善良</h3><p>失败意味着要继续奋斗，而奋斗总能给我增添力量。</p><p>还有一点也很关键，那就是要始终保持友善。善良在那段战胜困难的旅程中至关重要。优秀与卓越的差距就在于善良。</p><p>学会享受当下，而不是总为未来而努力。</p><h3 id="50-找出问题所在永远是一项可靠的投资"><a href="#50-找出问题所在永远是一项可靠的投资" class="headerlink" title="50 找出问题所在永远是一项可靠的投资"></a>50 找出问题所在永远是一项可靠的投资</h3><p>确定问题所在永远是一项可靠的投资，值得我们投入时间、金钱和精力。</p><p>睡眠。饮食、运动和职业道德远远比不上睡眠对生活、爱情、育儿和领导方式的影响。</p><div class="note note-success">            <p>喜欢忙碌并不是勤劳。——塞涅卡</p>          </div><h3 id="57-要尊重自己"><a href="#57-要尊重自己" class="headerlink" title="57 要尊重自己"></a>57 要尊重自己</h3><p>“你99岁，快要死了，你现在有机会回到现在，这时你会怎么做？”当很多次遇到难题时，我都会用上这句话。</p><blockquote><p>闭上眼睛，想象自己是个99岁的老人</p></blockquote><p>我必须非常留心应该把自己的精力放在哪里。在此过程中，我改变了使用手机的方式。我没有将每封邮件都视为人生中最重要的事情，而是把它们视为能量的化身。这封邮件会给我带来能量，还是会从我身上吸走能量？我意识到大多时候答案都是后者。</p><p>你用什么方法重拾专注力？我只需要接触实实在在的东西即可。这可以通过很多方式来实现：游泳，水是真实的；冥想，心是真实的；与动物接触，它们也是真实的；独自在阳光下享用一顿美餐。我喜欢一个人吃饭，我会慢慢品尝食物，把很多心思融到食物中，我的味觉比以前更敏锐了。吃饭时，我往往会因为食物的味道而激动。这些无足轻重的真实时刻会让你忘掉烦心事。</p><h3 id="83-要诚实地思考问题"><a href="#83-要诚实地思考问题" class="headerlink" title="83 要诚实地思考问题"></a>83 要诚实地思考问题</h3><p>不必担心余生将要做什么，只需要找到一份未来3到5年能够挣钱的有趣工作即可。</p><h3 id="85-没有通向成功的普遍可行之路"><a href="#85-没有通向成功的普遍可行之路" class="headerlink" title="85 没有通向成功的普遍可行之路"></a>85 没有通向成功的普遍可行之路</h3><p>一个人对生活的态度在很大程度上取决于他们的乐观程度。乐观的人会更多地投资自己，因为他们认为延迟奖励会更高。悲观的人更喜欢为了获得立即回报而牺牲长期利益。然而，被每日负面新闻驱动的媒体行业所做的，正是我们俗话说的只见树木不见森林。</p><h3 id="86-好好设计自己的每一天"><a href="#86-好好设计自己的每一天" class="headerlink" title="86 好好设计自己的每一天"></a>86 好好设计自己的每一天</h3><p>财务自由是创造力的源泉。</p><h3 id="87-真正的失败会给人极大的自由"><a href="#87-真正的失败会给人极大的自由" class="headerlink" title="87 真正的失败会给人极大的自由"></a>87 真正的失败会给人极大的自由</h3><p>一次真正的失败会给人极大的自由。你不可能再往下掉了，所以往上爬是唯一的选择。你没有什么可以失去的东西了。因此，这种自由好似狂喜，它可以为你的心打开一扇门，引导你走向自己真正想做的事情。这个过程充满了无限的自由和喜悦，同时毫无恐惧。你将获得极大的幸福。</p><h3 id="89-以“做自己”为生是一种神奇的体验"><a href="#89-以“做自己”为生是一种神奇的体验" class="headerlink" title="89 以“做自己”为生是一种神奇的体验"></a>89 以“做自己”为生是一种神奇的体验</h3><p>你越早笑出来，越早可以继续自己的生活。你越早自嘲，越早可以过上真正的生活。</p><h3 id="94-迅速学习，但不要急于验证"><a href="#94-迅速学习，但不要急于验证" class="headerlink" title="94 迅速学习，但不要急于验证"></a>94 迅速学习，但不要急于验证</h3><p>迅速学习，但不要急于验证。</p><h3 id="95-戒糖"><a href="#95-戒糖" class="headerlink" title="95 戒糖"></a>95 戒糖</h3><p>我决定做一个项目，让它只有一个功能，并且把它做好，我的目标不是大获成功，而是不要以失败告终。任何结果都比未能交付要好。</p><p>美国有很大一部分人乳糖不耐受，但许多人都置之不理或是没有接受诊断。我只要有一点儿不小心，就会因腹胀而感到痛苦不已。</p><p>（1）尽可能避免摄入乳糖，包括奶酪和黄油（不幸的是，还包括几乎所有的巧克力，如果标签上写着“可能含有少量牛奶”，那就说明也不行）；</p><p>（2）即使我觉得没有吃过任何含乳糖的食物，每天也要服用两次乳糖酶片，因为在外出就餐时你永远不知道饭菜里面究竟都有什么；</p><p>（3）每天服用两次西甲硅油，因为这对排出气体有直接帮助。不要担心打嗝，因为体内的气体必须被排出，而人体只有两个排出口。最好让气体从上面排出来，而不是迫使它从下面排出。</p><h3 id="96-把事情做好的最佳方法就是放手"><a href="#96-把事情做好的最佳方法就是放手" class="headerlink" title="96 把事情做好的最佳方法就是放手"></a>96 把事情做好的最佳方法就是放手</h3><p>“为一个比你自己更远大的目标活着。”奇怪的是，这虽然不一定让你的生活更轻松，却可以让你更满意自己的生活。</p><blockquote><p>设定一个终极目标，能让你解脱出来</p></blockquote><h3 id="110-不要为了完美而拖延时间"><a href="#110-不要为了完美而拖延时间" class="headerlink" title="110 不要为了完美而拖延时间"></a>110 不要为了完美而拖延时间</h3><p>“重大机遇从来不会明明白白地显露出来。”</p><p>不管你是寻找最好的工作、客户、合作伙伴，还是新的商机，你第一眼看到它时，它都不太可能吸引你。实际上，最佳的机会一开始甚至都不会引起你的注意。一般来说，重大机会从表面上看往往没有什么吸引力。一个机会之所以能成为重大机会，全在于它的优点。如果潜在优点一看便知，那么这个机会早已成为别人的盘中物了。</p>]]></content>
    
    
    <categories>
      
      <category>reading</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网站资源迁移说明</title>
    <link href="/unclassified/web-res-move-2023/"/>
    <url>/unclassified/web-res-move-2023/</url>
    
    <content type="html"><![CDATA[<h1 id="网站迁移说明"><a href="#网站迁移说明" class="headerlink" title="网站迁移说明"></a>网站迁移说明</h1><p>博客站 blog.rustfisher.com 和教程站 an.rustfisher.com 的网站资源已经上传到github。</p><ul><li><a href="https://github.com/RustFisher/rustfisher.github.io">rustfisher.github.io - github</a></li><li><a href="https://github.com/AnRFDev/AnRFDev.github.io">AnRFDev.github.io - github</a></li></ul><p>并托管在cloudflare</p><ul><li><a href="an.rustfisher.com">an.rustfisher.com</a> -&gt; anrfdev-github-io.pages.dev</li><li><a href="blog.rustfisher.com">blog.rustfisher.com</a> -&gt; rustfisher-github-io.pages.dev</li></ul><p>若访问速度过慢，可考虑使用🪜</p><blockquote><p>mac终端配置使用<br>export http_proxy=<a href="http://127.0.0.1:7890">http://127.0.0.1:7890</a><br>export https_proxy=<a href="http://127.0.0.1:7890">http://127.0.0.1:7890</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>unclassified</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2021年11月总结</title>
    <link href="/Summary/2021-11/"/>
    <url>/Summary/2021-11/</url>
    
    <content type="html"><![CDATA[<h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><h3 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h3><ul><li><a href="https://an.rustfisher.com/android/jetpack/compose/compose-sample-proj1/">Jetpack Compose引入示例工程 | AnRFDev</a></li><li><a href="https://an.rustfisher.com/android/jetpack/compose/use-compose-in-proj/">现有工程使用Compose | AnRFDev</a></li><li><a href="https://an.rustfisher.com/android/ui/widget/seekbar/seekbar-custom-thumb-animation/">Android SeekBar 自定义thumb，thumb旋转动画效果 | AnRFDev</a></li></ul><h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><ul><li><a href="https://www.bilibili.com/video/BV1oY411W7oa">【Android开发基础】03-改造初始工程 - bilibili</a><ul><li><a href="https://www.zhihu.com/zvideo/1447344528176455680">知乎视频</a></li></ul></li></ul><h2 id="WebRTC"><a href="#WebRTC" class="headerlink" title="WebRTC"></a>WebRTC</h2><ul><li><a href="https://an.rustfisher.com/webrtc/intro/concept-intro/">WebRTC概念简介 | AnRFDev</a></li><li><a href="https://an.rustfisher.com/webrtc/web-samples/getUserMedia-open-camera/">WebRTC打开本地摄像头 | AnRFDev</a></li><li><a href="https://an.rustfisher.com/webrtc/web-samples/canvas1/">WebRTC从摄像头获取图片传入canvas | AnRFDev</a></li><li><a href="https://an.rustfisher.com/webrtc/web-samples/css-filters/">WebRTC与CSS滤镜（filter） | AnRFDev</a></li></ul><h2 id="社区"><a href="#社区" class="headerlink" title="社区"></a>社区</h2><h3 id="华为云社区"><a href="#华为云社区" class="headerlink" title="华为云社区"></a>华为云社区</h3><ul><li><a href="https://bbs.huaweicloud.com/blogs/308726">如何快速得到一个在线问卷应用？｜【玩转应用魔方】</a></li><li><a href="https://bbs.huaweicloud.com/blogs/308935">华为云语音交互实战｜【我们都是华为云专家】</a></li><li><a href="https://bbs.huaweicloud.com/blogs/312616">【云驻共创】区块链技术是如何影响各个产业的？</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
      <tag>Android</tag>
      
      <tag>WebRTC</tag>
      
      <tag>华为云社区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WebRTC概念介绍</title>
    <link href="/WebRTC/webRTC-concept-intro/"/>
    <url>/WebRTC/webRTC-concept-intro/</url>
    
    <content type="html"><![CDATA[<p><img src="guide-1.png" alt="本文大纲"></p><h2 id="WebRTC"><a href="#WebRTC" class="headerlink" title="WebRTC"></a>WebRTC</h2><p>WebRTC（Web Real-Time Communication）。Real-Time Communication，实时通讯。</p><p>WebRTC能让web应用和站点之间选择性地分享音视频流。在不安装其它应用和插件的情况下，完成点对点通信。<br>WebRTC背后的技术被实现为一个开放的Web标准，并在所有主要浏览器中均以常规JavaScript API的形式提供。对于客户端（例如Android和iOS），可以使用提供相同功能的库。 WebRTC是个<a href="https://github.com/webrtc">开源项目</a>，得到Google，Apple，Microsoft和Mozilla等等公司的支持。2011年6月1日开源并在Google、Mozilla、Opera支持下被纳入万维网联盟的W3C推荐标准。</p><p>WebRTC包括一系列API和相互关联的协议来实现通信。</p><h2 id="相关技术"><a href="#相关技术" class="headerlink" title="相关技术"></a>相关技术</h2><h3 id="VoIP"><a href="#VoIP" class="headerlink" title="VoIP"></a>VoIP</h3><p>Voice over Internet Protocol，在网络上传输声音消息的技术。<br>例如网络音频通话。或者叫做IP电话，宽带电话。使用VoIP技术的一大原因是费用低。</p><h2 id="相关协议"><a href="#相关协议" class="headerlink" title="相关协议"></a>相关协议</h2><h3 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h3><p>Network address translation，网络地址转换。<br>NAT能给你的设备一个公共IP地址。一个路由器（router）有一个公共IP地址，每个连接到路由的设备有一个私有的IP地址。<br>设备发送请求时，会从一个特定端口，通过私有IP发送到路由的公共IP。这样每个设备在网上不需要都有一个公共IP地址，但也能被其它设备发现。</p><p>参考 <a href="https://datatracker.ietf.org/doc/html/rfc2663">IP Network Address Translator (NAT) Terminology and Considerations</a></p><h3 id="ICE"><a href="#ICE" class="headerlink" title="ICE"></a>ICE</h3><p>Interactive Connectivity Establishment，互动式连接建立（交互式连通性建立）。<br>ICE是一套能让web浏览器之间互相连接的框架。通常来说，节点A到B是很难直接相连的。防火墙会阻止连接，设备没有公共IP地址，路由不允许直接连接其他节点。<br>ICE使用STUN或者TURN服务（或者同时使用两者）来建立连接。</p><p>参考 <a href="https://www.ietf.org/rfc/rfc8445.txt">ICE | rfc8445</a></p><h3 id="STUN"><a href="#STUN" class="headerlink" title="STUN"></a>STUN</h3><p>Session Traversal Utilities for NAT (STUN) ，NAT会话传输工具。<br>STUN协议能发现客户端（节点）的公共地址。客户端发送一个请求给网上的STUN服务器，服务器返回客户端的公共地址。不管客户端在路由器的NAT后能否可达。<br>STUN为请求者提供了可公开访问的IP地址，它就不再参与对话了。</p><p><img src="webrtc-stun.png" alt="STUN"></p><p>有些路由器会限制设备与外面其它设备的连接。这意味着即使STUN服务器知道了路由的公共IP地址，也没法建立连接。<br>这种情况下我们需要使用<strong>TURN</strong>。</p><h3 id="TURN"><a href="#TURN" class="headerlink" title="TURN"></a>TURN</h3><p>Traversal Using Relays around NAT，使用中继绕过NAT传输。<br>一些路由器使用一种叫“Symmetric NAT”（对称型NAT）的限制。这意味着路由器仅允许之前连接过的节点（peer）来建立连接。</p><p><strong>STUN</strong>提供了一个能让应用（终端，节点）穿过NAT的方法。STUN允许客户端获得一个传输地址（一个IP和端口）来获取其它节点的数据。<br>然而STUN获取到的地址不一定能被所有节点使用。这些地址是否可用取决于网络拓扑的情况。所以，单独STUN无法提供完整的穿越NAT的方案。</p><p>TURN协议允许两个处于NAT环境的主机利用中继进行通讯。客户端能够在TURN服务器上分配资源，与其它客户端（peer）进行通讯。<br>客户端关联一个TURN服务器的地址（relayed server address）来作为中继。<br>客户端发送报文给TURN服务，TURN服务使用relayed server address作为源地址向其他客户端中继转发报文。<br>穿越NAT，这个过程就像是“打洞”。也有人称TURN服务器为“打洞服务器”。</p><p><img src="webrtc-turn.png" alt="TURN"></p><p>这么看，TURN服务器需要有大的带宽。因此，ICE会优先考虑直接通讯，无法直接通讯情况下会使用TURN。</p><p>参考 <a href="https://www.ietf.org/rfc/rfc8656.txt">TURN rfc8656</a></p><h3 id="SDP"><a href="#SDP" class="headerlink" title="SDP"></a>SDP</h3><p>Session Description Protocol，会话描述协议。</p><p>描述多媒体连接内容的协议。例如分辨率，格式，编码，加密算法等等。</p><p>实际上，SDP不是个真正的协议。它也是用来描述设备之间连接与传输多媒体的数据格式。</p><p>参考 <a href="https://www.rfc-editor.org/rfc/rfc8866.html">SDP: Session Description Protocol | rfc8866</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://webrtc.org/getting-started/media-devices">媒体设备入门 ｜ webrtc.org</a></li><li><a href="https://media.prod.mdn.mozit.cloud/attachments/2016/01/27/12363/9d667775214ae0422fae606050f60c1e/WebRTC%20-%20Signaling%20Diagram.svg">2个节点建立连接时的沟通过程 ｜ MDN</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Protocols">WebRTC 协议介绍 ｜ developer.mozilla.org</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebRTC_API/Signaling_and_video_calling">信令与视频通话 ｜ developer.mozilla.org</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>WebRTC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python抓取博客记录，获取标题与url</title>
    <link href="/Python/scrapy-hw-blog-record/"/>
    <url>/Python/scrapy-hw-blog-record/</url>
    
    <content type="html"><![CDATA[<p>在博客网站发布了一些博客。总共有四十多篇。现在查看这些博客需要翻页，不是很方便。<br>想要弄出一个列表，把标题和链接展示出来。如果手动去复制粘贴，耗时耗力，也不够自动化。<br>有没有什么自动化的方法呢？想到以前用python做过抓取的功能。</p><p>开发环境：</p><ul><li>Python3.7</li><li>PyCharm 2018.3.7 (Community Edition)</li><li>macOS 11.4</li></ul><h2 id="安装scrapy"><a href="#安装scrapy" class="headerlink" title="安装scrapy"></a>安装scrapy</h2><p>我们主要使用的框架是scrapy，官网 <a href="https://scrapy.org/">https://scrapy.org/</a> </p><p>如果需要换用清华的pip源，执行下面的命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pip -U<br>pip config <span class="hljs-built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple<br></code></pre></td></tr></table></figure></p><p>根据<a href="https://docs.scrapy.org/en/latest/intro/install.html">官网文档</a>进行安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip3 install Scrapy<br></code></pre></td></tr></table></figure></p><h2 id="分析目标网页"><a href="#分析目标网页" class="headerlink" title="分析目标网页"></a>分析目标网页</h2><p>目标网页的部分html如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;blog-menu blog-menu-noImg&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;blog-menu-header blog_no_attachment&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;portal_usercenter_2_usernew_blog_title_cus_i_0&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/blogs/301790&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;common-blog-title&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Kotlin协程取消与超时&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-left: 0px; color: rgb(51, 51, 51);&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;blog-title-wrap&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;overflow-wrap: break-word;&quot;</span>&gt;</span><br>            Kotlin协程取消与超时<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><br>需要提取的是标题（title）和网址（url）。</p><h3 id="shell工具"><a href="#shell工具" class="headerlink" title="shell工具"></a>shell工具</h3><p>使用<code>scrapy shell</code>工具来分析一下目标网页<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">scrapy shell <span class="hljs-string">&#x27;https://bbs.huaweicloud.com/community/usersnew/id_1606985929124732/page_1&#x27;</span><br></code></pre></td></tr></table></figure><br>windows下的url需要用双引号</p><p>可以看到如下的运行结果<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">2021-10-13 09:46:47 [asyncio] DEBUG: Using selector: KqueueSelector<br>[s] Available Scrapy objects:<br>[s]   scrapy     scrapy module (contains scrapy.Request, scrapy.Selector, etc)<br>[s]   crawler    &lt;scrapy.crawler.Crawler object at 0x7fd889766990&gt;<br>[s]   item       &#123;&#125;<br>[s]   request    &lt;GET https://bbs.huaweicloud.com/community/usersnew/id_1606985929124732/page_1&gt;<br>[s]   response   &lt;200 https://bbs.huaweicloud.com/community/usersnew/id_1606985929124732/page_1&gt;<br>[s]   settings   &lt;scrapy.settings.Settings object at 0x7fd88987bb50&gt;<br>[s]   spider     &lt;DefaultSpider <span class="hljs-string">&#x27;default&#x27;</span> at 0x7fd889c7b710&gt;<br>[s] Useful shortcuts:<br>[s]   fetch(url[, redirect=True]) Fetch URL and update <span class="hljs-built_in">local</span> objects (by default, redirects are followed)<br>[s]   fetch(req)                  Fetch a scrapy.Request and update <span class="hljs-built_in">local</span> objects <br>[s]   shelp()           Shell <span class="hljs-built_in">help</span> (<span class="hljs-built_in">print</span> this <span class="hljs-built_in">help</span>)<br>[s]   view(response)    View response <span class="hljs-keyword">in</span> a browser<br>2021-10-13 09:46:48 [asyncio] DEBUG: Using selector: KqueueSelector<br></code></pre></td></tr></table></figure></p><p>尝试用scrapy的<code>css()</code>方法来提取元素，操作它的<code>response</code>变量</p><p>例如提取<code>div.blog-menu</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">In [2]: response.css(<span class="hljs-string">&#x27;div.blog-menu&#x27;</span>)<br>Out[2]: <br>[&lt;Selector xpath=<span class="hljs-string">&quot;descendant-or-self::div[@class and contains(concat(&#x27; &#x27;, normalize-space(@class), &#x27; &#x27;), &#x27; blog-menu &#x27;)]&quot;</span> data=<span class="hljs-string">&#x27;&lt;div class=&quot;blog-menu blog-menu-noImg&quot;&gt;&lt;&#x27;</span>&gt;,<br>...<br></code></pre></td></tr></table></figure><br>可以得到页面上所有满足要求的元素。拿到的元素是<strong>Selector</strong>，可以再进行下一步的操作。</p><p>用for循环读取提取到的元素，在此基础上，去抓取中文标题<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">In [6]: <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> response.css(<span class="hljs-string">&#x27;div.blog-menu&#x27;</span>):<br>   ...:     <span class="hljs-built_in">print</span>(item.css(<span class="hljs-string">&#x27;a.common-blog-title::attr(title)&#x27;</span>).extract()[0])<br>   ...: <br>Kotlin协程取消与超时<br>Android Kotlin协程入门<br>Kotlin协程基础<br>Kotlin协程入门<br>Android View post 方法<br>Android Activity 传递Parcelable对象<br>Android Handler，Looper与MessageQueue使用与分析<br>Android线程池使用介绍<br>Java线程介绍<br>使用ECharts绘制网址径向树状图<br></code></pre></td></tr></table></figure></p><p><code>a.common-blog-title::attr(title)</code>表示的是我们要查找<code>&lt;a&gt;</code>里面的内容，指定class为<code>common-blog-title</code>，并且查找<code>title</code>属性。<br><code>css().extract()</code>将结果列表提取出来。最后得到我们关心的信息。</p><p>获取<code>url</code>同理，把提取部分修改为<code>::attr(href)</code></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>前面用shell工具进行分析，我们了解提取目标信息的方法。接下来写Python代码。</p><p>在合适的地方新建一个scrapy工程<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">scrapy startproject blog<br></code></pre></td></tr></table></figure><br>可以得到一系列文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">blog<br>    spiders<br>        .gitignore<br>        __init__.py<br>    __init__.py<br>    items.py<br>    middlewares.py<br>    pipelines.py<br>    settings.py<br></code></pre></td></tr></table></figure></p><p>在<code>spiders</code>目录里新建一个文件<code>Hw.py</code>，它就是我们的“蜘蛛”。完整代码如下。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><br><span class="hljs-keyword">import</span> scrapy<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cmp</span>(<span class="hljs-params">item</span>):<br>    <span class="hljs-keyword">return</span> item[<span class="hljs-string">&#x27;page&#x27;</span>]<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HwBlog</span>(scrapy.Spider):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    在最外层的blog目录进行操作</span><br><span class="hljs-string">    scrapy crawl hw</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    name = <span class="hljs-string">&quot;hw&quot;</span>  <span class="hljs-comment"># scrapy crawl hw</span><br>    res_list = []<br>    req_count = <span class="hljs-number">0</span><br>    total_url = <span class="hljs-number">5</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">start_requests</span>(<span class="hljs-params">self</span>):<br>        self.res_list = []<br>        urls = []<br>        base_url = <span class="hljs-string">&#x27;https://bbs.huaweicloud.com/community/usersnew/id_1606985929124732/page_&#x27;</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, self.total_url + <span class="hljs-number">1</span>):<br>            urls.append(base_url + <span class="hljs-built_in">str</span>(i))<br><br>        <span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> urls:<br>            <span class="hljs-keyword">yield</span> scrapy.Request(url=url, callback=self.parse)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">parse</span>(<span class="hljs-params">self, response</span>):<br>        self.req_count = self.req_count + <span class="hljs-number">1</span><br>        page = response.url.split(<span class="hljs-string">&quot;_&quot;</span>)[-<span class="hljs-number">1</span>]<br><br>        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> response.css(<span class="hljs-string">&#x27;div.blog-menu&#x27;</span>):<br>            title_se = item.css(<span class="hljs-string">&quot;a.common-blog-title&quot;</span>)<br>            blog_url = <span class="hljs-string">&#x27;https://bbs.huaweicloud.com&#x27;</span> + (title_se.css(<span class="hljs-string">&quot;::attr(href)&quot;</span>).extract()[<span class="hljs-number">0</span>])<br>            blog_title = title_se.css(<span class="hljs-string">&quot;::attr(title)&quot;</span>).extract()[<span class="hljs-number">0</span>]<br>            self.res_list.append(&#123;<span class="hljs-string">&quot;title&quot;</span>: blog_title, <span class="hljs-string">&quot;url&quot;</span>: blog_url, <span class="hljs-string">&quot;page&quot;</span>: page&#125;)<br><br>        json_res = json.dumps(self.res_list, ensure_ascii=<span class="hljs-literal">False</span>)<br>        <span class="hljs-built_in">print</span>(json_res)<br><br>        res_file_path = <span class="hljs-string">&#x27;raw/hw.json&#x27;</span><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(res_file_path, <span class="hljs-string">&#x27;w+&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            f.write(json_res)<br><br>        <span class="hljs-keyword">if</span> self.req_count &lt; self.total_url:<br>            <span class="hljs-keyword">return</span><br>        res_md = <span class="hljs-string">&#x27;raw/hw.md&#x27;</span><br>        self.res_list.sort(key=cmp)  <span class="hljs-comment"># 用页码来排序</span><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(res_md, <span class="hljs-string">&#x27;w+&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            f.writelines(<span class="hljs-string">&#x27;## 华为云社区&#x27;</span>)<br>            f.write(<span class="hljs-string">&#x27;\n博客数量:&#x27;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(self.res_list)) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>            <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> self.res_list:<br>                f.write(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>                f.write(<span class="hljs-string">&#x27;- [&#x27;</span> + d[<span class="hljs-string">&#x27;title&#x27;</span>] + <span class="hljs-string">&#x27;](&#x27;</span> + d[<span class="hljs-string">&#x27;url&#x27;</span>] + <span class="hljs-string">&#x27;)&#x27;</span>)<br></code></pre></td></tr></table></figure></p><p>要启动的话，输入以下命令<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">scrapy crawl hw</span><br></code></pre></td></tr></table></figure></p><p>接下来简单看一下代码</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p><code>name</code>是蜘蛛的名字。我们启动的时候会用到它。这个名字由我们自己定义。</p><p><code>res_list</code>是暂存结果的列表。把获取到的结果暂时存放在里面。</p><p><code>total_url</code>表示一共要爬几个页面</p><p><code>req_count</code>表示请求次数</p><h3 id="start-requests-self"><a href="#start-requests-self" class="headerlink" title="start_requests(self)"></a><code>start_requests(self)</code></h3><p>在这个方法里进行一些配置工作。比如配置目标url。<br>我们是预先知道有5个页面，所以配置了5个url。</p><p>用<code>scrapy.Request(url=url, callback=self.parse)</code>构建请求</p><p><code>parse</code>是回调函数，请求成功后走这个方法。</p><h3 id="parse-self-response"><a href="#parse-self-response" class="headerlink" title="parse(self, response)"></a><code>parse(self, response)</code></h3><p>请求成功后，结果保存在<code>response</code>中。前面用shell进行的操作，可以直接写成python代码。</p><p>当请求次数达到目标后，开始写文件。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>这是Python scrapy的一次简单应用。</p><p>安装scrapy，分析目标网页。把获取到的数据整理后写成markdown文件。</p><p>视频在<a href="https://www.bilibili.com/video/BV1qL411G7WB/">这里</a></p><iframe src="//player.bilibili.com/player.html?bvid=BV1qL411G7WB&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%" height="400px"> </iframe>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2021年9月总结</title>
    <link href="/Summary/2021-9/"/>
    <url>/Summary/2021-9/</url>
    
    <content type="html"><![CDATA[<h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><p>给<a href="https://an.rustfisher.com">Android站</a>添加更多色彩。使用Mkdocs的功能，增加折叠功能和按钮。</p><p>增加了一个<a href="https://an.rustfisher.com/about/recent-post/">「最近更新」的界面</a>。在md里写html。手动汇总一下最近的更新信息。</p><p>做了一个导航页面 <a href="https://an.rustfisher.com/an-tree.html。">https://an.rustfisher.com/an-tree.html。</a><br>开发记录在这里 -&gt; <a href="https://rustfisher.com/2021/09/02/Web/note-echarts-py-url/">使用ECharts绘制网址径向树状图</a>。</p><h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><p>入门了协程。了解了协程的基本概念。</p><h2 id="网站修改"><a href="#网站修改" class="headerlink" title="网站修改"></a>网站修改</h2><p>利用mkdocs的插件，增加一些功能。</p><h3 id="增加引用"><a href="#增加引用" class="headerlink" title="增加引用"></a>增加引用</h3><p>一个markdown文件，可以引用其它文件的内容。用的框架是mkdocs，需要加入插件。在<code>mkdocs.yml</code>文件里加入<code>plugins</code>声明</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">plugins:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">search</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">macros</span><br><br><span class="hljs-attr">copyright:</span> <span class="hljs-string">Copyright</span> <span class="hljs-string">&amp;copy;</span> <span class="hljs-number">2020</span> <span class="hljs-bullet">-</span> <span class="hljs-number">2021 </span><span class="hljs-string">RustFisher</span><br></code></pre></td></tr></table></figure><p>注意它与<code>copyright</code>同级。</p><p>但是还需要在电脑本地安装一下这个<code>macros</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip3 install mkdocs-macros-plugin<br></code></pre></td></tr></table></figure></p><p>md引用其他文件的语法是<br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">include</span></span> &#x27;snippet.md&#x27; %&#125;</span><br></code></pre></td></tr></table></figure></p><p>如果要指定被引用文件的路径<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-bullet">-</span> <span class="hljs-attr">macros:</span><br>    <span class="hljs-attr">include_dir:</span> <span class="hljs-string">include-md</span><br></code></pre></td></tr></table></figure><br>注意<code>include_dir</code>必须再缩进8个空格</p><p>参考:</p><ul><li><a href="https://www.mkdocs.org/user-guide/configuration/#configuration-inheritance">https://www.mkdocs.org/user-guide/configuration/#configuration-inheritance</a></li><li><a href="https://mkdocs-macros-plugin.readthedocs.io/en/latest/#installation">https://mkdocs-macros-plugin.readthedocs.io/en/latest/#installation</a><ul><li><a href="https://mkdocs-macros-plugin.readthedocs.io/en/latest/advanced/#including-snippets-in-pages">https://mkdocs-macros-plugin.readthedocs.io/en/latest/advanced/#including-snippets-in-pages</a></li></ul></li></ul><h2 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h2><p>同一篇文会先发在<a href="https://an.rustfisher.com/">🔗 Android教程站</a>，并同步发布到各个社区，更新内容汇总:</p><ul><li><strong>Android协程基础</strong><ul><li><a href="https://an.rustfisher.com/android/coroutines/intro1/">🔗 Android教程站</a></li><li><a href="https://bbs.huaweicloud.com/blogs/301425"><image src="/img/avatar/huawei.png" style="width:18px; height:18px"></image> 华为云社区</a></li><li><a href="https://juejin.cn/post/7012167390926635038/">🔗 掘金社区</a></li><li><a href="https://www.cnblogs.com/rustfisher/p/15339044.html">🔗 博客园</a></li></ul></li><li><strong>Kotlin协程取消与超时</strong><ul><li><a href="https://an.rustfisher.com/kotlin/coroutines/cancel-timeout/">🔗 Android教程站</a></li><li><a href="https://bbs.huaweicloud.com/blogs/301790"><image src="/img/avatar/huawei.png" style="width:18px; height:18px"></image> 华为云社区</a></li></ul></li><li><strong>Kotlin协程基础</strong><ul><li><a href="https://an.rustfisher.com/kotlin/coroutines/basic/b2/">🔗 Android教程站</a></li><li><a href="https://bbs.huaweicloud.com/blogs/301126"><image src="/img/avatar/huawei.png" style="width:18px; height:18px"></image> 华为云社区</a></li><li><a href="https://juejin.cn/post/7011144404538753032/">🔗 掘金社区</a></li><li><a href="https://www.cnblogs.com/rustfisher/p/15336721.html">🔗 博客园</a></li></ul></li><li><strong>Kotlin协程入门</strong><ul><li><a href="https://an.rustfisher.com/kotlin/coroutines/basic/first/">🔗 Android教程站</a></li><li><a href="https://bbs.huaweicloud.com/blogs/301044"><image src="/img/avatar/huawei.png" style="width:18px; height:18px"></image> 华为云社区</a></li><li><a href="https://juejin.cn/post/7010778538043260964/">🔗 掘金社区</a></li><li><a href="https://www.cnblogs.com/rustfisher/p/15330285.html">🔗 博客园</a></li><li><a href="https://ld246.com/article/1632492657279">🔗 链滴</a></li></ul></li><li><strong>Android View post 方法解析</strong><ul><li><a href="https://an.rustfisher.com/android/ui/view/rtfsc/post/">🔗 Android教程站</a></li><li><a href="https://bbs.huaweicloud.com/blogs/300835"><image src="/img/avatar/huawei.png" style="width:18px; height:18px"></image> 华为云社区</a></li><li><a href="https://juejin.cn/post/7009652473937788964/">🔗 掘金社区</a></li><li><a href="https://ld246.com/article/1632062734581">🔗 链滴</a></li><li><a href="https://www.cnblogs.com/rustfisher/p/15322722.html">🔗 博客园</a></li></ul></li><li><strong>Android Activity 传递Parcelable对象</strong><ul><li><a href="https://an.rustfisher.com/android/activity/launch-send-parcelable/">🔗 Android教程站</a></li><li><a href="https://bbs.huaweicloud.com/blogs/300757"><image src="/img/avatar/huawei.png" style="width:18px; height:18px"></image> 华为云社区</a></li><li><a href="https://segmentfault.com/a/1190000040709459">🔗 segmentfault</a></li></ul></li><li><strong>Handler，Looper与MessageQueue使用与分析</strong><ul><li><a href="https://an.rustfisher.com/android/handler/Handler_src_note/">🔗 Android教程站</a></li><li><a href="https://bbs.huaweicloud.com/blogs/300369">🔗 华为云社区</a></li></ul></li><li><strong>Android使用线程池介绍</strong><ul><li><a href="https://an.rustfisher.com/android/concurrent/thread-pool-use-intro/">🔗 Android教程站</a></li><li><a href="https://bbs.huaweicloud.com/blogs/300152"><image src="/img/avatar/huawei.png" style="width:18px; height:18px"></image> 华为云社区</a></li><li><a href="https://juejin.cn/post/7006574333153771557/">🔗 掘金社区</a></li><li><a href="https://www.cnblogs.com/rustfisher/p/15263394.html">🔗 博客园</a></li><li><a href="https://ld246.com/article/1631345469189">🔗 链滴</a></li></ul></li><li><strong>Android多线程综述</strong><ul><li><a href="https://an.rustfisher.com/android/thread/android-thread-survey/">🔗 Android教程站</a></li></ul></li><li><strong>Java多线程介绍</strong><ul><li><a href="https://an.rustfisher.com/java/thread/thread-class-intro">🔗 Android教程站</a></li><li><a href="https://bbs.huaweicloud.com/blogs/298451"><image src="/img/avatar/huawei.png" style="width:18px; height:18px"></image> 华为云社区</a></li><li><a href="https://juejin.cn/post/7005038299249115173/">🔗 掘金社区</a></li><li><a href="https://www.cnblogs.com/rustfisher/p/15237641.html">🔗 博客园</a></li><li><a href="https://ld246.com/article/1631001736567">🔗 链滴</a></li></ul></li><li><a href="https://an.rustfisher.com/about/recent-post">Android合集的最近更新</a></li></ul><h2 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h2><p>每个月多写一点。加强对网络通信的学习。</p>]]></content>
    
    
    <categories>
      
      <category>总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用ECharts绘制网址径向树状图</title>
    <link href="/Web/note-echarts-py-url/"/>
    <url>/Web/note-echarts-py-url/</url>
    
    <content type="html"><![CDATA[<p><a href="https://an.rustfisher.com">an.rustfisher.com</a>有很多内容，很多页面。如果用一个树状图把所有页面展示出来会是什么效果？<br>第一时间想到了<a href="https://echarts.apache.org/zh/index.html">ECharts</a>。</p><p><a href="https://an.rustfisher.com/an-tree.html">最后效果： https://an.rustfisher.com/an-tree.html</a></p><h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><p>数据来源于配置文件。我们只需要把内容读出来，整理成ECharts需要的格式并保存为文件。</p><h3 id="yml"><a href="#yml" class="headerlink" title="yml"></a>yml</h3><p>Android站用的框架是Mkdocs，网址都设置在<strong>mkdocs.yml</strong>里。关键配置如下</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">nav:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">Android basic:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">开始:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">新建工程:</span> <span class="hljs-string">android/startProject/start_new_project.md</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">使用Kotlin:</span> <span class="hljs-string">android/startProject/as-use-kotlin.md</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">Activity:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">Activity综述:</span> <span class="hljs-string">android/activity/overview.md</span><br></code></pre></td></tr></table></figure><p>我们需要把这些数据读出来，弄成ECharts可以用的格式。</p><p>打开PyCharm，用python来处理数据。</p><h3 id="python处理数据"><a href="#python处理数据" class="headerlink" title="python处理数据"></a>python处理数据</h3><p>我们使用3.7版本python。要读取yml的内容，不想用读文本的方式一行行来读，还得自己解析。<br>python中有个库<a href="https://pypi.org/project/PyYAML/"><code>PyYAML</code></a>专门用于读取yml格式的数据。</p><p>在PyCharms里装上这个包。用它来读取yml里的数据。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> yaml<br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(md_file, encoding=<span class="hljs-string">&#x27;utf8&#x27;</span>) <span class="hljs-keyword">as</span> a_yaml_file:<br>        <span class="hljs-comment"># 解析yaml</span><br>        yaml_data = yaml.load(a_yaml_file, Loader=yaml.FullLoader)<br>        nav = yaml_data[<span class="hljs-string">&#x27;nav&#x27;</span>]<br></code></pre></td></tr></table></figure></p><p>ECharts需要的格式是<code>name</code>和<code>children</code>。同时可以添加别的字段。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Android教程&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;children&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Android basic&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;children&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></p><p>读取到的数据层级比较多，用递归方法来处理它们。把所有的数据都遍历一遍，整理成需要的格式。</p><p>递归的时候，遇到数组，则继续递归；遇到字符串，则表示可以拼接网址了。</p><p>完整脚本如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> yaml<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen_url_map</span>(<span class="hljs-params">main_site, md_file</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(md_file, encoding=<span class="hljs-string">&#x27;utf8&#x27;</span>) <span class="hljs-keyword">as</span> a_yaml_file:<br>        <span class="hljs-comment"># 解析yaml</span><br>        yaml_data = yaml.load(a_yaml_file, Loader=yaml.FullLoader)<br><br>        nav = yaml_data[<span class="hljs-string">&#x27;nav&#x27;</span>]<br><br>        sorted_data = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Android教程&quot;</span>, <span class="hljs-string">&quot;children&quot;</span>: [], <span class="hljs-string">&quot;collapsed&quot;</span>: <span class="hljs-literal">False</span>&#125;<br><br>        <span class="hljs-keyword">for</span> big_dict <span class="hljs-keyword">in</span> nav:<br>            load_url(main_site, big_dict, sorted_data)<br><br>        url_file = <span class="hljs-string">&#x27;android-url-map.json&#x27;</span><br>        <span class="hljs-keyword">if</span> os.path.exists(url_file):<br>            os.remove(url_file)<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(url_file, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> s:<br>            s.write(<span class="hljs-built_in">str</span>(json.dumps(sorted_data, ensure_ascii=<span class="hljs-literal">False</span>)))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_url</span>(<span class="hljs-params">main_site, input_dict, res_data</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    递归处理数据</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> k1 <span class="hljs-keyword">in</span> input_dict:<br>        v1 = input_dict[k1]<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(v1, <span class="hljs-built_in">list</span>):<br>            item1 = &#123;<span class="hljs-string">&quot;name&quot;</span>: k1, <span class="hljs-string">&quot;children&quot;</span>: []&#125;<br>            res_data[<span class="hljs-string">&#x27;children&#x27;</span>].append(item1)<br>            <span class="hljs-keyword">for</span> v1_child <span class="hljs-keyword">in</span> v1:<br>                load_url(main_site, v1_child, item1)<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">isinstance</span>(v1, <span class="hljs-built_in">str</span>):<br>            <span class="hljs-comment"># 此时已经是url了</span><br>            final_item = &#123;<span class="hljs-string">&quot;name&quot;</span>: k1, <span class="hljs-string">&quot;url&quot;</span>: main_site + v1[<span class="hljs-number">0</span>:-<span class="hljs-number">3</span>]&#125;<br>            res_data[<span class="hljs-string">&#x27;children&#x27;</span>].append(final_item)<br>            <span class="hljs-keyword">return</span> final_item<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;生成android站的sitemap&quot;</span>)<br>    gen_url_map(<span class="hljs-string">&#x27;https://www.an.rustfisher.com/&#x27;</span>,<br>                <span class="hljs-string">&#x27;/Users/rustfisher/mkdocs.yml&#x27;</span>)<br><br></code></pre></td></tr></table></figure></p><p>最后写一个<strong>android-url-map.json</strong>文件。</p><h2 id="制作网页"><a href="#制作网页" class="headerlink" title="制作网页"></a>制作网页</h2><p>经过观察，我们选用径向树状图（tree-radial）。<br>查看ECharts的径向树状图<a href="https://echarts.apache.org/examples/zh/editor.html?c=tree-radial">使用示例</a>，下载一个示例html，在它的基础上修改。</p><p>添加上<code>jquery</code>的引用。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcss.com/jquery/3.4.1/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></p><p>修改要读取的json文件名<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$.<span class="hljs-title function_">getJSON</span>(<span class="hljs-string">&#x27;./android-url-map.json&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123; <span class="hljs-comment">/* ... */</span> &#125;<br></code></pre></td></tr></table></figure></p><p>把前面得到的json文件和这个html文件放在同一层级，上传服务器。</p><p>打开： <a href="https://an.rustfisher.com/an-tree.html">https://an.rustfisher.com/an-tree.html</a> 可以看到效果。</p><h3 id="扩大显示范围"><a href="#扩大显示范围" class="headerlink" title="扩大显示范围"></a>扩大显示范围</h3><p>这个时候的网页体验不是很好，页面不够大，图表超出上下范围了。可以给它添个竖直的滚动条<code>overflow-y: scroll</code>。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 100%; width: 100%; overflow-y: scroll;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure></p><p>修改一下网页的<code>body</code>。外层的<code>container</code>占100%宽高，里面的<code>chartContainer</code>给一个<code>min-height: 1600px</code>。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 100%; margin: 0; width: 100%;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;container&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 100%; width: 100%;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;chartContainer&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100%; min-height: 1600px&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></p><p>script里加上对<code>resize</code>的监听<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-variable language_">window</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (myChart != <span class="hljs-literal">null</span> &amp;&amp; myChart != <span class="hljs-literal">undefined</span>) &#123;<br>        myChart.<span class="hljs-title function_">resize</span>();<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure></p><p>这时再看浏览器的效果，图表有了更多的空间显示。</p><p>参考</p><ul><li><a href="https://stackoverflow.com/questions/33454946/echarts-and-bootstrap-responsive-width">https://stackoverflow.com/questions/33454946/echarts-and-bootstrap-responsive-width</a></li><li><a href="https://stackoverflow.com/questions/12575251/why-is-my-page-not-scrollable">https://stackoverflow.com/questions/12575251/why-is-my-page-not-scrollable</a></li></ul><h3 id="点击打开页面"><a href="#点击打开页面" class="headerlink" title="点击打开页面"></a>点击打开页面</h3><p>默认点击效果是折叠和展开。对于最末尾的叶子节点，加一个点击事件让它打开相应的界面。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">myChart.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">params</span>) &#123;<br>    <span class="hljs-keyword">if</span> (params.<span class="hljs-property">data</span> &amp;&amp; params.<span class="hljs-property">data</span>.<span class="hljs-property">url</span>) &#123;<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">open</span>(params.<span class="hljs-property">data</span>.<span class="hljs-property">url</span>);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="/img/radial-tree-cover.png" alt=""></p><p><a href="https://an.rustfisher.com/an-tree.html">最后效果： https://an.rustfisher.com/an-tree.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Web_note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>echarts</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2021年8月总结</title>
    <link href="/Summary/2021-8/"/>
    <url>/Summary/2021-8/</url>
    
    <content type="html"><![CDATA[<p>除了继续学习Android开发，也在其它方面做了一些拓展尝试。看了一些其它的技术。</p><h2 id="技术文章"><a href="#技术文章" class="headerlink" title="技术文章"></a>技术文章</h2><p>这个月主要以Android为主。参加了<a href="https://bbs.huaweicloud.com/community/usersnew/id_1606985929124732">华为云社区</a>的云驻共创活动。</p><ul><li><a href="https://rustfisher.com/2021/08/03/NestJS/mp-wx-http-status-code/">状态码造成微信公众号“该公众号提供的服务出现故障”</a></li><li><a href="https://bbs.huaweicloud.com/blogs/296652">【云驻共创】Knative应用开发指南</a></li><li><a href="https://bbs.huaweicloud.com/blogs/297488">【云驻共创】基于转移的语义Parser分享</a></li></ul><h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><p>继续完善<a href="https://an.rustfisher.com">Android站</a>。<br>这个月的Android方面博客/教程文章主要涉及<a href="https://an.rustfisher.com/android/ui/view/animation/view-animation-intro/">动画</a>、<a href="https://an.rustfisher.com/android/jetpack/workManager/use1/">WorkManager</a>和广播等基础知识。</p><ul><li><a href="https://an.rustfisher.com/android/jetpack/workManager/use1/">WorkManager使用入门</a></li><li><a href="https://an.rustfisher.com/android/jetpack/workManager/use2/">WorkManager工作约束，延迟与查询工作</a></li><li><a href="https://an.rustfisher.com/android/jetpack/workManager/periodic1/">Android WorkManager定时任务</a></li><li><a href="https://an.rustfisher.com/android/ui/view/animation/animation-drawable-use/">使用AnimationDrawable</a></li><li><a href="https://an.rustfisher.com/android/ui/view/animation/tween-use1/">补间动画</a></li><li><a href="https://an.rustfisher.com/android/ui/view/animation/object-animator-intro/">ObjectAnimator 更改视图位置</a></li><li><a href="https://an.rustfisher.com/android/broadcast/intro_use/">广播机制Broadcast介绍与使用</a></li><li><a href="https://an.rustfisher.com/android/service/start/foreground-service/">启动前台服务</a></li><li><a href="https://an.rustfisher.com/android/ui/view/view-summary/">View综述</a></li></ul><h2 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h2><p>继续完善Android内容。尝试更多的新技术。</p>]]></content>
    
    
    <categories>
      
      <category>总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>状态码造成微信公众号“该公众号提供的服务出现故障”</title>
    <link href="/NestJS/mp-wx-http-status-code/"/>
    <url>/NestJS/mp-wx-http-status-code/</url>
    
    <content type="html"><![CDATA[<h2 id="bug描述"><a href="#bug描述" class="headerlink" title="bug描述"></a>bug描述</h2><p>我们使用NestJS写后台代码，给微信公众号提供服务。<br>用户给公众号发消息时，公众号会显示“该公众号提供的服务出现故障”。<br>虽然后台代码可以正常处理业务，但这个提示非常影响用户体验。</p><h2 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h2><p>根据<a href="https://developers.weixin.qq.com/doc/offiaccount/Message_Management/Passive_user_reply_message.html">微信公众号文档</a>给的提示，出现这个问题的原因是没有给微信服务器返回正确的信息。</p><p>微信服务器需要的是<code>success</code>或者空的字符串。不能是json格式的字符串。<br>搜了一下其他文章，有的说xml里也不能带有空格；有的说公众号绑定了第三方平台，要去解绑。<br>但这些和我们的情况不一致。</p><p>给公众号的接口是默认返回<code>success</code>的。</p><p>查看运行log，发现用户发送1条消息给公众号，我们的服务端会收到4条一模一样的消息。<br>这4条消息的MsgId是一样的。网上也有人提供了防止重复消息的办法。</p><p>于是尝试以下方法</p><ol><li>维护一个map，key是MsgId。</li><li>接收到消息后，如果发现是重复的MsgId，则立刻返回<code>success</code>（或者空字符串）。</li></ol><p>但是问题依旧没有解决。</p><p>微信服务器认为它没有拿到正确的返回值，于是走了重试的流程。<br>我们ubuntu服务器上使用了nginx，于是我们查看nginx的log<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs log">81.69.1.1 - - [03/Aug/2021:09:41:25 +0800] &quot;POST /mywxserve/?signature=sign1111&amp;timestamp=1627954885&amp;nonce=1832145745&amp;openid=qqq HTTP/1.1&quot; 201 0 &quot;-&quot; &quot;Mozilla/4.0&quot;<br>81.69.1.1 - - [03/Aug/2021:09:41:26 +0800] &quot;POST /mywxserve/?signature=sign1111&amp;timestamp=1627954885&amp;nonce=1832145745&amp;openid=qqq HTTP/1.1&quot; 201 7 &quot;-&quot; &quot;Mozilla/4.0&quot;<br>81.69.1.1 - - [03/Aug/2021:09:41:26 +0800] &quot;POST /mywxserve/?signature=sign1111&amp;timestamp=1627954885&amp;nonce=1832145745&amp;openid=qqq HTTP/1.1&quot; 201 7 &quot;-&quot; &quot;Mozilla/4.0&quot;<br>42.192.1.1 - - [03/Aug/2021:09:41:26 +0800] &quot;POST /mywxserve/?signature=sign1111&amp;timestamp=1627954885&amp;nonce=1832145745&amp;openid=qqq HTTP/1.1&quot; 201 7 &quot;-&quot; &quot;Mozilla/4.0&quot;<br></code></pre></td></tr></table></figure><br>可以看到有2个ip地址，发来了3+1次请求。看到nginx返回的状态码都是201。<br>(ip地址和信息模糊处理)</p><p>状态码201表示“已创建”。NestJS默认状态码是200，但是<a href="https://docs.nestjs.com/controllers#status-code">默认POST的状态码</a>是201。</p><h2 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h2><p>我们强制让nestjs返回状态码200<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-meta">@HttpCode</span>(<span class="hljs-number">200</span>)<br><span class="hljs-meta">@Post</span>()<br><span class="hljs-keyword">async</span> <span class="hljs-title function_">onWxEvent</span>(<span class="hljs-meta">@Body</span>(<span class="hljs-string">&#x27;xml&#x27;</span>) <span class="hljs-attr">xmlData</span>: <span class="hljs-title class_">IWxMessageXmlData</span>): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">string</span>&gt; &#123;&#125;<br></code></pre></td></tr></table></figure></p><p>再尝试一下，看到nginx的log，返回状态码是200了。公众号也正常了。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs log">81.69.1.1 - - [03/Aug/2021:09:53:27 +0800] &quot;POST /mywxserve/?signature=rustfisher&amp;timestamp=1627955607&amp;nonce=1829147547&amp;openid=xxx0 HTTP/1.1&quot; 200 0 &quot;-&quot; &quot;Mozilla/4.0&quot;<br></code></pre></td></tr></table></figure></p><p>由此可见，接收微信公众号消息的时候，除了要返回空字符串或者<code>success</code>文本；返回状态码必须是200。<br>用其他的后台框架可能不会遇到状态码问题。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>wx基础消息能力-被动回复用户消息 <a href="https://developers.weixin.qq.com/doc/offiaccount/Message_Management/Passive_user_reply_message.html">https://developers.weixin.qq.com/doc/offiaccount/Message_Management/Passive_user_reply_message.html</a></li><li>NestJS controller <a href="https://docs.nestjs.com/controllers#status-code">https://docs.nestjs.com/controllers#status-code</a> </li><li>NestJS文章集合 <a href="https://rustfisher.com/categories/NestJS/">https://rustfisher.com/categories/NestJS/</a></li><li>http状态码 <a href="https://rustfisher.com/2021/06/25/Network/http-code/">https://rustfisher.com/2021/06/25/Network/http-code/</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>NestJS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NestJS</tag>
      
      <tag>后端</tag>
      
      <tag>公众号</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NestJS WebSocket 开始使用</title>
    <link href="/NestJS/nestjs-websocket-start/"/>
    <url>/NestJS/nestjs-websocket-start/</url>
    
    <content type="html"><![CDATA[<p>使用NestJs提供WebSocket服务。<br>本文会在新建项目的基础上增加2个类</p><ul><li>Gateway 实现业务逻辑的地方</li><li>WebSocketAdapter WebSocket适配器</li></ul><h2 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h2><p>新建一个项目来演示，用npm来管理项目。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nest new websocket-start<br></code></pre></td></tr></table></figure></p><p>得到一个有基础功能的工程。</p><p>进入项目目录，安装2个库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i --save @nestjs/websockets @nestjs/platform-socket.io<br></code></pre></td></tr></table></figure></p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>使用端口3001<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">await</span> app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3001</span>);<br></code></pre></td></tr></table></figure><br><code>npm run start</code>启动我们的工程。用postman测一下，功能ok。</p><h3 id="gateway介绍"><a href="#gateway介绍" class="headerlink" title="gateway介绍"></a><strong>gateway</strong>介绍</h3><p>Nest里的gateway(网关)只是一个用 <code>@WebSocketGateway()</code> 装饰器注释的类。从技术上讲，网关与平台无关，在创建适配器后它们与任何 WebSockets 库都兼容。</p><h4 id="新建Gateway"><a href="#新建Gateway" class="headerlink" title="新建Gateway"></a>新建Gateway</h4><p>新建<strong>ws.gateway.ts</strong>文件。在装饰器<code>@WebSocketGateway()</code>里端口指定为3002。<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ConnectedSocket</span>, <span class="hljs-title class_">MessageBody</span>, <span class="hljs-title class_">SubscribeMessage</span>, <span class="hljs-title class_">WebSocketGateway</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@nestjs/websockets&quot;</span>;<br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> <span class="hljs-title class_">WebSocket</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;ws&#x27;</span>;<br><br><span class="hljs-meta">@WebSocketGateway</span>(<span class="hljs-number">3002</span>)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WsStartGateway</span> &#123;<br><br>  <span class="hljs-meta">@SubscribeMessage</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br>  <span class="hljs-title function_">hello</span>(<span class="hljs-meta">@MessageBody</span>() <span class="hljs-attr">data</span>: <span class="hljs-built_in">any</span>): <span class="hljs-built_in">any</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-string">&quot;event&quot;</span>: <span class="hljs-string">&quot;hello&quot;</span>,<br>      <span class="hljs-string">&quot;data&quot;</span>: data,<br>      <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&#x27;rustfisher.com&#x27;</span><br>    &#125;;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>里面有一个<code>hello</code>方法，订阅的消息是<code>&#39;hello&#39;</code>。</p><p>把它放进<code>AppModule</code>的<code>providers</code>里。<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-attr">providers</span>: [<span class="hljs-title class_">WsStartGateway</span>],<br></code></pre></td></tr></table></figure></p><p>如果websockt和http用了同一个接口(本例是3001)，启动时会报错<br><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">Error: </span>listen EADDRINUSE: address already in use :::3001<br></code></pre></td></tr></table></figure><br>因此我们这里给ws分配另一个端口号。</p><h4 id="获取WebSocket对象"><a href="#获取WebSocket对象" class="headerlink" title="获取WebSocket对象"></a>获取WebSocket对象</h4><p>在<code>WsStartGateway</code>里新增加一个消息订阅方法。<br>方法里接受<code>@ConnectedSocket() client: WebSocket</code>，这个client就是与客户端的连接对象。<br>我们可以用它来给客户端发送消息。<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-meta">@SubscribeMessage</span>(<span class="hljs-string">&#x27;hello2&#x27;</span>)<br><span class="hljs-title function_">hello2</span>(<span class="hljs-meta">@MessageBody</span>() <span class="hljs-attr">data</span>: <span class="hljs-built_in">any</span>, <span class="hljs-meta">@ConnectedSocket</span>() <span class="hljs-attr">client</span>: <span class="hljs-title class_">WebSocket</span>): <span class="hljs-built_in">any</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;收到消息 client:&#x27;</span>, client);<br>  client.<span class="hljs-title function_">send</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123; <span class="hljs-attr">event</span>: <span class="hljs-string">&#x27;tmp&#x27;</span>, <span class="hljs-attr">data</span>: <span class="hljs-string">&#x27;这里是个临时信息&#x27;</span> &#125;));<br>  <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">event</span>: <span class="hljs-string">&#x27;hello2&#x27;</span>, <span class="hljs-attr">data</span>: data &#125;;<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="自定义WebSocketAdapter"><a href="#自定义WebSocketAdapter" class="headerlink" title="自定义WebSocketAdapter"></a>自定义WebSocketAdapter</h3><p>前面我们建立好了Gateway，还需要一个适配器。<br>新建文件<strong>ws.adapter.ts</strong>，继承<code>WebSocketAdapter</code><br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> <span class="hljs-title class_">WebSocket</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;ws&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">WebSocketAdapter</span>, <span class="hljs-title class_">INestApplicationContext</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">MessageMappingProperties</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/websockets&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Observable</span>, fromEvent, <span class="hljs-variable constant_">EMPTY</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;rxjs&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; mergeMap, filter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;rxjs/operators&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WsAdapter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebSocketAdapter</span> &#123;<br><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> app: INestApplicationContext</span>) &#123; &#125;<br><br>    <span class="hljs-title function_">create</span>(<span class="hljs-attr">port</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">options</span>: <span class="hljs-built_in">any</span> = &#123;&#125;): <span class="hljs-built_in">any</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;ws create&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocket</span>.<span class="hljs-title class_">Server</span>(&#123; port, ...options &#125;);<br>    &#125;<br><br>    <span class="hljs-title function_">bindClientConnect</span>(<span class="hljs-params">server, callback: <span class="hljs-built_in">Function</span></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;ws bindClientConnect, server:\n&#x27;</span>, server);<br>        server.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;connection&#x27;</span>, callback);<br>    &#125;<br><br>    <span class="hljs-title function_">bindMessageHandlers</span>(<span class="hljs-params"></span><br><span class="hljs-params">        client: WebSocket,</span><br><span class="hljs-params">        handlers: MessageMappingProperties[],</span><br><span class="hljs-params">        process: (data: <span class="hljs-built_in">any</span>) =&gt; Observable&lt;<span class="hljs-built_in">any</span>&gt;,</span><br><span class="hljs-params">    </span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;[waAdapter]有新的连接进来&#x27;</span>)<br>        <span class="hljs-title function_">fromEvent</span>(client, <span class="hljs-string">&#x27;message&#x27;</span>)<br>            .<span class="hljs-title function_">pipe</span>(<br>                <span class="hljs-title function_">mergeMap</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">bindMessageHandler</span>(client, data, handlers, process)),<br>                <span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> result),<br>            )<br>            .<span class="hljs-title function_">subscribe</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> client.<span class="hljs-title function_">send</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(response)));<br>    &#125;<br><br>    <span class="hljs-title function_">bindMessageHandler</span>(<br>        <span class="hljs-attr">client</span>: <span class="hljs-title class_">WebSocket</span>,<br>        buffer,<br>        <span class="hljs-attr">handlers</span>: <span class="hljs-title class_">MessageMappingProperties</span>[],<br>        <span class="hljs-attr">process</span>: <span class="hljs-function">(<span class="hljs-params">data: <span class="hljs-built_in">any</span></span>) =&gt;</span> <span class="hljs-title class_">Observable</span>&lt;<span class="hljs-built_in">any</span>&gt;,<br>    ): <span class="hljs-title class_">Observable</span>&lt;<span class="hljs-built_in">any</span>&gt; &#123;<br>        <span class="hljs-keyword">let</span> message = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            message = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(buffer.<span class="hljs-property">data</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;ws解析json出错&#x27;</span>, error);<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable constant_">EMPTY</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">const</span> messageHandler = handlers.<span class="hljs-title function_">find</span>(<br>            <span class="hljs-function"><span class="hljs-params">handler</span> =&gt;</span> handler.<span class="hljs-property">message</span> === message.<span class="hljs-property">event</span>,<br>        );<br>        <span class="hljs-keyword">if</span> (!messageHandler) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable constant_">EMPTY</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">process</span>(messageHandler.<span class="hljs-title function_">callback</span>(message.<span class="hljs-property">data</span>));<br>    &#125;<br><br>    <span class="hljs-title function_">close</span>(<span class="hljs-params">server</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;ws server close&#x27;</span>);<br>        server.<span class="hljs-title function_">close</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>在<code>bindMessageHandler</code>方法中，会将传来的json消息解析，然后发送到对应的处理器中。<br>这里就是发给gateway进行处理。<br>判断依据是<code>message.event</code>，就是<code>event</code>字段。</p><p>在<strong>main.ts</strong>里使用这个适配器。<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">NestFactory</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/core&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AppModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./app.module&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">WsAdapter</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./ws/ws.adapter&#x27;</span>;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">bootstrap</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">await</span> <span class="hljs-title class_">NestFactory</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">AppModule</span>);<br>  app.<span class="hljs-title function_">useWebSocketAdapter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WsAdapter</span>(app)); <span class="hljs-comment">// 使用我们的适配器</span><br>  <span class="hljs-keyword">await</span> app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3001</span>);<br>&#125;<br><span class="hljs-title function_">bootstrap</span>();<br></code></pre></td></tr></table></figure></p><p><code>npm run start</code>运行项目，准备进一步测试。</p><h2 id="用Postman来测试WebSocket"><a href="#用Postman来测试WebSocket" class="headerlink" title="用Postman来测试WebSocket"></a>用Postman来测试WebSocket</h2><p>Postman8.8.0提供了beta版的WebSocket测试功能。<br><code>New -&gt; WebSocket Request beta</code>新建一个WebSocket测试。当前版本还不支持保存ws的测试例子。<br>输入目标url <code>ws://localhost:3002</code>，点击连接 Connect 按钮。</p><p><img src="p1.png" alt=""></p><p>发送测试消息。在消息框里填入以下json数据。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;event&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hello&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;测试数据&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></p><p><img src="p2.png" alt=""></p><p>发送的数据经过<code>WsAdapter</code>分发给<code>WsStartGateway</code>，处理后返回数据。</p><p>发送hello2测试数据<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;event&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hello2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;测试数据&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></p><p><img src="p3.png" alt=""></p><p>可以看到服务返回了2条数据。</p><p>发送一个错误格式的数据<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;event&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hello2</span><br></code></pre></td></tr></table></figure></p><p>服务端接收到了数据，但是解析失败<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ws解析json出错 SyntaxError: Unexpected end of JSON input<br></code></pre></td></tr></table></figure></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>要使用WebSocket功能，需要增加</p><ul><li>Gateway 实现业务逻辑的地方</li><li>WebSocketAdapter WebSocket适配器</li></ul><p>ws的端口建议是和http的端口分开。</p><p>参考</p><ul><li>NestJS WebSockets <a href="https://docs.nestjs.com/websockets/gateways">https://docs.nestjs.com/websockets/gateways</a></li><li>NestJS 合集 <a href="https://rustfisher.com/categories/NestJS/">https://rustfisher.com/categories/NestJS/</a></li><li>示例工程 <a href="https://gitee.com/rustfisher/nest-sample">https://gitee.com/rustfisher/nest-sample</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>NestJS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NestJS</tag>
      
      <tag>后端</tag>
      
      <tag>WebSocket</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python图表库Matplotlib 组成部分介绍</title>
    <link href="/Python/operation/matplotlib-intro-parts/"/>
    <url>/Python/operation/matplotlib-intro-parts/</url>
    
    <content type="html"><![CDATA[<p>图表有很多个组成部分，例如标题、x/y轴名称、大刻度小刻度、线条、数据点、注释说明等等。</p><p>我们来看官方给的图，图中标出了各个部分的英文名称</p><p><img src="anatomy.webp" alt=""></p><p>Matplotlib提供了很多api，开发者可根据需求定制图表的样式。<br><a href="https://rustfisher.com/2021/07/16/Python/operation/matplotlib-intro1/">前面</a>我们设置了标题和x/y轴的名称，本文介绍更多设置其他部分的方法。</p><h2 id="绘图"><a href="#绘图" class="headerlink" title="绘图"></a>绘图</h2><p>先绘制一个事例图。然后以此为基础进行定制。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">demo2</span>():<br>    x_list = []<br>    y_list = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">365</span>):<br>        x_list.append(i)<br>        y_list.append(math.sin(i * <span class="hljs-number">0.1</span>))<br>    ax = plt.gca()<br>    ax.set_title(<span class="hljs-string">&#x27;rustfisher.com mapplotlib example&#x27;</span>)<br>    ax.set_xlabel(<span class="hljs-string">&#x27;x&#x27;</span>)<br>    ax.set_ylabel(<span class="hljs-string">&#x27;y = sin(x)&#x27;</span>)<br>    ax.grid()<br>    plt.plot(x_list, y_list)<br>    plt.show()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;rustfisher 图表讲解&#x27;</span>)<br>    demo2()<br></code></pre></td></tr></table></figure><br>运行得到<br><img src="figure-ax.png" alt=""></p><p>红色框框里的是figure；绿色框框里的叫做ax。<br>代码中<code>ax = plt.gca()</code>获取到的就是绿色框框里的部分（对象）。</p><h2 id="Figure-大图"><a href="#Figure-大图" class="headerlink" title="Figure 大图"></a>Figure 大图</h2><p>Figure代表整张图，暂时称为“全图”或者“大图”。一张图里可以有多个子图表。最少必须要有一个图表。像上面那样。</p><h2 id="Axes-数据图"><a href="#Axes-数据图" class="headerlink" title="Axes 数据图"></a>Axes 数据图</h2><p>一张张的图，图里显示着数据，暂称为“数据图”。一个大图里可以有多个数据图。但单个数据图对象只能在1个大图里。</p><h3 id="多张数据图-subplots"><a href="#多张数据图-subplots" class="headerlink" title="多张数据图 subplots"></a>多张数据图 subplots</h3><p>例如同时存在2个数据图</p><p><img src="subplot1-2.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">demo_subplot</span>():<br>    x_list = []<br>    y_list = []<br>    y2_list = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">365</span>):<br>        x_list.append(i)<br>        y_list.append(math.sin(i * <span class="hljs-number">0.1</span>))<br>        y2_list.append(math.cos(i * <span class="hljs-number">0.1</span>))<br>    fig, (ax1, ax2) = plt.subplots(<span class="hljs-number">2</span>)<br>    ax1.set_title(<span class="hljs-string">&#x27;rustfisher.com 1&#x27;</span>)<br>    ax2.set_title(<span class="hljs-string">&#x27;rustfisher.com 2&#x27;</span>)<br>    ax1.set_xlabel(<span class="hljs-string">&#x27;x&#x27;</span>)<br>    ax1.set_ylabel(<span class="hljs-string">&#x27;y = sin(x)&#x27;</span>)<br>    ax2.set_xlabel(<span class="hljs-string">&#x27;x&#x27;</span>)<br>    ax2.set_ylabel(<span class="hljs-string">&#x27;y = cos(x)&#x27;</span>)<br>    ax1.plot(x_list, y_list)<br>    ax2.plot(x_list, y2_list)<br>    plt.show()<br></code></pre></td></tr></table></figure><p>调用<code>subplots()</code>接口，传入数字指定要多少张数据图。<br>返回的多张图要用括号括起来。每个数据图可以绘制(<code>plot</code>)不同的数据。<br>标题用<code>set_title()</code>来设置。</p><p>可以看到上下两张图太挤了，有重叠部分。可以在<code>plt.show()</code>之前加一个<code>fig.tight_layout()</code>让它们拉开一点距离。</p><p><img src="subplot1-2-tight.png" alt=""></p><h3 id="坐标轴"><a href="#坐标轴" class="headerlink" title="坐标轴"></a>坐标轴</h3><p>对于2维数据图，它有2个坐标，横坐标和纵坐标。有一些接口可以设置参数。<br>例如控制坐标轴的名字<code>set_xlabel()</code> <code>set_ylabel</code>；</p><h4 id="显示数据范围"><a href="#显示数据范围" class="headerlink" title="显示数据范围"></a>显示数据范围</h4><p><code>set_xlim</code>方法可以控制x轴数据显示范围。同理y轴用<code>set_ylim</code>来控制。<br>对于显示范围，<code>set_xlim</code>方法主要参数为<code>left</code>和<code>right</code>；或者用<code>xmin</code> <code>xmax</code>。这两套不能同时使用。<br><code>set_ylim</code>主要参数是<code>top</code> <code>bottom</code>；或者<code>ymin</code> <code>ymax</code>。这两套不能同时使用。</p><p>增加显示范围控制的代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">demo3</span>():<br>    x_list = []<br>    y_list = []<br>    y2_list = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">365</span>):<br>        x_list.append(i)<br>        y_list.append(math.sin(i * <span class="hljs-number">0.1</span>))<br>        y2_list.append(math.cos(i * <span class="hljs-number">0.1</span>))<br>    fig, (ax1, ax2) = plt.subplots(<span class="hljs-number">2</span>)<br>    ax1.set_title(<span class="hljs-string">&#x27;rustfisher.com 1&#x27;</span>)<br>    ax1.set_xlabel(<span class="hljs-string">&#x27;x&#x27;</span>)<br>    ax1.set_ylabel(<span class="hljs-string">&#x27;y = sin(x)&#x27;</span>)<br>    ax2.set_title(<span class="hljs-string">&#x27;rustfisher.com 2&#x27;</span>)<br>    ax2.set_xlabel(<span class="hljs-string">&#x27;x&#x27;</span>)<br>    ax2.set_ylabel(<span class="hljs-string">&#x27;y = cos(x)&#x27;</span>)<br><br>    ax1.set_xlim(left=<span class="hljs-number">50</span>, right=<span class="hljs-number">200.6</span>)  <span class="hljs-comment"># 控制x轴显示范围</span><br>    ax1.set_ylim(top=<span class="hljs-number">1</span>, bottom=<span class="hljs-number">0.3</span>)  <span class="hljs-comment"># 控制y轴显示范围</span><br><br>    ax2.set_xlim(xmin=<span class="hljs-number">1</span>, xmax=<span class="hljs-number">156.6</span>)  <span class="hljs-comment"># 控制x轴显示范围</span><br>    ax2.set_ylim(ymin=-<span class="hljs-number">0.3</span>, ymax=<span class="hljs-number">0.3</span>)  <span class="hljs-comment"># 控制y轴显示范围</span><br><br>    ax1.plot(x_list, y_list)<br>    ax2.plot(x_list, y2_list)<br>    fig.tight_layout()<br>    plt.show()<br></code></pre></td></tr></table></figure></p><p>运行结果</p><p><img src="xylim.png" alt=""></p><h4 id="刻度"><a href="#刻度" class="headerlink" title="刻度"></a>刻度</h4><p>tick意思是标记。在坐标轴上的是刻度。Major tick暂称为大刻度，minor tick暂称为小刻度。<br>使用<code>set_xticks</code>方法控制刻度显示。传入的列表是我们希望显示的刻度。<br><code>minor</code>参数默认为False，不显示小刻度。</p><p>关键代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">ax1.set_xticks([<span class="hljs-number">50</span>, <span class="hljs-number">60</span>, <span class="hljs-number">70</span>, <span class="hljs-number">150</span>])<br>ax1.set_yticks([<span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.3</span>, <span class="hljs-number">0.7</span>, <span class="hljs-number">0.9</span>])<br>ax1.grid()  <span class="hljs-comment"># 显示格子</span><br><br>ax2.set_xticks([<span class="hljs-number">1</span>, <span class="hljs-number">60</span>, <span class="hljs-number">70</span>, <span class="hljs-number">150</span>], minor=<span class="hljs-literal">True</span>)<br>ax2.set_yticks([-<span class="hljs-number">0.1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.3</span>], minor=<span class="hljs-literal">True</span>)<br>ax2.grid()<br></code></pre></td></tr></table></figure></p><p><img src="xy-ticks.png" alt=""></p><p>可见当<code>minor=True</code>，传入的刻度列表有可能不显示。</p><p>也可以控制大刻度上的文字旋转<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.setp(ax1.xaxis.get_majorticklabels(), rotation=-<span class="hljs-number">45</span>)<br>plt.setp(ax2.xaxis.get_majorticklabels(), rotation=-<span class="hljs-number">60</span>)<br></code></pre></td></tr></table></figure></p><p><img src="majortick-rotate.png" alt=""></p><h4 id="边线-spine"><a href="#边线-spine" class="headerlink" title="边线 spine"></a>边线 spine</h4><p>spine是脊柱的意思，这里我们先称为边线。有上下左右4条边线。名称是<code>top</code> <code>bottom</code> <code>left</code> <code>right</code><br>可以直接从图表对象获取它的边线，比如右边线<code>ax1.spines.right</code>。</p><p>一些简单的操作，例如</p><ul><li><code>set_visible</code> 显示和隐藏</li><li><code>set_ticks_position</code> 刻度显示的位置</li><li><code>set_bounds</code> 边线显示范围</li><li><code>set_linewidth</code> 线的宽度</li></ul><p>隐藏右边线和上边线<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">ax1.spines.right.set_visible(<span class="hljs-literal">False</span>)<br>ax1.spines.top.set_visible(<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure></p><p>让刻度显示在右边和上方<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">ax2.yaxis.set_ticks_position(<span class="hljs-string">&#x27;right&#x27;</span>)<br>ax2.xaxis.set_ticks_position(<span class="hljs-string">&#x27;top&#x27;</span>)<br></code></pre></td></tr></table></figure></p><p>设置边线显示范围<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">ax3.spines.left.set_bounds(-<span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>)<br>ax3.spines.top.set_bounds(<span class="hljs-number">340</span>, <span class="hljs-number">400</span>)<br></code></pre></td></tr></table></figure></p><p>设置线的宽度<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">ax3.spines.bottom.set_linewidth(<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure></p><p>完整代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> math<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">demo_spine</span>():<br>    x_list = []<br>    y_list = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">365</span>):<br>        x_list.append(i)<br>        y_list.append(math.sin(i * <span class="hljs-number">0.1</span>))<br><br>    fig, (ax1, ax2, ax3) = plt.subplots(<span class="hljs-number">3</span>)<br>    ax_list = [ax1, ax2, ax3]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>):<br>        cur_ax = ax_list[i]<br>        cur_ax.set_title(<span class="hljs-string">&#x27;rustfisher.com &#x27;</span> + <span class="hljs-built_in">str</span>(i))<br>        cur_ax.plot(x_list, y_list)<br>        cur_ax.set_xlabel(<span class="hljs-string">&#x27;x&#x27;</span>)<br>        cur_ax.set_ylabel(<span class="hljs-string">&#x27;y = sin(x)&#x27;</span>)<br><br>    ax1.spines.right.set_visible(<span class="hljs-literal">False</span>)<br>    ax1.spines.top.set_visible(<span class="hljs-literal">False</span>)<br><br>    ax2.spines.bottom.set_visible(<span class="hljs-literal">False</span>)<br>    ax2.spines.left.set_visible(<span class="hljs-literal">False</span>)<br>    ax2.yaxis.set_ticks_position(<span class="hljs-string">&#x27;right&#x27;</span>)<br>    ax2.xaxis.set_ticks_position(<span class="hljs-string">&#x27;top&#x27;</span>)<br><br>    ax3.spines.left.set_bounds(-<span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>)<br>    ax3.spines.top.set_bounds(<span class="hljs-number">340</span>, <span class="hljs-number">400</span>)<br>    ax3.spines.bottom.set_linewidth(<span class="hljs-number">2</span>)<br><br>    fig.tight_layout()<br>    plt.show()<br></code></pre></td></tr></table></figure></p><p>运行截图</p><p><img src="spines.png" alt=""></p><h3 id="数据点"><a href="#数据点" class="headerlink" title="数据点"></a>数据点</h3><p>控制数据点的样式。下面我们在一张图表里绘制多条数据线。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">demo_line</span>():<br>    x_list = []<br>    y_list = []<br>    y2_list = []<br>    y3_list = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">20</span>):<br>        x_list.append(i)<br>        y_list.append(math.sin(i) * <span class="hljs-number">2</span> - <span class="hljs-number">4</span>)<br>        y2_list.append(math.sin(i) * <span class="hljs-number">2</span>)<br>        y3_list.append(math.cos(i) * <span class="hljs-number">1.3</span> + <span class="hljs-number">3</span>)<br><br>    plt.plot(x_list, y_list, color=<span class="hljs-string">&#x27;blue&#x27;</span>, linestyle=<span class="hljs-string">&#x27;-.&#x27;</span>, linewidth=<span class="hljs-number">2</span>, markersize=<span class="hljs-number">4</span>)<br>    plt.plot(x_list, y2_list, <span class="hljs-string">&#x27;go&#x27;</span>, linewidth=<span class="hljs-number">1</span>)<br>    plt.plot(x_list, y3_list, <span class="hljs-string">&#x27;r+&#x27;</span>)<br>    plt.show()<br></code></pre></td></tr></table></figure><p><code>plot()</code>方法中，支持多种选项。</p><p><code>linestyle</code>支持的选项<br>‘-‘, ‘–’, ‘-.’, ‘:’, ‘None’, ‘ ‘, ‘’, ‘solid’, ‘dashed’, ‘dashdot’, ‘dotted’</p><p><img src="line.png" alt=""></p><h3 id="注释-legend"><a href="#注释-legend" class="headerlink" title="注释 legend"></a>注释 legend</h3><p>添加注释，调用<code>lengend()</code>方法。</p><p>在前面代码基础上添加<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.plot(x_list, y_list, color=<span class="hljs-string">&#x27;blue&#x27;</span>, linestyle=<span class="hljs-string">&#x27;-.&#x27;</span>, linewidth=<span class="hljs-number">2</span>, markersize=<span class="hljs-number">4</span>)<br>plt.plot(x_list, y2_list, <span class="hljs-string">&#x27;go&#x27;</span>, linewidth=<span class="hljs-number">1</span>)<br>plt.plot(x_list, y3_list, <span class="hljs-string">&#x27;r+&#x27;</span>)<br>plt.legend([<span class="hljs-string">&#x27;math.sin(i) * 2 - 4&#x27;</span>, <span class="hljs-string">&#x27;math.sin(i) * 2&#x27;</span>, <span class="hljs-string">&#x27;math.cos(i) * 1.3 + 3&#x27;</span>])<br></code></pre></td></tr></table></figure></p><p><img src="legend1.png" alt=""></p><p>控制注释显示的地方，添加<code>bbox_to_anchor</code>和<code>bbox_transform</code>属性<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.legend([<span class="hljs-string">&#x27;math.sin(i) * 2 - 4&#x27;</span>, <span class="hljs-string">&#x27;math.sin(i) * 2&#x27;</span>, <span class="hljs-string">&#x27;math.cos(i) * 1.3 + 3&#x27;</span>], bbox_to_anchor=(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>),<br>               bbox_transform=plt.gcf().transFigure)<br></code></pre></td></tr></table></figure></p><p><img src="legend2.png" alt=""></p><h3 id="中文乱码问题"><a href="#中文乱码问题" class="headerlink" title="中文乱码问题"></a>中文乱码问题</h3><p>在设置标题用到中文的时候，可能会出现乱码。<br>可以设置<code>rcParams</code>的字体，解决乱码问题。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Arial Unicode MS&#x27;</span>]<br></code></pre></td></tr></table></figure></p><p>至此，我们把图表中各个部分都简要介绍了一下。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>本例环境</p><ul><li>macOS</li><li>PyCharm CE</li><li>Python3</li></ul><p>参考资料</p><ul><li>【运营的Python指南】绘制图表Matplotlib快速入门<ul><li><a href="https://rustfisher.com/2021/07/16/Python/operation/matplotlib-intro1">https://rustfisher.com/2021/07/16/Python/operation/matplotlib-intro1</a></li></ul></li><li>Python笔记 <a href="https://rustfisher.com/categories/Python/">https://rustfisher.com/categories/Python/</a></li><li>matplotlib <a href="https://matplotlib.org/">https://matplotlib.org/</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Matplotlib</tag>
      
      <tag>Python</tag>
      
      <tag>plt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【运营的Python指南】绘制图表Matplotlib快速入门</title>
    <link href="/Python/operation/matplotlib-intro1/"/>
    <url>/Python/operation/matplotlib-intro1/</url>
    
    <content type="html"><![CDATA[<p>绘制图表是运营工作中常见的需求。前面我们试着用<a href="https://rustfisher.com/2019/11/19/Python/Python-op-excel_openpyxl_bar_column_chart/">Python操作Excel来绘制图表</a>，其实调用的是Excel里的图表功能。<br>接下来我们利用<code>Matplotlib</code>来绘制图表。</p><blockquote><p>Matplotlib 是一个综合性的库。它是 Python 的可视化工具，可创建静态、带动画和可交互的图表<br>Matplotlib 官网 <a href="https://matplotlib.org/">https://matplotlib.org/</a><br>官方使用手册 <a href="https://matplotlib.org/stable/users/index.html">https://matplotlib.org/stable/users/index.html</a></p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>官方给出的安装方法是使用pip<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">python -m pip install -U pip<br>python -m pip install -U matplotlib<br></code></pre></td></tr></table></figure></p><p>我们使用PyCharm，也可以先打<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br></code></pre></td></tr></table></figure><br>其中<code>matplotlib</code>下面有红线，跟着PyCharm的提示，把缺失的包装上就好。</p><h2 id="简单例子-绘制折线图"><a href="#简单例子-绘制折线图" class="headerlink" title="简单例子-绘制折线图"></a>简单例子-绘制折线图</h2><p>接下来使用<code>matplotlib</code>绘制一个简单的折线图，先把这个库用起来。</p><h3 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h3><p>我们用<code>math.sin</code>来模拟。x从0到100，y=sin(x)。一个简单的sin函数。</p><h3 id="绘制"><a href="#绘制" class="headerlink" title="绘制"></a>绘制</h3><p>准备数据，然后绘制出图表。完整代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> math<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">demo1</span>():<br>    x_list = []<br>    y_list = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>):<br>        x_list.append(i)<br>        y_list.append(math.sin(i * <span class="hljs-number">0.1</span>))<br>    plt.plot(x_list, y_list)<br>    plt.show()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;rustfisher 绘制折线图事例1&#x27;</span>)<br>    demo1()<br></code></pre></td></tr></table></figure></p><p>Mac的PyCharm运行下能得到这样的图<br><img src="intro1.png" alt=""></p><p>代码中</p><ul><li><code>plt.plot(x_list, y_list)</code>指定x，y值，都是列表。这2个列表的长度要相等。</li><li><code>plt.show()</code>是直接绘制图表。</li></ul><p>可以看到图中缺少很多元素。图的标题没有指定，x轴和y轴都没有说明。</p><h3 id="增加一些细节"><a href="#增加一些细节" class="headerlink" title="增加一些细节"></a>增加一些细节</h3><p>为操作图表，我们需拿到图表对象<code>ax = plt.gca()</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">ax = plt.gca()<br>ax.set_title(<span class="hljs-string">&#x27;rustfisher.com mapplotlib example&#x27;</span>)<br>ax.set_xlabel(<span class="hljs-string">&#x27;x&#x27;</span>)<br>ax.set_ylabel(<span class="hljs-string">&#x27;y = sin(x)&#x27;</span>)<br>ax.grid()<br></code></pre></td></tr></table></figure></p><ul><li><code>set_title</code> 设置图表标题</li><li><code>set_xlabel</code> 设置x轴名称</li><li><code>set_ylabel</code> 设置y轴名称</li><li><code>grid()</code> 显示格子</li></ul><p>修改后的代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">demo1</span>():<br>    x_list = []<br>    y_list = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>):<br>        x_list.append(i)<br>        y_list.append(math.sin(i * <span class="hljs-number">0.1</span>))<br>    ax = plt.gca()<br>    ax.set_title(<span class="hljs-string">&#x27;rustfisher.com mapplotlib example&#x27;</span>)<br>    ax.set_xlabel(<span class="hljs-string">&#x27;x&#x27;</span>)<br>    ax.set_ylabel(<span class="hljs-string">&#x27;y = sin(x)&#x27;</span>)<br>    ax.grid()<br>    plt.plot(x_list, y_list)<br>    plt.show()<br></code></pre></td></tr></table></figure></p><p>运行结果<br><img src="2.png" alt=""></p><h3 id="操作说明"><a href="#操作说明" class="headerlink" title="操作说明"></a>操作说明</h3><p>从前面图中我们可以看到下面有一排按钮。这些按钮提供了一些操作图表的功能。<br>从左到右我们排个序1，2，3，4..</p><p><img src="btns.png" alt=""></p><ol><li>让图表恢复到初始状态</li><li>上一个图表状态</li><li>下一个图表状态</li><li>移动图表</li><li>缩放图表</li><li>调整图表显示的位置<ol><li>点击缩放按钮后，鼠标按住左键去框选一个区域，松开左键后就是放大那个区域。</li><li>按住右键再框选，则是缩小显示区域。</li></ol></li><li>保存图片</li></ol><h3 id="直接保存"><a href="#直接保存" class="headerlink" title="直接保存"></a>直接保存</h3><p>如果我们想直接保存得到的图片，可以不调用<code>show</code>方法。而是调用<code>savefig()</code>方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># plt.show()</span><br>plt.savefig(<span class="hljs-string">&#x27;out.png&#x27;</span>)<br></code></pre></td></tr></table></figure><p>参考</p><ul><li>Python操作Excel来绘制图表 <a href="https://rustfisher.com/2019/11/19/Python/Python-op-excel_openpyxl_bar_column_chart/">https://rustfisher.com/2019/11/19/Python/Python-op-excel_openpyxl_bar_column_chart/</a></li><li>Python绘制漏斗图 <a href="https://rustfisher.com/2021/06/28/Python/Python-op-draw-funnel-1/">https://rustfisher.com/2021/06/28/Python/Python-op-draw-funnel-1/</a></li><li>Python合集 <a href="https://rustfisher.com/categories/Python/">https://rustfisher.com/categories/Python/</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运营的Python指南</tag>
      
      <tag>Matplotlib</tag>
      
      <tag>plot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NestJS 静态文件</title>
    <link href="/NestJS/nestjs-static-file/"/>
    <url>/NestJS/nestjs-static-file/</url>
    
    <content type="html"><![CDATA[<p>为了提供静态资源，我们可以用<code>@nestjs/serve-static</code>包里的<code>ServeStaticModule</code>。<br>服务器上的静态资源，一般指的是文件，比如图片、音频、视频、文本文件或者二进制文件等等。</p><p>或者是一些单页面应用程序(Single Page Application, SPA)。从服务器上请求得到网页，然后网页再执行自己的业务。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先我们需要安装<code>@nestjs/serve-static</code>包。<br>在工程路径下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install --save @nestjs/serve-static<br></code></pre></td></tr></table></figure></p><p>安装完成后，工程的<strong>package.json</strong>里会多出<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;dependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;@nestjs/serve-static&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^2.1.4&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在root <code>AppModule</code>中，引入<code>ServeStaticModule</code>模块。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ServeStaticModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/serve-static&#x27;</span>;<br><br><span class="hljs-meta">@Module</span>(&#123;<br>  <span class="hljs-attr">imports</span>: [<br>  <span class="hljs-title class_">ServeStaticModule</span>.<span class="hljs-title function_">forRoot</span>(&#123;<br>    <span class="hljs-attr">rootPath</span>: <span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;..&#x27;</span>, <span class="hljs-string">&#x27;rustfisherData&#x27;</span>),<br>    <span class="hljs-attr">exclude</span>: [<span class="hljs-string">&#x27;/api*&#x27;</span>],<br>  &#125;),],<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppModule</span> &#123; &#125;<br></code></pre></td></tr></table></figure><p><code>imports</code>里添加了<code>ServeStaticModule</code>模块。需要用到<code>ServeStaticModule.forRoot</code>方法。</p><ul><li><code>rootPath</code> 指定了静态文件的根目录</li><li><code>exclude</code> 表明排除在外的文件和目录</li></ul><h3 id="路径说明"><a href="#路径说明" class="headerlink" title="路径说明"></a>路径说明</h3><p>我们关心的是，服务器上哪个目录可以让客户端访问，哪个目录是不开放的。</p><p><code>__dirname</code> 获取到的是当前目录的路径。<br>使用<code>join()</code>方法，拼接出一个新的路径。</p><p>工程编译出来的文件放在<code>dist</code>目录中。<code>app.module.js</code>文件也在里面。<br>此时<code>__dirname</code>表示的是<code>dist</code>目录的路径。<br>那么<code>join(__dirname, &#39;..&#39;, &#39;rustfisherData&#39;)</code>得到的路径就是与<code>dist</code>目录同级的<code>rustfisherData</code>。</p><p>假设我们服务器上运行目录是<code>/home/rustfisher/server/rf-server-nest/dist</code><br>那么静态文件存放的目录就是<code>/home/rustfisher/server/rf-server-nest/rustfisherData</code></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><code>ServeStaticModule</code>提供了丰富的自定义控制。开发者可以自定义它的行为。<br>比如像前面那样设置静态文件根目录<code>rootPath</code>；设置排除的路径<code>exclude</code>。</p><p>GitHub上有<a href="https://github.com/nestjs/serve-static/blob/master/lib/interfaces/serve-static-options.interface.ts">详细配置</a></p><blockquote><p><strong>注意</strong><br>访问目录时，默认会找<code>index.html</code>文件发送回去。后文会有更多说明。</p></blockquote><h2 id="客户端访问"><a href="#客户端访问" class="headerlink" title="客户端访问"></a>客户端访问</h2><p>假设服务部署好了（并不是真实项目），网址是 <a href="https://rustfisher.com">https://rustfisher.com</a> 。部署好服务后，我们测试一下。</p><p>打开浏览器，访问url： <a href="https://rustfisher.com/some/path/to/img/11.jpg">https://rustfisher.com/some/path/to/img/11.jpg</a><br>可以在网页上看到图片（并不是真实项目）。</p><p>如果访问一个不存在的路径（文件），它会返回一个默认的<code>index.html</code>。如果没有这个文件，则会报一个ENOENT错误信息<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[Nest] <span class="hljs-number">32378</span>   - <span class="hljs-number">07</span><span class="hljs-regexp">/10/</span><span class="hljs-number">2021</span>, <span class="hljs-number">8</span>:<span class="hljs-number">15</span>:<span class="hljs-number">00</span> PM   [ExceptionsHandler] ENOENT: no such <span class="hljs-keyword">file</span> or directory, <br>stat <span class="hljs-string">&#x27;/home/rustfisher/server/rf-server-nest/rustfisherData/index.html&#x27;</span> +<span class="hljs-number">234539</span>ms<br></code></pre></td></tr></table></figure></p><p>不想让它报这个错，我们可以自己弄一个<code>index.html</code>文件放到对应路径上。<br>这样做的话，访问目录或者不存在的文件会默认返回<code>index.html</code>文件。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>提供访问静态文件的功能比较常见。客户端使用一个url，就能访问服务器上的文件。<br>现在很常见的做法是把文件放在CDN上，减轻服务器的io压力和网络压力。<br>在Linux服务器上，nginx和同类的服务也能轻松实现类似的提供静态文件的功能。</p>]]></content>
    
    
    <categories>
      
      <category>NestJS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NestJS</tag>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MongoDB安装和部署</title>
    <link href="/MongoDB/mongodb-install-deploy/"/>
    <url>/MongoDB/mongodb-install-deploy/</url>
    
    <content type="html"><![CDATA[<p>MongoDB的版本可以在官网 <a href="https://docs.mongodb.com/manual/installation/">https://docs.mongodb.com/manual/installation/</a> 上查询。</p><p>我们使用的是社区版。</p><h2 id="mac"><a href="#mac" class="headerlink" title="mac"></a>mac</h2><p>目前用mac来开发，需要在本地安装运行一个mongdb，便于测试调试。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>mac上安装mongodb。在终端中用brew来安装速度有点太慢了。</p><p>我们去 <a href="https://www.mongodb.com/try/download/enterprise">https://www.mongodb.com/try/download/enterprise</a> 下载一个mac使用的版本。<br>在网页右侧选择mongodb版本（这里选的是4.4.4），Platform选择macOS，压缩格式选tgz即可。<br>点击Download需要填一些资料。填好后确认Submit即可。下载后解压文件，得到一个文件夹。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs stylus">mongodb-macos-x86_64-enterprise-<span class="hljs-number">4.4</span>.<span class="hljs-number">6</span><br>├── LICENSE-Enterprise<span class="hljs-selector-class">.txt</span><br>├── MPL-<span class="hljs-number">2</span><br>├── README<br>├── THIRD-PARTY-NOTICES<br>├── bin<br>│   ├── install_compass<br>│   ├── mongo<br>│   ├── mongocryptd<br>│   ├── mongod<br>│   ├── mongodecrypt<br>│   ├── mongokerberos<br>│   ├── mongoldap<br>│   └── mongos<br>└── snmp<br>    ├── MONGOD-MIB<span class="hljs-selector-class">.txt</span><br>    ├── MONGODBINC-MIB<span class="hljs-selector-class">.txt</span><br>    ├── README-snmp<span class="hljs-selector-class">.txt</span><br>    ├── mongod<span class="hljs-selector-class">.conf</span><span class="hljs-selector-class">.master</span><br>    └── mongod<span class="hljs-selector-class">.conf</span>.subagent<br></code></pre></td></tr></table></figure><p>我们将这个目录复制到<code>/usr/local/mongo</code>中，需要用到管理员权限。</p><p>修改<code>~/.bash_profile</code>，添加如下命令。即mongo的目录添加到环境变量中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># mongo db</span><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:/usr/local/mongo/bin<br></code></pre></td></tr></table></figure></p><p>此时可以重启命令行（终端）。</p><p>检查版本<code>mongod --version</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">~ $ mongod --version<br>db version v4.4.4<br>Build Info: &#123;<br>    <span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;4.4.4&quot;</span>,<br>    <span class="hljs-string">&quot;gitVersion&quot;</span>: <span class="hljs-string">&quot;8db30a63db1a9d84bdcad0c83369623f708e0397&quot;</span>,<br>    <span class="hljs-string">&quot;modules&quot;</span>: [],<br>    <span class="hljs-string">&quot;allocator&quot;</span>: <span class="hljs-string">&quot;system&quot;</span>,<br>    <span class="hljs-string">&quot;environment&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;distarch&quot;</span>: <span class="hljs-string">&quot;x86_64&quot;</span>,<br>        <span class="hljs-string">&quot;target_arch&quot;</span>: <span class="hljs-string">&quot;x86_64&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>能看到版本说明mongodb安装完成。</p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>Mac上启动。我们可以指定数据库路径<code>--dbpath</code>和log位置<code>--logpath</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo mongod --dbpath /Users/rustfisher/.mongodb/data --logpath /Users/rustfisher/.mongodb/log/mongodb1.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure></p><p>如果不用<code>sudo</code>，可能会报错<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ERROR: child process failed, exited with 14<br></code></pre></td></tr></table></figure></p><p>后台启动，需要加上<code>--fork</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo mongod --dbpath /Users/rustfisher/.mongodb/data --logpath /Users/rustfisher/.mongodb/log/mongodb1.<span class="hljs-built_in">log</span> --port 1993 --fork<br>about to fork child process, waiting until server is ready <span class="hljs-keyword">for</span> connections.<br>forked process: 7580<br>child process started successfully, parent exiting<br></code></pre></td></tr></table></figure></p><p>查询mongo进程<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ps aux | grep mong<br>rustfisher        7608   0.0  0.0  4268424    732 s003  S+    7:45下午   0:00.00 grep mong<br>root              7580   0.0  0.2  5548488  27868   ??  S     7:44下午   0:01.02 mongod --dbpath /Users/rustfisher/.mongodb/data --logpath /Users/rustfisher/.mongodb/log/mongodb1.<span class="hljs-built_in">log</span> --fork<br></code></pre></td></tr></table></figure></p><h2 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h2><p>我们的服务器一般是Linux。接下来在Ubuntu上安装运行mongodb。</p><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>Ubuntu上安装mongodb比较简单，用<code>apt-get</code>命令。</p><p>先upadate一次<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get update<br></code></pre></td></tr></table></figure></p><p>然后装上4.4.4版本的mongodb<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install -y mongodb-org=4.4.4 mongodb-org-server=4.4.4 mongodb-org-shell=4.4.4 mongodb-org-mongos=4.4.4 mongodb-org-tools=4.4.4<br></code></pre></td></tr></table></figure></p><p>等它装完后，看一下版本号<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">~$ mongod --version<br>db version v4.4.4<br>Build Info: &#123;<br>    <span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;4.4.4&quot;</span>,<br>    <span class="hljs-string">&quot;gitVersion&quot;</span>: <span class="hljs-string">&quot;8db30a63db1a9d84bdcad0c83369623f708e0397&quot;</span>,<br>    <span class="hljs-string">&quot;openSSLVersion&quot;</span>: <span class="hljs-string">&quot;OpenSSL 1.0.2g  1 Mar 2016&quot;</span>,<br>    <span class="hljs-string">&quot;modules&quot;</span>: [],<br>    <span class="hljs-string">&quot;allocator&quot;</span>: <span class="hljs-string">&quot;tcmalloc&quot;</span>,<br>    <span class="hljs-string">&quot;environment&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;distmod&quot;</span>: <span class="hljs-string">&quot;ubuntu1604&quot;</span>,<br>        <span class="hljs-string">&quot;distarch&quot;</span>: <span class="hljs-string">&quot;x86_64&quot;</span>,<br>        <span class="hljs-string">&quot;target_arch&quot;</span>: <span class="hljs-string">&quot;x86_64&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>可以发现，这里的gitVersion和前面用mac装的是一样的。<br>一些关于Linux的操作笔记，可以访问 <a href="https://rustfisher.com/tags/Linux/">https://rustfisher.com/tags/Linux/</a></p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>Ubuntu操作mongodb的<a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/">官方文档</a></p><p>默认的配置文件为 <code>/etc/mongod.conf</code></p><p>把端口改为1993，服务器如果启用了防火墙，记得允许1993端口<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo ufw allow 1993<br></code></pre></td></tr></table></figure><br>或者在云服务器控制台那里检查一些，是否开放了端口</p><p>服务器使用的是<code>systemctl</code></p><p>启动mongodb<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl start mongod<br></code></pre></td></tr></table></figure></p><p>查看状态<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl status mongod<br></code></pre></td></tr></table></figure></p><p>重启<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl restart mongod<br></code></pre></td></tr></table></figure></p><h2 id="MongoDB-Compasss"><a href="#MongoDB-Compasss" class="headerlink" title="MongoDB Compasss"></a>MongoDB Compasss</h2><p>前面我们已经安装好了mongodb，并且运行起来了。接下来我们找一个有图形化界面的软件来访问数据库。</p><p>MongoDB Compass能让用户清晰地看到文档结构，执行查询，修改等等操作。</p><p>在这里可以下载MongoDB Compasss <a href="https://www.mongodb.com/try/download/compass">https://www.mongodb.com/try/download/compass</a><br>这里我们使用mac下的1.25.0版本。</p><p>连接到本地的数据库，在Compass中选择新建连接<br><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">mongodb://127.0.0.1:1993/rustfisher-db?readPreference=<span class="hljs-keyword">primary</span><span class="hljs-variable">&amp;appname</span>=MongoDB%20Compass<span class="hljs-variable">&amp;ssl</span>=false<br></code></pre></td></tr></table></figure><br>前面我们启动mongodb是在1993端口，连接的时候要注意端口号。</p><p><code>127.0.0.1</code>是我们本地的ip，如果要连接到服务器的mongodb，一般可以直接用服务器ip来连接。</p><p>例如服务器公网ip是<code>1.2.3.4</code>，端口是<code>1993</code><br><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">mongodb://1.2.3.4:1993/rustfisher-db?readPreference=<span class="hljs-keyword">primary</span><span class="hljs-variable">&amp;appname</span>=MongoDB%20Compass<span class="hljs-variable">&amp;ssl</span>=false<br></code></pre></td></tr></table></figure></p><p>连上mongodb后，就可以自由地进行操作了。</p>]]></content>
    
    
    <categories>
      
      <category>MongoDB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MongoDB</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【运营的Python指南】绘制漏斗图</title>
    <link href="/Python/Python-op-draw-funnel-1/"/>
    <url>/Python/Python-op-draw-funnel-1/</url>
    
    <content type="html"><![CDATA[<p>写给运营朋友的Python指南。</p><p>漏斗图可对业务的各个关键环节进行描述，衡量各个环节的业务表现。可以非常直观地看到各个业务地转化程度。</p><p>本文介绍使用Python从Excel中读取数据，使用pyecharts绘制漏斗图。</p><h2 id="操作步骤说明"><a href="#操作步骤说明" class="headerlink" title="操作步骤说明"></a>操作步骤说明</h2><p>下面是操作的具体步骤。</p><h3 id="1-开发环境"><a href="#1-开发环境" class="headerlink" title="1.开发环境"></a>1.开发环境</h3><p>示例使用的IDE是PyCharm社区版，开发语言是Python3.x。</p><p>在工程中，新建Python文件<code>demo_data_funnel.py</code>。然后在同级的位置新建一个<code>res</code>文件夹，后面用来存放文件。</p><h3 id="2-准备数据"><a href="#2-准备数据" class="headerlink" title="2.准备数据"></a>2.准备数据</h3><p>创建一个Excel文件<code>事件demo.xlsx</code>。将表名改为<code>data3</code>。这个名字在代码中会用到。</p><p>写入两列数据<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">事件</span><span class="hljs-string">次数</span><br><span class="hljs-string">e1</span><span class="hljs-number">10000</span><br><span class="hljs-string">e2</span><span class="hljs-number">4695</span><br><span class="hljs-string">e3</span><span class="hljs-number">2584</span><br><span class="hljs-string">e4</span><span class="hljs-number">1295</span><br><span class="hljs-string">e5</span><span class="hljs-number">954</span><br></code></pre></td></tr></table></figure><br>得到如下的表格：<br><img src="excel.png" alt=""></p><p>与<code>demo_data_funnel.py</code>同级的地方新建了<code>res</code>文件夹，把Excel文件放进去。</p><p><img src="proj.png" alt="Excel文件放的位置示意图"></p><blockquote><p>这里我们暂时用测试数据看效果。后面再填入你的真实数据。</p></blockquote><h3 id="3-编写脚本"><a href="#3-编写脚本" class="headerlink" title="3.编写脚本"></a>3.编写脚本</h3><p>现在开始写Python代码。<br><code>demo_data_funnel.py</code>完整的代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> openpyxl <span class="hljs-keyword">import</span> load_workbook<br><span class="hljs-keyword">from</span> pyecharts.charts <span class="hljs-keyword">import</span> Funnel<br><span class="hljs-keyword">import</span> pyecharts.options <span class="hljs-keyword">as</span> opts<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_in_data</span>(<span class="hljs-params">file_path</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;获取原始数据 &gt;&gt;&gt;&#x27;</span>)<br>    wb = load_workbook(file_path)<br>    st = wb[<span class="hljs-string">&#x27;data3&#x27;</span>]<br>    data_list = []<br>    <span class="hljs-keyword">for</span> row_index <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, st.max_row + <span class="hljs-number">1</span>):<br>        event_name = st.cell(row=row_index, column=<span class="hljs-number">1</span>).value<br>        event_value = st.cell(row=row_index, column=<span class="hljs-number">2</span>).value<br>        data_list.append([event_name, event_value])<br>    <span class="hljs-built_in">print</span>(data_list)<br>    <span class="hljs-keyword">return</span> data_list<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">draw_funnel_default</span>(<span class="hljs-params">input_data</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;绘制漏斗图 &gt;&gt;&gt; https://gallery.pyecharts.org/#/Funnel/funnel_base&#x27;</span>)<br>    (<br>        Funnel(init_opts=opts.InitOpts(width=<span class="hljs-string">&quot;800px&quot;</span>, height=<span class="hljs-string">&quot;400px&quot;</span>))<br>            .add(series_name=<span class="hljs-string">&#x27;漏斗1&#x27;</span>, data_pair=input_data, )<br>            .set_global_opts(title_opts=opts.TitleOpts(title=<span class="hljs-string">&quot;漏斗图1&quot;</span>, subtitle=<span class="hljs-string">&quot;默认样式&quot;</span>))<br>            .render(<span class="hljs-string">&quot;funnel_chart_1.html&quot;</span>)<br>    )<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">draw_funnel_2</span>(<span class="hljs-params">input_data</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;绘制漏斗图1 &gt;&gt;&gt; https://gallery.pyecharts.org/#/Funnel/funnel_base&#x27;</span>)<br>    (<br>        Funnel(init_opts=opts.InitOpts(width=<span class="hljs-string">&quot;1000px&quot;</span>, height=<span class="hljs-string">&quot;600px&quot;</span>))<br>            .add(series_name=<span class="hljs-string">&#x27;漏斗1&#x27;</span>, data_pair=input_data,<br>                 label_opts=opts.LabelOpts(position=<span class="hljs-string">&quot;inside&quot;</span>, formatter=<span class="hljs-string">&#x27;&#123;b&#125; 数量: &#123;c&#125;&#x27;</span>),<br>                 gap=<span class="hljs-number">2</span>,<br>                 tooltip_opts=opts.TooltipOpts(trigger=<span class="hljs-string">&quot;item&quot;</span>, formatter=<span class="hljs-string">&quot;&#123;a&#125; &lt;br/&gt;&#123;b&#125; 数量: &#123;c&#125;&quot;</span>),<br>                 )<br>            .set_global_opts(title_opts=opts.TitleOpts(title=<span class="hljs-string">&quot;漏斗图1&quot;</span>, subtitle=<span class="hljs-string">&quot;改变了label&quot;</span>))<br>            .render(<span class="hljs-string">&quot;funnel_chart_2.html&quot;</span>)<br>    )<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">draw_funnel_3</span>(<span class="hljs-params">input_data</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;绘制漏斗图2 &gt;&gt;&gt; https://gallery.pyecharts.org/#/Funnel/funnel_base&#x27;</span>)<br>    data = input_data.copy()  <span class="hljs-comment"># 复制一份出来处理标题</span><br>    base_value = data[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(data)):<br>        event_name = data[x][<span class="hljs-number">0</span>]<br>        value = data[x][<span class="hljs-number">1</span>]  <span class="hljs-comment"># 拿到数值</span><br>        ratio = value / base_value<br>        event_name += <span class="hljs-string">&#x27;\n总体转化率: &#123;:.2f&#125;%&#x27;</span>.<span class="hljs-built_in">format</span>(ratio * <span class="hljs-number">100</span>)<br>        <span class="hljs-keyword">if</span> x &gt; <span class="hljs-number">0</span>:<br>            event_name += <span class="hljs-string">&#x27;\n相对转化率: &#123;:.2f&#125;%&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">100</span> * value / data[x - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>])<br>        data[x][<span class="hljs-number">0</span>] = event_name<br>        <span class="hljs-built_in">print</span>(event_name)<br><br>    (<br>        Funnel(init_opts=opts.InitOpts(width=<span class="hljs-string">&quot;1000px&quot;</span>, height=<span class="hljs-string">&quot;800px&quot;</span>))<br>            .add(series_name=<span class="hljs-string">&#x27;漏斗1&#x27;</span>, data_pair=data,<br>                 label_opts=opts.LabelOpts(position=<span class="hljs-string">&quot;inside&quot;</span>, formatter=<span class="hljs-string">&#x27;&#123;b&#125;\n数量: &#123;c&#125;&#x27;</span>),<br>                 gap=<span class="hljs-number">2</span>,<br>                 tooltip_opts=opts.TooltipOpts(trigger=<span class="hljs-string">&quot;item&quot;</span>, formatter=<span class="hljs-string">&quot;&#123;a&#125; &lt;br/&gt;&#123;b&#125; 数量: &#123;c&#125;&quot;</span>),<br>                 )<br>            .set_global_opts(title_opts=opts.TitleOpts(title=<span class="hljs-string">&quot;漏斗图1&quot;</span>, subtitle=<span class="hljs-string">&quot;修改了各项的标题&quot;</span>))<br>            .render(<span class="hljs-string">&quot;funnel_chart_3.html&quot;</span>)<br>    )<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    src_data = read_in_data(<span class="hljs-string">&#x27;res/事件demo.xlsx&#x27;</span>)<br>    draw_funnel_default(src_data)<br>    draw_funnel_2(src_data)<br>    draw_funnel_3(src_data)<br></code></pre></td></tr></table></figure><br>把上面的代码复制进你的脚本里。<br>可能会需要装上<code>pyecharts</code>和<code>openpyxl</code>。用PyCharm的时候，可以点到报红线的地方，根据它的提示，把这2个库装上。</p><p>运行代码，会得到3个html文件</p><p><img src="proj-html.png" alt="输出的html文件"></p><p>用浏览器打开这3个html就可以看到效果了。</p><p>把你的数据填到那个Excel里，保存。然后运行代码即可。</p><p>比如说把Excel里的事件改一下</p><p><img src="excel-data2.png" alt="修改后的数据"></p><p>运行代码，可以得到新的结果</p><p><img src="demo2-f1.png" alt=""></p><p>以上是简化流程，运营朋友照着做，一般都可以看到运行结果。下面我们来看一些细节。</p><h2 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h2><p>我们先准备一些测试数据。新建一个xlsx文件，填入测试数据。如下图：</p><p><img src="excel.png" alt=""></p><p>我们把数据放在了<code>data3</code>里。A列是事件名称，B列是次数。名称这里可以随意替换，可根据业务需求进行修改。<br>事件流程按照先后顺序，从上到下排列好。</p><p>首先需要把数据从excel中读取出来。我们用openpyxl来操作。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> openpyxl <span class="hljs-keyword">import</span> load_workbook<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_in_data</span>(<span class="hljs-params">file_path</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;获取原始数据 &gt;&gt;&gt;&#x27;</span>)<br>    wb = load_workbook(file_path)<br>    st = wb[<span class="hljs-string">&#x27;data3&#x27;</span>]<br>    data_list = []<br>    <span class="hljs-keyword">for</span> row_index <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, st.max_row + <span class="hljs-number">1</span>):<br>        event_name = st.cell(row=row_index, column=<span class="hljs-number">1</span>).value<br>        event_value = st.cell(row=row_index, column=<span class="hljs-number">2</span>).value<br>        data_list.append([event_name, event_value])<br>    <span class="hljs-built_in">print</span>(data_list)<br>    <span class="hljs-keyword">return</span> data_list<br></code></pre></td></tr></table></figure><br>将事件名和数据装到一个小的列表里<code>[event_name, event_value]</code>。<br>所有的事件放进一个大的列表，并返回。</p><p>当然，从别的途径拿到数据也是可以的。</p><h2 id="绘制漏斗图"><a href="#绘制漏斗图" class="headerlink" title="绘制漏斗图"></a>绘制漏斗图</h2><p>我们用<a href="https://pyecharts.org/">pyecharts</a>来绘制漏斗图。</p><blockquote><p><a href="https://github.com/ecomfe/echarts">Echarts</a> 是一个由百度开源的数据可视化，凭借着良好的交互性，精巧的图表设计，得到了众多开发者的认可。而 Python 是一门富有表达力的语言，很适合用于数据处理。当数据分析遇上数据可视化时，pyecharts 诞生了。</p></blockquote><p>pyecharts会输出html文件。</p><h3 id="默认样式"><a href="#默认样式" class="headerlink" title="默认样式"></a>默认样式</h3><p>拿到数据后，我们把数据传给<strong>Funnel</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pyecharts.charts <span class="hljs-keyword">import</span> Funnel<br><span class="hljs-keyword">import</span> pyecharts.options <span class="hljs-keyword">as</span> opts<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">draw_funnel_default</span>(<span class="hljs-params">input_data</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;绘制漏斗图 &gt;&gt;&gt; https://gallery.pyecharts.org/#/Funnel/funnel_base&#x27;</span>)<br>    (<br>        Funnel(init_opts=opts.InitOpts(width=<span class="hljs-string">&quot;800px&quot;</span>, height=<span class="hljs-string">&quot;400px&quot;</span>))<br>            .add(series_name=<span class="hljs-string">&#x27;漏斗1&#x27;</span>, data_pair=input_data, )<br>            .set_global_opts(title_opts=opts.TitleOpts(title=<span class="hljs-string">&quot;漏斗图1&quot;</span>, subtitle=<span class="hljs-string">&quot;默认样式&quot;</span>))<br>            .render(<span class="hljs-string">&quot;funnel_chart_1.html&quot;</span>)<br>    )<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    src_data = read_in_data(<span class="hljs-string">&#x27;res/事件demo.xlsx&#x27;</span>)<br>    draw_funnel_default(src_data)<br></code></pre></td></tr></table></figure><ul><li>初始配置里设定宽高 <code>InitOpts(width=&quot;800px&quot;, height=&quot;400px&quot;)</code></li><li><code>input_data</code>就是我们前面获取的数据列表；将它传给<code>data_pair</code>，即<code>data_pair=input_data</code></li><li>输出的网页文件名为<code>funnel_chart_1.html</code></li><li><code>set_global_opts()</code>方法设置全局配置<ul><li>标题设置 <code>title=&quot;漏斗图1&quot;</code></li><li>副标题设置 <code>subtitle=&quot;默认样式&quot;</code></li></ul></li></ul><p>输出的html文件，用浏览器打开，如图：</p><p><img src="demo-default.png" alt=""></p><p>鼠标放上去会有小弹框提示（tooltip）</p><p><a href="/art/py/op-funnel/funnel_chart_1.html">🔗 默认样式网页的链接</a></p><h3 id="修改label"><a href="#修改label" class="headerlink" title="修改label"></a>修改label</h3><p>pyecharts开放了很多配置。我们可以修改一下每一项的标题。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">draw_funnel_2</span>(<span class="hljs-params">input_data</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;绘制漏斗图1 &gt;&gt;&gt; https://gallery.pyecharts.org/#/Funnel/funnel_base&#x27;</span>)<br>    (<br>        Funnel(init_opts=opts.InitOpts(width=<span class="hljs-string">&quot;1000px&quot;</span>, height=<span class="hljs-string">&quot;600px&quot;</span>))<br>            .add(series_name=<span class="hljs-string">&#x27;漏斗1&#x27;</span>, data_pair=input_data,<br>                 label_opts=opts.LabelOpts(position=<span class="hljs-string">&quot;inside&quot;</span>, formatter=<span class="hljs-string">&#x27;&#123;b&#125; 数量: &#123;c&#125;&#x27;</span>),<br>                 gap=<span class="hljs-number">2</span>,<br>                 tooltip_opts=opts.TooltipOpts(trigger=<span class="hljs-string">&quot;item&quot;</span>, formatter=<span class="hljs-string">&quot;&#123;a&#125; &lt;br/&gt;&#123;b&#125; 数量: &#123;c&#125;&quot;</span>),<br>                 )<br>            .set_global_opts(title_opts=opts.TitleOpts(title=<span class="hljs-string">&quot;漏斗图1&quot;</span>, subtitle=<span class="hljs-string">&quot;改变了label&quot;</span>))<br>            .render(<span class="hljs-string">&quot;funnel_chart_2.html&quot;</span>)<br>    )<br></code></pre></td></tr></table></figure></p><h4 id="formatter"><a href="#formatter" class="headerlink" title="formatter"></a>formatter</h4><ul><li><code>&#123;a&#125;</code>是<code>series_name</code>，在这里是图表的名字</li><li><code>&#123;b&#125;</code>是这一项的标题</li><li><code>&#123;c&#125;</code>是这一项的数量</li></ul><p><code>tooltip_opts</code>和<code>label_opts</code>都会用到<code>formatter</code>。</p><p><img src="f2.png" alt=""></p><p><a href="/art/py/op-funnel/funnel_chart_2.html">🔗  浏览网页</a></p><h3 id="自己计算转化率"><a href="#自己计算转化率" class="headerlink" title="自己计算转化率"></a>自己计算转化率</h3><p>为了显示出相对转化率和总体转化率。我们可以自己计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">draw_funnel_3</span>(<span class="hljs-params">input_data</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;绘制漏斗图2 &gt;&gt;&gt; https://gallery.pyecharts.org/#/Funnel/funnel_base&#x27;</span>)<br>    data = input_data.copy()  <span class="hljs-comment"># 复制一份出来处理标题</span><br>    base_value = data[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(data)):<br>        event_name = data[x][<span class="hljs-number">0</span>]<br>        value = data[x][<span class="hljs-number">1</span>]  <span class="hljs-comment"># 拿到数值</span><br>        ratio = value / base_value<br>        event_name += <span class="hljs-string">&#x27;\n总体转化率: &#123;:.2f&#125;%&#x27;</span>.<span class="hljs-built_in">format</span>(ratio * <span class="hljs-number">100</span>)<br>        <span class="hljs-keyword">if</span> x &gt; <span class="hljs-number">0</span>:<br>            event_name += <span class="hljs-string">&#x27;\n相对转化率: &#123;:.2f&#125;%&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">100</span> * value / data[x - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>])<br>        data[x][<span class="hljs-number">0</span>] = event_name<br>        <span class="hljs-built_in">print</span>(event_name)<br><br>    (<br>        Funnel(init_opts=opts.InitOpts(width=<span class="hljs-string">&quot;1000px&quot;</span>, height=<span class="hljs-string">&quot;800px&quot;</span>))<br>            .add(series_name=<span class="hljs-string">&#x27;漏斗1&#x27;</span>, data_pair=data,<br>                 label_opts=opts.LabelOpts(position=<span class="hljs-string">&quot;inside&quot;</span>, formatter=<span class="hljs-string">&#x27;&#123;b&#125;\n数量: &#123;c&#125;&#x27;</span>),<br>                 gap=<span class="hljs-number">2</span>,<br>                 tooltip_opts=opts.TooltipOpts(trigger=<span class="hljs-string">&quot;item&quot;</span>, formatter=<span class="hljs-string">&quot;&#123;a&#125; &lt;br/&gt;&#123;b&#125; 数量: &#123;c&#125;&quot;</span>),<br>                 )<br>            .set_global_opts(title_opts=opts.TitleOpts(title=<span class="hljs-string">&quot;漏斗图1&quot;</span>, subtitle=<span class="hljs-string">&quot;修改了各项的标题&quot;</span>))<br>            .render(<span class="hljs-string">&quot;funnel_chart_3.html&quot;</span>)<br>    )<br></code></pre></td></tr></table></figure><p>在for循环里计算转化率，并把结果写到事件的名称里。</p><p><img src="f3.png" alt=""></p><p><a href="/art/py/op-funnel/funnel_chart_3.html">🔗  浏览网页</a></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运营的Python指南</tag>
      
      <tag>openpyxl</tag>
      
      <tag>pyecharts</tag>
      
      <tag>Excel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTTP状态码</title>
    <link href="/Network/http-code/"/>
    <url>/Network/http-code/</url>
    
    <content type="html"><![CDATA[<p>HTTP状态码被分成了5大类。本文对每一类常见的状态码进行总结。</p><p>列出的是<code>HTTP/1.1</code>规范推荐使用的原因短语。</p><h2 id="100-199-信息性状态码"><a href="#100-199-信息性状态码" class="headerlink" title="100~199 信息性状态码"></a>100~199 信息性状态码</h2><table><thead><tr><th style="text-align:center">状态码</th><th style="text-align:center">原因短语</th><th style="text-align:left">描述</th><th style="text-align:left">(图文无关)</th></tr></thead><tbody><tr><td style="text-align:center">100</td><td style="text-align:center">Continue</td><td style="text-align:left">说明收到了请求的初始部分，请客户端继续。</td><td style="text-align:left"><img src="cat-100.png" alt=""></td></tr><tr><td style="text-align:center">101</td><td style="text-align:center">Switching Protocols</td><td style="text-align:left">说明服务器正在根据客户端的指定，将协议切换成Update首部所列的协议</td><td style="text-align:left">*</td></tr></tbody></table><h2 id="200-299-成功状态码"><a href="#200-299-成功状态码" class="headerlink" title="200~299 成功状态码"></a>200~299 成功状态码</h2><table><thead><tr><th style="text-align:center">状态码</th><th style="text-align:center">原因短语</th><th style="text-align:left">描述</th><th style="text-align:left">(图文无关)</th></tr></thead><tbody><tr><td style="text-align:center">200</td><td style="text-align:center">OK</td><td style="text-align:left">OK</td><td style="text-align:left"><img src="cat-200.png" alt=""></td></tr><tr><td style="text-align:center">201</td><td style="text-align:center">Created</td><td style="text-align:left"></td><td style="text-align:left">*</td></tr><tr><td style="text-align:center">202</td><td style="text-align:center">Accepted</td><td style="text-align:left"></td><td style="text-align:left">*</td></tr><tr><td style="text-align:center">203</td><td style="text-align:center">Non-Authoritative Information</td><td style="text-align:left"></td><td style="text-align:left">*</td></tr><tr><td style="text-align:center">204</td><td style="text-align:center">No Content</td><td style="text-align:left"></td><td style="text-align:left">*</td></tr><tr><td style="text-align:center">205</td><td style="text-align:center">Reset Content</td><td style="text-align:left"></td><td style="text-align:left">*</td></tr><tr><td style="text-align:center">206</td><td style="text-align:center">Partical Content</td><td style="text-align:left"></td><td style="text-align:left">*</td></tr></tbody></table><h2 id="300-399-重定向状态码"><a href="#300-399-重定向状态码" class="headerlink" title="300~399 重定向状态码"></a>300~399 重定向状态码</h2><table><thead><tr><th style="text-align:center">状态码</th><th style="text-align:center">原因短语</th><th style="text-align:left">描述</th><th style="text-align:left">(图文无关)</th></tr></thead><tbody><tr><td style="text-align:center">300</td><td style="text-align:center">Multiple Choices</td><td style="text-align:left">客户端请求一个实际指向多个资源的URL时会返回这个状态码，比如服务器上有某个HTML文档的英语和法语版本。服务器可以在location首部包含首选URL。</td><td style="text-align:left"></td></tr><tr><td style="text-align:center">301</td><td style="text-align:center">Moved Permanently</td><td style="text-align:left">在请求的URL已被移除时使用。响应的Location首部中应该包含资源现在所处的URL。</td><td style="text-align:left"><img src="man-301.png" alt=""></td></tr><tr><td style="text-align:center">302</td><td style="text-align:center">Found</td><td style="text-align:left">与301类似，但客户端应该使用Location首部给出的URL来临时定位资源。</td><td style="text-align:left"><img src="man-302.png" alt=""></td></tr><tr><td style="text-align:center">304</td><td style="text-align:center">Not Modified</td><td style="text-align:left">有条件的首部。如果客户端发起了一个条件GET请求，而最近资源未被修改，就可以用这个状态码来说没资源未被修改。带有这个状态码的响应不应该包含实体的主体部分。</td><td style="text-align:left">*</td></tr></tbody></table><h2 id="400-499-客户端错误状态码"><a href="#400-499-客户端错误状态码" class="headerlink" title="400~499 客户端错误状态码"></a>400~499 客户端错误状态码</h2><table><thead><tr><th style="text-align:center">状态码</th><th style="text-align:center">原因短语</th><th style="text-align:left">描述</th><th style="text-align:left">(图文无关)</th></tr></thead><tbody><tr><td style="text-align:center">400</td><td style="text-align:center">Bad Request</td><td style="text-align:left">告知客户端发送了一个错误的请求。</td><td style="text-align:left"><img src="man-400.png" alt=""></td></tr><tr><td style="text-align:center">401</td><td style="text-align:center">Unauthorized</td><td style="text-align:left">未认证。</td><td style="text-align:left"><img src="cat-401.png" alt=""></td></tr><tr><td style="text-align:center">403</td><td style="text-align:center">Forbidden</td><td style="text-align:left">请求被服务器拒绝。</td><td style="text-align:left"><img src="cat-403.png" alt="">   <img src="man-403.png" alt=""></td></tr><tr><td style="text-align:center">404</td><td style="text-align:center">Not Found</td><td style="text-align:left">服务器无法找到所请求的URL。</td><td style="text-align:left"><img src="cat-404.png" alt="">   <img src="man-404.png" alt=""></td></tr><tr><td style="text-align:center">405</td><td style="text-align:center">Method Not Allowed</td><td style="text-align:left">发起的请求中带有所请求的URL不支持的方法时，使用此状态码。应该在响应中包含Allow首部，以告知客户端对所请求的资源可以使用哪些方法。</td><td style="text-align:left"></td></tr><tr><td style="text-align:center">406</td><td style="text-align:center">Not Acceptable</td><td style="text-align:left">服务器没有与客户端可接受的URL相匹配的资源时，使用此代码。</td><td style="text-align:left"><img src="cat-406.png" alt="">   <img src="man-406.png" alt=""></td></tr><tr><td style="text-align:center">408</td><td style="text-align:center">Request Timeout</td><td style="text-align:left">如果客户端完成请求所花的时间太长，服务器可以回送此状态码，并关闭连接。</td><td style="text-align:left"><img src="cat-408.png" alt=""></td></tr><tr><td style="text-align:center">410</td><td style="text-align:center">Gone</td><td style="text-align:left">与404类似，只是服务器曾经有过此资源。</td><td style="text-align:left"></td></tr><tr><td style="text-align:center">411</td><td style="text-align:center">Length Required</td><td style="text-align:left">服务器要求Content-Length首部。</td><td style="text-align:left"></td></tr><tr><td style="text-align:center">412</td><td style="text-align:center">Precondition Failed</td><td style="text-align:left">客户端发起了条件请求，且其中一个条件失败了。</td><td style="text-align:left"></td></tr><tr><td style="text-align:center">415</td><td style="text-align:center">Unsupported Media Type</td><td style="text-align:left">服务器无法理解或无法支持客户端所发实体的内容类型。</td><td style="text-align:left"></td></tr><tr><td style="text-align:center">416</td><td style="text-align:center">Requested Range Not Satisfiable</td><td style="text-align:left">请求报文所请求的是指定资源的某个范围，而此范围无效或无法满足。</td><td style="text-align:left"><img src="cat-416.png" alt=""></td></tr></tbody></table><h2 id="500-599-服务器错误状态码"><a href="#500-599-服务器错误状态码" class="headerlink" title="500~599 服务器错误状态码"></a>500~599 服务器错误状态码</h2><table><thead><tr><th style="text-align:center">状态码</th><th style="text-align:center">原因短语</th><th style="text-align:left">描述</th><th style="text-align:left">(图文无关)</th></tr></thead><tbody><tr><td style="text-align:center">500</td><td style="text-align:center">Internal Server Error</td><td style="text-align:left">服务器遇到一个妨碍它为请求提供服务的错误</td><td style="text-align:left"><img src="cat-500.png" alt=""></td></tr><tr><td style="text-align:center">501</td><td style="text-align:center">Not Implement</td><td style="text-align:left">客户端发起的请求超过服务器能力范围</td><td style="text-align:left"></td></tr><tr><td style="text-align:center">503</td><td style="text-align:center">Service Unavailable</td><td style="text-align:left">服务器现在无法为请求提供服务，但将来可以</td><td style="text-align:left"></td></tr><tr><td style="text-align:center">504</td><td style="text-align:center">Gateway Timeout</td><td style="text-align:left">与408类似，只是这里的响应来自一个网关或代理</td><td style="text-align:left"></td></tr><tr><td style="text-align:center">505</td><td style="text-align:center">HTTP Version Not Supported</td><td style="text-align:left">服务器收到的请求使用了它无法或不愿支持的协议版本</td><td style="text-align:left">*</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>HTTP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>http</tag>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NestJS 部署与维护</title>
    <link href="/NestJS/nest-devops/"/>
    <url>/NestJS/nest-devops/</url>
    
    <content type="html"><![CDATA[<p>我们可以把nestjs的工程传到服务器上，然后直接进行npm操作。<br>也可以在本地打包出nestjs的包，将<code>dist</code>目录传到服务器上。</p><p>在这里为了方便演示，我们描述的是将工程传到服务器后的操作。<br>传工程文件，可以用github/gitee当作中间桥梁，也可以用vscode的插件传输，或者使用scp命令。</p><p>同理，<code>dist</code>目录也可以传到github/gitee上，服务器直接使用编译好的文件。</p><h2 id="直接启动"><a href="#直接启动" class="headerlink" title="直接启动"></a>直接启动</h2><p>启动前，进入工程目录，先安装一次。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install<br></code></pre></td></tr></table></figure></p><p>用<code>npm run</code>命令启动服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 开发模式</span><br>$ npm run start<br><br><span class="hljs-comment"># 观察模式</span><br>$ npm run start:dev<br></code></pre></td></tr></table></figure></p><p>在服务器上，运行正式环境（生产环境 production）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 启动生产环境前 先start</span><br>$ npm run start<br><br><span class="hljs-comment"># 生产环境</span><br>$ npm run start:prod<br></code></pre></td></tr></table></figure><br>使用<code>npm run</code>运行的程序，可以<code>ctrl + c</code>停止。</p><p>run起来后，编译后的文件在<code>dist</code>目录里。</p><h2 id="使用pm2管理"><a href="#使用pm2管理" class="headerlink" title="使用pm2管理"></a>使用pm2管理</h2><p>pm2是常用的node进程管理工具，它可以提供node.js应用管理，如自动重载、性能监控、负载均衡等。</p><p>在服务器上，我们使用npm安装这个工具<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install pm2<br></code></pre></td></tr></table></figure></p><p>安装完毕后，查看一下版本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ pm2 -v<br>4.4.1<br></code></pre></td></tr></table></figure></p><h3 id="pm2启动服务"><a href="#pm2启动服务" class="headerlink" title="pm2启动服务"></a>pm2启动服务</h3><p>我们知道，nestjs编译后的文件在<code>dist</code>目录里，入口文件是<code>dist/main.js</code></p><p>用pm2启动服务之前，先把该装的库用npm装好。运行<code>npm run start:prod</code>，然后<code>ctrl + c</code>停止。</p><p>接下来用pm2启动<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pm2 start dist/main.js --name=<span class="hljs-string">&quot;这里是自定义的名字&quot;</span><br></code></pre></td></tr></table></figure></p><h3 id="查看服务"><a href="#查看服务" class="headerlink" title="查看服务"></a>查看服务</h3><p>使用命令<code>pm2 list</code>查看服务</p><p>例如在某个服务器上<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ pm2 list <br>┌─────┬───────────────────┬─────────────┬─────────┬─────────┬──────────┬────────┬──────┬───────────┬──────────┬──────────┬──────────┬──────────┐<br>│ <span class="hljs-built_in">id</span>  │ name              │ namespace   │ version │ mode    │ pid      │ <span class="hljs-built_in">uptime</span> │ ↺    │ status    │ cpu      │ mem      │ user     │ watching │<br>├─────┼───────────────────┼─────────────┼─────────┼─────────┼──────────┼────────┼──────┼───────────┼──────────┼──────────┼──────────┼──────────┤<br>│ 3   │ rustfisher-debug  │ default     │ 1.0.0   │ fork    │ 12260    │ 2M     │ 0    │ online    │ 0%       │ 39.7mb   │ ubuntu   │ disabled │<br>│ 2   │ rustfisher-release│ default     │ 1.0.0   │ fork    │ 12090    │ 2M     │ 46   │ online    │ 0%       │ 44.6mb   │ ubuntu   │ disabled │<br>│ 0   │ index             │ default     │ 1.0.0   │ fork    │ 0        │ 0      │ 68   │ stopped   │ 0%       │ 0b       │ ubuntu   │ disabled │<br>│ 1   │ index             │ default     │ 1.0.0   │ fork    │ 0        │ 0      │ 15   │ stopped   │ 0%       │ 0b       │ ubuntu   │ disabled │<br>│ 4   │ an.rustfisher     │ default     │ 0.0.1   │ fork    │ 32252    │ 74m    │ 0    │ online    │ 0%       │ 51.5mb   │ ubuntu   │ disabled │<br>└─────┴───────────────────┴─────────────┴─────────┴─────────┴──────────┴────────┴──────┴───────────┴──────────┴──────────┴──────────┴──────────┘<br></code></pre></td></tr></table></figure></p><h3 id="停止服务"><a href="#停止服务" class="headerlink" title="停止服务"></a>停止服务</h3><p>想要停止某个服务，使用<code>pm2 stop</code> + 服务名（name）或者id</p><p>例如<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pm2 stop rustfisher-debug<br></code></pre></td></tr></table></figure><br>执行完毕后，会自动运行一次<code>pm2 list</code></p><h3 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h3><p>用<code>pm2 restart</code> + 服务名（name）或者id<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pm2 restart rustfisher-debug<br></code></pre></td></tr></table></figure><br>或者<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pm2 restart 3<br></code></pre></td></tr></table></figure></p><h3 id="日志管理"><a href="#日志管理" class="headerlink" title="日志管理"></a>日志管理</h3><p>默认情况下，pm2的日志存放在<code>~/.pm2/log</code>里。每个启动的服务有对应的log文件。</p><p>例如，在某个服务器上<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">ls</span> .pm2/logs/<br>app-error.log  dr-debug-error.log  dr-release-error.log  index-error.log   www-error.log<br>app-out.log    dr-debug-out.log    dr-release-out.log    index-out.log     www-out.log<br></code></pre></td></tr></table></figure></p><h2 id="nohup后台启动"><a href="#nohup后台启动" class="headerlink" title="nohup后台启动"></a>nohup后台启动</h2><p>我们也可用nohup后台启动。</p><p>进入工程目录，运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">nohup</span> npm run start:prod &gt;&gt; nohup.log &amp;<br></code></pre></td></tr></table></figure></p><p>查看进程<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ps -aux | grep node<br>ubuntu   11826  0.0  1.2 674064 10988 ?        Ssl  Mar16   0:00 /usr/local/bin/node /usr/local/lib/node_modules/npm/node_modules/update-notifier/check.js &#123;<span class="hljs-string">&quot;pkg&quot;</span>:&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;npm&quot;</span>,<span class="hljs-string">&quot;version&quot;</span>:<span class="hljs-string">&quot;6.14.6&quot;</span>&#125;&#125;<br>ubuntu   16478  0.0  0.0   4512   788 pts/3    S    11:49   0:00 sh -c node dist/main<br>ubuntu   16479  0.4  5.1 578840 45228 pts/3    Sl   11:49   0:00 node dist/main<br>ubuntu   16959  0.0  0.1  13232   928 pts/3    S+   11:52   0:00 grep --color=auto node<br></code></pre></td></tr></table></figure><br>可以看到有2个相关的进程16478和16479</p><p>查看端口占用情况。假设我们工程监听的是8090端口。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ netstat -anp | grep 8090<br>(Not all processes could be identified, non-owned process info<br> will not be shown, you would have to be root to see it all.)<br>tcp        0      0 127.0.0.1:52788         127.0.0.1:8090          TIME_WAIT   -               <br>tcp6       0      0 :::8090                 :::*                    LISTEN      16479/node      <br></code></pre></td></tr></table></figure></p><p>结合一看，进程16479是我们后台运行的服务没错了。</p><p>停止后台进程<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">kill</span> 16479<br></code></pre></td></tr></table></figure><br>kill然后再查询进程和端口占用情况，就没有相关的进程了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>可以用不同的方式后台启动服务。<br>启动生产环境之前，要先同步并编译。</p>]]></content>
    
    
    <categories>
      
      <category>NestJS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NestJS</tag>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell for循环语句</title>
    <link href="/Linux/for-use/"/>
    <url>/Linux/for-use/</url>
    
    <content type="html"><![CDATA[<p>Shell里的for循环语句写法。我们分别用命令行和shell脚本来进行演示。</p><p>常见的一种for结构如下。for里面要跟着<code>do</code>和<code>done</code>关键字。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">for i in &#123;1..3&#125;<br>do<br>    echo YES $i # 这里是循环体<br>done<br></code></pre></td></tr></table></figure><h2 id="数字范围"><a href="#数字范围" class="headerlink" title="数字范围"></a>数字范围</h2><p>数字范围，例如从1到3，从1到100。</p><h3 id="for-in"><a href="#for-in" class="headerlink" title="for in"></a>for in</h3><p>for in 的写法，定义<code>i</code>为变量，使用大括号来指定范围。范围的数字之间有2个点<code>..</code>。例如<code>&#123;1..3&#125;</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> &#123;1..3&#125;;<span class="hljs-keyword">do</span> <span class="hljs-built_in">echo</span> now is <span class="hljs-variable">$i</span>; <span class="hljs-keyword">done</span><br>now is 1<br>now is 2<br>now is 3<br></code></pre></td></tr></table></figure><br>上面是命令行，一行把所有的指令写完。也可以再加一行代码，同样用分号<code>;</code>来分隔。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> &#123;1..3&#125;;<span class="hljs-keyword">do</span> <span class="hljs-built_in">echo</span> now is <span class="hljs-variable">$i</span>;<span class="hljs-built_in">echo</span> rustfisher.com; <span class="hljs-keyword">done</span><br>now is 1<br>rustfisher.com<br>now is 2<br>rustfisher.com<br>now is 3<br>rustfisher.com<br></code></pre></td></tr></table></figure></p><p>或者写成脚本。其实就是拆成几行。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span>  <br><br>for i in &#123;1..3&#125;<br>do<br>    echo now is $i<br>    echo rustfisher.com<br>done<br></code></pre></td></tr></table></figure></p><p>前面我们用的是大括号来指定循环范围。我们也可以用<code>$(seq 1 3)</code>。<br>开头依旧是<code>for i in</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">seq</span> 1 3);<span class="hljs-keyword">do</span> <span class="hljs-built_in">echo</span> now is <span class="hljs-variable">$i</span>;<span class="hljs-built_in">echo</span> rustfisher.com; <span class="hljs-keyword">done</span><br>now is 1<br>rustfisher.com<br>now is 2<br>rustfisher.com<br>now is 3<br>rustfisher.com<br></code></pre></td></tr></table></figure></p><p>写成脚本如下<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span>  <br><br>for i in $(seq 1 3)<br>do <br>    echo now is $i<br>    echo rustfisher.com<br>done<br></code></pre></td></tr></table></figure></p><p>实际上我们使用了<code>seq</code>命令。seq后面接2个数字，可以输出这个范围内的数字。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">seq</span> 1 5<br>1<br>2<br>3<br>4<br>5<br>~ $ <span class="hljs-built_in">seq</span> 5 1<br>5<br>4<br>3<br>2<br>1<br></code></pre></td></tr></table></figure></p><h3 id="for-i-1-i-lt-3-i"><a href="#for-i-1-i-lt-3-i" class="headerlink" title="for((i=1;i&lt;=3;i++))"></a>for((i=1;i&lt;=3;i++))</h3><p>我们也可以写成像Java/C语言里的for循环那样。但要注意这里的for有2层小括号。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-keyword">for</span>((i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">3</span>;i++));<span class="hljs-keyword">do</span> <span class="hljs-built_in">echo</span> -n now is [<span class="hljs-variable">$i</span>] ;<span class="hljs-built_in">echo</span> rustfisher.com; <span class="hljs-keyword">done</span><br>now is [1]rustfisher.com<br>now is [2]rustfisher.com<br>now is [3]rustfisher.com<br></code></pre></td></tr></table></figure></p><p>更改一下步进值，改为<code>i+=2</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span>((i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">3</span>;i+=<span class="hljs-number">2</span>));<span class="hljs-keyword">do</span> <span class="hljs-built_in">echo</span> -n now is [<span class="hljs-variable">$i</span>] ;<span class="hljs-built_in">echo</span> rustfisher.com; <span class="hljs-keyword">done</span><br>now is [1]rustfisher.com<br>now is [3]rustfisher.com<br></code></pre></td></tr></table></figure></p><p>或者加上一些小运算，用<code>expr</code>加上我们想要的运算。注意<code>$i</code>与<code>\*</code>和<code>3</code>之间要有空格。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-keyword">for</span>((i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">3</span>;i+=<span class="hljs-number">2</span>));<span class="hljs-keyword">do</span> <span class="hljs-built_in">echo</span> -n $(<span class="hljs-built_in">expr</span> <span class="hljs-variable">$i</span> \* 3) <span class="hljs-string">&#x27; &#x27;</span> ;<span class="hljs-built_in">echo</span> rustfisher.com; <span class="hljs-keyword">done</span><br>3  rustfisher.com<br>9  rustfisher.com<br></code></pre></td></tr></table></figure><br>后面加的空格是为了隔开好看一些。</p><p>在shell脚本中，我们有时候会定义变量。变量也可以作为for循环的范围。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span>  <br><br>startNum=1<br>endNum=3<br><br>for i in $(seq $startNum $endNum)<br>do<br>    echo current is $i<br>done<br></code></pre></td></tr></table></figure><br>我们定义2个变量<code>startNum</code>与<code>endNum</code>。要使用它们的值时，需要加上<code>$</code>符号。</p><h2 id="字符循环"><a href="#字符循环" class="headerlink" title="字符循环"></a>字符循环</h2><p>for循环可以与一些指令结合起来，获取指令中的结果。</p><h3 id="for-i-in-ls"><a href="#for-i-in-ls" class="headerlink" title="for i in ls"></a>for i in <code>ls</code></h3><p>先用命令行看一个效果，for与ls结合使用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> `<span class="hljs-built_in">ls</span>`; <span class="hljs-keyword">do</span> <span class="hljs-built_in">echo</span> <span class="hljs-variable">$i</span> ; <span class="hljs-keyword">done</span><br>for1.sh<br></code></pre></td></tr></table></figure><br>当前目录里只有1个文件。</p><p>如果是<code>ls -a</code>命令，输出会更多。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> `<span class="hljs-built_in">ls</span> -a`; <span class="hljs-keyword">do</span> <span class="hljs-built_in">echo</span> <span class="hljs-variable">$i</span> ; <span class="hljs-keyword">done</span><br>.<br>..<br>for1.sh<br></code></pre></td></tr></table></figure></p><p>换一个目录，我们可以输出所有png文件的文件名<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> `<span class="hljs-built_in">ls</span> *.png`; <span class="hljs-keyword">do</span> <span class="hljs-built_in">echo</span> <span class="hljs-variable">$i</span> ; <span class="hljs-keyword">done</span><br>android-cover-2.png<br>fish.png<br>ic_book_blue.png<br>ic_tools_gear.png<br>ic_web.png<br>kotlin-android-1.png<br>python-logo.png<br>ts-blue-1.png<br></code></pre></td></tr></table></figure></p><h3 id="for-i-in-ll"><a href="#for-i-in-ll" class="headerlink" title="for i in ll"></a>for i in <code>ll</code></h3><p>换成<code>ll</code>命令，输出更加丰富<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> `ll`; <span class="hljs-keyword">do</span> <span class="hljs-built_in">echo</span> <span class="hljs-variable">$i</span> ; <span class="hljs-keyword">done</span><br>total<br>8<br>-rw-r--r--<br>1<br>rustfisher<br>staff<br>183<br>6<br>19<br>21:25<br>for1.sh<br></code></pre></td></tr></table></figure></p><p>我们知道<code>ll</code>命令会输出当前目录下的文件信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ll<br>total 8<br>-rw-r--r--  1 rustfisher  staff  183  6 19 21:25 for1.sh<br></code></pre></td></tr></table></figure></p><p>结合for循环可以看出，for循环是获取了空格或换行为间隔的字符串。</p><p>显示各个子目录里md文件的个数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> `<span class="hljs-built_in">ls</span>`; <span class="hljs-keyword">do</span> <span class="hljs-built_in">echo</span> <span class="hljs-variable">$i</span>; find <span class="hljs-variable">$i</span> -name <span class="hljs-string">&quot;*.md&quot;</span> | <span class="hljs-built_in">wc</span> -l; <span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure></p><h3 id="字符串变量"><a href="#字符串变量" class="headerlink" title="字符串变量"></a>字符串变量</h3><p>那么我们可以在脚本中尝试一些，for循环配合字符串<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span>  <br><br>word=&quot;Welcome      to rustfisher.com&quot;<br>for i in $word<br>do<br>    echo $i<br>done<br></code></pre></td></tr></table></figure></p><p><code>word</code>中间有很多个空格，但输出的依旧是这3行。<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">Welcome<br><span class="hljs-keyword">to</span><br>rustfisher.<span class="hljs-keyword">com</span><br></code></pre></td></tr></table></figure></p><p>进一步扩展，定义3个变量，都作为for in的参数<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span>  <br><br>word1=&quot;Welcome        to rustfisher.com&quot;<br>word2=&quot;Hello world&quot;<br>word3=&quot;我很好&quot;<br>for i in $word1 $word2 $word3<br>do<br>    echo $i<br>done<br></code></pre></td></tr></table></figure></p><p>输出<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vim">Welcome<br><span class="hljs-keyword">to</span><br>rustfisher.<span class="hljs-keyword">com</span><br>Hello<br>world<br>我很好<br></code></pre></td></tr></table></figure></p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>例如查找某个目录下的文件。</p><p>当前目录中有一个img目录，里面有一些图片。我们在for in 后面用<code>img/*</code>来表示查找这个目录中所有文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> img/*; <span class="hljs-keyword">do</span> <span class="hljs-built_in">echo</span> <span class="hljs-variable">$i</span> ; <span class="hljs-keyword">done</span><br>img/android-2botsm.jpg<br>img/android-cover-2.png<br></code></pre></td></tr></table></figure></p><p>如果只想看png文件，路径写为<code>img/*.png</code>。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> img/*.png; <span class="hljs-keyword">do</span> <span class="hljs-built_in">echo</span> <span class="hljs-variable">$i</span> ; <span class="hljs-keyword">done</span><br>img/android-cover-2.png<br></code></pre></td></tr></table></figure></p><p>从上面的例子可以看出，for in结构用的十分频繁。</p>]]></content>
    
    
    <categories>
      
      <category>Linux_note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Shell</tag>
      
      <tag>for</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《上瘾：让用户养成使用习惯的四大产品逻辑》读书笔记</title>
    <link href="/reading/business/HOOKED-note/"/>
    <url>/reading/business/HOOKED-note/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><div class="note note-info">            <p>《上瘾：让用户养成使用习惯的四大产品逻辑》</p><p>作者：尼尔·埃亚尔 瑞安·胡佛</p>          </div><h2 id="摘抄"><a href="#摘抄" class="headerlink" title="摘抄"></a>摘抄</h2><h3 id="前言-为什么有的产品会让人上瘾？"><a href="#前言-为什么有的产品会让人上瘾？" class="headerlink" title="前言 为什么有的产品会让人上瘾？"></a>前言 为什么有的产品会让人上瘾？</h3><ul><li>习惯是指我们下意识做出的举动。</li><li>集网络连接、海量数据、超快网速三者于一身的技术正在使这个世界上瘾成性。</li><li>生产习惯养成类产品可以让商家稳占竞争优势。</li><li>上瘾模型将用户面临的问题与企业提供的应对策略衔接在一起，二者频繁互动，促成用户养成习惯。</li><li>上瘾模型包括四个阶段：触发，行动，多变的酬赏，投入。</li></ul><h3 id="第一章-习惯的力量：-如何让你的产品从维生素变成止痛药"><a href="#第一章-习惯的力量：-如何让你的产品从维生素变成止痛药" class="headerlink" title="第一章 习惯的力量： 如何让你的产品从维生素变成止痛药"></a>第一章 习惯的力量： 如何让你的产品从维生素变成止痛药</h3><p>当大脑试图走捷径而不再主动思考接下来该做些什么时，习惯就养成了。[插图]为解决当下面临的问题，大脑会在极短的时间内从行为存储库里提取出相宜的对策。</p><p>在马克·扎克伯格放弃学业，将刚出炉的Facebook推向市场时，MySpace和Friendster均发展态势良好，都拥有数千万用户，但尽管如此，社交网络领域的主导地位最终还是被Facebook所抢占。</p><blockquote><p>后来居上也是有可能的</p></blockquote><h3 id="第二章-触发：-提醒人们采取下一步行动"><a href="#第二章-触发：-提醒人们采取下一步行动" class="headerlink" title="第二章 触发： 提醒人们采取下一步行动"></a>第二章 触发： 提醒人们采取下一步行动</h3><p>选择项越多，用户用于权衡的时间就越久。太多的或者无关的选项会让他们游移不定，不知所措，甚至就此罢手。[插图]减少有关下一步行动的思考时间，这会提高某种行为发展为无意识习惯的可能性。</p><p>利用人际型触发来促使用户积极地与他人分享产品的优势</p><p>付费型触发、回馈型触发以及人际型触发都是以争取新用户为主要目标，而自主型触发以驱动用户重复某种行为作为重点，目的是让用户逐渐形成习惯。如若没有自主型触发，不能在用户默许的前提下获得他们的关注，产品就很难以足够高的出现频率渗透进用户的使用习惯里。</p><p>情绪，尤其是负面情绪，是一种威力强大的内部触发，能给我们的日常生活带来极大的影响。</p><p>Instagram不仅具备相机的功能，还为用户搭建了一个社交网络平台。</p><p>触发是上瘾模型的第一个阶段，它可促使用户采取行动。</p><p>触发分为两类——外部触发和内部触发。</p><ul><li>外部触发通过将信息渗透在用户生活的各个方面来引导他们采取下一步行动。</li><li>内部触发通过用户记忆存储中的各种关联来提醒他们采取下一步行动。</li><li>负面情绪往往可以充当内部触发。</li><li>要开发习惯养成类产品，设计者需要揣摩用户的心理，了解那些有可能成为内部触发的各种情绪，并且要知道如何利用外部触发来促使用户付诸行动。</li></ul><h3 id="第三章-行动：-人们在期待酬赏时的直接反应"><a href="#第三章-行动：-人们在期待酬赏时的直接反应" class="headerlink" title="第三章 行动： 人们在期待酬赏时的直接反应"></a>第三章 行动： 人们在期待酬赏时的直接反应</h3><p>要使人们行动起来，三个要素必不可少。第一，充分的动机；第二，完成这一行为的能力；第三，促使人们付诸行动的触发。</p><p>福格博士认为，能够驱使我们采取行动的核心动机不外乎三种。第一种，追求快乐，逃避痛苦；第二种，追求希望，逃避恐惧；第三种，追求认同，逃避排斥</p><p>丹尼斯·豪普特利将产品的创新过程分解成了三个基本步骤。第一步，了解人们使用某个产品或服务的原因。接下来，列举出用户使用该产品时的必经环节。最后一步，在明确整个过程的所有环节之后，开始做减法，把无关环节全部删除，直至将使用过程简化到极致。</p><p>在豪普特利看来，越简单的东西越受欢迎。</p><p>当你使用某个产品时所需花费的步骤（在上述例子中，这个步骤指的是接入网络、登录网页）能被缩减或是优化时，用户使用它的频率就会增加。</p><p>先解决能力问题。</p><p>就算不存在任何客观差异，人们还是会因为预知的信息对产品产生判断误差。</p><blockquote><p>包装和宣传很重要</p></blockquote><p>目标渐近效应的存在，当人们认为自己距离目标越来越近时，完成任务的动机会更强烈。</p><p>让用户对你的产品爱不释手，最好先对这些认知偏差有所了解，并在设计产品时加以利用，因为它们可以有效地帮助你强化用户的动机，提高用户对产品的使用能力。</p><h3 id="第四章-多变的酬赏：-满足用户的需求，激发使用欲"><a href="#第四章-多变的酬赏：-满足用户的需求，激发使用欲" class="headerlink" title="第四章 多变的酬赏： 满足用户的需求，激发使用欲"></a>第四章 多变的酬赏： 满足用户的需求，激发使用欲</h3><p>多变的酬赏主要表现为三种形式：社交酬赏，猎物酬赏，自我酬赏</p><p>用户无法预知下一次访问网站时会看到些什么，这种不确定性就像是一种无形的力量，推动着他们一次又一次地重新登录。</p><p>每一个步骤提供及时的反馈</p><p>Quora之所以成功，是因为它准确把握了人们的心理。事实证明，人们对于社交酬赏以及同伴认同的渴望要远远大于对经济利益的期待。Quora设计的投票系统可以让用户对满意的答案投出赞成票，从而建立起一套稳定的社交反馈机制。比起Mahalo的经济酬赏，Quora的社交酬赏更有号召力。</p><p>如果公司的产品或服务理念不能迎合用户的需求，那再多的“游戏化”元素都无济于事。</p><p>研究人员设计出的这句神秘话语就是：你有权接受，也有权拒绝。</p><h3 id="第五章-投入：-通过用户对产品的投入，培养“回头客”"><a href="#第五章-投入：-通过用户对产品的投入，培养“回头客”" class="headerlink" title="第五章 投入： 通过用户对产品的投入，培养“回头客”"></a>第五章 投入： 通过用户对产品的投入，培养“回头客”</h3><p>上瘾模型的最后一步是用户投入阶段，该阶段要求用户进行一些小小的投入。</p><p>回报恩情</p><h3 id="第六章-上瘾模型与道德操控"><a href="#第六章-上瘾模型与道德操控" class="headerlink" title="第六章 上瘾模型与道德操控"></a>第六章 上瘾模型与道德操控</h3><p>健身类应用程序、慈善网站以及声称能将艰苦的工作瞬间变成乐趣的产品往往属于兜售商这一类别</p><p>面对刺激，大脑的反应是获取越多越好，对层出不穷的新奇事物永远充满渴望。</p><blockquote><p>这是渴望。不是快乐</p></blockquote><p>为帮助习惯养成类技术的设计者评估其操控用户背后的道德责任，首先要确定其工作性质属于四象限中的哪一个。你是一名健康习惯推广者、兜售商、娱乐用户者，还是经销商？</p><h3 id="第七章-案例研究：-《圣经》应用程序"><a href="#第七章-案例研究：-《圣经》应用程序" class="headerlink" title="第七章 案例研究： 《圣经》应用程序"></a>第七章 案例研究： 《圣经》应用程序</h3><p>如果创业只为名利，很可能两者都得不到。如果为意义而创业，那就不可能失败。</p><p>使用轻松</p><blockquote><p>要把产品做的易用。</p></blockquote><p>只要将一种目的性行为变得越轻松容易，该行为出现的频率就越高。</p><blockquote><p>第一，有目的。第二，轻松容易。</p></blockquote><p>未知因素</p><blockquote><p>未知，随机，抽奖，盲盒。<br>勾起人的兴趣，多巴胺。</p></blockquote><p>给读者塑造出了一个积极正面的形象，也就是所谓的“谦虚地吹牛”</p><blockquote><p>如果是健康类应用，也可以给类似的谦虚吹牛，或者体现出用户很辛苦，很累，很努力</p></blockquote><h3 id="第八章-习惯测试和寻找机会"><a href="#第八章-习惯测试和寻找机会" class="headerlink" title="第八章 习惯测试和寻找机会"></a>第八章 习惯测试和寻找机会</h3><p>上瘾模型有助于产品设计者为习惯养成类技术制定一个初始标准，还有助于从现有产品的习惯养成潜能中发现隐性的弱点。</p><ul><li>一旦产品被开发出来，“习惯测试”有助于确定产品粉丝，找出哪些产品因素有助于用户形成习惯（如果有的话），搞清楚产品的这些方面为何会令用户行为发生改变。习惯测试包括三个步骤：确定用户、分析用户行为和改进产品。</li><li>首先，深入研究数据，确定人们的行为方式和使用产品的方式。</li><li>其次，对这些发现进行分析，找出习惯用户。要想得出新的推测，研究忠实用户的行为和习惯路径。</li><li>最后，改进产品，吸引更多用户走上习惯用户所走的路径，然后评估结果，视需要继续修改。</li></ul>]]></content>
    
    
    <categories>
      
      <category>reading</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cocos Creator 拖动去指定区域</title>
    <link href="/CocosCreator/ccc-drag-to-target/"/>
    <url>/CocosCreator/ccc-drag-to-target/</url>
    
    <content type="html"><![CDATA[<p>我们要实现的效果是，按住并拖动一个小物体，物体跟随手指（鼠标）移动。<br>拖到指定位置放下。如果没有到指定位置，则回到上一个位置。</p><p>新建脚本<strong>DragToTarget.ts</strong>，挂到预制体上。<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> &#123; ccclass, property &#125; = cc.<span class="hljs-property">_decorator</span>;<br><span class="hljs-meta">@ccclass</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DragToTarget</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">cc.Component</span> &#123;<br><br>    <span class="hljs-meta">@property</span>(cc.<span class="hljs-property">Label</span>)<br>    <span class="hljs-attr">nameLabel</span>: cc.<span class="hljs-property">Label</span> = <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-meta">@property</span>(cc.<span class="hljs-property">Node</span>)<br>    <span class="hljs-attr">targetOfDragList</span>: cc.<span class="hljs-property">Node</span>[] = [];<br><br>    _oldPos = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 上一个位置</span><br><br>    <span class="hljs-title function_">start</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_oldPos</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">node</span>.<span class="hljs-property">position</span>;<br>    &#125;<br><br>    <span class="hljs-title function_">onEnable</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">node</span>.<span class="hljs-title function_">on</span>(cc.<span class="hljs-property">Node</span>.<span class="hljs-property">EventType</span>.<span class="hljs-property">TOUCH_MOVE</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">_onTouchMove</span>, <span class="hljs-variable language_">this</span>);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">node</span>.<span class="hljs-title function_">on</span>(cc.<span class="hljs-property">Node</span>.<span class="hljs-property">EventType</span>.<span class="hljs-property">TOUCH_END</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">_onTouchEnd</span>, <span class="hljs-variable language_">this</span>);<br>    &#125;<br><br>    <span class="hljs-title function_">onDisable</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">node</span>.<span class="hljs-title function_">off</span>(cc.<span class="hljs-property">Node</span>.<span class="hljs-property">EventType</span>.<span class="hljs-property">TOUCH_MOVE</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">_onTouchMove</span>, <span class="hljs-variable language_">this</span>);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">node</span>.<span class="hljs-title function_">off</span>(cc.<span class="hljs-property">Node</span>.<span class="hljs-property">EventType</span>.<span class="hljs-property">TOUCH_END</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">_onTouchEnd</span>, <span class="hljs-variable language_">this</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// update (dt) &#123;&#125;</span><br><br>    <span class="hljs-title function_">_onTouchMove</span>(<span class="hljs-params">touchEvent</span>) &#123;<br>        <span class="hljs-keyword">let</span> location = touchEvent.<span class="hljs-title function_">getLocation</span>();<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">node</span>.<span class="hljs-property">position</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">node</span>.<span class="hljs-property">parent</span>.<span class="hljs-title function_">convertToNodeSpaceAR</span>(location); <span class="hljs-comment">// 确定位置</span><br>    &#125;<br><br>    <span class="hljs-title function_">_onTouchEnd</span>(<span class="hljs-params">touchEvent</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">targetOfDragList</span>.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 没有目标位置</span><br>        &#125;<br>        <span class="hljs-keyword">let</span> inTarget = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> targetNode <span class="hljs-keyword">of</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">targetOfDragList</span>) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">_withinTarget</span>(targetNode, touchEvent)) &#123;<br>                inTarget = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!inTarget) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">node</span>.<span class="hljs-property">position</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">_oldPos</span>; <span class="hljs-comment">// 回去</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 判断触摸事件是否在槽位里</span><br>    <span class="hljs-title function_">_withinTarget</span>(<span class="hljs-params">targetNode: cc.Node, touchEvent</span>) &#123;<br>        <span class="hljs-keyword">let</span> rect = targetNode.<span class="hljs-title function_">getBoundingBox</span>();<br>        <span class="hljs-keyword">let</span> location = touchEvent.<span class="hljs-title function_">getLocation</span>();<br>        <span class="hljs-keyword">let</span> point = targetNode.<span class="hljs-property">parent</span>.<span class="hljs-title function_">convertToNodeSpaceAR</span>(location);<br>        <span class="hljs-keyword">return</span> rect.<span class="hljs-title function_">contains</span>(point);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>思路与之前的拖动类似。<br>在最后<code>TOUCH_END</code>的时候，判断自己是否在目标区域内。<br>如果不在则返回上一个坐标。</p><p>在场景中使用<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> <span class="hljs-title class_">DragToTarget</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./DragToTarget&quot;</span>;<br><br><span class="hljs-keyword">const</span> &#123; ccclass, property &#125; = cc.<span class="hljs-property">_decorator</span>;<br><br><span class="hljs-meta">@ccclass</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DragToControl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">cc.Component</span> &#123;<br><br>    <span class="hljs-meta">@property</span>(cc.<span class="hljs-property">Prefab</span>)<br>    <span class="hljs-attr">drag_to_item</span>: cc.<span class="hljs-property">Prefab</span> = <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-meta">@property</span>(cc.<span class="hljs-property">Node</span>)<br>    <span class="hljs-attr">dragTargets</span>: cc.<span class="hljs-property">Node</span>[] = [];<br><br>    itemNum = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-title function_">start</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">createItem</span>();<br>    &#125;<br><br>    <span class="hljs-comment">// update (dt) &#123;&#125;</span><br><br>    <span class="hljs-title function_">createItem</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">let</span> d = cc.<span class="hljs-title function_">instantiate</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">drag_to_item</span>);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">node</span>.<span class="hljs-title function_">addChild</span>(d);<br>        <span class="hljs-keyword">let</span> dragTo = d.<span class="hljs-title function_">getComponent</span>(<span class="hljs-title class_">DragToTarget</span>);<br>        dragTo.<span class="hljs-property">targetOfDragList</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">dragTargets</span>; <span class="hljs-comment">// 设置目的地</span><br>        dragTo.<span class="hljs-property">nameLabel</span>.<span class="hljs-property">string</span> = <span class="hljs-string">&#x27;&#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">itemNum</span>++;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p><img src="drag-to-target-20201230.gif" alt="运行效果"></p>]]></content>
    
    
    <categories>
      
      <category>CocosCreator</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Cocos Creator</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cocos Creator 坐标与转换</title>
    <link href="/CocosCreator/ccc-postion-and-cvt/"/>
    <url>/CocosCreator/ccc-postion-and-cvt/</url>
    
    <content type="html"><![CDATA[<p>ccc的<a href="https://docs.cocos.com/creator/manual/zh/content-workflow/transform.html">坐标系</a></p><p>ccc提供了api，在世界坐标和本地坐标之间可以相互转换。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> postion = node.<span class="hljs-property">position</span>; <span class="hljs-comment">// postion是在父节点中的坐标</span><br>cc.<span class="hljs-title function_">log</span>(name, <span class="hljs-string">&#x27;position (&#x27;</span>, postion.<span class="hljs-property">x</span>.<span class="hljs-title function_">toFixed</span>(<span class="hljs-number">2</span>), <span class="hljs-string">&#x27;,&#x27;</span>, postion.<span class="hljs-property">y</span>.<span class="hljs-title function_">toFixed</span>(<span class="hljs-number">2</span>), <span class="hljs-string">&#x27;)&#x27;</span>);<br><br><span class="hljs-keyword">let</span> worldPos = node.<span class="hljs-property">parent</span>.<span class="hljs-title function_">convertToWorldSpaceAR</span>(node.<span class="hljs-property">position</span>); <span class="hljs-comment">// 世界坐标</span><br>cc.<span class="hljs-title function_">log</span>(name, <span class="hljs-string">&#x27;世界坐标(&#x27;</span>, worldPos.<span class="hljs-property">x</span>.<span class="hljs-title function_">toFixed</span>(<span class="hljs-number">2</span>), <span class="hljs-string">&#x27;,&#x27;</span>, worldPos.<span class="hljs-property">y</span>.<span class="hljs-title function_">toFixed</span>(<span class="hljs-number">2</span>), <span class="hljs-string">&#x27;)&#x27;</span>);<br></code></pre></td></tr></table></figure><p><code>node.position</code>是本地坐标，也就是在父节点中的坐标。<br>让<strong>父节点</strong>调用<code>convertToWorldSpaceAR</code>方法，把节点的本地坐标转换为世界坐标。</p><p><img src="ccc-pos.png" alt="运行效果图"></p><ul><li><code>p</code>是本地坐标</li><li><code>w</code>是世界坐标</li></ul><p>代码参考<a href="https://github.com/RustFisher/CCCTry">CCCTry</a></p>]]></content>
    
    
    <categories>
      
      <category>CocosCreator</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Cocos Creator</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cocos Creator 拖动效果</title>
    <link href="/CocosCreator/ccc-drag-anywhere/"/>
    <url>/CocosCreator/ccc-drag-anywhere/</url>
    
    <content type="html"><![CDATA[<p>我们要实现的效果是，按住并拖动一个小物体，物体跟随手指（鼠标）移动。</p><p>代码<strong>DragToAnywhere.ts</strong><br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-meta">@ccclass</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DragToAnywhere</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">cc.Component</span> &#123;<br><br>    <span class="hljs-meta">@property</span>(cc.<span class="hljs-property">Label</span>)<br>    <span class="hljs-attr">label</span>: cc.<span class="hljs-property">Label</span> = <span class="hljs-literal">null</span>;<br><br>    start () &#123;<br>        <br>    &#125;<br><br>    <span class="hljs-title function_">onEnable</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">node</span>.<span class="hljs-title function_">on</span>(cc.<span class="hljs-property">Node</span>.<span class="hljs-property">EventType</span>.<span class="hljs-property">TOUCH_MOVE</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">_onTouchMove</span>, <span class="hljs-variable language_">this</span>);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">node</span>.<span class="hljs-title function_">on</span>(cc.<span class="hljs-property">Node</span>.<span class="hljs-property">EventType</span>.<span class="hljs-property">TOUCH_END</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">_onTouchEnd</span>, <span class="hljs-variable language_">this</span>);<br>    &#125;<br><br>    <span class="hljs-title function_">onDisable</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">node</span>.<span class="hljs-title function_">off</span>(cc.<span class="hljs-property">Node</span>.<span class="hljs-property">EventType</span>.<span class="hljs-property">TOUCH_MOVE</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">_onTouchMove</span>, <span class="hljs-variable language_">this</span>);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">node</span>.<span class="hljs-title function_">off</span>(cc.<span class="hljs-property">Node</span>.<span class="hljs-property">EventType</span>.<span class="hljs-property">TOUCH_END</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">_onTouchEnd</span>, <span class="hljs-variable language_">this</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// update (dt) &#123;&#125;</span><br><br>    <span class="hljs-title function_">_onTouchMove</span>(<span class="hljs-params">touchEvent</span>) &#123;<br>        <span class="hljs-keyword">let</span> location = touchEvent.<span class="hljs-title function_">getLocation</span>();<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">node</span>.<span class="hljs-property">position</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">node</span>.<span class="hljs-property">parent</span>.<span class="hljs-title function_">convertToNodeSpaceAR</span>(location); <span class="hljs-comment">// 确定位置</span><br>    &#125;<br><br>    <span class="hljs-title function_">_onTouchEnd</span>(<span class="hljs-params">touchEvent</span>) &#123;<br>        <span class="hljs-comment">// 放下</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>把<strong>DragToAnywhere.ts</strong>挂在预制体上。在场景中创建预制体对象。<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> node1 = cc.<span class="hljs-title function_">instantiate</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">drag_item</span>);<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">node</span>.<span class="hljs-title function_">addChild</span>(node1);<br>node1.<span class="hljs-property">x</span> = <span class="hljs-number">100</span>;<br>node1.<span class="hljs-property">y</span> = <span class="hljs-number">100</span>;<br>node1.<span class="hljs-title function_">getComponent</span>(<span class="hljs-title class_">DragToAnywhere</span>).<span class="hljs-property">label</span>.<span class="hljs-property">string</span> = <span class="hljs-string">&#x27;水星&#x27;</span>;<br></code></pre></td></tr></table></figure></p><p><img src="ccc-drag-anywhere-1.gif" alt="运行效果"></p>]]></content>
    
    
    <categories>
      
      <category>CocosCreator</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Cocos Creator</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TypeScript 单例模式</title>
    <link href="/Ts/ts-singleton-pattern/"/>
    <url>/Ts/ts-singleton-pattern/</url>
    
    <content type="html"><![CDATA[<p>ts中的单例模式</p><ul><li>构造器设置为私有的</li><li>建立static方法，获取唯一的对象</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataMgr</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-attr">mgr</span>: <span class="hljs-title class_">DataMgr</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// 构造器</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-title function_">getMgr</span>(): <span class="hljs-title class_">DataMgr</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">mgr</span> == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">mgr</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataMgr</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">mgr</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>写法上与Java的单例模式类似</p>]]></content>
    
    
    <categories>
      
      <category>TypeScript</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Cocos Creator 触摸事件穿透</title>
    <link href="/CocosCreator/ccc-touch-event/"/>
    <url>/CocosCreator/ccc-touch-event/</url>
    
    <content type="html"><![CDATA[<h2 id="触摸事件"><a href="#触摸事件" class="headerlink" title="触摸事件"></a>触摸事件</h2><p>假设给整个Canvas添加了事件监听。用网页模拟时，鼠标移动，点击子node都会监听到。<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-title function_">start</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">_cfgTouchField</span>();<br>&#125;<br><br><span class="hljs-title function_">_onTouchFieldDown</span>(<span class="hljs-params">e</span>) &#123;<br>    cc.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;table&#x27;</span>, <span class="hljs-string">&#x27;_onTouchFieldDown&#x27;</span>);<br>&#125;<br><br><span class="hljs-title function_">_onTouchFieldMove</span>(<span class="hljs-params">e</span>) &#123;<br>    cc.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;table&#x27;</span>, <span class="hljs-string">&#x27;_onTouchFieldMove&#x27;</span>);<br>&#125;<br><br><span class="hljs-title function_">_onTouchFieldEnd</span>(<span class="hljs-params">e</span>) &#123;<br>    cc.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;table&#x27;</span>, <span class="hljs-string">&#x27;_onTouchFieldEnd&#x27;</span>);<br>&#125;<br><br><span class="hljs-title function_">_cfgTouchField</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">node</span>.<span class="hljs-title function_">on</span>(cc.<span class="hljs-property">Node</span>.<span class="hljs-property">EventType</span>.<span class="hljs-property">MOUSE_DOWN</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">_onTouchFieldDown</span>, <span class="hljs-variable language_">this</span>);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">node</span>.<span class="hljs-title function_">on</span>(cc.<span class="hljs-property">Node</span>.<span class="hljs-property">EventType</span>.<span class="hljs-property">MOUSE_MOVE</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">_onTouchFieldMove</span>, <span class="hljs-variable language_">this</span>);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">node</span>.<span class="hljs-title function_">on</span>(cc.<span class="hljs-property">Node</span>.<span class="hljs-property">EventType</span>.<span class="hljs-property">MOUSE_LEAVE</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">_onTouchFieldEnd</span>, <span class="hljs-variable language_">this</span>);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">node</span>.<span class="hljs-title function_">on</span>(cc.<span class="hljs-property">Node</span>.<span class="hljs-property">EventType</span>.<span class="hljs-property">MOUSE_UP</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">_onTouchFieldEnd</span>, <span class="hljs-variable language_">this</span>);<br>&#125;<br></code></pre></td></tr></table></figure></p><p>网页模拟，鼠标从空白地方移入Toggle的范围时，会触发一次<code>cc.Node.EventType.MOUSE_LEAVE</code>；<br>然后又是<code>cc.Node.EventType.MOUSE_MOVE</code></p>]]></content>
    
    
    <categories>
      
      <category>CocosCreator</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Cocos Creator</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kotlin快速上手</title>
    <link href="/Kotlin/kotlin-breif-intro/"/>
    <url>/Kotlin/kotlin-breif-intro/</url>
    
    <content type="html"><![CDATA[<p>快速介绍Kotlin的用法。有些地方会和Java进行类比。</p><h2 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h2><p>Kotlin 使用两个不同的关键字（即 val 和 var）来声明变量。</p><p>val 用于值从不更改的变量。您不能为使用 val 声明的变量重新赋值。<br>var 用于值可以更改的变量。<br>在以下示例中，count 是一个 Int 类型的变量，为其赋予的初始值为 10：</p><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kt"><span class="hljs-keyword">var</span> count: <span class="hljs-built_in">Int</span> = <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><blockquote><p>Java中我们会写成<code>int count = 10;</code>，类型写在前面，结尾需要分号。</p></blockquote><p>Int 是一种表示整数的类型，它是可以在 Kotlin 中表示的众多数值类型之一。与其他语言类似，您也可以使用 Byte、Short、Long、Float 和 Double，具体取决于您的数值数据。</p><p>var 关键字表示您可以根据需要为 count 重新赋值。例如，您可以将 count 的值从 10 更改为 15：<br><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kt"><span class="hljs-keyword">var</span> count: <span class="hljs-built_in">Int</span> = <span class="hljs-number">10</span><br>    count = <span class="hljs-number">15</span><br></code></pre></td></tr></table></figure></p><p>不过，有些值不应更改。假设有一个名为 languageName 的 String。如果您要确保 languageName 的值始终为“Kotlin”，则可以使用 val 关键字来声明 languageName：</p><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kt"><span class="hljs-keyword">val</span> languageName: String = <span class="hljs-string">&quot;Kotlin&quot;</span><br></code></pre></td></tr></table></figure><p>通过这些关键字，您可以明确指出哪些变量的值可以更改。您可以根据需要加以利用。如果变量引用必须可重新赋值，则将其声明为 var。否则，请使用 val。</p><h2 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h2><p>接着前面的示例来讲，当您为 languageName 赋予初始值时，Kotlin 编译器可根据所赋值的类型来推断类型。</p><p>由于 “Kotlin” 的值的类型为 String，因此编译器推断 languageName 也为 String。请注意，Kotlin 是一种静态类型的语言。这意味着，类型在编译时解析且从不改变。</p><p>在以下示例中，languageName 推断为 String，因此您无法对其调用任何不属于 String 类的函数：<br><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kt"><span class="hljs-keyword">val</span> languageName = <span class="hljs-string">&quot;Kotlin&quot;</span><br>    <span class="hljs-keyword">val</span> upperCaseName = languageName.toUpperCase()<br><br>    <span class="hljs-comment">// Fails to compile</span><br>    languageName.inc()<br></code></pre></td></tr></table></figure></p><p>toUpperCase() 是一个只能对 String 类型的变量调用的函数。由于 Kotlin 编译器已将 languageName 推断为 String，因此您可以安全地调用 toUpperCase()。不过，inc() 是一个 Int 运算符函数，因此无法对 String 调用它。利用 Kotlin 的类型推断，您既能确保代码简洁，又能确保类型安全。</p><h2 id="Null-安全"><a href="#Null-安全" class="headerlink" title="Null 安全"></a>Null 安全</h2><p>在某些语言中，可以声明引用类型变量而不明确提供初始值。在这些情况下，变量通常包含 null 值。默认情况下，Kotlin 变量不能持有 null 值。这意味着以下代码段无效：</p><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kt"><span class="hljs-comment">// Fails to compile</span><br>    <span class="hljs-keyword">val</span> languageName: String = <span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><p>要使变量持有 null 值，它必须是可为 null 类型。您可以在变量类型后面加上 ? 后缀，将变量指定为可为 null，如以下示例所示：<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">val languageName: <span class="hljs-built_in">String</span>? = <span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure></p><p>指定 String? 类型后，您可以为 languageName 赋予 String 值或 null。</p><p>您必须小心处理可为 null 的变量，否则可能会出现可怕的 NullPointerException。例如，在 Java 中，如果您尝试对 null 值调用方法，您的程序会发生崩溃。</p><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><p>Kotlin 提供了几种用来实现条件逻辑的机制，其中最常见的是 if-else 语句。如果 if 关键字后面括在圆括号内的表达式求值为 true，则会执行该分支中的代码（即，紧跟在后面的括在大括号内的代码）。否则，会执行 else 分支中的代码。<br><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kt"><span class="hljs-keyword">if</span> (count == <span class="hljs-number">42</span>) &#123;<br>        println(<span class="hljs-string">&quot;I have the answer.&quot;</span>)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        println(<span class="hljs-string">&quot;The answer eludes me.&quot;</span>)<br>    &#125;<br></code></pre></td></tr></table></figure></p><p>您可以使用 else if 表示多个条件。这样，您就可以在单个条件语句中表示更精细且更复杂的逻辑，如以下示例所示：<br><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kt"><span class="hljs-keyword">if</span> (count == <span class="hljs-number">42</span>) &#123;<br>        println(<span class="hljs-string">&quot;I have the answer.&quot;</span>)<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">35</span>) &#123;<br>        println(<span class="hljs-string">&quot;The answer is close.&quot;</span>)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        println(<span class="hljs-string">&quot;The answer eludes me.&quot;</span>)<br>    &#125;<br></code></pre></td></tr></table></figure></p><p>条件语句对于表示有状态的逻辑很有用，但您可能会发现，编写这些语句时会重复。在上面的示例中，就是在每个分支中输出一个 String。为了避免这种重复，Kotlin 提供了条件表达式。最后一个示例可以重新编写如下：<br><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs kt"><span class="hljs-keyword">val</span> answerString: String = <span class="hljs-keyword">if</span> (count == <span class="hljs-number">42</span>) &#123;<br>        <span class="hljs-string">&quot;I have the answer.&quot;</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">35</span>) &#123;<br>        <span class="hljs-string">&quot;The answer is close.&quot;</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-string">&quot;The answer eludes me.&quot;</span><br>    &#125;<br><br>    println(answerString)<br></code></pre></td></tr></table></figure></p><p>每个条件分支都隐式地返回其最后一行上的表达式的结果，因此您无需使用 return 关键字。由于全部三个分支的结果都是 String 类型，因此 if-else 表达式的结果也是 String 类型。在本例中，根据 if-else 表达式的结果为 answerString 赋予了一个初始值。可以利用类型推断来省略 answerString 的显式类型声明，但为了清楚起见，通常最好添加该声明。</p><blockquote><p>注意：Kotlin 不包含传统的三元运算符，而是倾向于使用条件表达式。</p></blockquote><p>随着条件语句的复杂性不断增加，您可以考虑将 if-else 表达式替换为 when 表达式，如以下示例所示：<br><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kt"><span class="hljs-keyword">val</span> answerString = <span class="hljs-keyword">when</span> &#123;<br>        count == <span class="hljs-number">42</span> -&gt; <span class="hljs-string">&quot;I have the answer.&quot;</span><br>        count &gt; <span class="hljs-number">35</span> -&gt; <span class="hljs-string">&quot;The answer is close.&quot;</span><br>        <span class="hljs-keyword">else</span> -&gt; <span class="hljs-string">&quot;The answer eludes me.&quot;</span><br>    &#125;<br><br>    println(answerString)<br></code></pre></td></tr></table></figure></p><p>when 表达式中的每个分支都由一个条件、一个箭头 (-&gt;) 和一个结果来表示。如果箭头左侧的条件求值为 true，则会返回右侧的表达式结果。请注意，执行并不是从一个分支跳转到下一个分支。when 表达式示例中的代码在功能上与上一个示例中的代码等效，但可以说更易读。</p><p>Kotlin 的条件语句彰显了它的一项更强大的功能，即智能类型转换。您不必使用安全调用运算符或非 null 断言运算符来处理可为 null 的值，而是可以使用条件语句来检查变量是否包含对 null 值的引用，如以下示例所示：<br><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kt"><span class="hljs-keyword">val</span> languageName: String? = <span class="hljs-literal">null</span><br>    <span class="hljs-keyword">if</span> (languageName != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// No need to write languageName?.toUpperCase()</span><br>        println(languageName.toUpperCase())<br>    &#125;<br></code></pre></td></tr></table></figure><br>如果代码中已经进行null检查，就不用写<code>languageName?</code>里的问号了。</p><p>在条件分支中，languageName 可能会被视为不可为 null。Kotlin 非常智能，能够明白执行分支的条件是 languageName 不持有 null 值，因此您不必在该分支中将 languageName 视为可为 null。</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>您可以将一个或多个表达式归入一个函数。您可以将相应的表达式封装在一个函数中并调用该函数，而不必在每次需要某个结果时都重复同一系列的表达式。</p><p>要声明函数，请使用 fun 关键字，后跟函数名称。接下来，定义函数接受的输入类型（如果有），并声明它返回的输出类型。函数的主体用于定义在调用函数时调用的表达式。</p><p>以前面的示例为基础，下面给出了一个完整的 Kotlin 函数：<br><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kt"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">generateAnswerString</span><span class="hljs-params">()</span></span>: String &#123;<br>        <span class="hljs-keyword">val</span> answerString = <span class="hljs-keyword">if</span> (count == <span class="hljs-number">42</span>) &#123;<br>            <span class="hljs-string">&quot;I have the answer.&quot;</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-string">&quot;The answer eludes me&quot;</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> answerString<br>    &#125;<br></code></pre></td></tr></table></figure></p><p>上面示例中的函数名为 generateAnswerString。它不接受任何输入。它会输出 String 类型的结果。要调用函数，请使用函数名称，后跟调用运算符 (())。在下面的示例中，使用 generateAnswerString() 的结果对 answerString 变量进行了初始化。<br><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kt"><span class="hljs-keyword">val</span> answerString = generateAnswerString()<br></code></pre></td></tr></table></figure></p><p>函数可以接受参数输入，如以下示例所示：<br><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs kt"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">generateAnswerString</span><span class="hljs-params">(countThreshold: <span class="hljs-type">Int</span>)</span></span>: String &#123;<br>        <span class="hljs-keyword">val</span> answerString = <span class="hljs-keyword">if</span> (count &gt; countThreshold) &#123;<br>            <span class="hljs-string">&quot;I have the answer.&quot;</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-string">&quot;The answer eludes me.&quot;</span><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> answerString<br>    &#125;<br></code></pre></td></tr></table></figure></p><p>在声明函数时，您可以指定任意数量的参数及其类型。在上面的示例中，generateAnswerString() 接受一个名为 countThreshold 且类型为 Int 的参数。在函数中，您可以使用参数的名称来引用参数。</p><p>调用此函数时，您必须在函数调用的圆括号内添加一个参数：<br><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kt"><span class="hljs-keyword">val</span> answerString = generateAnswerString(<span class="hljs-number">42</span>)<br></code></pre></td></tr></table></figure></p><h3 id="简化函数声明"><a href="#简化函数声明" class="headerlink" title="简化函数声明"></a>简化函数声明</h3><p>generateAnswerString() 是一个相当简单的函数。该函数声明一个变量，然后立即返回结果。从函数返回单个表达式的结果时，您可以通过直接返回函数中包含的 if-else 表达式的结果来跳过声明局部变量，如以下示例所示：<br><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kt"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">generateAnswerString</span><span class="hljs-params">(countThreshold: <span class="hljs-type">Int</span>)</span></span>: String &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">if</span> (count &gt; countThreshold) &#123;<br>            <span class="hljs-string">&quot;I have the answer.&quot;</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-string">&quot;The answer eludes me.&quot;</span><br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure></p><p>您还可以将 return 关键字替换为赋值运算符：<br><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kt"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">generateAnswerString</span><span class="hljs-params">(countThreshold: <span class="hljs-type">Int</span>)</span></span>: String = <span class="hljs-keyword">if</span> (count &gt; countThreshold) &#123;<br>            <span class="hljs-string">&quot;I have the answer&quot;</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-string">&quot;The answer eludes me&quot;</span><br>        &#125;<br></code></pre></td></tr></table></figure></p><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>并非每个函数都需要一个名称。某些函数由其输入和输出更直接地进行标识。这些函数称为“匿名函数”。您可以保留对某个匿名函数的引用，以便日后使用此引用来调用该匿名函数。与其他引用类型一样，您也可以在应用中传递引用。<br><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kt"><span class="hljs-keyword">val</span> stringLengthFunc: (String) -&gt; <span class="hljs-built_in">Int</span> = &#123; input -&gt;<br>        input.length<br>    &#125;<br></code></pre></td></tr></table></figure><br>小括号里表示传入的类型，<code>-&gt;</code>右边是返回类型。<code>input</code>代表输入的变量。</p><p>与命名函数一样，匿名函数也可以包含任意数量的表达式。函数的返回值是最终表达式的结果。</p><p>在上面的示例中，<code>stringLengthFunc</code> 包含对一个匿名函数的引用，该函数将 String 当作输入，并将输入 String 的长度作为 Int 类型的输出返回。因此，该函数的类型表示为 <code>(String) -&gt; Int</code>。不过，此代码不会调用该函数。要检索该函数的结果，您必须像调用命名函数一样调用该函数。调用 stringLengthFunc 时，您必须提供 String，如以下示例所示：<br><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kt"><span class="hljs-keyword">val</span> stringLengthFunc: (String) -&gt; <span class="hljs-built_in">Int</span> = &#123; input -&gt;<br>        input.length<br>    &#125;<br><br><span class="hljs-keyword">val</span> stringLength: <span class="hljs-built_in">Int</span> = stringLengthFunc(<span class="hljs-string">&quot;Android&quot;</span>)<br></code></pre></td></tr></table></figure></p><h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><p>一个函数可以将另一个函数当作参数。将其他函数用作参数的函数称为“高阶函数”。此模式对组件之间的通信（其方式与在 Java 中使用回调接口相同）很有用。</p><p>下面是一个高阶函数的示例：<br><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kt"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">stringMapper</span><span class="hljs-params">(str: <span class="hljs-type">String</span>, mapper: (<span class="hljs-type">String</span>) -&gt; <span class="hljs-type">Int</span>)</span></span>: <span class="hljs-built_in">Int</span> &#123;<br>        <span class="hljs-comment">// Invoke function</span><br>        <span class="hljs-keyword">return</span> mapper(str)<br>    &#125;<br></code></pre></td></tr></table></figure><br><code>stringMapper()</code> 函数接受一个 String 以及一个函数，该函数根据您传递给它的 String 来推导 Int 值。</p><p>要调用 <code>stringMapper()</code>，您可以传递一个 String 和一个满足其他输入参数的函数（即，将 String 当作输入并输出 Int 的函数），如以下示例所示：<br><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kt">stringMapper(<span class="hljs-string">&quot;Android&quot;</span>, &#123; input -&gt;<br>        input.length<br>    &#125;)<br></code></pre></td></tr></table></figure></p><p>如果匿名函数是在某个函数上定义的最后一个参数，则您可以在用于调用该函数的圆括号之外传递它，如以下示例所示：<br><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kt">stringMapper(<span class="hljs-string">&quot;Android&quot;</span>) &#123; input -&gt;<br>        input.length<br>    &#125;<br></code></pre></td></tr></table></figure></p><p>您可以在整个 Kotlin 标准库中找到匿名函数。</p><p>Java中可能要定义接口来实现类似功能。Kotlin中需要的是满足要求的方法即可。</p><p>示例，在viewModel中定义如下3个函数<br><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs kt"><span class="hljs-keyword">val</span> stringLengthFunc: (String) -&gt; <span class="hljs-built_in">Int</span> = &#123; inputStr -&gt;<br>    inputStr.length<br>&#125;<br><br><span class="hljs-keyword">val</span> stringLengthDouble: (String) -&gt; <span class="hljs-built_in">Int</span> = &#123; inputStr -&gt;<br>    inputStr.length * <span class="hljs-number">2</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">stringMapper</span><span class="hljs-params">(str: <span class="hljs-type">String</span>, mapper: (<span class="hljs-type">String</span>) -&gt; <span class="hljs-type">Int</span>)</span></span>: <span class="hljs-built_in">Int</span> &#123;<br>    <span class="hljs-comment">// 调用传入的方法</span><br>    <span class="hljs-keyword">return</span> mapper(str)<br>&#125;<br></code></pre></td></tr></table></figure><br>使用函数<br><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kt"><span class="hljs-keyword">val</span> inputStr = <span class="hljs-string">&quot;Rust Fisher&quot;</span><br><span class="hljs-keyword">var</span> res1: <span class="hljs-built_in">Int</span> = viewModel.stringMapper(inputStr, viewModel.stringLengthFunc)<br><span class="hljs-keyword">var</span> res2: <span class="hljs-built_in">Int</span> = viewModel.stringMapper(inputStr, viewModel.stringLengthDouble)<br></code></pre></td></tr></table></figure></p><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>到目前为止提到的所有类型都内置在 Kotlin 编程语言中。如果您想要添加自己的自定义类型，可以使用 class 关键字来定义类，如以下示例所示：<br><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kt"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span><br></code></pre></td></tr></table></figure></p><p>像前面的例子<br><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs kt"><span class="hljs-keyword">import</span> androidx.lifecycle.ViewModel<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">KotlinGuideViewModel</span> : <span class="hljs-type">ViewModel</span>() &#123;<br><br>    <span class="hljs-keyword">val</span> stringLengthFunc: (String) -&gt; <span class="hljs-built_in">Int</span> = &#123; inputStr -&gt;<br>        inputStr.length<br>    &#125;<br><br>    <span class="hljs-keyword">val</span> stringLengthDouble: (String) -&gt; <span class="hljs-built_in">Int</span> = &#123; inputStr -&gt;<br>        inputStr.length * <span class="hljs-number">2</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">stringMapper</span><span class="hljs-params">(str: <span class="hljs-type">String</span>, mapper: (<span class="hljs-type">String</span>) -&gt; <span class="hljs-type">Int</span>)</span></span>: <span class="hljs-built_in">Int</span> &#123;<br>        <span class="hljs-comment">// 调用传入的方法</span><br>        <span class="hljs-keyword">return</span> mapper(str)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>类使用属性来表示状态。属性是类级变量，可以包含 getter、setter 和后备字段。由于汽车需要轮子来驱动，因此您可以添加 Wheel 对象的列表作为 Car 的属性，如以下示例所示：<br><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kt"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> &#123;<br>        <span class="hljs-keyword">val</span> wheels = listOf&lt;Wheel&gt;()<br>    &#125;<br></code></pre></td></tr></table></figure><br>请注意，wheels 是一个 <code>public val</code>，这意味着，可以从 Car 类外部访问 wheels，并且不能为其重新赋值。<br>如果要获取 Car 的实例，您必须先调用其构造函数。这样一来，您便可以访问它的任何可访问属性。<br><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kt"><span class="hljs-keyword">val</span> car = Car() <span class="hljs-comment">// construct a Car</span><br>    <span class="hljs-keyword">val</span> wheels = car.wheels <span class="hljs-comment">// retrieve the wheels value from the Car</span><br></code></pre></td></tr></table></figure></p><p>如果要自定义轮子，您可以定义一个自定义构造函数，用来指定如何初始化类属性：<br><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kt"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span>(<span class="hljs-keyword">val</span> wheels: List&lt;Wheel&gt;)<br></code></pre></td></tr></table></figure></p><p>在上面的示例中，类构造函数将 List<Wheel> 当作构造函数参数，并使用该参数来初始化其 wheels 属性。</p><h3 id="类函数和封装"><a href="#类函数和封装" class="headerlink" title="类函数和封装"></a>类函数和封装</h3><p>类使用函数对行为建模。函数可以修改状态，从而帮助您只公开希望公开的数据。这种访问控制机制属于一个更大的面向对象的概念（称为“封装”）。</p><p>在以下示例中，doorLock 属性对 Car 类外部的一切都不公开。要解锁汽车，您必须调用 unlockDoor() 函数并传入有效的“钥匙”，如以下示例所示：<br><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kt"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span>(<span class="hljs-keyword">val</span> wheels: List&lt;Wheel&gt;) &#123;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> doorLock: DoorLock = ...<br><br>        <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">unlockDoor</span><span class="hljs-params">(key: <span class="hljs-type">Key</span>)</span></span>: <span class="hljs-built_in">Boolean</span> &#123;<br>            <span class="hljs-comment">// Return true if key is valid for door lock, false otherwise</span><br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure></p><p>如果您想要自定义属性的引用方式，则可以提供自定义的 getter 和 setter。例如，如果您想要公开属性的 getter 而限制访问其 setter，则可以将该 setter 指定为 private：<br><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs kt"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span>(<span class="hljs-keyword">val</span> wheels: List&lt;Wheel&gt;) &#123;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> doorLock: DoorLock = ...<br><br>        <span class="hljs-keyword">val</span> gallonsOfFuelInTank: <span class="hljs-built_in">Int</span> = <span class="hljs-number">15</span><br>            <span class="hljs-keyword">private</span> <span class="hljs-keyword">set</span><br><br>        <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">unlockDoor</span><span class="hljs-params">(key: <span class="hljs-type">Key</span>)</span></span>: <span class="hljs-built_in">Boolean</span> &#123;<br>            <span class="hljs-comment">// Return true if key is valid for door lock, false otherwise</span><br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure></p><p>通过结合使用属性和函数，您可以创建能够对所有类型的对象建模的类。</p><h2 id="互操作性"><a href="#互操作性" class="headerlink" title="互操作性"></a>互操作性</h2><p>Kotlin 最重要的功能之一就是它与 Java 之间流畅的互操作性。由于 Kotlin 代码可编译为 JVM 字节码，因此 Kotlin 代码可直接调用 Java 代码，反之亦然。这意味着，您可以直接从 Kotlin 利用现有的 Java 库。此外，绝大多数 Android API 都是用 Java 编写的，您可以直接从 Kotlin 调用它们。</p>]]></content>
    
    
    <categories>
      
      <category>Kotlin</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>微信小程序 居中布局css</title>
    <link href="/Miniprogram/wx-mini-css_center_tutorial/"/>
    <url>/Miniprogram/wx-mini-css_center_tutorial/</url>
    
    <content type="html"><![CDATA[<p>居中放置元素是一个比较常见的需求。<br>可以水平居中，垂直居中。同时水平和垂直居中等等。<br>在<a href="https://rustfisher.com/2019/12/20/Android_tutorial_2020/Android-tutorial_2020_RelativeLayout_overview/">Android的RelativeLayout</a>中，可以使用<code>android:layout_centerInParent=&quot;true&quot;</code>。<br>在小程序中我们该怎么做呢？</p><h2 id="居中示例"><a href="#居中示例" class="headerlink" title="居中示例"></a>居中示例</h2><p>下面列举几个居中的例子。</p><h3 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h3><p>wxml中放置一个view。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;flex-center-in-row&quot;</span>&gt;</span><br>  Rust Fisher 水平方向居中<br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure></p><p>wxss中的class。使用了flex布局，设置<code>justify-content: center;</code>。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.flex-center-in-row</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#eaeaea</span>;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: row;<br>  <span class="hljs-attribute">justify-content</span>: center;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><p><img src="wx_mini_center_in_row.png" alt="水平居中效果图"></p><h3 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h3><p>垂直方向居中。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;flex-center-in-column&quot;</span>&gt;</span><br>  Rust Fisher 垂直方向居中<br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure></p><p>确定它的高度，设置<code>display: flex; align-items: center;</code>。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.flex-center-in-column</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">60px</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><p><img src="wx_mini_center_in_col.png" alt="垂直居中效果图"></p><h3 id="水平并且垂直居中"><a href="#水平并且垂直居中" class="headerlink" title="水平并且垂直居中"></a>水平并且垂直居中</h3><p>要居中，需要确定宽和高。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;flex-center-in-cube&quot;</span>&gt;</span><br>  Rust Fisher 方块内居中<br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure></p><p>需要设置flex布局，<code>justify-content: center; align-items: center;</code>。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.flex-center-in-cube</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">60px</span>;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">justify-content</span>: center;<br>  <span class="hljs-attribute">align-items</span>: center;<br>&#125;<br></code></pre></td></tr></table></figure></p><p><img src="wx_mini_center_in_cube.png" alt="水平并且垂直居中效果图"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>从上面的几个例子我们可以看出，它们都用了flex布局。<br>垂直居中需要设置<code>align-items: center;</code>；<br>水平居中需要设置<code>justify-content: center;</code>。</p><p>工程放在： <a href="https://github.com/AnRFDev/tutorial-miniprogram">https://github.com/AnRFDev/tutorial-miniprogram</a></p><p>更多阅读: <a href="https://rustfisher.com/2019/08/10/Dev-note/dev-note-miniapp-all/">小程序开发记录</a></p><p><img src="css-wid-height-cat.jpeg" alt="width height 100%"></p>]]></content>
    
    
    <categories>
      
      <category>miniprogram</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小程序</tag>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android SurfaceView TextureView 预览Camera，获取NV21数据</title>
    <link href="/Android/Android-Camera_SurfaceView_TextureView_get_nv21/"/>
    <url>/Android/Android-Camera_SurfaceView_TextureView_get_nv21/</url>
    
    <content type="html"><![CDATA[<ul><li>win7</li><li>Android Studio 3.0.1</li></ul><p>本文目的：使用 Camera API 进行视频的采集，分别使用 SurfaceView、TextureView 来预览 Camera 数据，取到 NV21 的数据回调</p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>使用相机权限<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.CAMERA&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><br>camera预览回调中默认使用NV21格式。</p><p>检查手机是否支持摄像头。</p><p>UI准备<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 全屏显示 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;FullScreenTheme&quot;</span> <span class="hljs-attr">parent</span>=<span class="hljs-string">&quot;AppTheme&quot;</span>&gt;</span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;windowNoTitle&quot;</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;android:windowFullscreen&quot;</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><br><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><br>承载预览图像<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">FrameLayout</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/camera_preview&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure></p><h3 id="使用-SurfaceView-预览-Camera，取到NV21数据"><a href="#使用-SurfaceView-预览-Camera，取到NV21数据" class="headerlink" title="使用 SurfaceView 预览 Camera，取到NV21数据"></a>使用 SurfaceView 预览 Camera，取到NV21数据</h3><p>自定义<code>CameraPreview</code>继承<code>SurfaceView</code>，实现<code>SurfaceHolder.Callback</code>接口</p><p>获取NV21数据，<code>Camera.setPreviewCallback()</code> 要放在 <code>Camera.startPreview()</code> 之前。<br>使用<code>Camera.PreviewCallback</code>获取预览数据回调。默认是NV21格式。</p><p><code>surfaceChanged</code>中，camera启动预览前可以进行设置，例如设置尺寸，调整方向<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * camera预览视图</span><br><span class="hljs-comment"> * Created by Rust on 2018/2/26.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CameraPreview</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SurfaceView</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SurfaceHolder</span>.Callback &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;rustApp&quot;</span>;<br>    <span class="hljs-keyword">private</span> SurfaceHolder mHolder;<br>    <span class="hljs-keyword">private</span> Camera mCamera;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">mFrameCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CameraPreview</span><span class="hljs-params">(Context context)</span> &#123;<br>        <span class="hljs-built_in">super</span>(context);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CameraPreview</span><span class="hljs-params">(Context context, Camera camera)</span> &#123;<br>        <span class="hljs-built_in">super</span>(context);<br>        mCamera = camera;<br>        mHolder = getHolder();<br>        mHolder.addCallback(<span class="hljs-built_in">this</span>);<br>        mHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCamera</span><span class="hljs-params">(Camera c)</span> &#123;<br>        <span class="hljs-built_in">this</span>.mCamera = c;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">surfaceCreated</span><span class="hljs-params">(SurfaceHolder holder)</span> &#123;<br>        <span class="hljs-comment">// 开启预览</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            mCamera.setPreviewDisplay(holder);<br>            mCamera.startPreview();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            Log.d(TAG, <span class="hljs-string">&quot;Error setting camera preview: &quot;</span> + e.getMessage());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">surfaceDestroyed</span><span class="hljs-params">(SurfaceHolder holder)</span> &#123;<br>        <span class="hljs-comment">// 可在此释放camera</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">surfaceChanged</span><span class="hljs-params">(SurfaceHolder holder, <span class="hljs-type">int</span> format, <span class="hljs-type">int</span> w, <span class="hljs-type">int</span> h)</span> &#123;<br>        <span class="hljs-comment">// 若需要旋转、更改大小或重新设置，请确保证已停止预览</span><br>        <span class="hljs-keyword">if</span> (mHolder.getSurface() == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            mCamera.stopPreview();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">// ignore: tried to stop a non-existent preview</span><br>        &#125;<br>        Camera.<span class="hljs-type">Parameters</span> <span class="hljs-variable">parameters</span> <span class="hljs-operator">=</span> mCamera.getParameters();<br>        <span class="hljs-comment">// ImageFormat.NV21 == 17</span><br>        Log.d(TAG, <span class="hljs-string">&quot;parameters.getPreviewFormat(): &quot;</span> + parameters.getPreviewFormat());<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.getResources().getConfiguration().orientation != Configuration.ORIENTATION_LANDSCAPE) &#123;<br>            mCamera.setDisplayOrientation(<span class="hljs-number">90</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            mCamera.setDisplayOrientation(<span class="hljs-number">0</span>);<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            mCamera.setPreviewDisplay(mHolder);<br>            mCamera.setPreviewCallback(mCameraPreviewCallback); <span class="hljs-comment">// 回调要放在 startPreview() 之前</span><br>            mCamera.startPreview();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            Log.d(TAG, <span class="hljs-string">&quot;Error starting camera preview: &quot;</span> + e.getMessage());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Camera.<span class="hljs-type">PreviewCallback</span> <span class="hljs-variable">mCameraPreviewCallback</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Camera</span>.PreviewCallback() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onPreviewFrame</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] data, Camera camera)</span> &#123;<br>            mFrameCount++;<br>            Log.d(TAG, <span class="hljs-string">&quot;onPreviewFrame: data.length=&quot;</span> + data.length + <span class="hljs-string">&quot;, frameCount=&quot;</span> + mFrameCount);<br>        &#125;<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>为了防止阻塞UI线程，在子线程中打开camera。camera常放在try catch中使用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;rustApp&quot;</span>;<br><br>    <span class="hljs-keyword">private</span> Camera mCamera;<br>    <span class="hljs-keyword">private</span> CameraPreview mPreview;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitCameraThread</span>().start();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onResume</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == mCamera) &#123;<br>            <span class="hljs-keyword">if</span> (safeCameraOpen()) &#123;<br>                mPreview.setCamera(mCamera); <span class="hljs-comment">// 重新获取camera操作权</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                Log.e(TAG, <span class="hljs-string">&quot;无法操作camera&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">super</span>.onResume();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onPause</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onPause();<br>        releaseCamera();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">safeCameraOpen</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">qOpened</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            releaseCamera();<br>            mCamera = Camera.open();<br>            qOpened = (mCamera != <span class="hljs-literal">null</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            Log.e(TAG, <span class="hljs-string">&quot;failed to open Camera&quot;</span>);<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> qOpened;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">releaseCamera</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (mCamera != <span class="hljs-literal">null</span>) &#123;<br>            mCamera.setPreviewCallback(<span class="hljs-literal">null</span>);<br>            mCamera.release();        <span class="hljs-comment">// release the camera for other applications</span><br>            mCamera = <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InitCameraThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-built_in">super</span>.run();<br>            <span class="hljs-keyword">if</span> (safeCameraOpen()) &#123;<br>                Log.d(TAG, <span class="hljs-string">&quot;开启摄像头&quot;</span>);<br>                runOnUiThread(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                        mPreview = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CameraPreview</span>(MainActivity.<span class="hljs-built_in">this</span>, mCamera);<br>                        <span class="hljs-type">FrameLayout</span> <span class="hljs-variable">preview</span> <span class="hljs-operator">=</span> findViewById(R.id.camera_preview);<br>                        preview.addView(mPreview);<br>                    &#125;<br>                &#125;);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="使用-TextureView-预览-Camera，取到NV21数据"><a href="#使用-TextureView-预览-Camera，取到NV21数据" class="headerlink" title="使用 TextureView 预览 Camera，取到NV21数据"></a>使用 TextureView 预览 Camera，取到NV21数据</h3><p><code>TextureView</code>可用于显示内容流。内容流可以是视频或者OpenGL的场景。内容流可来自应用进程或是远程其它进程。</p><p><code>Textureview</code>必须在硬件加速开启的窗口中使用。若是软解，<code>TextureView</code>不会显示东西。</p><p>不同于<code>SurfaceView</code>，<code>TextureView</code>不会建立一个单独的窗口，而是像一个常规的View一样（个人认为这是个优点）。<br>这使得<code>TextureView</code>可以被移动，转换或是添加动画。比如，可以调用<code>myView.setAlpha(0.5f)</code>将其设置成半透明。</p><p>使用<code>TextureView</code>很简单：获取到它的<code>SurfaceTexture</code>，使用<code>SurfaceTexture</code>呈现内容。</p><p><code>CameraPreview</code>继承了<code>TextureView</code>，外部需要传入camera实例。在<code>onSurfaceTextureAvailable</code>中，配置camera，比如设置图像方向。<br>通过设置<code>Camera.PreviewCallback</code>来取得预览数据。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> android.content.Context;<br><span class="hljs-keyword">import</span> android.content.res.Configuration;<br><span class="hljs-keyword">import</span> android.graphics.SurfaceTexture;<br><span class="hljs-keyword">import</span> android.hardware.Camera;<br><span class="hljs-keyword">import</span> android.util.Log;<br><span class="hljs-keyword">import</span> android.view.TextureView;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CameraPreview</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TextureView</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">TextureView</span>.SurfaceTextureListener &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;rustApp&quot;</span>;<br>    <span class="hljs-keyword">private</span> Camera mCamera;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CameraPreview</span><span class="hljs-params">(Context context)</span> &#123;<br>        <span class="hljs-built_in">super</span>(context);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CameraPreview</span><span class="hljs-params">(Context context, Camera camera)</span> &#123;<br>        <span class="hljs-built_in">super</span>(context);<br>        mCamera = camera;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCamera</span><span class="hljs-params">(Camera camera)</span> &#123;<br>        <span class="hljs-built_in">this</span>.mCamera = camera;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onSurfaceTextureAvailable</span><span class="hljs-params">(SurfaceTexture surface, <span class="hljs-type">int</span> width, <span class="hljs-type">int</span> height)</span> &#123;<br>        Log.d(TAG, <span class="hljs-string">&quot;TextureView onSurfaceTextureAvailable&quot;</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.getResources().getConfiguration().orientation != Configuration.ORIENTATION_LANDSCAPE) &#123;<br>            mCamera.setDisplayOrientation(<span class="hljs-number">90</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            mCamera.setDisplayOrientation(<span class="hljs-number">0</span>);<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            mCamera.setPreviewCallback(mCameraPreviewCallback);<br>            mCamera.setPreviewTexture(surface); <span class="hljs-comment">// 使用SurfaceTexture</span><br>            mCamera.startPreview();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException ioe) &#123;<br>            <span class="hljs-comment">// Something bad happened</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onSurfaceTextureSizeChanged</span><span class="hljs-params">(SurfaceTexture surface, <span class="hljs-type">int</span> width, <span class="hljs-type">int</span> height)</span> &#123;<br>        Log.d(TAG, <span class="hljs-string">&quot;TextureView onSurfaceTextureSizeChanged&quot;</span>); <span class="hljs-comment">// Ignored, Camera does all the work for us</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onSurfaceTextureDestroyed</span><span class="hljs-params">(SurfaceTexture surface)</span> &#123;<br>        Log.d(TAG, <span class="hljs-string">&quot;TextureView onSurfaceTextureDestroyed&quot;</span>);<br>        mCamera.stopPreview();<br>        mCamera.release();<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onSurfaceTextureUpdated</span><span class="hljs-params">(SurfaceTexture surface)</span> &#123;<br>        <span class="hljs-comment">// Invoked every time there&#x27;s a new Camera preview frame</span><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Camera.<span class="hljs-type">PreviewCallback</span> <span class="hljs-variable">mCameraPreviewCallback</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Camera</span>.PreviewCallback() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onPreviewFrame</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] data, Camera camera)</span> &#123;<br>            Log.d(TAG, <span class="hljs-string">&quot;onPreviewFrame: data.length=&quot;</span> + data.length);<br>        &#125;<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>操作界面<code>TextureAct</code>。获取camera操作权，初始化<code>CameraPreview</code>并添加到布局中。第一次获取camera时在子线程中操作。</p><p>在<code>onPause</code>中释放camera，<code>onResume</code>中尝试取回camera控制权。这样应用暂时退回后台时，其他应用可以操作摄像头。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TextureAct</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;rustApp&quot;</span>;<br>    <span class="hljs-keyword">private</span> Camera mCamera;<br>    <span class="hljs-keyword">private</span> CameraPreview mPreview;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_texture);<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitCameraThread</span>().start();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onResume</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == mCamera) &#123;<br>            <span class="hljs-keyword">if</span> (safeCameraOpen()) &#123;<br>                mPreview.setCamera(mCamera); <span class="hljs-comment">// 重新获取camera操作权</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                Log.e(TAG, <span class="hljs-string">&quot;无法操作camera&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">super</span>.onResume();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onPause</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onPause();<br>        releaseCamera();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onDestroy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onDestroy();<br>        releaseCamera();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">safeCameraOpen</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">qOpened</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            releaseCamera();<br>            mCamera = Camera.open();<br>            qOpened = (mCamera != <span class="hljs-literal">null</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            Log.e(TAG, <span class="hljs-string">&quot;failed to open Camera&quot;</span>);<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> qOpened;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">releaseCamera</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (mCamera != <span class="hljs-literal">null</span>) &#123;<br>            mCamera.setPreviewCallback(<span class="hljs-literal">null</span>);<br>            mCamera.release();        <span class="hljs-comment">// release the camera for other applications</span><br>            mCamera = <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InitCameraThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-built_in">super</span>.run();<br>            <span class="hljs-keyword">if</span> (safeCameraOpen()) &#123;<br>                Log.d(TAG, <span class="hljs-string">&quot;TextureAct 开启摄像头&quot;</span>);<br>                runOnUiThread(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                        mPreview = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CameraPreview</span>(TextureAct.<span class="hljs-built_in">this</span>, mCamera);<br>                        mPreview.setSurfaceTextureListener(mPreview);<br>                        <span class="hljs-type">FrameLayout</span> <span class="hljs-variable">preview</span> <span class="hljs-operator">=</span> findViewById(R.id.camera_preview);<br>                        preview.addView(mPreview);<br>                    &#125;<br>                &#125;);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><code>Textureview</code>必须在硬件加速开启的窗口中使用。<code>android:hardwareAccelerated=&quot;true&quot;</code> 默认的这个属性就是true，无需再设置。</p><p>每接到一帧数据，就会调用一次<code>onSurfaceTextureUpdated()</code>。通过这个接口。能够将上来的SurfaceTexture送给OpenGL再去处理。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://developer.android.com/training/camera/cameradirect.html">Controlling the Camera - Android Developer</a></li><li><a href="https://developer.android.com/guide/topics/media/camera.html">Camera API - Android Developer</a></li><li><a href="https://developer.android.com/reference/android/view/TextureView.html">TextureView - Android Developer</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Android_note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android_Media</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android Camera API 音视频采集、编码、封包成mp4</title>
    <link href="/Android/Android-Camera_record_video_and_output/"/>
    <url>/Android/Android-Camera_record_video_and_output/</url>
    
    <content type="html"><![CDATA[<ul><li>win7</li><li>Android Studio 3.0.1</li></ul><p>相关代码请参阅： <a href="https://github.com/RustFisher/android-CameraRecorder">https://github.com/RustFisher/android-CameraRecorder</a></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本文目的：使用 Android Camera API 完成音视频的采集、编码、封包成 mp4 输出</p><p>基于<code>android.hardware.Camera</code>，创建一个横屏应用，实时预览摄像头图像，实现录像并输出MP4的功能。<br>这里不使用Camera2。</p><h2 id="申请权限"><a href="#申请权限" class="headerlink" title="申请权限"></a>申请权限</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 需要录制音视频权限和写外部存储权限 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.RECORD_AUDIO&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.CAMERA&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-feature</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.hardware.camera&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>在activity中动态申请权限<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] VIDEO_PERMISSIONS = &#123;<br>        Manifest.permission.CAMERA,<br>        Manifest.permission.RECORD_AUDIO,<br>        Manifest.permission.WRITE_EXTERNAL_STORAGE<br>&#125;;<br></code></pre></td></tr></table></figure></p><h2 id="实现摄像头预览功能"><a href="#实现摄像头预览功能" class="headerlink" title="实现摄像头预览功能"></a>实现摄像头预览功能</h2><p>使用<code>SurfaceView</code>来预览。新建<code>CameraPreview</code>类继承自<code>SurfaceView</code>并实现<code>SurfaceHolder.Callback</code>；<br>camera相关操作都放在这个View里。</p><ul><li><code>surfaceCreated</code>中获取Camera实例，启动预览；设置预览相关参数</li><li><code>surfaceDestroyed</code>释放Camera</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CameraPreview</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SurfaceView</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SurfaceHolder</span>.Callback &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;rustAppCameraPreview&quot;</span>;<br>    <span class="hljs-keyword">private</span> SurfaceHolder mHolder;<br>    <span class="hljs-keyword">private</span> Camera mCamera;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MEDIA_TYPE_IMAGE</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MEDIA_TYPE_VIDEO</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">mOptVideoWidth</span> <span class="hljs-operator">=</span> <span class="hljs-number">1920</span>;  <span class="hljs-comment">// 默认视频帧宽度</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">mOptVideoHeight</span> <span class="hljs-operator">=</span> <span class="hljs-number">1080</span>;<br>    <span class="hljs-keyword">private</span> Uri outputMediaFileUri;<br>    <span class="hljs-keyword">private</span> String outputMediaFileType;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CameraPreview</span><span class="hljs-params">(Context context)</span> &#123;<br>        <span class="hljs-built_in">super</span>(context);<br>        mHolder = getHolder();<br>        mHolder.addCallback(<span class="hljs-built_in">this</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Camera <span class="hljs-title function_">getCameraInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Camera</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            c = Camera.open();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            Log.d(TAG, <span class="hljs-string">&quot;camera is not available&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> c;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">surfaceCreated</span><span class="hljs-params">(SurfaceHolder holder)</span> &#123;<br>        mCamera = getCameraInstance();<br>        <span class="hljs-keyword">try</span> &#123;<br>            mCamera.setPreviewDisplay(holder);<br>            mCamera.startPreview();<br>            getCameraOptimalVideoSize(); <span class="hljs-comment">// 找到最合适的分辨率</span><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            Log.d(TAG, <span class="hljs-string">&quot;Error setting camera preview: &quot;</span> + e.getMessage());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getCameraOptimalVideoSize</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Camera.<span class="hljs-type">Parameters</span> <span class="hljs-variable">parameters</span> <span class="hljs-operator">=</span> mCamera.getParameters();<br>            List&lt;Camera.Size&gt; mSupportedPreviewSizes = parameters.getSupportedPreviewSizes();<br>            List&lt;Camera.Size&gt; mSupportedVideoSizes = parameters.getSupportedVideoSizes();<br>            Camera.<span class="hljs-type">Size</span> <span class="hljs-variable">optimalSize</span> <span class="hljs-operator">=</span> CameraHelper.getOptimalVideoSize(mSupportedVideoSizes,<br>                    mSupportedPreviewSizes, getWidth(), getHeight());<br>            mOptVideoWidth = optimalSize.width;<br>            mOptVideoHeight = optimalSize.height;<br>            Log.d(TAG, <span class="hljs-string">&quot;prepareVideoRecorder: optimalSize:&quot;</span> + mOptVideoWidth + <span class="hljs-string">&quot;, &quot;</span> + mOptVideoHeight);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            Log.e(TAG, <span class="hljs-string">&quot;getCameraOptimalVideoSize: &quot;</span>, e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">surfaceDestroyed</span><span class="hljs-params">(SurfaceHolder holder)</span> &#123;<br>        mHolder.removeCallback(<span class="hljs-built_in">this</span>);<br>        mCamera.setPreviewCallback(<span class="hljs-literal">null</span>);<br>        mCamera.stopPreview();<br>        mCamera.release();<br>        mCamera = <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">surfaceChanged</span><span class="hljs-params">(SurfaceHolder holder, <span class="hljs-type">int</span> format, <span class="hljs-type">int</span> w, <span class="hljs-type">int</span> h)</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="在Fragment中显示摄像头预览"><a href="#在Fragment中显示摄像头预览" class="headerlink" title="在Fragment中显示摄像头预览"></a>在Fragment中显示摄像头预览</h3><p>预置一个FrameLayout，实例化一个<code>CameraPreview</code>添加进去<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 视频录制界面</span><br><span class="hljs-comment"> * Created by Rust on 2018/5/17.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VideoRecordFragment</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Fragment</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;rustAppVideoFrag&quot;</span>;<br><br>    <span class="hljs-keyword">private</span> Button mCaptureBtn;<br>    <span class="hljs-keyword">private</span> CameraPreview mCameraPreview;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> VideoRecordFragment <span class="hljs-title function_">newInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VideoRecordFragment</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        Log.d(TAG, <span class="hljs-string">&quot;frag onCreate&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Nullable</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> View <span class="hljs-title function_">onCreateView</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> LayoutInflater inflater, <span class="hljs-meta">@Nullable</span> ViewGroup container, <span class="hljs-meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;<br>        Log.d(TAG, <span class="hljs-string">&quot;frag onCreateView&quot;</span>);<br>        <span class="hljs-keyword">return</span> inflater.inflate(R.layout.frag_video_record, container, <span class="hljs-literal">false</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onViewCreated</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> View view, <span class="hljs-meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;<br>        Log.d(TAG, <span class="hljs-string">&quot;frag onViewCreated&quot;</span>);<br>        <span class="hljs-built_in">super</span>.onViewCreated(view, savedInstanceState);<br>        mCaptureBtn = view.findViewById(R.id.capture_btn);<br>        <span class="hljs-comment">//mCaptureBtn.setOnClickListener(mOnClickListener);// 录制键</span><br><br>        mCameraPreview = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CameraPreview</span>(getContext());<br>        <span class="hljs-type">FrameLayout</span> <span class="hljs-variable">preview</span> <span class="hljs-operator">=</span> view.findViewById(R.id.camera_preview);<br>        preview.addView(mCameraPreview);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h2 id="使用MediaRecorder录制"><a href="#使用MediaRecorder录制" class="headerlink" title="使用MediaRecorder录制"></a>使用<code>MediaRecorder</code>录制</h2><p>给<code>MediaRecorder</code>指定参数后，调用<code>start()</code>开始录制，<code>stop()</code>结束录制</p><p>录制开始前，获取camera，<code>mCamera.unlock()</code>解锁；录制完毕后，清除<code>MediaRecorder</code>，<code>mCamera.lock()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> MediaRecorder mMediaRecorder;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">startRecording</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (prepareVideoRecorder()) &#123;<br>            mMediaRecorder.start();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            releaseMediaRecorder();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stopRecording</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (mMediaRecorder != <span class="hljs-literal">null</span>) &#123;<br>            mMediaRecorder.stop();<br>        &#125;<br>        releaseMediaRecorder();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isRecording</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> mMediaRecorder != <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">prepareVideoRecorder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == mCamera) &#123;<br>            mCamera = getCameraInstance();<br>        &#125;<br>        mMediaRecorder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MediaRecorder</span>();<br><br>        mCamera.unlock();<br>        mMediaRecorder.setCamera(mCamera);<br><br>        mMediaRecorder.setAudioSource(MediaRecorder.AudioSource.DEFAULT);<br>        mMediaRecorder.setVideoSource(MediaRecorder.VideoSource.CAMERA);<br><br>        mMediaRecorder.setProfile(CamcorderProfile.get(CamcorderProfile.QUALITY_HIGH));<br><br>        mMediaRecorder.setVideoSize(mOptVideoWidth, mOptVideoHeight);<br>        mMediaRecorder.setOutputFile(getOutputMediaFile(MEDIA_TYPE_VIDEO).toString());<br>        mMediaRecorder.setPreviewDisplay(mHolder.getSurface());<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            mMediaRecorder.prepare();<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalStateException e) &#123;<br>            Log.d(TAG, <span class="hljs-string">&quot;IllegalStateException preparing MediaRecorder: &quot;</span> + e.getMessage());<br>            releaseMediaRecorder();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            Log.d(TAG, <span class="hljs-string">&quot;IOException preparing MediaRecorder: &quot;</span> + e.getMessage());<br>            releaseMediaRecorder();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">releaseMediaRecorder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (mMediaRecorder != <span class="hljs-literal">null</span>) &#123;<br>            mMediaRecorder.reset();<br>            mMediaRecorder.release();<br>            mMediaRecorder = <span class="hljs-literal">null</span>;<br>            mCamera.lock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> File <span class="hljs-title function_">getOutputMediaFile</span><span class="hljs-params">(<span class="hljs-type">int</span> type)</span> &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">mediaStorageDir</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(Environment.getExternalStoragePublicDirectory(<br>                Environment.DIRECTORY_PICTURES), TAG);<br>        <span class="hljs-keyword">if</span> (!mediaStorageDir.exists()) &#123;<br>            <span class="hljs-keyword">if</span> (!mediaStorageDir.mkdirs()) &#123;<br>                Log.d(TAG, <span class="hljs-string">&quot;failed to create directory&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">timeStamp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyyMMdd_HHmmss&quot;</span>, Locale.CHINA).format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        File mediaFile;<br>        <span class="hljs-keyword">if</span> (type == MEDIA_TYPE_IMAGE) &#123;<br>            mediaFile = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(mediaStorageDir.getPath() + File.separator +<br>                    <span class="hljs-string">&quot;IMG_&quot;</span> + timeStamp + <span class="hljs-string">&quot;.jpg&quot;</span>);<br>            outputMediaFileType = <span class="hljs-string">&quot;image/*&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type == MEDIA_TYPE_VIDEO) &#123;<br>            mediaFile = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(mediaStorageDir.getPath() + File.separator +<br>                    <span class="hljs-string">&quot;VID_&quot;</span> + timeStamp + <span class="hljs-string">&quot;.mp4&quot;</span>);<br>            outputMediaFileType = <span class="hljs-string">&quot;video/*&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        outputMediaFileUri = Uri.fromFile(mediaFile);<br>        <span class="hljs-keyword">return</span> mediaFile;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="后台返回时预览黑屏的问题"><a href="#后台返回时预览黑屏的问题" class="headerlink" title="后台返回时预览黑屏的问题"></a>后台返回时预览黑屏的问题</h3><p><code>CameraPreview</code>是我们在Fragment创建时实例化并添加进去的。<br>应用退到后台后，<code>CameraPreview</code>已经被销毁。应用回到前台时，我们应该在<code>onResume</code>方法中进行操作。恢复<code>CameraPreview</code>。</p><p>在Fragment中，判断销毁和重建预览的时机。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onPause</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">super</span>.onPause();<br>    Log.d(TAG, <span class="hljs-string">&quot;onPause: 销毁预览&quot;</span>);<br>    mCameraPreview = <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onResume</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">super</span>.onResume();<br>    Log.d(TAG, <span class="hljs-string">&quot;onResume: 回到前台&quot;</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == mCameraPreview) &#123;<br>        initCameraPreview();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initCameraPreview</span><span class="hljs-params">()</span> &#123;<br>    mCameraPreview = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CameraPreview</span>(getContext());<br>    <span class="hljs-type">FrameLayout</span> <span class="hljs-variable">preview</span> <span class="hljs-operator">=</span> mRoot.findViewById(R.id.camera_preview);<br>    preview.addView(mCameraPreview);<br>&#125;<br><br></code></pre></td></tr></table></figure></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.polarxiong.com/archives/Android%E7%9B%B8%E6%9C%BA%E5%BC%80%E5%8F%91-%E4%B8%89-%E5%AE%9E%E7%8E%B0%E6%8B%8D%E7%85%A7%E5%BD%95%E5%83%8F%E5%92%8C%E6%9F%A5%E7%9C%8B.html">Android相机开发(三): 实现拍照录像和查看</a></li><li><a href="https://github.com/googlesamples/android-MediaRecorder">googlesamples/android-MediaRecorder</a></li><li><a href="https://developer.android.com/training/camera/cameradirect.html">Controlling the Camera - Android Developer</a></li><li><a href="https://developer.android.com/guide/topics/media/camera.html">Camera API - Android Developer</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Android_note</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Android 音频PCM数据的采集和播放，读写音频wav文件</title>
    <link href="/Android/Android-AudioRecord_AudioTrack_pcm_wav/"/>
    <url>/Android/Android-AudioRecord_AudioTrack_pcm_wav/</url>
    
    <content type="html"><![CDATA[<p>本文目的：使用 AudioRecord 和 AudioTrack 完成音频PCM数据的采集和播放，并读写音频wav文件</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>Android提供了AudioRecord和MediaRecord。MediaRecord可选择录音的格式。<br>AudioRecord得到PCM编码格式的数据。AudioRecord能够设置模拟信号转化为数字信号的相关参数，包括采样率和量化深度，同时也包括通道数目等。</p><h3 id="PCM"><a href="#PCM" class="headerlink" title="PCM"></a>PCM</h3><p>PCM是在由模拟信号向数字信号转化的一种常用的编码格式，称为脉冲编码调制，PCM将模拟信号按照一定的间距划分为多段，然后通过二进制去量化每一个间距的强度。<br>PCM表示的是音频文件中随着时间的流逝的一段音频的振幅。Android在WAV文件中支持PCM的音频数据。</p><h3 id="WAV"><a href="#WAV" class="headerlink" title="WAV"></a>WAV</h3><p>WAV，MP3等比较常见的音频格式，不同的编码格式对应不通过的原始音频。为了方便传输，通常会压缩原始音频。<br>为了辨别出音频格式，每种格式有特定的头文件（header）。<br>WAV以RIFF为标准。RIFF是一种资源交换档案标准。RIFF将文件存储在每一个标记块中。<br>基本构成单位是trunk，每个trunk由标记位，数据大小，数据存储，三个部分构成。 </p><h3 id="PCM打包成WAV"><a href="#PCM打包成WAV" class="headerlink" title="PCM打包成WAV"></a>PCM打包成WAV</h3><p>PCM是原始音频数据，WAV是windows中常见的音频格式，只是在pcm数据中添加了一个文件头。</p><table><thead><tr><th style="text-align:left">起始地址</th><th style="text-align:left">占用空间</th><th style="text-align:left">本地址数字的含义</th></tr></thead><tbody><tr><td style="text-align:left">00H</td><td style="text-align:left">4byte</td><td style="text-align:left">RIFF，资源交换文件标志。</td></tr><tr><td style="text-align:left">04H</td><td style="text-align:left">4byte</td><td style="text-align:left">从下一个地址开始到文件尾的总字节数。高位字节在后面，这里就是001437ECH，换成十进制是1325036byte，算上这之前的8byte就正好1325044byte了。</td></tr><tr><td style="text-align:left">08H</td><td style="text-align:left">4byte</td><td style="text-align:left">WAVE，代表wav文件格式。</td></tr><tr><td style="text-align:left">0CH</td><td style="text-align:left">4byte</td><td style="text-align:left">FMT ，波形格式标志</td></tr><tr><td style="text-align:left">10H</td><td style="text-align:left">4byte</td><td style="text-align:left">00000010H，16PCM，我的理解是用16bit的数据表示一个量化结果。</td></tr><tr><td style="text-align:left">14H</td><td style="text-align:left">2byte</td><td style="text-align:left">为1时表示线性PCM编码，大于1时表示有压缩的编码。这里是0001H。</td></tr><tr><td style="text-align:left">16H</td><td style="text-align:left">2byte</td><td style="text-align:left">1为单声道，2为双声道，这里是0001H。</td></tr><tr><td style="text-align:left">18H</td><td style="text-align:left">4byte</td><td style="text-align:left">采样频率，这里是00002B11H，也就是11025Hz。</td></tr><tr><td style="text-align:left">1CH</td><td style="text-align:left">4byte</td><td style="text-align:left">Byte率=<code>采样频率*音频通道数*每次采样得到的样本位数/8</code>，00005622H，也就是<code>22050Byte/s=11025*1*16/2</code></td></tr><tr><td style="text-align:left">20H</td><td style="text-align:left">2byte</td><td style="text-align:left">块对齐=通道数<em>每次采样得到的样本位数/8，0002H，也就是 `2 == 1</em>16/8`</td></tr><tr><td style="text-align:left">22H</td><td style="text-align:left">2byte</td><td style="text-align:left">样本数据位数，0010H即16，一个量化样本占2byte。</td></tr><tr><td style="text-align:left">24H</td><td style="text-align:left">4byte</td><td style="text-align:left">data，一个标志而已。</td></tr><tr><td style="text-align:left">28H</td><td style="text-align:left">4byte</td><td style="text-align:left">Wav文件实际音频数据所占的大小，这里是001437C8H即1325000，再加上2CH就正好是1325044，整个文件的大小。</td></tr><tr><td style="text-align:left">2CH</td><td style="text-align:left">不定</td><td style="text-align:left">量化数据</td></tr></tbody></table><h3 id="AudioRecord"><a href="#AudioRecord" class="headerlink" title="AudioRecord"></a>AudioRecord</h3><p>AudioRecord可实现从音频输入设备记录声音的功能。得到PCM格式的音频。<br>读取音频的方法有<code>read(byte[], int, int)</code>， <code>read(short[], int, int)</code> 或 <code>read(ByteBuffer, int)</code>。<br>可根据存储方式和需求选择使用这项方法。</p><p>需要权限<code>&lt;uses-permission android:name=&quot;android.permission.RECORD_AUDIO&quot; /&gt;</code></p><h4 id="AudioRecord-构造函数"><a href="#AudioRecord-构造函数" class="headerlink" title="AudioRecord 构造函数"></a>AudioRecord 构造函数</h4><p><code>public AudioRecord(int audioSource, int sampleRateInHz, int channelConfig, int audioFormat, int bufferSizeInBytes)</code></p><ul><li>audioSource 音源设备，常用麦克风<code>MediaRecorder.AudioSource.MIC</code></li><li>samplerateInHz 采样频率，44100Hz是目前所有设备都支持的频率</li><li>channelConfig 音频通道，单声道还是立体声</li><li>audioFormat 该参数为量化深度，即为每次采样的位数</li><li>bufferSizeInBytes 可通过<code>getMinBufferSize()</code>方法确定，每次从硬件读取数据所需要的缓冲区的大小。</li></ul><h4 id="获取wav文件"><a href="#获取wav文件" class="headerlink" title="获取wav文件"></a>获取wav文件</h4><p>若要获得wav文件，需要在PCM基础上增加一个header。可以将PCM文件转换成wav，这里提供一种PCM与wav几乎同时生成的思路。</p><p>PCM与wav同时创建，给wav文件一个默认的header。录制线程启动后，同时写PCM与wav。<br>录制完成时，重新生成header，利用<code>RandomAccessFile</code>修改wav文件的header。</p><h3 id="AudioTrack"><a href="#AudioTrack" class="headerlink" title="AudioTrack"></a>AudioTrack</h3><p>使用<code>AudioTrack</code>播放音频。初始化AudioTrack时，要根据录制时的参数进行设定。</p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p>工具类<code>WindEar</code>实现音频PCM数据的采集和播放，与读写音频wav文件的功能。</p><ul><li><code>AudioRecordThread</code> 使用<code>AudioRecord</code>录制PCM文件，可选择同时生成wav文件</li><li><code>AudioTrackPlayThread</code> 使用AudioTrack播放PCM或wav音频文件的线程</li><li><code>WindState</code> 表示当前状态，例如是否在播放，录制等等</li></ul><p>PCM文件的读写采用<code>FileOutputStream</code>和<code>FileInputStream</code></p><p><code>generateWavFileHeader</code>方法可以生成wav文件的header</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 音频录制器</span><br><span class="hljs-comment"> * 使用 AudioRecord 和 AudioTrack API 完成音频 PCM 数据的采集和播放，并实现读写音频 wav 文件</span><br><span class="hljs-comment"> * 检查权限，检查麦克风的工作放在Activity中进行</span><br><span class="hljs-comment"> * Created by Rust on 2018/2/24.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WindEar</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;rustApp&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TMP_FOLDER_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;AnWindEar&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">RECORD_AUDIO_BUFFER_TIMES</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">PLAY_AUDIO_BUFFER_TIMES</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">AUDIO_FREQUENCY</span> <span class="hljs-operator">=</span> <span class="hljs-number">44100</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">RECORD_CHANNEL_CONFIG</span> <span class="hljs-operator">=</span> AudioFormat.CHANNEL_IN_STEREO;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">PLAY_CHANNEL_CONFIG</span> <span class="hljs-operator">=</span> AudioFormat.CHANNEL_OUT_STEREO;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">AUDIO_ENCODING</span> <span class="hljs-operator">=</span> AudioFormat.ENCODING_PCM_16BIT;<br><br>    <span class="hljs-keyword">private</span> AudioRecordThread aRecordThread;           <span class="hljs-comment">// 录制线程</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">WindState</span> <span class="hljs-variable">state</span> <span class="hljs-operator">=</span> WindState.IDLE; <span class="hljs-comment">// 当前状态</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">File</span> <span class="hljs-variable">tmpPCMFile</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">File</span> <span class="hljs-variable">tmpWavFile</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">private</span> OnState onStateListener;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Handler</span> <span class="hljs-variable">mainHandler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Handler</span>(Looper.getMainLooper());<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * PCM缓存目录</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String cachePCMFolder;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * wav缓存目录</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String wavFolderPath;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">WindEar</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WindEar</span>();<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">WindEar</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> WindEar <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == instance) &#123;<br>            instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WindEar</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setOnStateListener</span><span class="hljs-params">(OnState onStateListener)</span> &#123;<br>        <span class="hljs-built_in">this</span>.onStateListener = onStateListener;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 初始化目录</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(Context context)</span> &#123;<br>        <span class="hljs-comment">// 存储在App内或SD卡上</span><br><span class="hljs-comment">//        cachePCMFolder = context.getFilesDir().getAbsolutePath() + File.separator + TMP_FOLDER_NAME;</span><br>        cachePCMFolder = Environment.getExternalStorageDirectory().getAbsolutePath() + File.separator<br>                + TMP_FOLDER_NAME;<br><br>        <span class="hljs-type">File</span> <span class="hljs-variable">folder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(cachePCMFolder);<br>        <span class="hljs-keyword">if</span> (!folder.exists()) &#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> folder.mkdirs();<br>            Log.d(TAG, String.format(Locale.CHINA, <span class="hljs-string">&quot;PCM目录:%s -&gt; %b&quot;</span>, cachePCMFolder, f));<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">for</span> (File f : folder.listFiles()) &#123;<br>                <span class="hljs-type">boolean</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> f.delete();<br>                Log.d(TAG, String.format(Locale.CHINA, <span class="hljs-string">&quot;删除PCM文件:%s %b&quot;</span>, f.getName(), d));<br>            &#125;<br>            Log.d(TAG, String.format(Locale.CHINA, <span class="hljs-string">&quot;PCM目录:%s&quot;</span>, cachePCMFolder));<br>        &#125;<br><br>        wavFolderPath = Environment.getExternalStorageDirectory().getAbsolutePath() + File.separator<br>                + TMP_FOLDER_NAME;<br><span class="hljs-comment">//        wavFolderPath = context.getFilesDir().getAbsolutePath() + File.separator + TMP_FOLDER_NAME;</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">wavDir</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(wavFolderPath);<br>        <span class="hljs-keyword">if</span> (!wavDir.exists()) &#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">w</span> <span class="hljs-operator">=</span> wavDir.mkdirs();<br>            Log.d(TAG, String.format(Locale.CHINA, <span class="hljs-string">&quot;wav目录:%s -&gt; %b&quot;</span>, wavFolderPath, w));<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            Log.d(TAG, String.format(Locale.CHINA, <span class="hljs-string">&quot;wav目录:%s&quot;</span>, wavFolderPath));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 开始录制音频</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startRecord</span><span class="hljs-params">(<span class="hljs-type">boolean</span> createWav)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!state.equals(WindState.IDLE)) &#123;<br>            Log.w(TAG, <span class="hljs-string">&quot;无法开始录制，当前状态为 &quot;</span> + state);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            tmpPCMFile = File.createTempFile(<span class="hljs-string">&quot;recording&quot;</span>, <span class="hljs-string">&quot;.pcm&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(cachePCMFolder));<br>            <span class="hljs-keyword">if</span> (createWav) &#123;<br>                <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyMMdd_HHmmss&quot;</span>, Locale.CHINA);<br>                tmpWavFile = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(wavFolderPath + File.separator + <span class="hljs-string">&quot;r&quot;</span> + sdf.format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()) + <span class="hljs-string">&quot;.wav&quot;</span>);<br>            &#125;<br>            Log.d(TAG, <span class="hljs-string">&quot;tmp file &quot;</span> + tmpPCMFile.getName());<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != aRecordThread) &#123;<br>            aRecordThread.interrupt();<br>            aRecordThread = <span class="hljs-literal">null</span>;<br>        &#125;<br>        aRecordThread = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AudioRecordThread</span>(createWav);<br>        aRecordThread.start();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stopRecord</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (!state.equals(WindState.RECORDING)) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        state = WindState.STOP_RECORD;<br>        notifyState(state);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 播放录制好的PCM文件</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startPlayPCM</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (!isIdle()) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">AudioTrackPlayThread</span>(tmpPCMFile).start();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 播放录制好的wav文件</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startPlayWav</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (!isIdle()) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">AudioTrackPlayThread</span>(tmpWavFile).start();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stopPlay</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (!state.equals(WindState.PLAYING)) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        state = WindState.STOP_PLAY;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isIdle</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> WindState.IDLE.equals(state);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 音频录制线程</span><br><span class="hljs-comment">     * 使用FileOutputStream来写文件</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AudioRecordThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>        AudioRecord aRecord;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">bufferSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">10240</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">createWav</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>        AudioRecordThread(<span class="hljs-type">boolean</span> createWav) &#123;<br>            <span class="hljs-built_in">this</span>.createWav = createWav;<br>            bufferSize = AudioRecord.getMinBufferSize(AUDIO_FREQUENCY,<br>                    RECORD_CHANNEL_CONFIG, AUDIO_ENCODING) * RECORD_AUDIO_BUFFER_TIMES;<br>            Log.d(TAG, <span class="hljs-string">&quot;record buffer size = &quot;</span> + bufferSize);<br>            aRecord = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AudioRecord</span>(MediaRecorder.AudioSource.MIC, AUDIO_FREQUENCY,<br>                    RECORD_CHANNEL_CONFIG, AUDIO_ENCODING, bufferSize);<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            state = WindState.RECORDING;<br>            notifyState(state);<br>            Log.d(TAG, <span class="hljs-string">&quot;录制开始&quot;</span>);<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 这里选择FileOutputStream而不是DataOutputStream</span><br>                <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">pcmFos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(tmpPCMFile);<br><br>                <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">wavFos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(tmpWavFile);<br>                <span class="hljs-keyword">if</span> (createWav) &#123;<br>                    writeWavFileHeader(wavFos, bufferSize, AUDIO_FREQUENCY, aRecord.getChannelCount());<br>                &#125;<br>                aRecord.startRecording();<br>                <span class="hljs-type">byte</span>[] byteBuffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[bufferSize];<br>                <span class="hljs-keyword">while</span> (state.equals(WindState.RECORDING) &amp;&amp; !isInterrupted()) &#123;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> aRecord.read(byteBuffer, <span class="hljs-number">0</span>, byteBuffer.length);<br>                    pcmFos.write(byteBuffer, <span class="hljs-number">0</span>, end);<br>                    pcmFos.flush();<br>                    <span class="hljs-keyword">if</span> (createWav) &#123;<br>                        wavFos.write(byteBuffer, <span class="hljs-number">0</span>, end);<br>                        wavFos.flush();<br>                    &#125;<br>                &#125;<br>                aRecord.stop(); <span class="hljs-comment">// 录制结束</span><br>                pcmFos.close();<br>                wavFos.close();<br>                <span class="hljs-keyword">if</span> (createWav) &#123;<br>                    <span class="hljs-comment">// 修改header</span><br>                    <span class="hljs-type">RandomAccessFile</span> <span class="hljs-variable">wavRaf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomAccessFile</span>(tmpWavFile, <span class="hljs-string">&quot;rw&quot;</span>);<br>                    <span class="hljs-type">byte</span>[] header = generateWavFileHeader(tmpPCMFile.length(), AUDIO_FREQUENCY, aRecord.getChannelCount());<br>                    Log.d(TAG, <span class="hljs-string">&quot;header: &quot;</span> + getHexString(header));<br>                    wavRaf.seek(<span class="hljs-number">0</span>);<br>                    wavRaf.write(header);<br>                    wavRaf.close();<br>                    Log.d(TAG, <span class="hljs-string">&quot;tmpWavFile.length: &quot;</span> + tmpWavFile.length());<br>                &#125;<br>                Log.i(TAG, <span class="hljs-string">&quot;audio tmp PCM file len: &quot;</span> + tmpPCMFile.length());<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                Log.e(TAG, <span class="hljs-string">&quot;AudioRecordThread:&quot;</span>, e);<br>                notifyState(WindState.ERROR);<br>            &#125;<br>            notifyState(state);<br>            state = WindState.IDLE;<br>            notifyState(state);<br>            Log.d(TAG, <span class="hljs-string">&quot;录制结束&quot;</span>);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getHexString</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bytes)</span> &#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">byte</span> b : bytes) &#123;<br>            sb.append(Integer.toHexString(b)).append(<span class="hljs-string">&quot;,&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> sb.toString();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * AudioTrack播放音频线程</span><br><span class="hljs-comment">     * 使用FileInputStream读取文件</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AudioTrackPlayThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>        AudioTrack track;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">bufferSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">10240</span>;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">audioFile</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        AudioTrackPlayThread(File aFile) &#123;<br>            setPriority(Thread.MAX_PRIORITY);<br>            audioFile = aFile;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">bufferSize</span> <span class="hljs-operator">=</span> AudioTrack.getMinBufferSize(AUDIO_FREQUENCY,<br>                    PLAY_CHANNEL_CONFIG, AUDIO_ENCODING) * PLAY_AUDIO_BUFFER_TIMES;<br>            track = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AudioTrack</span>(AudioManager.STREAM_MUSIC,<br>                    AUDIO_FREQUENCY,<br>                    PLAY_CHANNEL_CONFIG, AUDIO_ENCODING, bufferSize,<br>                    AudioTrack.MODE_STREAM);<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-built_in">super</span>.run();<br>            state = WindState.PLAYING;<br>            notifyState(state);<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(audioFile);<br>                track.play();<br>                <span class="hljs-type">byte</span>[] aByteBuffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[bufferSize];<br>                <span class="hljs-keyword">while</span> (state.equals(WindState.PLAYING) &amp;&amp;<br>                        fis.read(aByteBuffer) &gt;= <span class="hljs-number">0</span>) &#123;<br>                    track.write(aByteBuffer, <span class="hljs-number">0</span>, aByteBuffer.length);<br>                &#125;<br>                track.stop();<br>                track.release();<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                Log.e(TAG, <span class="hljs-string">&quot;AudioTrackPlayThread:&quot;</span>, e);<br>                notifyState(WindState.ERROR);<br>            &#125;<br>            state = WindState.STOP_PLAY;<br>            notifyState(state);<br>            state = WindState.IDLE;<br>            notifyState(state);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">notifyState</span><span class="hljs-params">(<span class="hljs-keyword">final</span> WindState currentState)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != onStateListener) &#123;<br>            mainHandler.post(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                    onStateListener.onStateChanged(currentState);<br>                &#125;<br>            &#125;);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">OnState</span> &#123;<br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">onStateChanged</span><span class="hljs-params">(WindState currentState)</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 表示当前状态</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">WindState</span> &#123;<br>        ERROR,<br>        IDLE,<br>        RECORDING,<br>        STOP_RECORD,<br>        PLAYING,<br>        STOP_PLAY<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> out            wav音频文件流</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> totalAudioLen  不包括header的音频数据总长度</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> longSampleRate 采样率,也就是录制时使用的频率</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> channels       audioRecord的频道数量</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException 写文件错误</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeWavFileHeader</span><span class="hljs-params">(FileOutputStream out, <span class="hljs-type">long</span> totalAudioLen, <span class="hljs-type">long</span> longSampleRate,</span><br><span class="hljs-params">                                    <span class="hljs-type">int</span> channels)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">byte</span>[] header = generateWavFileHeader(totalAudioLen, longSampleRate, channels);<br>        out.write(header, <span class="hljs-number">0</span>, header.length);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 任何一种文件在头部添加相应的头文件才能够确定的表示这种文件的格式，</span><br><span class="hljs-comment">     * wave是RIFF文件结构，每一部分为一个chunk，其中有RIFF WAVE chunk，</span><br><span class="hljs-comment">     * FMT Chunk，Fact chunk,Data chunk,其中Fact chunk是可以选择的</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pcmAudioByteCount 不包括header的音频数据总长度</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> longSampleRate    采样率,也就是录制时使用的频率</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> channels          audioRecord的频道数量</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">byte</span>[] generateWavFileHeader(<span class="hljs-type">long</span> pcmAudioByteCount, <span class="hljs-type">long</span> longSampleRate, <span class="hljs-type">int</span> channels) &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">totalDataLen</span> <span class="hljs-operator">=</span> pcmAudioByteCount + <span class="hljs-number">36</span>; <span class="hljs-comment">// 不包含前8个字节的WAV文件总长度</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">byteRate</span> <span class="hljs-operator">=</span> longSampleRate * <span class="hljs-number">2</span> * channels;<br>        <span class="hljs-type">byte</span>[] header = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">44</span>];<br>        header[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;R&#x27;</span>; <span class="hljs-comment">// RIFF</span><br>        header[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;I&#x27;</span>;<br>        header[<span class="hljs-number">2</span>] = <span class="hljs-string">&#x27;F&#x27;</span>;<br>        header[<span class="hljs-number">3</span>] = <span class="hljs-string">&#x27;F&#x27;</span>;<br><br>        header[<span class="hljs-number">4</span>] = (<span class="hljs-type">byte</span>) (totalDataLen &amp; <span class="hljs-number">0xff</span>);<span class="hljs-comment">//数据大小</span><br>        header[<span class="hljs-number">5</span>] = (<span class="hljs-type">byte</span>) ((totalDataLen &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xff</span>);<br>        header[<span class="hljs-number">6</span>] = (<span class="hljs-type">byte</span>) ((totalDataLen &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xff</span>);<br>        header[<span class="hljs-number">7</span>] = (<span class="hljs-type">byte</span>) ((totalDataLen &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xff</span>);<br><br>        header[<span class="hljs-number">8</span>] = <span class="hljs-string">&#x27;W&#x27;</span>;<span class="hljs-comment">//WAVE</span><br>        header[<span class="hljs-number">9</span>] = <span class="hljs-string">&#x27;A&#x27;</span>;<br>        header[<span class="hljs-number">10</span>] = <span class="hljs-string">&#x27;V&#x27;</span>;<br>        header[<span class="hljs-number">11</span>] = <span class="hljs-string">&#x27;E&#x27;</span>;<br>        <span class="hljs-comment">//FMT Chunk</span><br>        header[<span class="hljs-number">12</span>] = <span class="hljs-string">&#x27;f&#x27;</span>; <span class="hljs-comment">// &#x27;fmt &#x27;</span><br>        header[<span class="hljs-number">13</span>] = <span class="hljs-string">&#x27;m&#x27;</span>;<br>        header[<span class="hljs-number">14</span>] = <span class="hljs-string">&#x27;t&#x27;</span>;<br>        header[<span class="hljs-number">15</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<span class="hljs-comment">//过渡字节</span><br>        <span class="hljs-comment">//数据大小</span><br>        header[<span class="hljs-number">16</span>] = <span class="hljs-number">16</span>; <span class="hljs-comment">// 4 bytes: size of &#x27;fmt &#x27; chunk</span><br>        header[<span class="hljs-number">17</span>] = <span class="hljs-number">0</span>;<br>        header[<span class="hljs-number">18</span>] = <span class="hljs-number">0</span>;<br>        header[<span class="hljs-number">19</span>] = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//编码方式 10H为PCM编码格式</span><br>        header[<span class="hljs-number">20</span>] = <span class="hljs-number">1</span>; <span class="hljs-comment">// format = 1</span><br>        header[<span class="hljs-number">21</span>] = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//通道数</span><br>        header[<span class="hljs-number">22</span>] = (<span class="hljs-type">byte</span>) channels;<br>        header[<span class="hljs-number">23</span>] = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//采样率，每个通道的播放速度</span><br>        header[<span class="hljs-number">24</span>] = (<span class="hljs-type">byte</span>) (longSampleRate &amp; <span class="hljs-number">0xff</span>);<br>        header[<span class="hljs-number">25</span>] = (<span class="hljs-type">byte</span>) ((longSampleRate &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xff</span>);<br>        header[<span class="hljs-number">26</span>] = (<span class="hljs-type">byte</span>) ((longSampleRate &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xff</span>);<br>        header[<span class="hljs-number">27</span>] = (<span class="hljs-type">byte</span>) ((longSampleRate &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xff</span>);<br>        <span class="hljs-comment">//音频数据传送速率,采样率*通道数*采样深度/8</span><br>        header[<span class="hljs-number">28</span>] = (<span class="hljs-type">byte</span>) (byteRate &amp; <span class="hljs-number">0xff</span>);<br>        header[<span class="hljs-number">29</span>] = (<span class="hljs-type">byte</span>) ((byteRate &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xff</span>);<br>        header[<span class="hljs-number">30</span>] = (<span class="hljs-type">byte</span>) ((byteRate &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xff</span>);<br>        header[<span class="hljs-number">31</span>] = (<span class="hljs-type">byte</span>) ((byteRate &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xff</span>);<br>        <span class="hljs-comment">// 确定系统一次要处理多少个这样字节的数据，确定缓冲区，通道数*采样位数</span><br>        header[<span class="hljs-number">32</span>] = (<span class="hljs-type">byte</span>) (<span class="hljs-number">2</span> * channels);<br>        header[<span class="hljs-number">33</span>] = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//每个样本的数据位数</span><br>        header[<span class="hljs-number">34</span>] = <span class="hljs-number">16</span>;<br>        header[<span class="hljs-number">35</span>] = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//Data chunk</span><br>        header[<span class="hljs-number">36</span>] = <span class="hljs-string">&#x27;d&#x27;</span>;<span class="hljs-comment">//data</span><br>        header[<span class="hljs-number">37</span>] = <span class="hljs-string">&#x27;a&#x27;</span>;<br>        header[<span class="hljs-number">38</span>] = <span class="hljs-string">&#x27;t&#x27;</span>;<br>        header[<span class="hljs-number">39</span>] = <span class="hljs-string">&#x27;a&#x27;</span>;<br>        header[<span class="hljs-number">40</span>] = (<span class="hljs-type">byte</span>) (pcmAudioByteCount &amp; <span class="hljs-number">0xff</span>);<br>        header[<span class="hljs-number">41</span>] = (<span class="hljs-type">byte</span>) ((pcmAudioByteCount &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xff</span>);<br>        header[<span class="hljs-number">42</span>] = (<span class="hljs-type">byte</span>) ((pcmAudioByteCount &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xff</span>);<br>        header[<span class="hljs-number">43</span>] = (<span class="hljs-type">byte</span>) ((pcmAudioByteCount &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xff</span>);<br>        <span class="hljs-keyword">return</span> header;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://developer.android.com/reference/android/media/AudioRecord.html">AudioRecord - developer.android.com</a></li><li><a href="https://developer.android.com/reference/android/media/AudioTrack.html">AudioTrack - developer.android.com</a></li></ul><p>Android音视频相关文章请参考 <a href="https://rustfisher.com/tags/Android-Media/">https://rustfisher.com/tags/Android-Media/</a></p>]]></content>
    
    
    <categories>
      
      <category>Android_note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android_Media</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android教程2020 - 系列简介</title>
    <link href="/Android_tutorial_2020/Android-tutorial_2020_a_menu/"/>
    <url>/Android_tutorial_2020/Android-tutorial_2020_a_menu/</url>
    
    <content type="html"><![CDATA[<p>Android教程2020迁移到<a href="https://an.rustfisher.com/">Android教程2020</a>，欢迎大家前来阅读👏</p><p>为了方便朋友入门安卓应用开发，开始整理2020年的Android新手教程。突出一个简单明了，上手快。<br>从实用性出发，快速掌握Android开发基本技能。需要读者有一定的Java基础。</p><p>学完本课程后，读者可以自己做出一个个方便工作生活的小工具来。</p><p>我的博客即将同步至腾讯云+社区，邀请大家一同入驻：<a href="https://cloud.tencent.com/developer/support-plan?invite_code=1htj93xu8gcij">https://cloud.tencent.com/developer/support-plan?invite_code=1htj93xu8gcij</a></p>]]></content>
    
    
    <categories>
      
      <category>Android_tutorial_2020</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android-2020</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【运营的Python指南】Python Excel 绘制柱形图</title>
    <link href="/Python/Python-op-excel_openpyxl_bar_column_chart/"/>
    <url>/Python/Python-op-excel_openpyxl_bar_column_chart/</url>
    
    <content type="html"><![CDATA[<p>这是一份写给运营人员的Python指南。本文主要讲述如何使用Python操作Excel绘制柱形图。</p><p>相关代码请参考 <a href="https://github.com/RustFisher/python-playground">https://github.com/RustFisher/python-playground</a></p><p>本文链接：<a href="https://www.rustfisher.com/2019/11/19/Python/Python-op-excel_openpyxl_bar_column_chart/">https://www.rustfisher.com/2019/11/19/Python/Python-op-excel_openpyxl_bar_column_chart/</a></p><p>开发工具，环境</p><ul><li>PyCharm</li><li>Python3</li><li>Office Excel</li></ul><p><a href="https://www.rustfisher.com/2019/11/05/Python/Python-op-excel_openpyxl_use/">前面</a>我们已经创建好了一张Excel表。<br>现在我们要根据已有的数据，往里面添加柱形图。</p><h2 id="柱形图-BarChart"><a href="#柱形图-BarChart" class="headerlink" title="柱形图 BarChart"></a>柱形图 BarChart</h2><p>参考<a href="https://rustfisher.com/2019/11/14/Python/Python-openpyxl_charts_Bar_and_Column/">《Python openpyxl Excel绘制柱形图》</a>得知，我们主要使用<code>BarChart</code>与<code>BarChart3D</code>类。<br>图表中许多的细节由BarChart属性控制。</p><p>后文都以chart1来表示柱形图对象 <code>chart1 = BarChart()</code> 。</p><h3 id="数据来源范围-Reference"><a href="#数据来源范围-Reference" class="headerlink" title="数据来源范围 Reference"></a>数据来源范围 Reference</h3><p>首先我们应该确定数据的范围。有数据才好绘图。这里使用的是<code>Reference</code>类来表示数据“引用”范围。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py">data1 = Reference(st, min_col=<span class="hljs-number">2</span>, min_row=<span class="hljs-number">1</span>, max_row=<span class="hljs-number">7</span>, max_col=<span class="hljs-number">3</span>)<br>cats1 = Reference(st, min_col=<span class="hljs-number">1</span>, min_row=<span class="hljs-number">2</span>, max_row=<span class="hljs-number">7</span>)<br></code></pre></td></tr></table></figure><br>需要注意的是，范围的下标是从1开始的。<br>这里的data1把标题也框进去了。设定数据的时候，需要设置<code>titles_from_data=True</code><br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">chart1.add_data(data1, titles_from_data=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure></p><p>设置种类使用<code>set_categories</code>方法，也是把一个范围（Reference）的数据传入。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">chart1.set_categories(cats1)<br></code></pre></td></tr></table></figure></p><h3 id="柱子方向控制-type"><a href="#柱子方向控制-type" class="headerlink" title="柱子方向控制 type"></a>柱子方向控制 type</h3><p>方向由属性<code>type</code>来控制，有2个可选参数：<code>bar</code>表示横向，<code>col</code>表示竖直。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py">chart1.<span class="hljs-built_in">type</span> = <span class="hljs-string">&quot;bar&quot;</span> <span class="hljs-comment"># 横向柱形图</span><br>chart1.<span class="hljs-built_in">type</span> = <span class="hljs-string">&quot;col&quot;</span> <span class="hljs-comment"># 纵向柱形图</span><br></code></pre></td></tr></table></figure><h3 id="标题-title"><a href="#标题-title" class="headerlink" title="标题 title"></a>标题 title</h3><p>属性title控制标题。如果置为None则不显示标题。</p><p>图表的标题 <code>chart1.title = &quot;日均值对比&quot;</code></p><p>坐标的标题，首先需要拿到x，y的坐标。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py">chart1.y_axis.title = <span class="hljs-string">&#x27;数值&#x27;</span><br>chart1.x_axis.title = st.cell(column=<span class="hljs-number">1</span>, row=<span class="hljs-number">1</span>).value  <span class="hljs-comment"># 直接用单元格的内容做标题</span><br></code></pre></td></tr></table></figure></p><h3 id="添加图表"><a href="#添加图表" class="headerlink" title="添加图表"></a>添加图表</h3><p>add_chart将图表添加到sheet中。图表的左上角对齐某个单元格。下面是对齐A8。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">st.add_chart(chart1, <span class="hljs-string">&#x27;A8&#x27;</span>)<br></code></pre></td></tr></table></figure></p><h3 id="3D柱形图-BarChart3D"><a href="#3D柱形图-BarChart3D" class="headerlink" title="3D柱形图 BarChart3D"></a>3D柱形图 BarChart3D</h3><h4 id="柱子的形状-shape"><a href="#柱子的形状-shape" class="headerlink" title="柱子的形状 shape"></a>柱子的形状 shape</h4><p>默认是立方体，但也可以从下面的形状里选一个。</p><p><code>&#123;&#39;box&#39;, &#39;pyramid&#39;, &#39;pyramidToMax&#39;, &#39;coneToMax&#39;, &#39;cone&#39;, &#39;cylinder&#39;&#125;</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">chart1.<span class="hljs-built_in">type</span> = <span class="hljs-string">&#x27;cone&#x27;</span><br></code></pre></td></tr></table></figure><p>box 是立方体，中规中矩。<br>pyramid 是金字塔，顶部也是尖的。<br>cone 是圆锥，看起来很尖锐。<br>cylinder 是圆柱。</p><h4 id="配色风格-style"><a href="#配色风格-style" class="headerlink" title="配色风格 style"></a>配色风格 style</h4><p>style 会影响图表的配色风格，一般用10比较多彩多样。</p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><p>绘制图表用的数据来自<a href="https://rustfisher.com/2019/11/05/Python/Python-op-excel_openpyxl_use/">运营的Python指南 - Python 操作Excel</a>。<br>我们在已有的表格中添加柱形图。代码参考<a href="https://github.com/RustFisher/python-playground">python-playground - Github</a></p><h4 id="绘制2D柱形图"><a href="#绘制2D柱形图" class="headerlink" title="绘制2D柱形图"></a>绘制2D柱形图</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_bar_chart_1</span>(<span class="hljs-params">file_path</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    插入柱形图</span><br><span class="hljs-string">    :param file_path: Excel 文件路径</span><br><span class="hljs-string">    :return: None</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    wb = load_workbook(file_path)<br>    st = wb.active<br><br>    data1 = Reference(st, min_col=<span class="hljs-number">2</span>, min_row=<span class="hljs-number">1</span>, max_row=<span class="hljs-number">7</span>, max_col=<span class="hljs-number">3</span>)<br>    cats1 = Reference(st, min_col=<span class="hljs-number">1</span>, min_row=<span class="hljs-number">2</span>, max_row=<span class="hljs-number">7</span>)<br><br>    chart1 = BarChart()<br>    chart1.<span class="hljs-built_in">type</span> = <span class="hljs-string">&quot;col&quot;</span><br>    chart1.style = <span class="hljs-number">9</span><br>    chart1.title = <span class="hljs-string">&quot;日均值对比&quot;</span><br>    <span class="hljs-comment"># chart1.y_axis.title = &#x27;数值&#x27;</span><br>    chart1.x_axis.title = st.cell(column=<span class="hljs-number">1</span>, row=<span class="hljs-number">1</span>).value<br><br>    chart1.add_data(data1, titles_from_data=<span class="hljs-literal">True</span>)<br>    chart1.set_categories(cats1)<br>    chart1.shape = <span class="hljs-number">0</span><br>    st.add_chart(chart1, <span class="hljs-string">&#x27;A8&#x27;</span>)<br>    wb.save(file_path)<br></code></pre></td></tr></table></figure><h4 id="绘制3D柱形图"><a href="#绘制3D柱形图" class="headerlink" title="绘制3D柱形图"></a>绘制3D柱形图</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_bar_chart_2</span>(<span class="hljs-params">file_path</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    插入3D柱形图</span><br><span class="hljs-string">    :param file_path: Excel 文件路径</span><br><span class="hljs-string">    :return: None</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    wb = load_workbook(file_path)<br>    st = wb.active<br><br>    data1 = Reference(st, min_col=<span class="hljs-number">2</span>, min_row=<span class="hljs-number">1</span>, max_row=<span class="hljs-number">7</span>, max_col=<span class="hljs-number">3</span>)<br>    cats1 = Reference(st, min_col=<span class="hljs-number">1</span>, min_row=<span class="hljs-number">2</span>, max_row=<span class="hljs-number">7</span>)<br><br>    chart1 = BarChart3D()<br>    chart1.<span class="hljs-built_in">type</span> = <span class="hljs-string">&quot;bar&quot;</span><br>    chart1.style = <span class="hljs-number">10</span><br>    chart1.title = <span class="hljs-string">&quot;日均值对比&quot;</span><br>    chart1.x_axis.title = <span class="hljs-literal">None</span><br>    chart1.shape = <span class="hljs-string">&#x27;cylinder&#x27;</span><br><br>    chart1.add_data(data1, titles_from_data=<span class="hljs-literal">True</span>)<br>    chart1.set_categories(cats1)<br>    st.add_chart(chart1, <span class="hljs-string">&#x27;A26&#x27;</span>)<br>    wb.save(file_path)<br></code></pre></td></tr></table></figure><p>运行结果示例图片</p><p><img src="py-op-excel-bar-chart-4.png" alt="整体图片 - Excel打开"></p><p>相关代码请参考 <a href="https://github.com/RustFisher/python-playground">https://github.com/RustFisher/python-playground</a></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运营的Python指南</tag>
      
      <tag>openpyxl</tag>
      
      <tag>Excel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python openpyxl Excel绘制柱形图</title>
    <link href="/Python/Python-openpyxl_charts_Bar_and_Column/"/>
    <url>/Python/Python-openpyxl_charts_Bar_and_Column/</url>
    
    <content type="html"><![CDATA[<p>这是一份<a href="https://openpyxl.readthedocs.io/en/stable/">openpyxl</a>的使用指南。</p><p>大体内容翻译自官网 <a href="https://openpyxl.readthedocs.io/en/stable/charts/bar.html#vertical-horizontal-and-stacked-bar-charts">https://openpyxl.readthedocs.io/en/stable/charts/bar.html#vertical-horizontal-and-stacked-bar-charts</a></p><p>本文在官网基础上会有一些改动。代码请参考 <a href="https://github.com/RustFisher/python-playground">https://github.com/RustFisher/python-playground</a></p><p>本文链接 <a href="https://rustfisher.com/2019/11/14/Python/Python-openpyxl_charts_Bar_and_Column/">https://rustfisher.com/2019/11/14/Python/Python-openpyxl_charts_Bar_and_Column/</a></p><h2 id="柱形图"><a href="#柱形图" class="headerlink" title="柱形图"></a>柱形图</h2><p>数据会被绘制成垂直，水平或者是层叠效果的柱形图。</p><p>注意：</p><ul><li>接下来的设置会影响到不同类型的图表。</li><li>设置类别可以控制柱形图是垂直或是水平。</li><li>使用层叠图形时，需要设置overlap成100。</li><li>如果柱形是水平的，x和y坐标会对调过来。</li></ul><h3 id="2D图表"><a href="#2D图表" class="headerlink" title="2D图表"></a>2D图表</h3><p><img src="https://openpyxl.readthedocs.io/en/stable/_images/bar.png" alt="2D图表参考效果图 - 原文图片"></p><p>示例代码如下，根据给定的数据绘制了4张图表。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> openpyxl <span class="hljs-keyword">import</span> Workbook<br><span class="hljs-keyword">from</span> openpyxl.chart <span class="hljs-keyword">import</span> BarChart, Series, Reference<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bar_chart_demo</span>():<br>    wb = Workbook(write_only=<span class="hljs-literal">True</span>)<br>    ws = wb.create_sheet()<br><br>    rows = [<br>        (<span class="hljs-string">&#x27;Number&#x27;</span>, <span class="hljs-string">&#x27;Batch 1&#x27;</span>, <span class="hljs-string">&#x27;Batch 2&#x27;</span>),<br>        (<span class="hljs-number">2</span>, <span class="hljs-number">10</span>, <span class="hljs-number">30</span>),<br>        (<span class="hljs-number">3</span>, <span class="hljs-number">40</span>, <span class="hljs-number">60</span>),<br>        (<span class="hljs-number">4</span>, <span class="hljs-number">50</span>, <span class="hljs-number">70</span>),<br>        (<span class="hljs-number">5</span>, <span class="hljs-number">20</span>, <span class="hljs-number">10</span>),<br>        (<span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">40</span>),<br>        (<span class="hljs-number">7</span>, <span class="hljs-number">50</span>, <span class="hljs-number">30</span>),<br>    ]<br><br>    <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> rows:<br>        ws.append(row)<br><br>    chart1 = BarChart()<br>    chart1.<span class="hljs-built_in">type</span> = <span class="hljs-string">&quot;col&quot;</span><br>    chart1.style = <span class="hljs-number">10</span><br>    chart1.title = <span class="hljs-string">&quot;Bar Chart&quot;</span><br>    chart1.y_axis.title = <span class="hljs-string">&#x27;Test number&#x27;</span><br>    chart1.x_axis.title = <span class="hljs-string">&#x27;Sample length (mm)&#x27;</span><br><br>    data = Reference(ws, min_col=<span class="hljs-number">2</span>, min_row=<span class="hljs-number">1</span>, max_row=<span class="hljs-number">7</span>, max_col=<span class="hljs-number">3</span>)<br>    cats = Reference(ws, min_col=<span class="hljs-number">1</span>, min_row=<span class="hljs-number">2</span>, max_row=<span class="hljs-number">7</span>)<br>    chart1.add_data(data, titles_from_data=<span class="hljs-literal">True</span>)<br>    chart1.set_categories(cats)<br>    chart1.shape = <span class="hljs-number">4</span><br>    ws.add_chart(chart1, <span class="hljs-string">&quot;A10&quot;</span>)<br><br>    <span class="hljs-keyword">from</span> copy <span class="hljs-keyword">import</span> deepcopy<br><br>    chart2 = deepcopy(chart1)<br>    chart2.style = <span class="hljs-number">11</span><br>    chart2.<span class="hljs-built_in">type</span> = <span class="hljs-string">&quot;bar&quot;</span><br>    chart2.title = <span class="hljs-string">&quot;Horizontal Bar Chart&quot;</span><br><br>    ws.add_chart(chart2, <span class="hljs-string">&quot;I10&quot;</span>)<br><br>    chart3 = deepcopy(chart1)<br>    chart3.<span class="hljs-built_in">type</span> = <span class="hljs-string">&quot;col&quot;</span><br>    chart3.style = <span class="hljs-number">12</span><br>    chart3.grouping = <span class="hljs-string">&quot;stacked&quot;</span><br>    chart3.overlap = <span class="hljs-number">100</span><br>    chart3.title = <span class="hljs-string">&#x27;Stacked Chart&#x27;</span><br><br>    ws.add_chart(chart3, <span class="hljs-string">&quot;A27&quot;</span>)<br><br>    chart4 = deepcopy(chart1)<br>    chart4.<span class="hljs-built_in">type</span> = <span class="hljs-string">&quot;bar&quot;</span><br>    chart4.style = <span class="hljs-number">13</span><br>    chart4.grouping = <span class="hljs-string">&quot;percentStacked&quot;</span><br>    chart4.overlap = <span class="hljs-number">100</span><br>    chart4.title = <span class="hljs-string">&#x27;Percent Stacked Chart&#x27;</span><br><br>    ws.add_chart(chart4, <span class="hljs-string">&quot;I27&quot;</span>)<br><br>    wb.save(<span class="hljs-string">&quot;out/bar.xlsx&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    bar_chart_demo()<br><br></code></pre></td></tr></table></figure></p><blockquote><p>译者注：这里调整了图表在excel中的位置，原文是在<code>G</code>列，即<code>G10</code>和<code>G27</code>，这里改为了<code>I</code>列。代码格式也有微调。</p></blockquote><p>我们需要生成图表的时候，Excel会要我们先选定数据范围（来源）。在代码中用<code>Reference</code>来指定数据来源范围。</p><h3 id="3D图表"><a href="#3D图表" class="headerlink" title="3D图表"></a>3D图表</h3><p>绘制3D图表，使用<code>BarChart3D</code>。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">bar_3d</span>():<br>    wb = Workbook()<br>    ws = wb.active<br><br>    rows = [<br>        (<span class="hljs-literal">None</span>, <span class="hljs-number">2013</span>, <span class="hljs-number">2014</span>),<br>        (<span class="hljs-string">&quot;Apples&quot;</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>),<br>        (<span class="hljs-string">&quot;Oranges&quot;</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>),<br>        (<span class="hljs-string">&quot;Pears&quot;</span>, <span class="hljs-number">8</span>, <span class="hljs-number">3</span>)<br>    ]<br><br>    <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> rows:<br>        ws.append(row)<br><br>    data = Reference(ws, min_col=<span class="hljs-number">2</span>, min_row=<span class="hljs-number">1</span>, max_col=<span class="hljs-number">3</span>, max_row=<span class="hljs-number">4</span>)<br>    titles = Reference(ws, min_col=<span class="hljs-number">1</span>, min_row=<span class="hljs-number">2</span>, max_row=<span class="hljs-number">4</span>)<br>    chart = BarChart3D()<br>    chart.title = <span class="hljs-string">&quot;3D Bar Chart&quot;</span><br>    chart.add_data(data=data, titles_from_data=<span class="hljs-literal">True</span>)<br>    chart.set_categories(titles)<br><br>    ws.add_chart(chart, <span class="hljs-string">&quot;E5&quot;</span>)<br>    wb.save(<span class="hljs-string">&quot;out/bar3d.xlsx&quot;</span>)<br></code></pre></td></tr></table></figure></p><p>创建好的图表用WPS打开发现是2D的。用Office Excel打开是3D的。</p><p><img src="https://openpyxl.readthedocs.io/en/stable/_images/bar3D.png" alt="3D图表效果图 - 原文图片"></p><p>代码请参考 <a href="https://github.com/RustFisher/python-playground">https://github.com/RustFisher/python-playground</a></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>openpyxl</tag>
      
      <tag>Excel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【运营的Python指南】Python 操作Excel</title>
    <link href="/Python/Python-op-excel_openpyxl_use/"/>
    <url>/Python/Python-op-excel_openpyxl_use/</url>
    
    <content type="html"><![CDATA[<p>这是一份写给运营人员的Python指南。本文主要讲述如何使用Python操作Excel。完成Excel的创建，查询和修改操作。<br>相关代码请参考 <a href="https://github.com/RustFisher/python-playground">https://github.com/RustFisher/python-playground</a></p><p>本文链接：<a href="https://www.rustfisher.com/2019/11/05/Python/Python-op-excel_openpyxl_use/">https://www.rustfisher.com/2019/11/05/Python/Python-op-excel_openpyxl_use/</a></p><p>开发工具，环境</p><ul><li>PyCharm - 方便好用的IDE</li><li>Python3</li></ul><p>这里默认你的电脑上已经装有python3.x，环境变量已经配置好。</p><h2 id="引入openpyxl"><a href="#引入openpyxl" class="headerlink" title="引入openpyxl"></a>引入openpyxl</h2><p>这里使用<a href="https://openpyxl.readthedocs.io/en/stable/">openpyxl</a>库来操作Excel。类似的库还有xlrd。</p><p>penpyxl的基础使用方法请参见<a href="http://rustfisher.com/2019/11/03/Python/Python-openpyxl_tutorial/">Python openpyxl 处理Excel使用指南</a>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install openpyxl<br></code></pre></td></tr></table></figure><p>例如Windows下的vscode，可以在终端里执行<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">py -m pip install openpyxl<br></code></pre></td></tr></table></figure></p><h2 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h2><p>假定数据来自百度指数，以常见的一些搜索指数为例。给后面的操作准备一些数据，把数据写入Excel中。</p><p>创建Workbook对象，获取到当前可用的表格（sheet）。<br>直接使用<code>append</code>方法把一行数据追加写入。最后调用Workbook的保存方法，存储数据。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_excel_demo</span>(<span class="hljs-params">file_path</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    创建Excel文件，并写入数据</span><br><span class="hljs-string">    :param file_path: 目标文件路径</span><br><span class="hljs-string">    :return none</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    wb = Workbook()<br>    ws = wb.active<br>    ws.title = <span class="hljs-string">&#x27;搜索指数概览&#x27;</span><br><br>    ws.append([<span class="hljs-string">&#x27;关键词&#x27;</span>, <span class="hljs-string">&#x27;整体日均值&#x27;</span>, <span class="hljs-string">&#x27;移动日均值&#x27;</span>, <span class="hljs-string">&#x27;整体同比&#x27;</span>, <span class="hljs-string">&#x27;整体环比&#x27;</span>, <span class="hljs-string">&#x27;移动同比&#x27;</span>, <span class="hljs-string">&#x27;移动环比&#x27;</span>])<br>    ws.append([<span class="hljs-string">&#x27;excel&#x27;</span>, <span class="hljs-number">27782</span>, <span class="hljs-number">18181</span>, -<span class="hljs-number">0.11</span>, -<span class="hljs-number">2</span>, <span class="hljs-number">0.21</span>, <span class="hljs-number">0.02</span>])<br>    ws.append([<span class="hljs-string">&#x27;python&#x27;</span>, <span class="hljs-number">24267</span>, <span class="hljs-number">8204</span>, <span class="hljs-number">0.27</span>, <span class="hljs-number">0.06</span>, <span class="hljs-number">0.56</span>, <span class="hljs-number">0.01</span>])<br>    ws.append([<span class="hljs-string">&#x27;文案&#x27;</span>, <span class="hljs-number">2411</span>, <span class="hljs-number">1690</span>, <span class="hljs-number">0.56</span>, <span class="hljs-number">0.33</span>, <span class="hljs-number">0.91</span>, <span class="hljs-number">0.46</span>])<br>    ws.append([<span class="hljs-string">&#x27;okr&#x27;</span>, <span class="hljs-number">1928</span>, <span class="hljs-number">880</span>, <span class="hljs-number">0.38</span>, <span class="hljs-number">0.15</span>, <span class="hljs-number">0.29</span>, <span class="hljs-number">0.09</span>])<br>    ws.append([<span class="hljs-string">&#x27;kpi&#x27;</span>, <span class="hljs-number">4212</span>, <span class="hljs-number">2784</span>, <span class="hljs-number">0.21</span>, -<span class="hljs-number">0.19</span>, <span class="hljs-number">0.36</span>, -<span class="hljs-number">0.22</span>])<br>    wb.save(file_path)<br></code></pre></td></tr></table></figure><p>创建出来的表格，示例数据如下</p><table><thead><tr><th style="text-align:left">关键词</th><th style="text-align:center">整体日均值</th><th style="text-align:center">移动日均值</th><th style="text-align:center">整体同比</th><th style="text-align:center">整体环比</th><th style="text-align:center">移动同比</th><th style="text-align:center">移动环比</th></tr></thead><tbody><tr><td style="text-align:left">excel</td><td style="text-align:center">27782</td><td style="text-align:center">18181</td><td style="text-align:center">-0.11</td><td style="text-align:center">-2</td><td style="text-align:center">0.21</td><td style="text-align:center">0.02</td></tr><tr><td style="text-align:left">python</td><td style="text-align:center">24267</td><td style="text-align:center">8204</td><td style="text-align:center">0.27</td><td style="text-align:center">0.06</td><td style="text-align:center">0.56</td><td style="text-align:center">0.01</td></tr><tr><td style="text-align:left">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td></tr></tbody></table><h2 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h2><h3 id="访问整个表格的数据"><a href="#访问整个表格的数据" class="headerlink" title="访问整个表格的数据"></a>访问整个表格的数据</h3><p>访问表格中所有的数据，并打印出来。<br>首先我们要知道表格中有数据的单元格的范围，使用sheet.max_row与sheet.max_column获取表格的行列数量。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_xlsx_basic</span>(<span class="hljs-params">file_path</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    读取Excel的数据并打印出来</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    wb = load_workbook(file_path)<br>    st = wb.active<br>    end_row = st.max_row + <span class="hljs-number">1</span><br>    end_column = st.max_column + <span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>(st.title, <span class="hljs-string">&#x27;有&#x27;</span>, end_row, <span class="hljs-string">&#x27;行&#x27;</span>, end_column, <span class="hljs-string">&#x27;列&#x27;</span>)<br>    <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, end_row):<br>        <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, end_column):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:10&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(st.cell(row=row, column=col).value), end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-built_in">print</span>()<br></code></pre></td></tr></table></figure><p>值得注意的是，单元格下标是从1开始的。如果使用了不当的下标，报错信息</p><blockquote><p>ValueError: Row or column values must be at least 1</p></blockquote><p>参考： <a href="https://stackoverflow.com/questions/34492322/how-to-scan-all-sheet-cells">https://stackoverflow.com/questions/34492322/how-to-scan-all-sheet-cells</a></p><h2 id="修改表格"><a href="#修改表格" class="headerlink" title="修改表格"></a>修改表格</h2><p>有了Excel表格后，我们可以修改表格的一些格式和数据。</p><p><code>st</code>表示当前表。</p><h3 id="调整列的宽度"><a href="#调整列的宽度" class="headerlink" title="调整列的宽度"></a>调整列的宽度</h3><p>用 column_dimensions 来获取列。例如column_dimensions[‘A’]获取到的是第A列。<br><code>ord</code>方法是将字符转换为ascii码。ord(‘A’)得到65。</p><p>这里调整的是A列到G列的宽度。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>), <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;G&#x27;</span>) + <span class="hljs-number">1</span>):<br>    st.column_dimensions[<span class="hljs-built_in">chr</span>(col)].width = <span class="hljs-number">15</span><br></code></pre></td></tr></table></figure></p><h3 id="设置单元格格式"><a href="#设置单元格格式" class="headerlink" title="设置单元格格式"></a>设置单元格格式</h3><p>格式，比如字体大小，对齐模式，粗体斜体等。</p><h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><p>首先我们要拿到单元格cell，这里使用st.cell(row=1, column=col)来获取某一个格子。<br>Cell持有的font是不可修改的。不能使用如<code>cell.font.size = 13</code>这样的操作，会报异常。<br>copy方法是复制一个对象。这里复制的是font。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py">cell = st.cell(row=<span class="hljs-number">1</span>, column=col)<br>font = copy(cell.font)<br>font.size = <span class="hljs-number">13</span><br>font.bold = <span class="hljs-literal">True</span><br>cell.font = font<br></code></pre></td></tr></table></figure><h4 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h4><p>对齐模式。使用alignment属性。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">cell.alignment = Alignment(horizontal=<span class="hljs-string">&quot;center&quot;</span>, vertical=<span class="hljs-string">&quot;center&quot;</span>)<br></code></pre></td></tr></table></figure></p><h4 id="数据显示"><a href="#数据显示" class="headerlink" title="数据显示"></a>数据显示</h4><p>操作Excel时，我们可以设置单元格数据显示的方式，比如常规，数值，货币，百分比等等。<br>这里使用的是number_format属性。</p><p>如果数据（value）是0.02，经过下面的设置后，Excel中显示的是2%。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">cell.number_format = <span class="hljs-string">&#x27;0%&#x27;</span><br></code></pre></td></tr></table></figure></p><h4 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h4><p>修改单元格的数值（value）。<br>修改数据首先要拿到那个单元格cell，然后对其value赋值。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">st.cell(row=<span class="hljs-number">2</span>, column=<span class="hljs-number">7</span>).value = <span class="hljs-number">0.42</span>  <span class="hljs-comment"># 修改数值</span><br></code></pre></td></tr></table></figure></p><p>修改了单元格的样式和数据后，可以打开表格看看效果。</p><p>参考：</p><ul><li><a href="https://stackoverflow.com/questions/12387212/openpyxl-setting-number-format">https://stackoverflow.com/questions/12387212/openpyxl-setting-number-format</a></li><li><a href="https://stackoverflow.com/questions/30050716/how-to-put-two-decimals-in-cell-with-type-of-percent">https://stackoverflow.com/questions/30050716/how-to-put-two-decimals-in-cell-with-type-of-percent</a></li></ul><p>相关代码请参考 <a href="https://github.com/RustFisher/python-playground">https://github.com/RustFisher/python-playground</a></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运营的Python指南</tag>
      
      <tag>openpyxl</tag>
      
      <tag>Excel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python openpyxl 处理Excel使用指南</title>
    <link href="/Python/Python-openpyxl_tutorial/"/>
    <url>/Python/Python-openpyxl_tutorial/</url>
    
    <content type="html"><![CDATA[<p>这是一份<a href="https://openpyxl.readthedocs.io/en/stable/">openpyxl</a>的使用指南。<br>翻译自官网 <a href="https://openpyxl.readthedocs.io/en/stable/tutorial.html">https://openpyxl.readthedocs.io/en/stable/tutorial.html</a></p><p>本文链接 <a href="https://rustfisher.com/2019/11/03/Python/Python-openpyxl_tutorial/">https://rustfisher.com/2019/11/03/Python/Python-openpyxl_tutorial/</a></p><h2 id="创建工作本"><a href="#创建工作本" class="headerlink" title="创建工作本"></a>创建工作本</h2><p>workbook指的就是Excel文件。使用openpyxl并不需要你在电脑上自己创建文件。直接引入Workbook类就可以开始工作。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> openpyxl <span class="hljs-keyword">import</span> Workbook<br><span class="hljs-meta">&gt;&gt;&gt; </span>wb = Workbook()<br></code></pre></td></tr></table></figure><p>至此一个至少有1个工作表的工作本已经被创建了。你可以通过Workbook.active属性来获取到工作表。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>ws = wb.active<br></code></pre></td></tr></table></figure></p><blockquote><p>注意：<br>默认工作表序号是被设置成0的。除非你修改了这个值，否则用这个方法获取到的都是第一张表。</p></blockquote><p>可以通过 Workbook.create_sheet() 方法来创建新的工作表</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>ws1 = wb.create_sheet(<span class="hljs-string">&quot;Mysheet&quot;</span>) <span class="hljs-comment"># 默认在后面插入一张新表</span><br><span class="hljs-comment"># 或者</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>ws2 = wb.create_sheet(<span class="hljs-string">&quot;Mysheet&quot;</span>, <span class="hljs-number">0</span>) <span class="hljs-comment"># 在第一位插入新表</span><br><span class="hljs-comment"># 或者</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>ws3 = wb.create_sheet(<span class="hljs-string">&quot;Mysheet&quot;</span>, -<span class="hljs-number">1</span>) <span class="hljs-comment"># 在倒数第二的位置插入表</span><br></code></pre></td></tr></table></figure><p>工作表被创建的时候会自动命名，名字是以数字序列来排的（例如Sheet, Sheet1, Sheet2, …）。<br>可以使用 Worksheet.title 来修改工作表的名字。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">ws.title = <span class="hljs-string">&quot;New Title&quot;</span><br></code></pre></td></tr></table></figure><p>默认情况下，工作表名字的标题颜色是白色的。<br>赋予RGB值 Worksheet.sheet_properties.tabColor 来修改颜色。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">ws.sheet_properties.tabColor = <span class="hljs-string">&quot;1072BA&quot;</span><br></code></pre></td></tr></table></figure><p>当你命名了工作表后，也可以通过名字来获取到这张表。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>ws3 = wb[<span class="hljs-string">&quot;New Title&quot;</span>]<br></code></pre></td></tr></table></figure><p>查看工作本中所有表格的名字，使用 Workbook.sheetname 属性。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(wb.sheetnames)<br>[<span class="hljs-string">&#x27;Sheet2&#x27;</span>, <span class="hljs-string">&#x27;New Title&#x27;</span>, <span class="hljs-string">&#x27;Sheet1&#x27;</span>]<br></code></pre></td></tr></table></figure><p>循环打印名字<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> sheet <span class="hljs-keyword">in</span> wb:<br><span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(sheet.title)<br></code></pre></td></tr></table></figure></p><p>在同一个工作本（Excel文件）中，可以使用 Workbook.copy_worksheet() 复制表格。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>source = wb.active<br><span class="hljs-meta">&gt;&gt;&gt; </span>target = wb.copy_worksheet(source)<br></code></pre></td></tr></table></figure></p><blockquote><p>注意<br>只有单元格（包括数值，风格，超链接和注释）和确定的工作表属性（包括尺寸，格式和属性）可以被复制。<br>工作表其他的内容是不能复制的，比如图片，图表等。</p></blockquote><p>也可以在不同的Excel文件中复制表格。如果Excel文件是只读或只写的，就不能复制表格。</p><h2 id="处理数据"><a href="#处理数据" class="headerlink" title="处理数据"></a>处理数据</h2><h3 id="单元格"><a href="#单元格" class="headerlink" title="单元格"></a>单元格</h3><p>现在我们知道来如何获取到工作表。我们可以开始修改单元格数据了。<br>用单元格的坐标可以获取到单元格。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>c = ws[<span class="hljs-string">&#x27;A4&#x27;</span>]<br></code></pre></td></tr></table></figure><br>返回的是A4单元格。如果之前A4不存在，则会创建A4单元格。</p><p>给单元格传入数据，直接赋值<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>ws[<span class="hljs-string">&#x27;A4&#x27;</span>] = <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure></p><p>我们也可以用 Worksheet.cell() 方法，通过行列序号的方式来拿到单元格。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>d = ws.cell(row=<span class="hljs-number">4</span>, column=<span class="hljs-number">2</span>, value=<span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure></p><blockquote><p>注意<br>如果工作表是在内存中创建的，它是不包含单元格的。第一次获取单元格时会先创建单元格。</p></blockquote><p>警告：因为这个特性，就算是没给单元格赋值，遍历的时候会直接在内存中创建它们。</p><p>例如<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">101</span>):<br><span class="hljs-meta">... </span>       <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">101</span>):<br><span class="hljs-meta">... </span>           ws.cell(row=x, column=y)<br></code></pre></td></tr></table></figure><br>会在内存中创建 100x100 个没有值的单元格。</p><h3 id="处理多个单元格"><a href="#处理多个单元格" class="headerlink" title="处理多个单元格"></a>处理多个单元格</h3><p>获取一个范围内的多个单元格。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>cell_range = ws[<span class="hljs-string">&#x27;A1&#x27;</span>:<span class="hljs-string">&#x27;C2&#x27;</span>]<br></code></pre></td></tr></table></figure></p><p>获取行或列的单元格<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>colC = ws[<span class="hljs-string">&#x27;C&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>col_range = ws[<span class="hljs-string">&#x27;C:D&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>row10 = ws[<span class="hljs-number">10</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>row_range = ws[<span class="hljs-number">5</span>:<span class="hljs-number">10</span>]<br></code></pre></td></tr></table></figure></p><p>也可以用 Worksheet.iter_rows() 方法<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> ws.iter_rows(min_row=<span class="hljs-number">1</span>, max_col=<span class="hljs-number">3</span>, max_row=<span class="hljs-number">2</span>):<br><span class="hljs-meta">... </span>   <span class="hljs-keyword">for</span> cell <span class="hljs-keyword">in</span> row:<br><span class="hljs-meta">... </span>       <span class="hljs-built_in">print</span>(cell)<br>&lt;Cell Sheet1.A1&gt;<br>&lt;Cell Sheet1.B1&gt;<br>&lt;Cell Sheet1.C1&gt;<br>&lt;Cell Sheet1.A2&gt;<br>&lt;Cell Sheet1.B2&gt;<br>&lt;Cell Sheet1.C2&gt;<br></code></pre></td></tr></table></figure></p><p>类似的 Worksheet.iter_cols() 也会返回列单元格<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> ws.iter_cols(min_row=<span class="hljs-number">1</span>, max_col=<span class="hljs-number">3</span>, max_row=<span class="hljs-number">2</span>):<br><span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> cell <span class="hljs-keyword">in</span> col:<br><span class="hljs-meta">... </span>        <span class="hljs-built_in">print</span>(cell)<br>&lt;Cell Sheet1.A1&gt;<br>&lt;Cell Sheet1.A2&gt;<br>&lt;Cell Sheet1.B1&gt;<br>&lt;Cell Sheet1.B2&gt;<br>&lt;Cell Sheet1.C1&gt;<br>&lt;Cell Sheet1.C2&gt;<br></code></pre></td></tr></table></figure></p><blockquote><p>注意：性能原因 Worksheet.iter_cols() 方法在只读模式下不能使用。</p></blockquote><p>如果你需要遍历文件中的所有行列，可以使用Worksheet.rows<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>ws = wb.active<br><span class="hljs-meta">&gt;&gt;&gt; </span>ws[<span class="hljs-string">&#x27;C9&#x27;</span>] = <span class="hljs-string">&#x27;hello world&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">tuple</span>(ws.rows)<br>((&lt;Cell Sheet.A1&gt;, &lt;Cell Sheet.B1&gt;, &lt;Cell Sheet.C1&gt;),<br>(&lt;Cell Sheet.A2&gt;, &lt;Cell Sheet.B2&gt;, &lt;Cell Sheet.C2&gt;),<br>(&lt;Cell Sheet.A3&gt;, &lt;Cell Sheet.B3&gt;, &lt;Cell Sheet.C3&gt;),<br>(&lt;Cell Sheet.A4&gt;, &lt;Cell Sheet.B4&gt;, &lt;Cell Sheet.C4&gt;),<br>(&lt;Cell Sheet.A5&gt;, &lt;Cell Sheet.B5&gt;, &lt;Cell Sheet.C5&gt;),<br>(&lt;Cell Sheet.A6&gt;, &lt;Cell Sheet.B6&gt;, &lt;Cell Sheet.C6&gt;),<br>(&lt;Cell Sheet.A7&gt;, &lt;Cell Sheet.B7&gt;, &lt;Cell Sheet.C7&gt;),<br>(&lt;Cell Sheet.A8&gt;, &lt;Cell Sheet.B8&gt;, &lt;Cell Sheet.C8&gt;),<br>(&lt;Cell Sheet.A9&gt;, &lt;Cell Sheet.B9&gt;, &lt;Cell Sheet.C9&gt;))<br></code></pre></td></tr></table></figure></p><p>或者是Worksheet.columns属性<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">tuple</span>(ws.columns)<br>((&lt;Cell Sheet.A1&gt;,<br>&lt;Cell Sheet.A2&gt;,<br>&lt;Cell Sheet.A3&gt;,<br>&lt;Cell Sheet.A4&gt;,<br>&lt;Cell Sheet.A5&gt;,<br>&lt;Cell Sheet.A6&gt;,<br>...<br>&lt;Cell Sheet.B7&gt;,<br>&lt;Cell Sheet.B8&gt;,<br>&lt;Cell Sheet.B9&gt;),<br>(&lt;Cell Sheet.C1&gt;,<br>&lt;Cell Sheet.C2&gt;,<br>&lt;Cell Sheet.C3&gt;,<br>&lt;Cell Sheet.C4&gt;,<br>&lt;Cell Sheet.C5&gt;,<br>&lt;Cell Sheet.C6&gt;,<br>&lt;Cell Sheet.C7&gt;,<br>&lt;Cell Sheet.C8&gt;,<br>&lt;Cell Sheet.C9&gt;))<br></code></pre></td></tr></table></figure></p><blockquote><p>注意：基于性能方面的考虑，Worksheet.columns在只读模式中不能使用。</p></blockquote><h3 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h3><p>如果只是要读取表中的数据，可以使用 Worksheet.values。它会返回表中所有行的单元格的值。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> ws.values:<br>   <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> row:<br>     <span class="hljs-built_in">print</span>(value)<br></code></pre></td></tr></table></figure><p>Worksheet.iter_rows() 和 Worksheet.iter_cols() 都可以获取到单元格的值。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&gt;&gt;&gt; <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> ws.iter_rows(<span class="hljs-attribute">min_row</span>=1, <span class="hljs-attribute">max_col</span>=3, <span class="hljs-attribute">max_row</span>=2, <span class="hljs-attribute">values_only</span>=<span class="hljs-literal">True</span>):<br><span class="hljs-built_in">..</span>.   <span class="hljs-built_in">print</span>(row)<br><br>(None, None, None)<br>(None, None, None)<br></code></pre></td></tr></table></figure></p><h3 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h3><p>当我们有了单元格后，可以赋值<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>c.value = <span class="hljs-string">&#x27;hello, world&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(c.value)<br><span class="hljs-string">&#x27;hello, world&#x27;</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>d.value = <span class="hljs-number">3.14</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(d.value)<br><span class="hljs-number">3.14</span><br></code></pre></td></tr></table></figure></p><h2 id="保存文件"><a href="#保存文件" class="headerlink" title="保存文件"></a>保存文件</h2><p>最简单和最安全的保存文件的方法就是使用 Workbook.save()。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py">wb = Workbook()<br>wb.save(<span class="hljs-string">&#x27;balances.xlsx&#x27;</span>)<br></code></pre></td></tr></table></figure><p>注意，这个方法会在没有警告的情况下覆盖已有的文件。</p><p>文件扩展名并没有被限制为xlsx或xlsm。</p><h3 id="存储成为流（stream）"><a href="#存储成为流（stream）" class="headerlink" title="存储成为流（stream）"></a>存储成为流（stream）</h3><p>如果要把文件存成流，例如web应用Pyramid, Flask 或者Django，提供一个NamedTemporaryFile()即可<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> tempfile <span class="hljs-keyword">import</span> NamedTemporaryFile<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> openpyxl <span class="hljs-keyword">import</span> Workbook<br><span class="hljs-meta">&gt;&gt;&gt; </span>wb = Workbook()<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> NamedTemporaryFile() <span class="hljs-keyword">as</span> tmp:<br>        wb.save(tmp.name)<br>        tmp.seek(<span class="hljs-number">0</span>)<br>        stream = tmp.read()<br></code></pre></td></tr></table></figure></p><p>把工作本保存成为模板，需要指定属性 template=True<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>wb = load_workbook(<span class="hljs-string">&#x27;document.xlsx&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>wb.template = <span class="hljs-literal">True</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>wb.save(<span class="hljs-string">&#x27;document_template.xltx&#x27;</span>)<br></code></pre></td></tr></table></figure></p><p>设template为False，即保存为文档。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>wb = load_workbook(<span class="hljs-string">&#x27;document_template.xltx&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>wb.template = <span class="hljs-literal">False</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>wb.save(<span class="hljs-string">&#x27;document.xlsx&#x27;</span>, as_template=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure></p><p>注意：在保存文档的时候应该注意文件扩展名，比如.xltx和.xlsx。以防后面用其他软件打开的时候遇到麻烦。</p><p>接下来的这些是错误操作<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>wb = load_workbook(<span class="hljs-string">&#x27;document.xlsx&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># 需要存储成*.xlsx文件</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>wb.save(<span class="hljs-string">&#x27;new_document.xlsm&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># MS Excel 将无法打开这个文件</span><br>&gt;&gt;&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># 或者</span><br>&gt;&gt;&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># 需要指定 keep_vba=True</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>wb = load_workbook(<span class="hljs-string">&#x27;document.xlsm&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>wb.save(<span class="hljs-string">&#x27;new_document.xlsm&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># MS Excel 将无法打开这个文件</span><br>&gt;&gt;&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># 或者</span><br>&gt;&gt;&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>wb = load_workbook(<span class="hljs-string">&#x27;document.xltm&#x27;</span>, keep_vba=<span class="hljs-literal">True</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># 如果我们需要一个模板文件，我们必须指定扩展名为xltm</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>wb.save(<span class="hljs-string">&#x27;new_document.xlsm&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># MS Excel 将无法打开这个文件</span><br></code></pre></td></tr></table></figure></p><h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><p>和写文件类似，使用openpyxl.load_workbook()方法去打开一个已有文件。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> openpyxl <span class="hljs-keyword">import</span> load_workbook<br><span class="hljs-meta">&gt;&gt;&gt; </span>wb2 = load_workbook(<span class="hljs-string">&#x27;test.xlsx&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> wb2.sheetnames<br>[<span class="hljs-string">&#x27;Sheet2&#x27;</span>, <span class="hljs-string">&#x27;New Title&#x27;</span>, <span class="hljs-string">&#x27;Sheet1&#x27;</span>]<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>openpyxl</tag>
      
      <tag>Excel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android OkHttp + Retrofit 断点续传</title>
    <link href="/Android/Android-OkHttp_Retrofit_download_file_partial/"/>
    <url>/Android/Android-OkHttp_Retrofit_download_file_partial/</url>
    
    <content type="html"><![CDATA[<p><a href="https://rustfisher.com/2019/10/18/Android/Android-OkHttp_Retrofit_download_file_partial/">本文链接</a></p><p>前面我们已经知道如何<a href="https://rustfisher.com/2019/10/18/Android/Android-OkHttp_Retrofit_download_file/">使用OkHttp+Retrofit下载文件</a>。<br>下载文件时，可能会遇到一些意外情况，比如网络错误或是用户暂停了下载。<br>再次启动下载，如果又要从头开始，会白白浪费前面下载好的内容。<br>断点续传功能可以从上次停止的地方继续下载文件。</p><h2 id="http范围请求"><a href="#http范围请求" class="headerlink" title="http范围请求"></a>http范围请求</h2><p>Range 是一个请求首部，告知服务器返回文件的哪一部分。<br>在一个 Range 首部中，可以一次性请求多个部分，服务器会以 multipart 文件的形式将其返回。<br>如果服务器返回的是范围响应，需要使用 206 Partial Content 状态码。<br>假如所请求的范围不合法，那么服务器会返回  416 Range Not Satisfiable 状态码，表示客户端错误。<br>服务器允许忽略Range首部，从而返回整个文件，状态码用200。</p><p>示例<br><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Range: &lt;unit&gt;=&lt;<span class="hljs-keyword">range</span>-<span class="hljs-keyword">start</span>&gt;-<br>Range: &lt;unit&gt;=&lt;<span class="hljs-keyword">range</span>-<span class="hljs-keyword">start</span>&gt;-&lt;<span class="hljs-keyword">range</span>-<span class="hljs-keyword">end</span>&gt;<br>Range: &lt;unit&gt;=&lt;<span class="hljs-keyword">range</span>-<span class="hljs-keyword">start</span>&gt;-&lt;<span class="hljs-keyword">range</span>-<span class="hljs-keyword">end</span>&gt;, &lt;<span class="hljs-keyword">range</span>-<span class="hljs-keyword">start</span>&gt;-&lt;<span class="hljs-keyword">range</span>-<span class="hljs-keyword">end</span>&gt;<br>Range: &lt;unit&gt;=&lt;<span class="hljs-keyword">range</span>-<span class="hljs-keyword">start</span>&gt;-&lt;<span class="hljs-keyword">range</span>-<span class="hljs-keyword">end</span>&gt;, &lt;<span class="hljs-keyword">range</span>-<span class="hljs-keyword">start</span>&gt;-&lt;<span class="hljs-keyword">range</span>-<span class="hljs-keyword">end</span>&gt;, &lt;<span class="hljs-keyword">range</span>-<span class="hljs-keyword">start</span>&gt;-&lt;<span class="hljs-keyword">range</span>-<span class="hljs-keyword">end</span>&gt;<br></code></pre></td></tr></table></figure></p><p>发起请求时，一般Range的内容写成 bytes=0-100 这样的形式。<br>或者请求多个部分时，指定多个范围。<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Range</span>: bytes=<span class="hljs-number">200</span>-<span class="hljs-number">1000</span>, <span class="hljs-number">2000</span>-<span class="hljs-number">6576</span>, <span class="hljs-number">19000</span>- <br></code></pre></td></tr></table></figure></p><p>Content-Range 表示主体长度或者尺寸。</p><p>参考：</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Range">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Range</a></p><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><p>参考<br><a href="https://github.com/AnRFDev/android-Basic4/tree/master/appdowloadsample">https://github.com/AnRFDev/android-Basic4/tree/master/appdowloadsample</a></p><p>使用OkHttp添加Range头部，告知服务器我们需要的文件数据范围。</p><p>定义的方法中要求传入 @Header(“Range”)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ApiService</span> &#123;<br>    <span class="hljs-meta">@Streaming</span><br>    <span class="hljs-meta">@GET</span><br>    Observable&lt;ResponseBody&gt; <span class="hljs-title function_">downloadPartial</span><span class="hljs-params">(<span class="hljs-meta">@Url</span> String url, <span class="hljs-meta">@Header(&quot;Range&quot;)</span> String range)</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>需要传入的Range字符串形如 bytes=200-1000</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java">retrofit.create(ApiService.class)<br>    .downloadPartial(callBack.getUrl(), <span class="hljs-string">&quot;bytes=&quot;</span> + startByte + <span class="hljs-string">&quot;-&quot;</span>)<br>    .subscribeOn(Schedulers.newThread())<br>    .observeOn(Schedulers.io())<br>    .doOnNext(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer</span>&lt;ResponseBody&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(ResponseBody responseBody)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>            callBack.saveFile(responseBody);<br>        &#125;<br>    &#125;)<br>    .doOnError(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer</span>&lt;Throwable&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Throwable throwable)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>            tellDownloadError(callBack.getUrl(), throwable);<br>        &#125;<br>    &#125;)<br>    .observeOn(AndroidSchedulers.mainThread())<br>    .subscribe(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Observer</span>&lt;ResponseBody&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onSubscribe</span><span class="hljs-params">(Disposable d)</span> &#123;<br><br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onNext</span><span class="hljs-params">(ResponseBody responseBody)</span> &#123;<br><br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onError</span><span class="hljs-params">(Throwable e)</span> &#123;<br>            callBack.setState(DownloadTaskState.ERROR);<br>            tellDownloadError(callBack.getUrl(), e);<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onComplete</span><span class="hljs-params">()</span> &#123;<br><br>        &#125;<br>    &#125;);<br></code></pre></td></tr></table></figure><p>我们也可以在下载前，先去检查文件已下载的部分的大小，再决定Range范围。<br>续传时，写入本地文件注意选择流的append模式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">fos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(file, <span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><p>更多请参考：</p><p><a href="https://rustfisher.com/2018/08/22/Android/Android-OkHttp_Retrofit_use_intro/">Android OkHttp + Retrofit 使用示例</a></p><p><a href="https://rustfisher.com/2019/06/26/Android/Android-OkHttp_Retrofit_cancel_request/">Android OkHttp + Retrofit 取消请求的方法</a></p><p><a href="https://rustfisher.com/2019/10/18/Android/Android-OkHttp_Retrofit_download_file/">Android OkHttp + Retrofit 下载文件与进度监听</a></p><p><a href="https://rustfisher.com/2019/10/18/Android/Android-OkHttp_Retrofit_download_file_partial/">Android OkHttp + Retrofit 断点续传</a></p>]]></content>
    
    
    <categories>
      
      <category>Android_note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>network</tag>
      
      <tag>OkHttp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android OkHttp + Retrofit 下载文件与进度监听</title>
    <link href="/Android/Android-OkHttp_Retrofit_download_file/"/>
    <url>/Android/Android-OkHttp_Retrofit_download_file/</url>
    
    <content type="html"><![CDATA[<p><a href="https://rustfisher.com/2019/10/18/Android/Android-OkHttp_Retrofit_download_file/">本文链接</a></p><p>下载文件是一个比较常见的需求。给定一个url，我们可以<a href="https://rustfisher.com/2019/09/23/Android/Android-Media_download_stream_file/">使用URLConnection下载文件</a>。<br>使用OkHttp也可以通过流来下载文件。<br>给OkHttp中添加拦截器，即可实现下载进度的监听功能。</p><h2 id="使用流来实现下载文件"><a href="#使用流来实现下载文件" class="headerlink" title="使用流来实现下载文件"></a>使用流来实现下载文件</h2><p>代码可以参考：<a href="https://github.com/AnRFDev/android-Basic4/tree/master/appdowloadsample">https://github.com/AnRFDev/android-Basic4/tree/master/appdowloadsample</a></p><p>获取并使用字节流，需要注意两个要点，一个是服务接口方法的 @Streaming 注解，另一个是获取到ResponseBody。</p><p>获取流（Stream）。先定义一个服务ApiService。给方法添加上@Streaming的注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ApiService</span> &#123;<br>    <span class="hljs-meta">@Streaming</span><br>    <span class="hljs-meta">@GET</span><br>    Observable&lt;ResponseBody&gt; <span class="hljs-title function_">download</span><span class="hljs-params">(<span class="hljs-meta">@Url</span> String url)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>初始化OkHttp。记得填入你的baseUrl。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">OkHttpClient</span> <span class="hljs-variable">okHttpClient</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OkHttpClient</span>.Builder()<br>        .connectTimeout(<span class="hljs-number">8</span>, TimeUnit.SECONDS)<br>        .build();<br><br>retrofit = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Retrofit</span>.Builder()<br>        .client(okHttpClient)<br>        .addCallAdapterFactory(RxJava2CallAdapterFactory.create())<br>        .baseUrl(<span class="hljs-string">&quot;https://yourbaseurl.com&quot;</span>)<br>        .build();<br></code></pre></td></tr></table></figure></p><p>发起网络请求。获取到ResponseBody。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">downUrl</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;xxx.com/aaa.apk&quot;</span>;<br>retrofit.create(ApiService.class)<br>        .download(downUrl)<br>        .subscribeOn(Schedulers.io())<br>        .observeOn(Schedulers.io())<br>        .doOnNext(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer</span>&lt;ResponseBody&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(ResponseBody responseBody)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                <span class="hljs-comment">// 处理 ResponseBody 中的流</span><br>            &#125;<br>        &#125;)<br>        .doOnError(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer</span>&lt;Throwable&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Throwable throwable)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                Log.e(TAG, <span class="hljs-string">&quot;accept on error: &quot;</span> + downUrl, throwable);<br>            &#125;<br>        &#125;)<br>        .observeOn(AndroidSchedulers.mainThread())<br>        .subscribe(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Observer</span>&lt;ResponseBody&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onSubscribe</span><span class="hljs-params">(Disposable d)</span> &#123;<br><br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onNext</span><span class="hljs-params">(ResponseBody responseBody)</span> &#123;<br><br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onError</span><span class="hljs-params">(Throwable e)</span> &#123;<br>                Log.e(TAG, <span class="hljs-string">&quot;Download center retrofit onError: &quot;</span>, e);<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onComplete</span><span class="hljs-params">()</span> &#123;<br><br>            &#125;<br>        &#125;);<br></code></pre></td></tr></table></figure></p><p>通过ResponseBody拿到字节流 body.byteStream()。这里会先创建一个临时文件tmpFile，把数据写到临时文件里。<br>下载完成后再重命名成目标文件targetFile。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveFile</span><span class="hljs-params">(ResponseBody body)</span> &#123;<br>    state = DownloadTaskState.DOWNLOADING;<br>    <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">2048</span>];<br>    <span class="hljs-type">int</span> len;<br>    <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        Log.d(TAG, <span class="hljs-string">&quot;saveFile: body content length: &quot;</span> + body.contentLength());<br>        srcInputStream = body.byteStream();<br>        <span class="hljs-type">File</span> <span class="hljs-variable">dir</span> <span class="hljs-operator">=</span> tmpFile.getParentFile();<br>        <span class="hljs-keyword">if</span> (dir == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileNotFoundException</span>(<span class="hljs-string">&quot;target file has no dir.&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!dir.exists()) &#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> dir.mkdirs();<br>            onInfo(<span class="hljs-string">&quot;Create dir &quot;</span> + m + <span class="hljs-string">&quot;, &quot;</span> + dir);<br>        &#125;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> tmpFile;<br>        <span class="hljs-keyword">if</span> (!file.exists()) &#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> file.createNewFile();<br>            onInfo(<span class="hljs-string">&quot;Create new file &quot;</span> + c);<br>        &#125;<br>        fos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(file);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-keyword">while</span> ((len = srcInputStream.read(buf)) != -<span class="hljs-number">1</span> &amp;&amp; !isCancel) &#123;<br>            fos.write(buf, <span class="hljs-number">0</span>, len);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">duration</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (System.currentTimeMillis() - time);<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">overBytes</span> <span class="hljs-operator">=</span> len - downloadBytePerMs() * duration;<br>            <span class="hljs-keyword">if</span> (overBytes &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(overBytes / downloadBytePerMs());<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            time = System.currentTimeMillis();<br>            <span class="hljs-keyword">if</span> (isCancel) &#123;<br>                state = DownloadTaskState.CLOSING;<br>                srcInputStream.close();<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!isCancel) &#123;<br>            fos.flush();<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">rename</span> <span class="hljs-operator">=</span> tmpFile.renameTo(targetFile);<br>            <span class="hljs-keyword">if</span> (rename) &#123;<br>                setState(DownloadTaskState.DONE);<br>                onSuccess(url);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                setState(DownloadTaskState.ERROR);<br>                onError(url, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>(<span class="hljs-string">&quot;Rename file fail. &quot;</span> + tmpFile));<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>        Log.e(TAG, <span class="hljs-string">&quot;saveFile: FileNotFoundException &quot;</span>, e);<br>        setState(DownloadTaskState.ERROR);<br>        onError(url, e);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        Log.e(TAG, <span class="hljs-string">&quot;saveFile: IOException &quot;</span>, e);<br>        setState(DownloadTaskState.ERROR);<br>        onError(url, e);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (srcInputStream != <span class="hljs-literal">null</span>) &#123;<br>                srcInputStream.close();<br>            &#125;<br>            <span class="hljs-keyword">if</span> (fos != <span class="hljs-literal">null</span>) &#123;<br>                fos.close();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            Log.e(TAG, <span class="hljs-string">&quot;saveFile&quot;</span>, e);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (isCancel) &#123;<br>            onCancel(url);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></p><p>每次读数据的循环，计算读了多少数据和用了多少时间。超过限速后主动sleep一下，达到控制下载速度的效果。<br>要注意不能sleep太久，以免socket关闭。<br>这里控制的是网络数据流与本地文件的读写速度。</p><h2 id="下载进度监听"><a href="#下载进度监听" class="headerlink" title="下载进度监听"></a>下载进度监听</h2><p>OkHttp实现下载进度监听，可以从字节流的读写那里入手。也可以使用拦截器，参考<a href="https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/Progress.java">官方的例子</a>。<br>这里用拦截器的方式实现网络下载进度监听功能。</p><h3 id="定义回调与网络拦截器"><a href="#定义回调与网络拦截器" class="headerlink" title="定义回调与网络拦截器"></a>定义回调与网络拦截器</h3><p>先定义回调。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ProgressListener</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(String url, <span class="hljs-type">long</span> bytesRead, <span class="hljs-type">long</span> contentLength, <span class="hljs-type">boolean</span> done)</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>自定义ProgressResponseBody。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProgressResponseBody</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ResponseBody</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ResponseBody responseBody;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ProgressListener progressListener;<br>    <span class="hljs-keyword">private</span> BufferedSource bufferedSource;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String url;<br><br>    ProgressResponseBody(String url, ResponseBody responseBody, ProgressListener progressListener) &#123;<br>        <span class="hljs-built_in">this</span>.responseBody = responseBody;<br>        <span class="hljs-built_in">this</span>.progressListener = progressListener;<br>        <span class="hljs-built_in">this</span>.url = url;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> MediaType <span class="hljs-title function_">contentType</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> responseBody.contentType();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">contentLength</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> responseBody.contentLength();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> BufferedSource <span class="hljs-title function_">source</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (bufferedSource == <span class="hljs-literal">null</span>) &#123;<br>            bufferedSource = Okio.buffer(source(responseBody.source()));<br>        &#125;<br>        <span class="hljs-keyword">return</span> bufferedSource;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Source <span class="hljs-title function_">source</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Source source)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ForwardingSource</span>(source) &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">totalBytesRead</span> <span class="hljs-operator">=</span> <span class="hljs-number">0L</span>;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">read</span><span class="hljs-params">(Buffer sink, <span class="hljs-type">long</span> byteCount)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>                <span class="hljs-type">long</span> <span class="hljs-variable">bytesRead</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">super</span>.read(sink, byteCount);<br>                <span class="hljs-comment">// read() returns the number of bytes read, or -1 if this source is exhausted.</span><br>                totalBytesRead += bytesRead != -<span class="hljs-number">1</span> ? bytesRead : <span class="hljs-number">0</span>;<br>                progressListener.update(url, totalBytesRead, responseBody.contentLength(), bytesRead == -<span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">return</span> bytesRead;<br>            &#125;<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>定义拦截器。从Response中获取信息。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProgressInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Interceptor</span> &#123;<br><br>    <span class="hljs-keyword">private</span> ProgressListener progressListener;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ProgressInterceptor</span><span class="hljs-params">(ProgressListener progressListener)</span> &#123;<br>        <span class="hljs-built_in">this</span>.progressListener = progressListener;<br>    &#125;<br><br>    <span class="hljs-meta">@NotNull</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Response <span class="hljs-title function_">intercept</span><span class="hljs-params">(<span class="hljs-meta">@NotNull</span> Chain chain)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">Response</span> <span class="hljs-variable">originalResponse</span> <span class="hljs-operator">=</span> chain.proceed(chain.request());<br>        <span class="hljs-keyword">return</span> originalResponse.newBuilder()<br>                .body(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProgressResponseBody</span>(chain.request().url().url().toString(), originalResponse.body(), progressListener))<br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="添加拦截器"><a href="#添加拦截器" class="headerlink" title="添加拦截器"></a>添加拦截器</h3><p>在创建OkHttpClient时添加ProgressInterceptor。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">OkHttpClient</span> <span class="hljs-variable">okHttpClient</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OkHttpClient</span>.Builder()<br>        .connectTimeout(<span class="hljs-number">8</span>, TimeUnit.SECONDS)<br>        .addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProgressInterceptor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProgressListener</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(String url, <span class="hljs-type">long</span> bytesRead, <span class="hljs-type">long</span> contentLength, <span class="hljs-type">boolean</span> done)</span> &#123;<br>                <span class="hljs-comment">// tellProgress(url, bytesRead, contentLength, done);</span><br>            &#125;<br>        &#125;))<br>        .build();<br></code></pre></td></tr></table></figure></p><p>值得注意的是这里的进度更新非常频繁。并不一定每次回调都要去更新UI。</p><p>更多请参考：</p><p><a href="https://rustfisher.com/2018/08/22/Android/Android-OkHttp_Retrofit_use_intro/">Android OkHttp + Retrofit 使用示例</a></p><p><a href="https://rustfisher.com/2019/06/26/Android/Android-OkHttp_Retrofit_cancel_request/">Android OkHttp + Retrofit 取消请求的方法</a></p><p><a href="https://rustfisher.com/2019/10/18/Android/Android-OkHttp_Retrofit_download_file/">Android OkHttp + Retrofit 下载文件与进度监听</a></p><p><a href="https://rustfisher.com/2019/10/18/Android/Android-OkHttp_Retrofit_download_file_partial/">Android OkHttp + Retrofit 断点续传</a></p>]]></content>
    
    
    <categories>
      
      <category>Android_note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>network</tag>
      
      <tag>OkHttp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 使用FFmpeg操作mp4</title>
    <link href="/Python/Python-FFmpeg-extraction-mp4_tool/"/>
    <url>/Python/Python-FFmpeg-extraction-mp4_tool/</url>
    
    <content type="html"><![CDATA[<h2 id="使用FFmpeg"><a href="#使用FFmpeg" class="headerlink" title="使用FFmpeg"></a>使用FFmpeg</h2><p>首先得了解FFmpeg的用法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ffmpeg -i red.mkv -f flac -vn red.flac<br></code></pre></td></tr></table></figure><p>如果音频（视频）比字幕快（或慢），则在裁剪的时候统一加上或减去一个时间差。</p><h2 id="FFmpeg"><a href="#FFmpeg" class="headerlink" title="FFmpeg"></a>FFmpeg</h2><p>PyCharm 报错 ‘ffmpeg’ 不是内部或外部命令，也不是可运行的程序</p><p>虚拟环境中需要找到FFmpeg的绝对路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">ffmpeg_bin = <span class="hljs-string">&#x27;E:/ffmpeg-20191019-31aafda-win64-static/bin/ffmpeg&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">subprocess.call(get_mp3_cmd, shell=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><h3 id="python-读取文件时报错-UnicodeDecodeError-39-gbk-39-codec-can-39-t-decode"><a href="#python-读取文件时报错-UnicodeDecodeError-39-gbk-39-codec-can-39-t-decode" class="headerlink" title="python 读取文件时报错 UnicodeDecodeError: &#39;gbk&#39; codec can&#39;t decode"></a>python 读取文件时报错 <code>UnicodeDecodeError: &#39;gbk&#39; codec can&#39;t decode</code></h3><p>错误<code>UnicodeEncodeError: ‘gbk&#39; codec can&#39;t encode character ‘\xa0&#39; in position</code></p><p>在网上一查，发现是 Windows 的控制台的问题。控制台的编码是 GBK，Python 是 UTF-8，造成了冲突。</p><p>第一种方法：直接替换出错的内容<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests <br>url = <span class="hljs-string">&#x27;https://blog.csdn.net/jianhong1990/article/details/17349537&#x27;</span><br><span class="hljs-built_in">print</span>(requests.get(url).text.replace(<span class="hljs-string">&#x27;\xa0&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>))<br></code></pre></td></tr></table></figure></p><p>第二种方法：再解码</p><p>先用 GBK 编码，加个 ignore 丢弃错误的字符，然后再解码。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br>url = <span class="hljs-string">&#x27;https://blog.csdn.net/jianhong1990/article/details/17349537&#x27;</span><br><span class="hljs-built_in">print</span>(requests.get(url).text.encode(<span class="hljs-string">&#x27;gbk&#x27;</span>, <span class="hljs-string">&#x27;ignore&#x27;</span>).decode(<span class="hljs-string">&#x27;gbk&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="int与string之间的转化"><a href="#int与string之间的转化" class="headerlink" title="int与string之间的转化"></a>int与string之间的转化</h3><p>str转成数字<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">ms = <span class="hljs-built_in">int</span>(ms)<br></code></pre></td></tr></table></figure></p><h4 id="数字转成str"><a href="#数字转成str" class="headerlink" title="数字转成str"></a>数字转成str</h4><p>补零<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-string">&#x27;&#123;:0&gt;2d&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>)  <span class="hljs-comment"># output 01</span><br></code></pre></td></tr></table></figure></p><h3 id="获取当前时间"><a href="#获取当前时间" class="headerlink" title="获取当前时间"></a>获取当前时间</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> time<br><br>time.time() <span class="hljs-comment"># 格式化时间戳为标准格式</span><br><span class="hljs-built_in">print</span>(time.strftime(<span class="hljs-string">&#x27;%Y%m%d-%H%M%S&#x27;</span>, time.localtime(time.time())))<br><br><span class="hljs-comment"># 获取30天前的时间（通过加减秒数来获取现在或者未来某个时间点）</span><br><span class="hljs-built_in">print</span> time.strftime(<span class="hljs-string">&#x27;%Y.%m.%d&#x27;</span>,time.localtime(time.time()-<span class="hljs-number">2592000</span>))<br></code></pre></td></tr></table></figure><p>参考</p><ul><li><a href="http://www.zimuku.la/detail/123853.html">http://www.zimuku.la/detail/123853.html</a></li><li><a href="http://assrt.net/">http://assrt.net/</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Android MediaPlayer 音频倍速播放，调整播放速度</title>
    <link href="/Android/Android-MediaPlayer_use_play_speed/"/>
    <url>/Android/Android-MediaPlayer_use_play_speed/</url>
    
    <content type="html"><![CDATA[<p>本文链接： <a href="https://rustfisher.com/2019/09/25/Android/Android-MediaPlayer_use_play_speed/">Android MediaPlayer 音频倍速播放，调整播放速度</a></p><p>现在市面上的很多音视频App都有倍速播放的功能，例如把播放速度调整为0.5、1.5、2倍等等。</p><p>从Android API 23 (Android M)开始，MediaPlayer支持调整播放速度。<br>使用的方法是setPlaybackParams，传入一个代表播放属性的类PlaybackParams。</p><p>本文介绍如何使用MediaPlayer调整播放速度。</p><h2 id="MediaPlayer-setPlaybackParams-说明"><a href="#MediaPlayer-setPlaybackParams-说明" class="headerlink" title="MediaPlayer.setPlaybackParams 说明"></a>MediaPlayer.setPlaybackParams 说明</h2><p>播放速度设置在PlaybackParams对象中，再将此对象传入setPlaybackParams。</p><p>setPlaybackParams是一个native方法。<br>如果MediaPlayer没有准备（在prepared之前），调用此方法并不会改变MediaPlayer的状态。<br>在MediaPlayer成功prepare之后，如果设置的速度为0，相当于调用了pause方法；如果设置速度不为0，相当于调用了start方法。</p><h3 id="异常情况"><a href="#异常情况" class="headerlink" title="异常情况"></a>异常情况</h3><p>如果MediaPlayer没有初始化或者已经被释放，即处于Idle或End状态，调用setPlaybackParams方法会抛出IllegalStateException异常。</p><p>如果传入的PlaybackParams不被支持，则抛出IllegalArgumentException异常。</p><p>如果设置速度小于0，则抛出java.lang.IllegalArgumentException异常。</p><h2 id="MediaPlayer-setPlaybackParams-方法示例"><a href="#MediaPlayer-setPlaybackParams-方法示例" class="headerlink" title="MediaPlayer.setPlaybackParams 方法示例"></a>MediaPlayer.setPlaybackParams 方法示例</h2><p>设置播放速度。先判断当前系统版本。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">setPlaySpeed</span><span class="hljs-params">(<span class="hljs-type">float</span> speed)</span> &#123;<br>    <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) &#123;<br>        <span class="hljs-type">PlaybackParams</span> <span class="hljs-variable">params</span> <span class="hljs-operator">=</span> mediaPlayer.getPlaybackParams();<br>        params.setSpeed(speed);<br>        mediaPlayer.setPlaybackParams(params);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>getPlaybackParams可以获取到MediaPlayer当前的PlaybackParams对象。<br>也可以给这个方法加上try catch，结合返回的boolean值判断设置速度是否成功。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">setPlaySpeed</span><span class="hljs-params">(<span class="hljs-type">float</span> speed)</span> &#123;<br>    <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">PlaybackParams</span> <span class="hljs-variable">params</span> <span class="hljs-operator">=</span> mediaPlayer.getPlaybackParams();<br>            params.setSpeed(speed);<br>            mediaPlayer.setPlaybackParams(params);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            Log.e(TAG, <span class="hljs-string">&quot;setPlaySpeed: &quot;</span>, e);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>参考代码 <a href="https://github.com/RustFisher/android-MediaPlayer">https://github.com/RustFisher/android-MediaPlayer</a></p><h2 id="PlaybackParams-包含的速度值"><a href="#PlaybackParams-包含的速度值" class="headerlink" title="PlaybackParams 包含的速度值"></a>PlaybackParams 包含的速度值</h2><p>调整MediaPlayer播放速度时，我们使用了PlaybackParams对象。AudioTrack也会用到这个类。</p><p>PlaybackParams包含着播放时候的一些属性。例如speed就是播放速度。</p><h3 id="PlaybackParams-setSpeed-float-speed"><a href="#PlaybackParams-setSpeed-float-speed" class="headerlink" title="PlaybackParams.setSpeed(float speed)"></a>PlaybackParams.setSpeed(float speed)</h3><p>传入速度倍率值。会标记当前设置过了速度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> PlaybackParams <span class="hljs-title function_">setSpeed</span><span class="hljs-params">(<span class="hljs-type">float</span> speed)</span> &#123;<br>    mSpeed = speed;<br>    mSet |= SET_SPEED;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="PlaybackParams-getSpeed"><a href="#PlaybackParams-getSpeed" class="headerlink" title="PlaybackParams.getSpeed()"></a>PlaybackParams.getSpeed()</h3><p>获取已设置的速度值。如果之前没设置过速度，则抛出IllegalStateException异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">float</span> <span class="hljs-title function_">getSpeed</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> ((mSet &amp; SET_SPEED) == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;speed not set&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> mSpeed;<br>&#125;<br></code></pre></td></tr></table></figure><p>更多参考：</p><p><a href="https://rustfisher.com/2019/09/19/Android/Android-MediaPlayer_intro/">Android MediaPlayer 基础简介</a></p><p><a href="https://rustfisher.com/2019/09/22/Android/Android-MediaPlayer_use_play_audio/">Android MediaPlayer 播放音频</a></p><p><a href="https://rustfisher.com/2019/09/23/Android/Android-Media_download_stream_file/">Android 使用URLConnection下载音频文件</a></p><p><a href="https://rustfisher.com/2019/09/25/Android/Android-MediaPlayer_use_play_speed/">Android MediaPlayer 音频倍速播放，调整播放速度</a></p><p>Android音视频相关文章请参考 <a href="https://rustfisher.com/tags/Android-Media/">https://rustfisher.com/tags/Android-Media/</a></p>]]></content>
    
    
    <categories>
      
      <category>Android_note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android_Media</tag>
      
      <tag>Media</tag>
      
      <tag>MediaPlayer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android 使用URLConnection下载音频文件</title>
    <link href="/Android/Android-Media_download_stream_file/"/>
    <url>/Android/Android-Media_download_stream_file/</url>
    
    <content type="html"><![CDATA[<p>本文链接： <a href="https://rustfisher.com/2019/09/23/Android/Android-Media_download_stream_file/">Android 使用URLConnection下载音频文件</a></p><p>使用MediaPlayer播放在线音频，请参考<a href="https://rustfisher.com/2019/09/22/Android/Android-MediaPlayer_use_play_audio/">Android MediaPlayer 播放音频</a></p><p>有时候我们会需要下载音频文件。这里提供一种思路，将在线音频文件通过流写到本地文件中。<br>使用URLConnection来建立连接，获取到的数据写到文件中。</p><p>URLConnection建立连接后，可以获取到数据长度。由此我们可以计算出下载进度。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DownloadStreamThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    String urlStr;<br>    <span class="hljs-keyword">final</span> String targetFileAbsPath;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DownloadStreamThread</span><span class="hljs-params">(String urlStr, String targetFileAbsPath)</span> &#123;<br>        <span class="hljs-built_in">this</span>.urlStr = urlStr;<br>        <span class="hljs-built_in">this</span>.targetFileAbsPath = targetFileAbsPath;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.run();<br>        <span class="hljs-type">int</span> count;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">targetFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(targetFileAbsPath);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> targetFile.createNewFile();<br>            Log.d(TAG, <span class="hljs-string">&quot;Create new file: &quot;</span> + n + <span class="hljs-string">&quot;, &quot;</span> + targetFile);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            Log.e(TAG, <span class="hljs-string">&quot;run: &quot;</span>, e);<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(urlStr);<br>            <span class="hljs-type">URLConnection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> url.openConnection();<br>            connection.connect();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">contentLength</span> <span class="hljs-operator">=</span> connection.getContentLength();<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(url.openStream());<br>            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(targetFileAbsPath);<br><br>            <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-type">long</span> <span class="hljs-variable">total</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> ((count = input.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<br>                total += count;<br>                Log.d(TAG, String.format(Locale.CHINA, <span class="hljs-string">&quot;Download progress: %.2f%%&quot;</span>, <span class="hljs-number">100</span> * (total / (<span class="hljs-type">double</span>) contentLength)));<br>                output.write(buffer, <span class="hljs-number">0</span>, count);<br>            &#125;<br>            output.flush();<br>            output.close();<br>            input.close();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            Log.e(TAG, <span class="hljs-string">&quot;run: &quot;</span>, e);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></p><p>启动下载，即启动线程。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">DownloadStreamThread</span>(urlStr, targetFileAbsPath).start();<br></code></pre></td></tr></table></figure></p><p>值得注意的是，如果本地已经有了文件，需要做一些逻辑判断。例如是否删掉旧文件，重新下载。或是判断出已有文件，中止此次下载任务。<br>例如可以用connection.getContentLength()与当前文件长度来比较，如果不一致，则删掉本地文件，重新下载。</p><p>实际上，URLConnection能处理很多流媒体。在这里是用来下载音频文件。可以实现下载功能和类似“边下边播”的功能。</p><p>代码可以参考示例工程： <a href="https://github.com/RustFisher/android-MediaPlayer">https://github.com/RustFisher/android-MediaPlayer</a></p><p>更多参考：</p><p><a href="https://rustfisher.com/2019/09/19/Android/Android-MediaPlayer_intro/">Android MediaPlayer 基础简介</a></p><p><a href="https://rustfisher.com/2019/09/22/Android/Android-MediaPlayer_use_play_audio/">Android MediaPlayer 播放音频</a></p><p><a href="https://rustfisher.com/2019/09/23/Android/Android-Media_download_stream_file/">Android 使用URLConnection下载音频文件</a></p><p><a href="https://rustfisher.com/2019/09/25/Android/Android-MediaPlayer_use_play_speed/">Android MediaPlayer 音频倍速播放，调整播放速度</a></p><p>Android音视频相关文章请参考 <a href="https://rustfisher.com/tags/Android-Media/">https://rustfisher.com/tags/Android-Media/</a></p>]]></content>
    
    
    <categories>
      
      <category>Android_note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android_Media</tag>
      
      <tag>Media</tag>
      
      <tag>Network</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android MediaPlayer 播放音频</title>
    <link href="/Android/Android-MediaPlayer_use_play_audio/"/>
    <url>/Android/Android-MediaPlayer_use_play_audio/</url>
    
    <content type="html"><![CDATA[<p>本文链接： <a href="https://rustfisher.com/2019/09/22/Android/Android-MediaPlayer_use_play_audio/">Android MediaPlayer 播放音频</a></p><p>主要介绍使用MediaPlayer播放音频的方式。关于MediaPlayer的基础知识，比如状态，可以参考<a href="https://rustfisher.com/2019/09/19/Android/Android-MediaPlayer_intro/">Android MediaPlayer 基础简介</a>。</p><p>为了方便表达，定义变量名为mediaPlayer。</p><h2 id="MediaPlayer的使用方式"><a href="#MediaPlayer的使用方式" class="headerlink" title="MediaPlayer的使用方式"></a>MediaPlayer的使用方式</h2><h3 id="创建MediaPlayer"><a href="#创建MediaPlayer" class="headerlink" title="创建MediaPlayer"></a>创建MediaPlayer</h3><p>可以直接 new MediaPlayer，也可以用MediaPlayer提供的create方法创建。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">mediaPlayer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MediaPlayer</span>();<br></code></pre></td></tr></table></figure></p><p>使用create方法创建成功后，mediaPlayer处于Prepared状态。可以直接start播放。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">mediaPlayer = MediaPlayer.create(getApplicationContext(), Uri.fromFile(file));<br>mediaPlayer.start();<br></code></pre></td></tr></table></figure></p><h3 id="设置音源-setDataSource"><a href="#设置音源-setDataSource" class="headerlink" title="设置音源 - setDataSource"></a>设置音源 - setDataSource</h3><p>通过调用<code>setDataSource</code>来设置音源。<code>setDataSource</code>有多个重载方法，我们来看常用的几种。</p><p>例如设置使用assets里的资源。实际情况可能需要try catch。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">AssetFileDescriptor</span> <span class="hljs-variable">fd</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">MediaPlayer</span> <span class="hljs-variable">mediaPlayer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MediaPlayer</span>();<br>fd = context.getApplicationContext().getAssets().openFd(name);<br>mediaPlayer.setDataSource(fd.getFileDescriptor(), fd.getStartOffset(), fd.getLength());<br></code></pre></td></tr></table></figure></p><p>本地文件，需要文件的绝对路径。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">mediaPlayer.setDataSource(file.getAbsolutePath());<br></code></pre></td></tr></table></figure></p><p>或者获取文件的Uri来创建mediaPlayer。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">mediaPlayer = MediaPlayer.create(getApplicationContext(), Uri.fromFile(file));<br></code></pre></td></tr></table></figure></p><p>设置网络音频，也是用setDataSource方法，设置url。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">mediaPlayer.setDataSource(<span class="hljs-string">&quot;https://demo.com/sample.mp3&quot;</span>));<br></code></pre></td></tr></table></figure></p><p>播放网络音频时，如果使用的是http，有可能会报错<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">java<span class="hljs-selector-class">.io</span><span class="hljs-selector-class">.IOException</span>: Cleartext HTTP traffic to demo<span class="hljs-selector-class">.com</span> not permitted<br></code></pre></td></tr></table></figure></p><p>可以简单地设置一下manifest，设置usesCleartextTraffic=”true”<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">application</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:usesCleartextTraffic</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure></p><h3 id="准备-prepare"><a href="#准备-prepare" class="headerlink" title="准备 - prepare"></a>准备 - prepare</h3><p>同步和异步准备音频资源。prepareAsync()是异步的方式，prepare是同步的。注意线程调度问题，同时不要阻塞UI线程。</p><p>使用异步方式准备音频，经常与MediaPlayer.OnPreparedListener监听器配合使用。异步准备时，也可以进行其他的设置。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">mediaPlayer.prepareAsync();<br>mediaPlayer.setOnPreparedListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MediaPlayer</span>.OnPreparedListener() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onPrepared</span><span class="hljs-params">(MediaPlayer mediaPlayer)</span> &#123;<br>        mediaPlayer.start(); <span class="hljs-comment">// 准备好了就播放</span><br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure></p><h3 id="循环播放-Looping"><a href="#循环播放-Looping" class="headerlink" title="循环播放 - Looping"></a>循环播放 - Looping</h3><p>设置循环播放setLooping。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">mediaPlayer.setLooping(<span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><br>播放完毕后，不会回调OnCompletionListener，而是从头播放当前音频。</p><h3 id="播放-start"><a href="#播放-start" class="headerlink" title="播放 - start"></a>播放 - start</h3><p>播放音频，调用start方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">mediaPlayer.start();<br></code></pre></td></tr></table></figure></p><p>处于Prepared，Pause和PlaybackComplete状态时，可以调用start方法，进入Started状态。</p><h3 id="暂停-pause"><a href="#暂停-pause" class="headerlink" title="暂停 - pause"></a>暂停 - pause</h3><p>暂停播放，使用pause方法。在暂停前先判断一下mediaPlayer的是否在播放。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (mediaPlayer.isPlaying()) &#123;<br>    mediaPlayer.pause();<br>&#125;<br></code></pre></td></tr></table></figure><p>暂停成功则处于Paused状态。</p><h3 id="停止-stop"><a href="#停止-stop" class="headerlink" title="停止 - stop"></a>停止 - stop</h3><p>回顾一下MediaPlayer状态切换的图示，我们可以得知在播放中，暂停，播放完成这3个状态下，可以调用stop方法，进入Stopped状态。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">mediaPlayer.stop();<br></code></pre></td></tr></table></figure><h3 id="调进度-seekTo"><a href="#调进度-seekTo" class="headerlink" title="调进度 - seekTo"></a>调进度 - seekTo</h3><p>调整播放进度。我们平时使用音乐播放软件一般都会有这个功能。<br>seekTo方法接受一个毫秒参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">targetMS</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (percent * mediaPlayer.getDuration());<br>mediaPlayer.seekTo(targetMS);<br></code></pre></td></tr></table></figure><p>seekTo并不会改变MediaPlayer的状态。</p><h3 id="重置-reset"><a href="#重置-reset" class="headerlink" title="重置 - reset"></a>重置 - reset</h3><p>reset后的mediaPlayer进入Idle状态。需要重新设置音源与准备。</p><h3 id="释放-release"><a href="#释放-release" class="headerlink" title="释放 - release"></a>释放 - release</h3><p>不再使用这个mediaPlayer时，应当尽快释放掉，以释放相关的资源。<br>调用release后，mediaPlayer进入End状态。此时这个mediaPlayer就不能再使用了。</p><h2 id="常用监听器"><a href="#常用监听器" class="headerlink" title="常用监听器"></a>常用监听器</h2><h3 id="缓冲监听器-OnBufferingUpdateListener"><a href="#缓冲监听器-OnBufferingUpdateListener" class="headerlink" title="缓冲监听器 OnBufferingUpdateListener"></a>缓冲监听器 OnBufferingUpdateListener</h3><p>比如我们加载网络音频的时候，常用这个监听器来监听缓冲进度。显示缓冲进度，也可以提高用户体验。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">mMediaPlayer.prepareAsync();<br>mMediaPlayer.setOnBufferingUpdateListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MediaPlayer</span>.OnBufferingUpdateListener() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onBufferingUpdate</span><span class="hljs-params">(MediaPlayer mp, <span class="hljs-type">int</span> percent)</span> &#123;<br>        <span class="hljs-comment">// percent代表缓冲百分比</span><br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="错误监听器-OnErrorListener"><a href="#错误监听器-OnErrorListener" class="headerlink" title="错误监听器 OnErrorListener"></a>错误监听器 OnErrorListener</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">mediaPlayer.setOnErrorListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MediaPlayer</span>.OnErrorListener() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onError</span><span class="hljs-params">(MediaPlayer mediaPlayer, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> i1)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// 返回true表示在此处理错误，不会回调onCompletion</span><br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>注意onError的返回值。可以选择自己处理error。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"> * <span class="hljs-meta">@return</span> True <span class="hljs-keyword">if</span> the method handled the error, <span class="hljs-literal">false</span> <span class="hljs-keyword">if</span> it didn<span class="hljs-string">&#x27;t.</span><br><span class="hljs-string"> * Returning false, or not having an OnErrorListener at all, will</span><br><span class="hljs-string"> * cause the OnCompletionListener to be called.</span><br><span class="hljs-string"> */</span><br><span class="hljs-string">boolean onError(MediaPlayer mp, int what, int extra);</span><br></code></pre></td></tr></table></figure><h3 id="播放完毕监听器-OnCompletionListener"><a href="#播放完毕监听器-OnCompletionListener" class="headerlink" title="播放完毕监听器 OnCompletionListener"></a>播放完毕监听器 OnCompletionListener</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">mediaPlayer.setOnCompletionListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MediaPlayer</span>.OnCompletionListener() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCompletion</span><span class="hljs-params">(MediaPlayer mediaPlayer)</span> &#123;<br>        <span class="hljs-comment">// 播放完毕</span><br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><h3 id="播放assets里的音频"><a href="#播放assets里的音频" class="headerlink" title="播放assets里的音频"></a>播放assets里的音频</h3><p>播放assets里的音频文件，使用到AssetFileDescriptor类。使用后记得关闭AssetFileDescriptor。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">playAssetsAudio</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String name, Context context)</span> &#123;<br>    Log.d(TAG, <span class="hljs-string">&quot;playAssetWordSound: try to play assets sound file. -&gt; &quot;</span> + name);<br>    <span class="hljs-type">AssetFileDescriptor</span> <span class="hljs-variable">fd</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        MediaPlayer mediaPlayer;<br>        Log.v(TAG, <span class="hljs-string">&quot;Looking in assets.&quot;</span>);<br>        fd = context.getApplicationContext().getAssets().openFd(name);<br>        mediaPlayer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MediaPlayer</span>();<br>        mediaPlayer.reset();<br>        mediaPlayer.setDataSource(fd.getFileDescriptor(), fd.getStartOffset(), fd.getLength());<br>        mediaPlayer.prepareAsync();<br>        mediaPlayer.setOnPreparedListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MediaPlayer</span>.OnPreparedListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onPrepared</span><span class="hljs-params">(MediaPlayer mediaPlayer)</span> &#123;<br>                Log.d(TAG, <span class="hljs-string">&quot;onPrepared: &quot;</span> + name);<br>                mediaPlayer.start();<br>            &#125;<br>        &#125;);<br>        mediaPlayer.setOnCompletionListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MediaPlayer</span>.OnCompletionListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCompletion</span><span class="hljs-params">(MediaPlayer mp)</span> &#123;<br>                mp.release();<br>                Log.d(TAG, <span class="hljs-string">&quot;onCompletion: &quot;</span> + name);<br>            &#125;<br>        &#125;);<br>        mediaPlayer.setOnErrorListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MediaPlayer</span>.OnErrorListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onError</span><span class="hljs-params">(MediaPlayer mp, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> i1)</span> &#123;<br>                mp.release();<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (fd != <span class="hljs-literal">null</span>) &#123;<br>                fd.close();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e1) &#123;<br>            Log.e(TAG, <span class="hljs-string">&quot;Exception close fd: &quot;</span>, e1);<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (fd != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                fd.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                Log.e(TAG, <span class="hljs-string">&quot;Finally, close fd &quot;</span>, e);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="播放本地音频文件"><a href="#播放本地音频文件" class="headerlink" title="播放本地音频文件"></a>播放本地音频文件</h3><p>尝试播放音频文件。仅播放一次。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">playAudioFile</span><span class="hljs-params">(<span class="hljs-keyword">final</span> File file)</span> &#123;<br>    Log.d(TAG, <span class="hljs-string">&quot;playAudioFile: &quot;</span> + file.getAbsolutePath());<br>    MediaPlayer mediaPlayer;<br>    <span class="hljs-keyword">try</span> &#123;<br>        mediaPlayer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MediaPlayer</span>();<br>        mediaPlayer.setLooping(<span class="hljs-literal">false</span>);<br>        mediaPlayer.setDataSource(file.getAbsolutePath());<br>        mediaPlayer.prepare();<br>        mediaPlayer.start();<br>        mediaPlayer.setOnCompletionListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MediaPlayer</span>.OnCompletionListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCompletion</span><span class="hljs-params">(MediaPlayer mp)</span> &#123;<br>                mp.release();<br>            &#125;<br>        &#125;);<br>        mediaPlayer.setOnErrorListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MediaPlayer</span>.OnErrorListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onError</span><span class="hljs-params">(MediaPlayer mediaPlayer, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> i1)</span> &#123;<br>                Log.d(TAG, <span class="hljs-string">&quot;Play local sound onError: &quot;</span> + i + <span class="hljs-string">&quot;, &quot;</span> + i1);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        Log.e(TAG, <span class="hljs-string">&quot;playAudioFile: &quot;</span>, e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="播放在线音频"><a href="#播放在线音频" class="headerlink" title="播放在线音频"></a>播放在线音频</h3><p>设置url，播放在线音频</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">playOnlineSound</span><span class="hljs-params">(String soundUrlDict)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">MediaPlayer</span> <span class="hljs-variable">mediaPlayer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MediaPlayer</span>();<br>        mediaPlayer.setDataSource(soundUrlDict);<br>        mediaPlayer.prepareAsync();<br>        mediaPlayer.setOnPreparedListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MediaPlayer</span>.OnPreparedListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onPrepared</span><span class="hljs-params">(MediaPlayer mediaPlayer)</span> &#123;<br>                mediaPlayer.start();<br>            &#125;<br>        &#125;);<br>        mediaPlayer.setOnCompletionListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MediaPlayer</span>.OnCompletionListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCompletion</span><span class="hljs-params">(MediaPlayer mp)</span> &#123;<br>                <span class="hljs-keyword">if</span> (mp != <span class="hljs-literal">null</span>) &#123;<br>                    mp.release();<br>                &#125;<br>                Log.d(TAG, <span class="hljs-string">&quot;onCompletion: play sound.&quot;</span>);<br>            &#125;<br>        &#125;);<br>        mediaPlayer.setOnErrorListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MediaPlayer</span>.OnErrorListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onError</span><span class="hljs-params">(MediaPlayer mediaPlayer, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> i1)</span> &#123;<br>                Log.d(TAG, <span class="hljs-string">&quot;Play online sound onError: &quot;</span> + i + <span class="hljs-string">&quot;, &quot;</span> + i1);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e1) &#123;<br>        Log.e(TAG, <span class="hljs-string">&quot;url: &quot;</span>, e1);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>代码可以参考示例工程： <a href="https://github.com/RustFisher/android-MediaPlayer">https://github.com/RustFisher/android-MediaPlayer</a></p><p>更多参考：</p><p><a href="https://rustfisher.com/2019/09/19/Android/Android-MediaPlayer_intro/">Android MediaPlayer 基础简介</a></p><p><a href="https://rustfisher.com/2019/09/22/Android/Android-MediaPlayer_use_play_audio/">Android MediaPlayer 播放音频</a></p><p><a href="https://rustfisher.com/2019/09/23/Android/Android-Media_download_stream_file/">Android 使用URLConnection下载音频文件</a></p><p><a href="https://rustfisher.com/2019/09/25/Android/Android-MediaPlayer_use_play_speed/">Android MediaPlayer 音频倍速播放，调整播放速度</a></p><p>Android音视频相关文章请参考 <a href="https://rustfisher.com/tags/Android-Media/">https://rustfisher.com/tags/Android-Media/</a></p>]]></content>
    
    
    <categories>
      
      <category>Android_note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android_Media</tag>
      
      <tag>Media</tag>
      
      <tag>MediaPlayer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android MediaPlayer 基础简介</title>
    <link href="/Android/Android-MediaPlayer_intro/"/>
    <url>/Android/Android-MediaPlayer_intro/</url>
    
    <content type="html"><![CDATA[<p>本文链接： <a href="https://rustfisher.com/2019/09/19/Android/Android-MediaPlayer_intro/">Android MediaPlayer 基础简介</a></p><p>简单介绍MediaPlayer的基本概念，状态，常用的方法与监听器。</p><h2 id="什么是MediaPlayer"><a href="#什么是MediaPlayer" class="headerlink" title="什么是MediaPlayer"></a>什么是MediaPlayer</h2><p>MediaPlayer类可以用来播放音视频文件，或者是音频流。开发者可以用它来播放本地音频，或者是网络在线音频。</p><p>MediaPlayer属于<code>android.media</code>包。</p><h2 id="MediaPlayer的状态"><a href="#MediaPlayer的状态" class="headerlink" title="MediaPlayer的状态"></a>MediaPlayer的状态</h2><p>播放控制由状态机控制。在日常生活中，我们常见的音频状态有播放中，暂停，停止，缓冲等等。<br>MediaPlayer的状态有如下几种：</p><ul><li>Idle</li><li>End</li><li>Error</li><li>Initialized</li><li>Preparing</li><li>Prepared</li><li>Started</li><li>Stopped</li><li>Paused</li><li>PlaybackCompleted</li></ul><p>状态的切换参考<a href="https://developer.android.com/reference/android/media/MediaPlayer">官方</a>图例。<br>这里稍微解释一下状态转换图片。椭圆代表MediaPlayer可能停留的状态。椭圆之间的箭头表示方法调用，状态切换的方向。单箭头表示方法同步调用，双箭头表示异步调用。</p><p><img src="http://rustblogres.rustfisher.com/Android-mediaplayer_state_diagram.gif" alt="mediaplayer_state_diagram"></p><p>从图中我们可以看出状态切换的路径和涉及到的方法。</p><h3 id="Idle与End状态"><a href="#Idle与End状态" class="headerlink" title="Idle与End状态"></a>Idle与End状态</h3><p>当new一个MediaPlayer或者调用了reset方法，当前MediaPlayer会处于Idle状态。调用release后，会处于End状态。在这2个状态之间的状态可以看做是MediaPlayer对象的生命周期。</p><p>在新创建MediaPlayer和调用reset的MediaPlayer之间有一些细微的差别。<br>这两种情况都处于Idle状态，调用 getCurrentPosition(), getDuration(), getVideoHeight(), getVideoWidth(), setAudioAttributes(android.media.AudioAttributes), setLooping(boolean), setVolume(float, float), pause(), start(), stop(), seekTo(long, int), prepare() 或 prepareAsync()方法都会抛出错误，如果是新实例化的MediaPlayer，不会回调 OnErrorListener.onError()；但如果是reset后的MediaPlayer，会回调 OnErrorListener.onError()并且转换到Error状态。</p><p>如果MediaPlayer对象不再使用了，立即调用release()方法，释放内部播放器占用的资源。这些资源可能是唯一的，比如硬件加速组件。如果调用release失败，可能会引起一连串的MediaPlayer实例失效。当MediaPlayer处于End状态，它就不能再转移到其它状态了。</p><p>new一个MediaPlayer，处于Idle状态。如果用create方法创建实例，当创建完成时处于Prepared状态。</p><h3 id="发生错误"><a href="#发生错误" class="headerlink" title="发生错误"></a>发生错误</h3><p>一些情形可能会让MediaPlayer操作失败，比如不支持的音视频格式，分辨率过高，网络超时等等。<br>因此在这些情形下错误处理和恢复非常重要。有时候编程错误也会导致MediaPlayer操作错误。<br>开发者可以设置错误监听器<code>setOnErrorListener(android.media.MediaPlayer.OnErrorListener)</code>。当错误发生时，会调用用户实现的OnErrorListener.onError()方法。</p><p>不管有没有设置监听器，错误发生时MediaPlayer会进入Error状态。</p><p>为了重复使用同一个MediaPlayer对象，可以使用<code>reset()</code>方法把它从Error状态恢复到Idle状态。<br>设置错误监听器OnErrorListener是一个好的编程习惯。开发者可以监听到播放引擎的错误通知。<br>有时候会抛出IllegalStateException异常，比如在错误的状态调用了prepare(), prepareAsync()方法，或是setDataSource方法。</p><h3 id="设置音源-setDataSource"><a href="#设置音源-setDataSource" class="headerlink" title="设置音源 setDataSource"></a>设置音源 setDataSource</h3><p>调用setDataSource(java.io.FileDescriptor), 或者 setDataSource(java.lang.String), 或者 setDataSource(android.content.Context, android.net.Uri), 或者 setDataSource(java.io.FileDescriptor, long, long), 或者 setDataSource(android.media.MediaDataSource) 可以将MediaPlayer的状态从Idle转到Initialized状态。<br>如果在Idle状态之外的状态调用了setDataSource()，会抛出IllegalStateException异常。<br>开发者应该留意setDataSource方法抛出的IllegalArgumentException和IOException异常。</p><h3 id="播放音频前必须在Prepared状态"><a href="#播放音频前必须在Prepared状态" class="headerlink" title="播放音频前必须在Prepared状态"></a>播放音频前必须在Prepared状态</h3><p>MediaPlayer在开始播放音频前必须处于Prepared状态。</p><p>MediaPlayer有同步和异步2种方式来进入Prepared状态。如果是异步的方式，会先转到Preparing状态，再转到Prepared状态。<br>当准备完成时，内部的播放引擎会回调用户之前设置的OnPreparedListener的onPrepared()方法。</p><p>开发者必须注意的是，Preparing状态是一个过渡状态（transient state）。</p><p>处于Prepared状态时，可以通过相对应的方法设置音量，屏幕常亮，播放循环等。</p><h3 id="开始播放"><a href="#开始播放" class="headerlink" title="开始播放"></a>开始播放</h3><p>播放音频必须调用start()方法。调用start()返回成功后，MediaPlayer处于Started状态。<br>可以通过isPlaying()来判断当前是否在Started状态。</p><p>如果开发者设置了OnBufferingUpdateListener，Android内部播放器会向外传递buffer信息。</p><p>如果当前处于Started状态，再调用start()方法没有效果。</p><h3 id="暂停播放与继续播放"><a href="#暂停播放与继续播放" class="headerlink" title="暂停播放与继续播放"></a>暂停播放与继续播放</h3><p>音频可以被暂停播放和继续播放，也可以调整播放的位置。通过pause()方法来暂停音频播放。<br>成功调用pause()方法后，MediaPlayer进入Paused状态。<br>应当注意的是，MediaPlayer在Started状态与Paused状态之间切换是异步的。播放音频流的时候，这个转换过程可能会需要几秒钟。</p><p>MediaPlayer暂停时，start()方法可以从暂停的位置继续播放。成功调用start方法后会进入Started状态。</p><p>处于Paused状态时，调用pause()方法没有效果。</p><h3 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h3><p>调用stop()方法让MediaPlayer从Started, Paused, Prepared 或 PlaybackCompleted 状态进入 Stopped 状态。</p><p>在Stopped状态时，必须先调用prepare() 或 prepareAsync()进入Prepared状态后，才能播放音频。</p><p>处于Stopped状态时，调用stop()方法没有效果。</p><h3 id="调整播放位置"><a href="#调整播放位置" class="headerlink" title="调整播放位置"></a>调整播放位置</h3><p>调用seekTo(long, int)来调整播放位置。</p><p>seekTo(long, int)是一个异步方法，虽然它能立刻返回，但实际的位置调整可能会消耗一段时间，特别是在播放音频流的时候。当实际播放位置调整后，内部播放器会回调开发者设置的OnSeekComplete.onSeekComplete()。</p><p>在Prepared, Paused 和 PlaybackCompleted状态中，都可以调用seekTo方法。</p><p>可以通过getCurrentPosition()方法来获取当前播放位置。开发者可以得知当前播放的进度等等。</p><h3 id="播放完毕"><a href="#播放完毕" class="headerlink" title="播放完毕"></a>播放完毕</h3><p>音频播放完成后，播放完毕。</p><p>如果调用setLooping(boolean)为true，MediaPlayer会停留在Started状态。</p><p>如果setLooping为false，内部播放器会调用开发者设置的OnCompletion.onCompletion()，并且进入PlaybackCompleted状态。</p><p>处于PlaybackCompleted状态时，调用start()方法可以从头开始播放音频。</p><h2 id="常用监听器"><a href="#常用监听器" class="headerlink" title="常用监听器"></a>常用监听器</h2><p>开发者可以设置一些监听器，监听MediaPlayer的状态，错误事件等等。开发者应在同一个线程中创建MediaPlayer与设置的监听器。</p><p><code>setOnPreparedListener(android.media.MediaPlayer.OnPreparedListener)</code><br>监听MediaPlayer准备完成。一般与<code>prepareAsync</code>配合使用。</p><p><code>setOnVideoSizeChangedListener(android.media.MediaPlayer.OnVideoSizeChangedListener)</code><br>获知video大小或video大小改变时的监听。</p><p><code>setOnSeekCompleteListener(android.media.MediaPlayer.OnSeekCompleteListener)</code><br>监听调整位置完成。</p><p><code>setOnCompletionListener(android.media.MediaPlayer.OnCompletionListener)</code><br>播放完成。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">mediaPlayer.setOnCompletionListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MediaPlayer</span>.OnCompletionListener() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCompletion</span><span class="hljs-params">(MediaPlayer mediaPlayer)</span> &#123;<br>        <span class="hljs-comment">// 当前播放完毕</span><br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p><code>setOnBufferingUpdateListener(android.media.MediaPlayer.OnBufferingUpdateListener)</code><br>监听缓冲进度。在播放网络音频时常用。</p><p>缓冲监听器<code>OnBufferingUpdateListener</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">mMediaPlayer.prepareAsync();<br>mMediaPlayer.setOnBufferingUpdateListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MediaPlayer</span>.OnBufferingUpdateListener() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onBufferingUpdate</span><span class="hljs-params">(MediaPlayer mp, <span class="hljs-type">int</span> percent)</span> &#123;<br>        <span class="hljs-comment">// 例如在这里更新UI</span><br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p><code>setOnInfoListener(android.media.MediaPlayer.OnInfoListener)</code><br>监听普通信息或者警告信息。</p><p><code>setOnErrorListener(android.media.MediaPlayer.OnErrorListener)</code><br>监听错误信息。错误发生时，可以在这里处理错误。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">mediaPlayer.setOnErrorListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MediaPlayer</span>.OnErrorListener() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onError</span><span class="hljs-params">(MediaPlayer mediaPlayer, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> i1)</span> &#123;<br>        LogUtil.e(TAG_PREFIX + <span class="hljs-string">&quot; onERR i = &quot;</span> + i + <span class="hljs-string">&quot; i1 = &quot;</span> + i1);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// 返回true表示在此处理错误，不会回调onCompletion</span><br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>注意onError的返回值。可以选择自己处理error。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"> * <span class="hljs-meta">@return</span> True <span class="hljs-keyword">if</span> the method handled the error, <span class="hljs-literal">false</span> <span class="hljs-keyword">if</span> it didn<span class="hljs-string">&#x27;t.</span><br><span class="hljs-string"> * Returning false, or not having an OnErrorListener at all, will</span><br><span class="hljs-string"> * cause the OnCompletionListener to be called.</span><br><span class="hljs-string"> */</span><br><span class="hljs-string">boolean onError(MediaPlayer mp, int what, int extra);</span><br></code></pre></td></tr></table></figure><h2 id="需要的权限"><a href="#需要的权限" class="headerlink" title="需要的权限"></a>需要的权限</h2><p>播放网络音频时需要Manifest.permission.INTERNET权限。</p><p>更多参考：</p><p><a href="https://rustfisher.com/2019/09/19/Android/Android-MediaPlayer_intro/">Android MediaPlayer 基础简介</a></p><p><a href="https://rustfisher.com/2019/09/22/Android/Android-MediaPlayer_use_play_audio/">Android MediaPlayer 播放音频</a></p><p><a href="https://rustfisher.com/2019/09/23/Android/Android-Media_download_stream_file/">Android 使用URLConnection下载音频文件</a></p><p><a href="https://rustfisher.com/2019/09/25/Android/Android-MediaPlayer_use_play_speed/">Android MediaPlayer 音频倍速播放，调整播放速度</a></p><p>Android音视频相关文章请参考 <a href="https://rustfisher.com/tags/Android-Media/">https://rustfisher.com/tags/Android-Media/</a></p>]]></content>
    
    
    <categories>
      
      <category>Android_note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android_Media</tag>
      
      <tag>Media</tag>
      
      <tag>MediaPlayer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android mmap 文件映射到内存介绍</title>
    <link href="/Android/Android-mmap_intro_and_use/"/>
    <url>/Android/Android-mmap_intro_and_use/</url>
    
    <content type="html"><![CDATA[<p>本文链接： <a href="https://rustfisher.com/2019/08/20/Android/Android-mmap_intro_and_use/">Android mmap 文件映射到内存介绍</a></p><p>Android开发中，我们可能需要记录一些文件。例如记录log文件。如果使用流来写文件，频繁操作文件io可能会引起性能问题。<br>为了降低写文件的频率，我们可能会采用缓存一定数量的log，再一次性把它们写到文件中。如果app异常退出，我们有可能会丢失内存中的log信息。<br>那么有什么比较稳妥的写文件方式，既能降低io，又能尽可能地保证数据被写入文件呢？</p><h2 id="mmap简介"><a href="#mmap简介" class="headerlink" title="mmap简介"></a>mmap简介</h2><h3 id="mmap概念"><a href="#mmap概念" class="headerlink" title="mmap概念"></a>mmap概念</h3><p>mmap是一种内存映射文件的方法，即将一个文件或者其它对象映射到进程的地址空间，实现文件磁盘地址和进程虚拟地址空间中一段虚拟地址的一一对映关系。 </p><p>特点：实现这样的映射关系后，进程就可以采用指针的方式读写操作这一段内存，而系统会自动回写脏页面到对应的文件磁盘上，即完成了对文件的操作而不必再调用read,write等系统调用函数。相反，内核空间对这段区域的修改也直接反映用户空间，从而可以实现不同进程间的文件共享。如下图所示： </p><p><img src="http://rustblogres.rustfisher.com/Android-mmap-intro1.jpg" alt="mmap简介"></p><h3 id="mmap内存映射原理"><a href="#mmap内存映射原理" class="headerlink" title="mmap内存映射原理"></a>mmap内存映射原理</h3><p>mmap内存映射的实现过程，总的来说可以分为三个阶段：</p><p>应用进程启动映射，在进程的虚拟地址空间中，寻找一段空闲的满足要求的连续的虚拟地址作为映射区域；<br>调用系统函数mmap，实现文件物理地址和进程虚拟地址的一一映射；<br>应用进程对映射区域访问，引发缺页异常，实现文件内容到物理内存（主存）的拷贝。</p><h3 id="mmap优缺点"><a href="#mmap优缺点" class="headerlink" title="mmap优缺点"></a>mmap优缺点</h3><p>只有一次数据拷贝：当发生缺页异常时，直接将数据从磁盘拷贝到进程的用户空间，跳过了页缓存。<br>实现了用户空间和内核空间的高效交互方式：两空间的各自修改操作可以直接反映在映射的区域内，从而被对方空间及时捕捉。<br>提供进程间共享内存及相互通信的方式。 </p><p>不管是父子进程还是无亲缘关系的进程，都可以将自身用户空间映射到同一个文件或匿名映射到同一片区域。从而通过各自对映射区域的改动，达到进程间通信和进程间共享的目的。 </p><p>同时，如果进程A和进程B都映射了区域C，当A第一次读取C时通过缺页从磁盘复制文件页到内存中；但当B再读C的相同页面时，虽然也会产生缺页异常，但是不再需要从磁盘中复制文件过来，而可直接使用已经保存在内存中的文件数据。</p><h3 id="mmap注意点"><a href="#mmap注意点" class="headerlink" title="mmap注意点"></a>mmap注意点</h3><p>对于大文件而言，内存映射比普通IO流要快，小文件则未必；<br>不要经常调用MappedByteBuffer.force()方法，这个方法强制操作系统将内存中的内容写入硬盘，所以如果你在每次写内存映射文件后都调用force()方法，你就不能真正从内存映射文件中获益，而是跟disk IO差不多。<br>读写内存映射文件是操作系统来负责的，因此，即使你的Java程序在写入内存后就挂掉了，只要操作系统工作正常，数据就会写入磁盘。<br>如果电源故障或者主机瘫痪，有可能内存映射文件还没有写入磁盘，意味着可能会丢失一些关键数据。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://stackoverflow.com/questions/258091/when-should-i-use-mmap-for-file-access">https://stackoverflow.com/questions/258091/when-should-i-use-mmap-for-file-access</a></li><li><a href="https://www.jianshu.com/p/187eada7b900">https://www.jianshu.com/p/187eada7b900</a></li><li><a href="https://juejin.im/post/5c3ec9ebf265da61223a93de#heading-0">https://juejin.im/post/5c3ec9ebf265da61223a93de#heading-0</a></li><li><a href="https://stackoverflow.com/questions/30180268/android-ndk-mmap-call-broken-on-32-bit-devices-after-upgrading-to-lollipop">https://stackoverflow.com/questions/30180268/android-ndk-mmap-call-broken-on-32-bit-devices-after-upgrading-to-lollipop</a></li><li><a href="https://stackoverflow.com/questions/33897711/android-mmap-fails-with-out-of-memory">https://stackoverflow.com/questions/33897711/android-mmap-fails-with-out-of-memory</a></li></ul><p>Android中的Binder也利用的mmap。Binder传递数据时，只需要复制一次，就能把数据传递到另一个进程中。参考<a href="https://rustfisher.com/2019/08/08/Android/Android-Binder_%E6%9C%BA%E5%88%B6%E4%BB%8B%E7%BB%8D/">Binder机制介绍</a></p><h2 id="Android中使用mmap"><a href="#Android中使用mmap" class="headerlink" title="Android中使用mmap"></a>Android中使用mmap</h2><p>Android中使用mmap，可以通过RandomAccessFile与MappedByteBuffer来配合。参考<a href="https://rustfisher.com/2018/07/29/Dev-note/dev-note-app-drone/">drone开发记录 - log记录工具</a></p><p>通过<code>randomAccessFile.getChannel().map</code>获取到<code>MappedByteBuffer</code>。然后调用ByteBuffer的put方法添加数据。</p>]]></content>
    
    
    <categories>
      
      <category>Android_note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mmap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「小程序」开发记录</title>
    <link href="/Dev-note/dev-note-miniapp-all/"/>
    <url>/Dev-note/dev-note-miniapp-all/</url>
    
    <content type="html"><![CDATA[<h2 id="wxml"><a href="#wxml" class="headerlink" title="wxml"></a>wxml</h2><p>标签严格闭合。<br>rpx（responsive pixel）尺寸单位。<br>大小写敏感。</p><p>我们只要保持一个原则就可以提高小程序的渲染性能：每次只设置需要改变的最小单位数据。<br>此外需要注意以下3点：</p><ul><li>直接修改 Page实例的this.data 而不调用 this.setData 是无法改变页面的状态的，还会造成数据不一致。</li><li>由于setData是需要两个线程的一些通信消耗，为了提高性能，每次设置的数据不应超过1024kB。</li><li>不要把data中的任意一项的value设为undefined，否则可能会有引起一些不可预料的bug。</li></ul><p>“用户在渲染层的行为反馈”以及“组件的部分状态反馈”抽象为渲染层传递给逻辑层的“事件”</p><h3 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h3><p>通过 <code>大括号大括号</code> 语法可以使得 WXML 拥有动态渲染的能力，除此外还可以在其中进行简单的逻辑运算。<br><code>大括号大括号</code>中还可以直接放置数字、字符串或者是数组。</p><p>使用 <code>wx:key</code> 来指定列表中项目的唯一的标识符。</p><p><code>wx:key</code> 的值以两种形式提供：</p><ul><li>字符串，代表在 for 循环的 array 中 item 的某个 property，该 property 的值需要是列表中唯一的字符串或数字，且不能动态改变。</li><li>保留关键字 this 代表在 for 循环中的 item 本身，这种表示需要 item 本身是一个唯一的字符串或者数字</li></ul><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><p>WXML提供模板（template），可以在模板中定义代码片段，然后在不同的地方调用。使用 name 属性，作为模板的名字。然后在 <code>&lt;template/&gt;</code> 内定义代码片段</p><p>使用 is 属性，声明需要的使用的模板，然后将模板所需要的 data 传入</p><p>WXML 提供两种文件引用方式import和include。</p><p>import 可以在该文件中使用目标文件定义的 template</p><p>import 不具有递归的特性。</p><h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><p>在wxml中使用<code>wx:if</code>。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">text</span> <span class="hljs-attr">wx:if</span>=<span class="hljs-string">&quot;&#123;&#123;showPing&#125;&#125;&quot;</span>&gt;</span>&#123;&#123;s.ping&#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span><br></code></pre></td></tr></table></figure></p><p>WXML 中，使用 wx:if=”“ 来判断是否需要渲染该代码块。标签定义的前部使用逻辑判断。<br>使用 wx:elif 和 wx:else 来添加一个 else 块。</p><h2 id="排版布局"><a href="#排版布局" class="headerlink" title="排版布局"></a>排版布局</h2><h3 id="水平居中内容"><a href="#水平居中内容" class="headerlink" title="水平居中内容"></a>水平居中内容</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:100%; display:flex;flex-direction:row;justify-content:center;&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="flex垂直方向居中"><a href="#flex垂直方向居中" class="headerlink" title="flex垂直方向居中"></a>flex垂直方向居中</h3><p>主要靠<code>align-items: center;</code>。<br>不设置高度的时候。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.cfg-start</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: row;<br>  <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">align-items</span>: center;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>设置了绝对定位。需要同时设置高度。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.cfg-end</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">right</span>: <span class="hljs-number">0px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">5vh</span>;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: row;<br>  <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">2px</span>;<br>  <span class="hljs-attribute">align-items</span>: center;<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="确定宽高的view里居中内容"><a href="#确定宽高的view里居中内容" class="headerlink" title="确定宽高的view里居中内容"></a>确定宽高的view里居中内容</h3><p>需要设置<code>display: flex;</code>，<code>justify-content:center;</code>，<code>align-items: center;</code>。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.ball</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">30px</span>;<br>  <span class="hljs-attribute">height</span>:<span class="hljs-number">30px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">2px</span> <span class="hljs-number">2px</span>;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">justify-content</span>:center;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">15px</span>;<br>  <span class="hljs-attribute">color</span>:white;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="view位于父容器底部"><a href="#view位于父容器底部" class="headerlink" title="view位于父容器底部"></a>view位于父容器底部</h3><p>或者叫做div位于父容器底部。<br>父容器设置<code>position: relative</code>。<br>子view设置<code>position: absolute</code>。<br>如果父容器没有设置relative属性，子div（或子view）会相对于页面的底部。</p><p>CSS DIV在另一个DIV底部居中例子<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">div</span> style=&quot;<span class="hljs-attribute">min-height</span>: <span class="hljs-number">360px</span>;<span class="hljs-attribute">position</span>:relative;&quot;&gt;<br>&lt;<span class="hljs-selector-tag">div</span> style=&quot;<span class="hljs-attribute">position</span>: absolute;<span class="hljs-attribute">bottom</span>: <span class="hljs-number">0px</span>;<span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>);&quot;&gt;<br>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span>&gt;<br></code></pre></td></tr></table></figure><br>设置<code>bottom</code>的时候记得带单位。</p><p>动态判断背景色。idx表示下标。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background:&#123;&#123;idx%2 == 0? &#x27;#757575&#x27;:&#x27;#424242&#x27;&#125;&#125;&quot;</span>&gt;</span>五<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure></p><p>动态改变文字颜色<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;onTapShowType&quot;</span> <span class="hljs-attr">data-type</span>=<span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:&#123;&#123; showLetterType == 1? &#x27;#4fa003&#x27;:&#x27;#424242&#x27;&#125;&#125;&quot;</span>&gt;</span>五<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure></p><h3 id="text"><a href="#text" class="headerlink" title="text"></a>text</h3><p>font-size 字体大小。<br>font-weight 字体粗细，580左右能有粗体效果。</p><p>下划线<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">text-decoration</span>: underline;<br></code></pre></td></tr></table></figure></p><h3 id="scroll-view"><a href="#scroll-view" class="headerlink" title="scroll-view"></a>scroll-view</h3><p>使用scroll view。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">scroll-view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;word-field&#x27;</span> <span class="hljs-attr">enable-back-to-top</span> <span class="hljs-attr">scroll-into-view</span>=<span class="hljs-string">&quot;&#123;&#123;toView&#125;&#125;&quot;</span> <span class="hljs-attr">scroll-y</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">scroll-with-animation</span>=<span class="hljs-string">&quot;true&quot;</span> &gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;child-field&quot;</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">scroll-view</span>&gt;</span><br></code></pre></td></tr></table></figure></p><h3 id="wx-for子项方向"><a href="#wx-for子项方向" class="headerlink" title="wx:for子项方向"></a>wx:for子项方向</h3><p>wx:for的子项方向其实是由它的父view来决定的。</p><h4 id="列表自动换行"><a href="#列表自动换行" class="headerlink" title="列表自动换行"></a>列表自动换行</h4><p>假设横向（row）排列子项，子项太多的时候会换到下一行。<br>需要设置<code>flex-flow</code>。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.correct-field</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-flow</span>: row wrap;<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="css-圆角"><a href="#css-圆角" class="headerlink" title="css 圆角"></a>css 圆角</h3><p>只设置一个值的话，是4个圆角。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;<br></code></pre></td></tr></table></figure><br>单位是px。如果单位用rpx，则不显示圆角。</p><h3 id="背景半透明"><a href="#背景半透明" class="headerlink" title="背景半透明"></a>背景半透明</h3><p>真机调试时，小程序设置<code>background: #895fcce0;</code>是无效的，看不到颜色。<br>要使用<code>opacity</code>属性来设置不透明度。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background</span>: <span class="hljs-number">#895fcc</span>;<br><span class="hljs-attribute">opacity</span>:<span class="hljs-number">0.85</span>;<br></code></pre></td></tr></table></figure></p><p>背景渐变色<br><a href="https://developers.weixin.qq.com/community/develop/doc/06e11913e57af653ca251462fcc134f2">https://developers.weixin.qq.com/community/develop/doc/06e11913e57af653ca251462fcc134f2</a></p><h3 id="css-class-按条件选择"><a href="#css-class-按条件选择" class="headerlink" title="css class 按条件选择"></a>css class 按条件选择</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&#123;&#123;showPage==1?&#x27;chooser.chosen&#x27;:&#x27;chooser&#x27;&#125;&#125;&quot;</span> &gt;</span>sample<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><p>用大括号里的三目判断。</p><h3 id="例子🌰-进度条和文字"><a href="#例子🌰-进度条和文字" class="headerlink" title="例子🌰 - 进度条和文字"></a>例子🌰 - 进度条和文字</h3><p><img src="http://rustblogres.rustfisher.com/mini_progress_text_0201.png" alt="进度条和文字效果图"></p><p>需求：显示做题的进度。<br>进度条作为背景。文字盖在上面。头尾各一个文字。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.top-bar</span> &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.pb</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>&#125;<br><br><span class="hljs-selector-class">.top-title-field</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">justify-content</span>: center;<br>&#125;<br></code></pre></td></tr></table></figure></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;top-bar&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">progress</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pb&quot;</span> <span class="hljs-attr">stroke-width</span>=<span class="hljs-string">&quot;40px&quot;</span> <span class="hljs-attr">activeColor</span>=<span class="hljs-string">&quot;#42A5F5&quot;</span> <span class="hljs-attr">percent</span>=<span class="hljs-string">&quot;40&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;top-title-field&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span>单项选择<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;progress-text&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span>4/10<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="播放音频"><a href="#播放音频" class="headerlink" title="播放音频"></a>播放音频</h2><p>播放音频需要用到<code>InnerAudioContext</code></p><h3 id="播放本地文件"><a href="#播放本地文件" class="headerlink" title="播放本地文件"></a>播放本地文件</h3><p>播放本地音频。<br>音频文件在audio目录里。audio目录和pages目录同级。<br>先创建InnerAudioContext。并且在onLoad方法中设置监听。<br>注意本地音频文件的路径写法，不用写相对路径，用绝对路径就好。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> iac = wx.<span class="hljs-title function_">createInnerAudioContext</span>()<br><br><span class="hljs-title class_">Page</span>(&#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 生命周期函数--监听页面加载</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">onLoad</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">options</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">registerAudioContext</span>()<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;ac &#x27;</span>, iac)<br>  &#125;,<br><br>  <span class="hljs-attr">onTapSound</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;<br>    <span class="hljs-comment">// console.log(event)</span><br>    <span class="hljs-keyword">var</span> word = event.<span class="hljs-property">currentTarget</span>.<span class="hljs-property">id</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;cilck&#x27;</span>, word)<br>    iac.<span class="hljs-property">src</span> = <span class="hljs-string">&#x27;audio/a.mp3&#x27;</span><br>    iac.<span class="hljs-property">volume</span> = <span class="hljs-number">2</span><br>    iac.<span class="hljs-property">loop</span> = <span class="hljs-literal">false</span><br>    iac.<span class="hljs-title function_">play</span>()<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;tap sound done. &#x27;</span>)<br>  &#125;,<br><br>  <span class="hljs-comment">// 注册音频</span><br>  <span class="hljs-attr">registerAudioContext</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    iac.<span class="hljs-title function_">onEnded</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;on ended&#x27;</span>, res)<br>    &#125;)<br><br>    iac.<span class="hljs-title function_">onError</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>      <span class="hljs-comment">// 播放音频失败的回调</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;播放音频失败&#x27;</span>, res);<br>    &#125;)<br><br>    iac.<span class="hljs-title function_">onStop</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;播放结束!&#x27;</span>);<br>    &#125;)<br><br>  &#125;,<br>&#125;)<br></code></pre></td></tr></table></figure></p><p>测试发现，安卓手机播放的音频支持mp3与pepm。iPhone Xs不能播放pepm。<br>在本地放音频文件时，小程序会提示“文件未上传”。可能是小程序编译完成需小于某个大小（2M）才能上传。<br>那么我们把音频文件放在服务器上吧。<br>可以使用微信云开发里的存储。上传文件后，找到文件的下载地址，https开头的。设置给iac的src。</p><h3 id="播放网络音频"><a href="#播放网络音频" class="headerlink" title="播放网络音频"></a>播放网络音频</h3><p>找到音频文件的url，赋值给iac.src。然后播放。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">iac.<span class="hljs-property">src</span> = <span class="hljs-string">&#x27;https://audio....&#x27;</span><br></code></pre></td></tr></table></figure></p><h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/ability/file-system.html">https://developers.weixin.qq.com/miniprogram/dev/framework/ability/file-system.html</a></p><p>使用<code>FileSystemManager</code>的方法。</p><h3 id="判断文件是否存在"><a href="#判断文件是否存在" class="headerlink" title="判断文件是否存在"></a>判断文件是否存在</h3><p>异步的方式判断文件是否存在。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> fs = wx.<span class="hljs-title function_">getFileSystemManager</span>()<br>fs.<span class="hljs-title function_">access</span>(&#123;<br>  <span class="hljs-attr">path</span>: audioDir,<br>  <span class="hljs-title function_">success</span>(<span class="hljs-params">res</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(audioDir, remoteDir, res)<br>  &#125;,<br>  <span class="hljs-title function_">fail</span>(<span class="hljs-params">err</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err)<br>  &#125;<br>&#125;);<br><br></code></pre></td></tr></table></figure></p><p>同步判断。如果不存在则会报错。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">try</span> &#123;<br>  fs.<span class="hljs-title function_">accessSync</span>(localFilePath)<br>&#125; <span class="hljs-keyword">catch</span> (t) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(localFilePath, <span class="hljs-string">&#x27;not exists.&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="创建目录-mkdir"><a href="#创建目录-mkdir" class="headerlink" title="创建目录 mkdir"></a>创建目录 mkdir</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">fs.<span class="hljs-title function_">mkdir</span>(&#123;<br>  <span class="hljs-attr">dirPath</span>: audioDir,<br>  <span class="hljs-title function_">success</span>(<span class="hljs-params">res</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>  &#125;,<br>  <span class="hljs-title function_">fail</span>(<span class="hljs-params">err</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Can not create dir.&#x27;</span>, audioDir, err)<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="界面"><a href="#界面" class="headerlink" title="界面"></a>界面</h2><h3 id="跳回上一个界面"><a href="#跳回上一个界面" class="headerlink" title="跳回上一个界面"></a>跳回上一个界面</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">wx.<span class="hljs-title function_">navigateBack</span>(&#123;&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">wx.<span class="hljs-title function_">navigateBack</span>(&#123;<br>  <span class="hljs-attr">delta</span>: <span class="hljs-number">1</span><br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 操作</span><br>&#125;, <span class="hljs-number">1000</span>)<br></code></pre></td></tr></table></figure><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>微信小程序提供了下载api。</p><h3 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">wx.<span class="hljs-title function_">downloadFile</span>(&#123;<br>  <span class="hljs-attr">url</span>: targetUrl,<br>  <span class="hljs-attr">filePath</span>: localFilePath,<br>  <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;download success&#x27;</span>)<br>  &#125;,<br>  <span class="hljs-attr">fail</span>: <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;download fail&#x27;</span>,err)<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="点击事件"><a href="#点击事件" class="headerlink" title="点击事件"></a>点击事件</h2><p>点击事件主要靠<code>bindtap</code>方法。</p><h3 id="点击事件传递参数"><a href="#点击事件传递参数" class="headerlink" title="点击事件传递参数"></a>点击事件传递参数</h3><p>数据在soundRowA里面。渲染一个列表。<br>wxml中加上data类型，这里是<code>data-word</code>。也可以起别的名字，但一定要<code>data-</code>开头。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">&quot;&#123;&#123;soundRowA&#125;&#125;&quot;</span> <span class="hljs-attr">wx:for-index</span>=<span class="hljs-string">&quot;idx&quot;</span> <span class="hljs-attr">wx:for-item</span>=<span class="hljs-string">&quot;s&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;onTapSound&quot;</span> <span class="hljs-attr">data-word</span>=<span class="hljs-string">&#x27;&#123;&#123;s&#125;&#125;&#x27;</span>&gt;</span><br>    显示一些数据<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure></p><p>js中实现<code>onTapSound</code>方法。获取点击事件event。<br>传递回来的数据是在<code>event.currentTarget.dataset</code>中。<br>根据wxml中<code>data-word</code>，传递回来的数据的key是<code>word</code>。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">onTapSound</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;<br>  <span class="hljs-keyword">var</span> word = event.<span class="hljs-property">currentTarget</span>.<span class="hljs-property">dataset</span>.<span class="hljs-property">word</span><br>&#125;,<br></code></pre></td></tr></table></figure></p><h2 id="tabbar"><a href="#tabbar" class="headerlink" title="tabbar"></a>tabbar</h2><p><a href="https://developers.weixin.qq.com/miniprogram/dev/extended/weui/tabbar.html">https://developers.weixin.qq.com/miniprogram/dev/extended/weui/tabbar.html</a></p><p>在底部，起导航作用</p>]]></content>
    
    
    <categories>
      
      <category>miniprogram</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android Binder 机制介绍</title>
    <link href="/Android/Android-Binder_mechanism_intro/"/>
    <url>/Android/Android-Binder_mechanism_intro/</url>
    
    <content type="html"><![CDATA[<h2 id="面向对象的IPC-Binder"><a href="#面向对象的IPC-Binder" class="headerlink" title="面向对象的IPC - Binder"></a>面向对象的IPC - Binder</h2><p>c/s架构，客户端要找得到服务端。<br>Binder使用Client-Server通信方式：一个进程作为Server提供诸如视频/音频解码，视频捕获，地址本查询，网络连接等服务；多个进程作为Client向Server发起服务请求，获得所需要的服务。要想实现Client-Server通信据必须实现以下两点：一是server必须有确定的访问接入点或者说地址来接受Client的请求，并且Client可以通过某种途径获知Server的地址；二是制定Command-Reply协议来传输数据。例如在网络通信中Server的访问接入点就是Server主机的IP地址+端口号，传输协议为TCP协议。对Binder而言，Binder可以看成Server提供的实现某个特定服务的访问接入点， Client通过这个‘地址’向Server发送请求来使用该服务；对Client而言，Binder可以看成是通向Server的管道入口，要想和某个Server通信首先必须建立这个管道并获得管道入口。</p><p>与其它IPC不同，Binder使用了面向对象的思想来描述作为访问接入点的Binder及其在Client中的入口。Binder是一个实体位于Server中的对象，该对象提供了一套方法用以实现对服务的请求，就象类的成员函数。遍布于client中的入口可以看成指向这个binder对象的‘指针’，一旦获得了这个‘指针’就可以调用该对象的方法访问server。在Client看来，通过Binder‘指针’调用其提供的方法和通过指针调用其它任何本地对象的方法并无区别，尽管前者的实体位于远端Server中，而后者实体位于本地内存中。‘指针’是C++的术语，而更通常的说法是引用，即Client通过Binder的引用访问Server。而软件领域另一个术语‘句柄’也可以用来表述Binder在Client中的存在方式。从通信的角度看，Client中的Binder也可以看作是Server Binder的‘代理’，在本地代表远端Server为Client提供服务。本文中会使用‘引用’或‘句柄’这个两广泛使用的术语。</p><p><strong>Binder对象是一个可以跨进程引用的对象，它的实体位于一个进程中，而它的引用却遍布于系统的各个进程之中。</strong></p><p>面向对象思想的引入将进程间通信转化为通过对某个Binder对象的引用调用该对象的方法，而其独特之处在于Binder对象是一个可以跨进程引用的对象，它的实体位于一个进程中，而它的引用却遍布于系统的各个进程之中。最诱人的是，这个引用和java里引用一样既可以是强类型，也可以是弱类型，而且可以从一个进程传给其它进程，让大家都能访问同一Server，就象将一个对象或引用赋值给另一个引用一样。Binder模糊了进程边界，淡化了进程间通信过程，整个系统仿佛运行于同一个面向对象的程序之中。形形色色的Binder对象以及星罗棋布的引用仿佛粘接各个应用程序的胶水，这也是Binder在英文里的原意。</p><p>当然面向对象只是针对应用程序而言，对于Binder驱动和内核其它模块一样使用C语言实现，没有类和对象的概念。Binder驱动为面向对象的进程间通信提供底层支持。</p><h2 id="Binder-通信模型"><a href="#Binder-通信模型" class="headerlink" title="Binder 通信模型"></a>Binder 通信模型</h2><p>Binder框架定义了四个角色：Server，Client，ServiceManager（以后简称SMgr）以及Binder驱动。其中Server，Client，SMgr运行于用户空间，驱动运行于内核空间。这四个角色的关系和互联网类似：Server是服务器，Client是客户终端，SMgr是域名服务器（DNS），驱动是路由器。</p><h3 id="Binder-驱动"><a href="#Binder-驱动" class="headerlink" title="Binder 驱动"></a>Binder 驱动</h3><p>和路由器一样，Binder驱动虽然默默无闻，却是通信的核心。尽管名叫‘驱动’，实际上和硬件设备没有任何关系，只是实现方式和设备驱动程序是一样的：它工作于内核态，提供open()，mmap()，poll()，ioctl()等标准文件操作，以字符驱动设备中的misc设备注册在设备目录/dev下，用户通过/dev/binder访问该它。驱动负责进程之间Binder通信的建立，Binder在进程之间的传递，Binder引用计数管理，数据包在进程之间的传递和交互等一系列底层支持。驱动和应用程序之间定义了一套接口协议，主要功能由ioctl()接口实现，不提供read()，write()接口，因为ioctl()灵活方便，且能够一次调用实现先写后读以满足同步交互，而不必分别调用write()和read()。Binder驱动的代码位于linux目录的drivers/misc/binder.c中。</p><h4 id="ServiceManager-与实名Binder"><a href="#ServiceManager-与实名Binder" class="headerlink" title="ServiceManager 与实名Binder"></a>ServiceManager 与实名Binder</h4><p>和DNS类似，SMgr的作用是将字符形式的Binder名字转化成Client中对该Binder的引用，使得Client能够通过Binder名字获得对Server中Binder实体的引用。注册了名字的Binder叫实名Binder，就象每个网站除了有IP地址外还有自己的网址。Server创建了Binder实体，为其取一个字符形式，可读易记的名字，将这个Binder连同名字以数据包的形式通过Binder驱动发送给SMgr，通知SMgr注册一个名叫张三的Binder，它位于某个Server中。驱动为这个穿过进程边界的Binder创建位于内核中的实体节点以及SMgr对实体的引用，将名字及新建的引用打包传递给SMgr。SMgr收数据包后，从中取出名字和引用填入一张查找表中。</p><h4 id="ServiceManager什么时候注册的"><a href="#ServiceManager什么时候注册的" class="headerlink" title="ServiceManager什么时候注册的"></a>ServiceManager什么时候注册的</h4><p>细心的读者可能会发现其中的蹊跷：SMgr是一个进程，Server是另一个进程，Server向SMgr注册Binder必然会涉及进程间通信。当前实现的是进程间通信却又要用到进程间通信，这就好象蛋可以孵出鸡前提却是要找只鸡来孵蛋。Binder的实现比较巧妙：预先创造一只鸡来孵蛋：SMgr和其它进程同样采用Binder通信，SMgr是Server端，有自己的Binder对象（实体），其它进程都是Client，需要通过这个Binder的引用来实现Binder的注册，查询和获取。SMgr提供的Binder比较特殊，它没有名字也不需要注册，当一个进程使用BINDER_SET_CONTEXT_MGR命令将自己注册成SMgr时Binder驱动会自动为它创建Binder实体（这就是那只预先造好的鸡）。其次这个Binder的引用在所有Client中都固定为0而无须通过其它手段获得。也就是说，一个Server若要向SMgr注册自己Binder就必需通过0这个引用号和SMgr的Binder通信。类比网络通信，0号引用就好比域名服务器的地址，你必须预先手工或动态配置好。要注意这里说的Client是相对SMgr而言的，一个应用程序可能是个提供服务的Server，但对SMgr来说它仍然是个Client。</p><h4 id="Client-获得实名Binder的引用"><a href="#Client-获得实名Binder的引用" class="headerlink" title="Client 获得实名Binder的引用"></a>Client 获得实名Binder的引用</h4><p>Server向SMgr注册了Binder实体及其名字后，Client就可以通过名字获得该Binder的引用了。Client也利用保留的0号引用向SMgr请求访问某个Binder：我申请获得名字叫张三的Binder的引用。SMgr收到这个连接请求，从请求数据包里获得Binder的名字，在查找表里找到该名字对应的条目，从条目中取出Binder的引用，将该引用作为回复发送给发起请求的Client。从面向对象的角度，这个Binder对象现在有了两个引用：一个位于SMgr中，一个位于发起请求的Client中。如果接下来有更多的Client请求该Binder，系统中就会有更多的引用指向该Binder，就象java里一个对象存在多个引用一样。而且类似的这些指向Binder的引用是强类型，从而确保只要有引用Binder实体就不会被释放掉。通过以上过程可以看出，SMgr象个火车票代售点，收集了所有火车的车票，可以通过它购买到乘坐各趟火车的票-得到某个Binder的引用。</p><h4 id="匿名-Binder"><a href="#匿名-Binder" class="headerlink" title="匿名 Binder"></a>匿名 Binder</h4><p>并不是所有Binder都需要注册给SMgr广而告之的。Server端可以通过已经建立的Binder连接将创建的Binder实体传给Client，当然这条已经建立的Binder连接必须是通过实名Binder实现。由于这个Binder没有向SMgr注册名字，所以是个匿名Binder。Client将会收到这个匿名Binder的引用，通过这个引用向位于Server中的实体发送请求。匿名Binder为通信双方建立一条私密通道，只要Server没有把匿名Binder发给别的进程，别的进程就无法通过穷举或猜测等任何方式获得该Binder的引用，向该Binder发送请求。</p><p>下图展示了参与Binder通信的所有角色，将在后面的内容中一一提到。</p><p><img src="http://rustblogres.rustfisher.com/Android-Binder-sys.png" alt="Binder通信模型"></p><h4 id="Binder-内存映射和接收缓存区管理"><a href="#Binder-内存映射和接收缓存区管理" class="headerlink" title="Binder 内存映射和接收缓存区管理"></a>Binder 内存映射和接收缓存区管理</h4><p>暂且撇开Binder，考虑一下传统的IPC方式中，数据是怎样从发送端到达接收端的呢？通常的做法是，发送方将准备好的数据存放在缓存区中，调用API通过系统调用进入内核中。内核服务程序在内核空间分配内存，将数据从发送方缓存区复制到内核缓存区中。接收方读数据时也要提供一块缓存区，内核将数据从内核缓存区拷贝到接收方提供的缓存区中并唤醒接收线程，完成一次数据发送。这种存储-转发机制有两个缺陷：首先是效率低下，需要做两次拷贝：用户空间-&gt;内核空间-&gt;用户空间。Linux使用copy_from_user()和copy_to_user()实现这两个跨空间拷贝，在此过程中如果使用了高端内存（high memory），这种拷贝需要临时建立/取消页面映射，造成性能损失。其次是接收数据的缓存要由接收方提供，可接收方不知道到底要多大的缓存才够用，只能开辟尽量大的空间或先调用API接收消息头获得消息体大小，再开辟适当的空间接收消息体。两种做法都有不足，不是浪费空间就是浪费时间。</p><p>Binder采用一种全新策略：由Binder驱动负责管理数据接收缓存。我们注意到Binder驱动实现了mmap()系统调用，这对字符设备是比较特殊的，因为mmap()通常用在有物理存储介质的文件系统上，而象Binder这样没有物理介质，纯粹用来通信的字符设备没必要支持mmap()。Binder驱动当然不是为了在物理介质和用户空间做映射，而是用来创建数据接收的缓存空间。先看mmap()是如何使用的：</p><p>fd = open(“/dev/binder”, O_RDWR);</p><p>mmap(NULL, MAP_SIZE, PROT_READ, MAP_PRIVATE, fd, 0);</p><p>这样Binder的接收方就有了一片大小为MAP_SIZE的接收缓存区。mmap()的返回值是内存映射在用户空间的地址，不过这段空间是由驱动管理，用户不必也不能直接访问（映射类型为PROT_READ，只读映射）。</p><p>接收缓存区映射好后就可以做为缓存池接收和存放数据了。前面说过，接收数据包的结构为binder_transaction_data，但这只是消息头，真正的有效负荷位于data.buffer所指向的内存中。这片内存不需要接收方提供，恰恰是来自mmap()映射的这片缓存池。在数据从发送方向接收方拷贝时，驱动会根据发送数据包的大小，使用最佳匹配算法从缓存池中找到一块大小合适的空间，将数据从发送缓存区复制过来。要注意的是，存放binder_transaction_data结构本身以及表4中所有消息的内存空间还是得由接收者提供，但这些数据大小固定，数量也不多，不会给接收方造成不便。映射的缓存池要足够大，因为接收方的线程池可能会同时处理多条并发的交互，每条交互都需要从缓存池中获取目的存储区，一旦缓存池耗竭将产生导致无法预期的后果。</p><p>有分配必然有释放。接收方在处理完数据包后，就要通知驱动释放data.buffer所指向的内存区。在介绍Binder协议时已经提到，这是由命令BC_FREE_BUFFER完成的。</p><p>通过上面介绍可以看到，驱动为接收方分担了最为繁琐的任务：分配/释放大小不等，难以预测的有效负荷缓存区，而接收方只需要提供缓存来存放大小固定，最大空间可以预测的消息头即可。在效率上，由于mmap()分配的内存是映射在接收方用户空间里的，所有总体效果就相当于对有效负荷数据做了一次从发送方用户空间到接收方用户空间的直接数据拷贝，省去了内核中暂存这个步骤，提升了一倍的性能。顺便再提一点，Linux内核实际上没有从一个用户空间到另一个用户空间直接拷贝的函数，需要先用copy_from_user()拷贝到内核空间，再用copy_to_user()拷贝到另一个用户空间。为了实现用户空间到用户空间的拷贝，mmap()分配的内存除了映射进了接收方进程里，还映射进了内核空间。所以调用copy_from_user()将数据拷贝进内核空间也相当于拷贝进了接收方的用户空间，这就是Binder只需一次拷贝的‘秘密’。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://blog.csdn.net/universus/article/details/6211589">universus的专栏 - Android Binder设计与实现 - 设计篇</a><br><a href="https://rustfisher.com/2015/10/26/Android/Android-AIDL_intro_and_use/">Android AIDL简介与使用</a></p>]]></content>
    
    
    <categories>
      
      <category>Android_note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Binder</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo主题使用与修改</title>
    <link href="/Web/hexo-themes_use/"/>
    <url>/Web/hexo-themes_use/</url>
    
    <content type="html"><![CDATA[<h2 id="添加一个小图标"><a href="#添加一个小图标" class="headerlink" title="添加一个小图标"></a>添加一个小图标</h2><p>增加了一个更新日期类别： updated</p><p>style.scss 添加一个updated，使用FontAwesome<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-class">.post</span> &#123;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">25px</span> <span class="hljs-number">0</span> <span class="hljs-number">15px</span>;<br>    <span class="hljs-selector-class">.post-title</span> &#123;<br>        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>        <span class="hljs-attribute">color</span>: <span class="hljs-number">#555</span>;<br>        <span class="hljs-attribute">text-align</span>: left;<br>        <span class="hljs-attribute">font</span>: bold <span class="hljs-number">25px</span>/<span class="hljs-number">1.1</span> <span class="hljs-string">&quot;ff-tisa-web-pro&quot;</span>, Cambria, <span class="hljs-string">&quot;Times New Roman&quot;</span>, Georgia, Times, sans-serif;<br>        <span class="hljs-selector-tag">a</span> &#123;<br>            <span class="hljs-attribute">color</span>: <span class="hljs-number">#555</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-selector-class">.post-meta</span> &#123;<br>        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>        <span class="hljs-attribute">margin</span>: <span class="hljs-number">15px</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-attribute">color</span>: <span class="hljs-number">#6E7173</span>;<br>        <span class="hljs-attribute">float</span>: left;<br>        <span class="hljs-attribute">display</span>: inline;<br>        <span class="hljs-attribute">text-indent</span>: .<span class="hljs-number">15em</span>;<br>        &amp;<span class="hljs-selector-pseudo">:before</span> &#123;<br>              <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;FontAwesome&quot;</span>;<br>              <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;\f073&quot;</span>;<br>              <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">0.3em</span>;<br>        &#125;<br>        <span class="hljs-selector-class">.category</span> &#123;<br>            &amp;<span class="hljs-selector-pseudo">:before</span> &#123;<br>              <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;FontAwesome&quot;</span>;<br>              <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;\f07c&quot;</span>;<br>              <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">0.3em</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-selector-class">.updated</span> &#123;<br>            &amp;<span class="hljs-selector-pseudo">:before</span> &#123;<br>                <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;FontAwesome&quot;</span>;<br>                <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;\f044&quot;</span>;<br>                <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">0.3em</span>;<br>              &#125;<br>        &#125;<br></code></pre></td></tr></table></figure></p><p>post.pug 使用span，添加updated信息<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pug">block content<br>  .post<br>    h1.post-title= page.title<br>    .post-meta= page.date.format(&#x27;ll&#x27;)<br>      if page.categories.length &gt; 0<br>        span= &#x27; | &#x27;<br>        span.category<br>          for category in page.categories.toArray()<br>            a(href=url_for(category.path))= category.name<br>      if page.updated<br>        span= &#x27; | &#x27; <br>        span.updated<br>          = page.updated.format(&#x27;ll&#x27;)<br></code></pre></td></tr></table></figure></p><p>如果在markdown文件中不添加updated这个值，那么hexo会获取文件的修改日期，并渲染出来。</p><p>参考：</p><ul><li>Font Awesome 参考手册 <a href="https://www.runoob.com/font-awesome/fontawesome-reference.html">https://www.runoob.com/font-awesome/fontawesome-reference.html</a></li></ul><h2 id="添加Google-Adsense"><a href="#添加Google-Adsense" class="headerlink" title="添加Google Adsense"></a>添加Google Adsense</h2><p>在<code>head.pug</code>中添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pug">script(src=&#x27;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#x27;, async)<br>script.<br>  (adsbygoogle = window.adsbygoogle || []).push(&#123;<br>  google_ad_client: &quot;ca-pub-7286632197002340&quot;,<br>  enable_page_level_ads: true<br>  &#125;);<br></code></pre></td></tr></table></figure><h2 id="添加侧边栏"><a href="#添加侧边栏" class="headerlink" title="添加侧边栏"></a>添加侧边栏</h2><p>添加一个微信公众号的侧边栏展示</p><p>主题layout/_widget中添加qr_code.pug<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pug">.widget<br>  .widget-title<br>    i(class=&#x27;fa fa-weixin&#x27;)= &#x27; &#x27; + __(&#x27;微信公众号&#x27;)<br>  img(src=&#x27;http://rustblogres.rustfisher.com/qrcode_for_rf_dev_gzh_258.jpg&#x27;)<br></code></pre></td></tr></table></figure></p><p>_config.yml中添加 qr_code<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">widgets:</span> <br>  <span class="hljs-comment"># 前面的组建</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">qr_code</span><br></code></pre></td></tr></table></figure></p><h2 id="更改归档界面的链接个数"><a href="#更改归档界面的链接个数" class="headerlink" title="更改归档界面的链接个数"></a>更改归档界面的链接个数</h2><p>在工程的配置文件_config.yml里修改</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Pagination</span><br><span class="hljs-comment">## Set per_page to 0 to disable pagination</span><br><span class="hljs-attr">pagination_dir:</span> <span class="hljs-string">page</span><br><span class="hljs-attr">index_generator:</span><br>  <span class="hljs-attr">per_page:</span> <span class="hljs-number">15</span><br>  <span class="hljs-attr">order_by:</span> <span class="hljs-string">-date</span><br><br><span class="hljs-attr">category_generator:</span><br>  <span class="hljs-attr">per_page:</span> <span class="hljs-number">15</span><br><br><span class="hljs-attr">tag_generator:</span><br>  <span class="hljs-attr">per_page:</span> <span class="hljs-number">10</span><br><br><span class="hljs-attr">archive_generator:</span><br>  <span class="hljs-attr">per_page:</span> <span class="hljs-number">30</span><br>  <span class="hljs-attr">yearly:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">monthly:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">daily:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h2 id="文章置顶及置顶标签"><a href="#文章置顶及置顶标签" class="headerlink" title="文章置顶及置顶标签"></a>文章置顶及置顶标签</h2><p>首先更换一下generator<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm uninstall hexo-generator-index --save<br>$ npm install hexo-generator-index-pin-top --save<br></code></pre></td></tr></table></figure></p><p>再到themes/maupassant里，查找<code>.post-meta</code>，并且在下面添加<code>top</code>的判断。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pug">.post-meta= post.date.format(config.date_format)<br>  if post.top<br>    span.post-top-icon<br>      i(class=&quot;fa fa-thumb-tack&quot;)<br>      span.post-meta-item-text=&quot; 置顶&quot;<br></code></pre></td></tr></table></figure></p><p>在文章开头的<code>Front-matter</code>中加上<code>top: true</code>即可。</p><h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><h3 id="大括号报错"><a href="#大括号报错" class="headerlink" title="大括号报错"></a>大括号报错</h3><p>md中出现形如 <code>大括号大括号</code> 的时候，编译会报错。</p><h2 id="fluid主题"><a href="#fluid主题" class="headerlink" title="fluid主题"></a>fluid主题</h2><h3 id="配置leancloud评论与pv统计"><a href="#配置leancloud评论与pv统计" class="headerlink" title="配置leancloud评论与pv统计"></a>配置leancloud评论与pv统计</h3><p>使用fluid，配置leancloud评论和pv的时候</p><p>检查生成的网页发现leancloud里的<code>app_id</code>是空的。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;leancloud&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;app_id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;app_key&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;server_url&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;appid&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;xxx&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;appkey&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;yyy&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><br>意识到评论和pv统计在配置上不同，评论用的是<code>appid</code>。pv统计用的是<code>app_id</code>。</p><p>配置应该写成这样<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">web_analytics:</span>  <span class="hljs-comment"># 网页访问统计</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">leancloud:</span>  <span class="hljs-comment"># LeanCloud 计数统计，可用于 PV UV 展示，如果 web_analytics.enable 没有开启，PV UV 展示只会查询，不会增加</span><br>    <span class="hljs-attr">app_id:</span> <span class="hljs-string">xxx</span> <span class="hljs-comment">## 注意这里的key写法</span><br>    <span class="hljs-attr">app_key:</span> <span class="hljs-string">yyy</span> <span class="hljs-comment">## 注意这里的key写法</span><br><br><span class="hljs-comment"># ...</span><br><br><span class="hljs-comment"># 文章的配置</span><br><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">comments:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">valine</span><br>  <span class="hljs-attr">meta:</span><br>    <span class="hljs-attr">views:</span>  <span class="hljs-comment"># 阅读次数</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">source:</span> <span class="hljs-string">leancloud</span>  <span class="hljs-comment"># 统计数据来源，可选：leancloud | busuanzi   注意不蒜子会间歇抽风</span><br>      <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;&#123;&#125; 次&quot;</span><br><br><span class="hljs-attr">valine:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">## if you want to use Valine comment system, please set the value to true</span><br>  <span class="hljs-attr">appid:</span> <span class="hljs-string">ddddd</span> <span class="hljs-comment">## 注意这里的key，没有下划线 your leancloud application appid</span><br>  <span class="hljs-attr">appkey:</span> <span class="hljs-string">aaaaa</span> <span class="hljs-comment">## 注意这里的key，没有下划线 your leancloud application appkey</span><br>  <span class="hljs-attr">placeholder:</span> <span class="hljs-string">输入评论...</span> <span class="hljs-comment">## comment input placeholder text </span><br>  <span class="hljs-attr">avatar:</span> <span class="hljs-string">&#x27;mp&#x27;</span> <span class="hljs-comment">## header image https://github.com/xCss/Valine/wiki</span><br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>Web_note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发记录</tag>
      
      <tag>hexo主题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「PhoneInfo」开发记录</title>
    <link href="/Dev-note/dev-note-app-PhoneInfo/"/>
    <url>/Dev-note/dev-note-app-PhoneInfo/</url>
    
    <content type="html"><![CDATA[<p>开发过程中，一些低频使用的API不太记得，每次都要查一下。比如Build这个类。<br>做一个app，一边显示代码，一边显示结果，岂不美哉。</p><p>发布地址</p><ul><li><a href="https://www.coolapk.com/apk/238562">PhoneInfo - 酷安</a></li><li><a href="https://play.google.com/store/apps/details?id=com.rustfisher.phoneinfoapp">PhoneInfo - PlayStore</a></li></ul><h2 id="页面布局"><a href="#页面布局" class="headerlink" title="页面布局"></a>页面布局</h2><p>ViewPager + TabLayout</p><p>承载多个fragment，显示不同的信息。</p><p>TabLayout字体大小改小一点。</p><p>style.xml里增加<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;DashPageTabText&quot;</span> <span class="hljs-attr">parent</span>=<span class="hljs-string">&quot;TextAppearance.AppCompat.Button&quot;</span>&gt;</span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;android:textSize&quot;</span>&gt;</span>10sp<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><br><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;DashPageTabLayout&quot;</span> <span class="hljs-attr">parent</span>=<span class="hljs-string">&quot;Widget.Design.TabLayout&quot;</span>&gt;</span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;tabTextAppearance&quot;</span>&gt;</span>@style/DashPageTabText<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--&lt;item name=&quot;tabSelectedTextColor&quot;&gt;SELECTED TAB TEXT COLOR&lt;/item&gt;--&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--&lt;item name=&quot;tabIndicatorColor&quot;&gt;SELECTED TAB INDICATOR COLOR&lt;/item&gt;--&gt;</span></span><br><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure></p><p>tabLayout中增加style<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">com.google.android.material.tabs.TabLayout</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/dash_page_tabs&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;@style/DashPageTabLayout&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;40dp&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure></p><p>参考 <a href="https://stackoverflow.com/questions/31471177/text-size-of-android-design-tablayout-tabs">https://stackoverflow.com/questions/31471177/text-size-of-android-design-tablayout-tabs</a></p><p>或者设置选中和未选中tab时文字的颜色，设置tab可以滚动<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">com.google.android.material.tabs.TabLayout</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/dash_page_tabs&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;@style/DashPageTabLayout&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;40dp&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">app:tabMode</span>=<span class="hljs-string">&quot;scrollable&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">app:tabSelectedTextColor</span>=<span class="hljs-string">&quot;#000&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">app:tabTextColor</span>=<span class="hljs-string">&quot;#99222222&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure></p><h3 id="TabLayout-ViewPager-联动"><a href="#TabLayout-ViewPager-联动" class="headerlink" title="TabLayout ViewPager 联动"></a>TabLayout ViewPager 联动</h3><p><code>DashPagerAdapter</code>类。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> android.view.View;<br><br><span class="hljs-keyword">import</span> androidx.annotation.NonNull;<br><span class="hljs-keyword">import</span> androidx.fragment.app.Fragment;<br><span class="hljs-keyword">import</span> androidx.fragment.app.FragmentManager;<br><span class="hljs-keyword">import</span> androidx.fragment.app.FragmentPagerAdapter;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DashPagerAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FragmentPagerAdapter</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> fragCount;<br>    <span class="hljs-comment">// 装着fragment</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DashPagerAdapter</span><span class="hljs-params">(FragmentManager fm, <span class="hljs-type">int</span> count)</span> &#123;<br>        <span class="hljs-built_in">super</span>(fm);<br>        fragCount = count;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> fragCount;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Fragment <span class="hljs-title function_">getItem</span><span class="hljs-params">(<span class="hljs-type">int</span> position)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-comment">// 返回对应的fragment;</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isViewFromObject</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> View view, <span class="hljs-meta">@NonNull</span> Object object)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.isViewFromObject(view, object);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure></p><p>onCreate里初始化<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java">mTabLayout = findViewById(R.id.dash_page_tabs);<br>mViewPager = findViewById(R.id.dash_page_vp);<br>mTabLayout.addTab(mTabLayout.newTab().setText(<span class="hljs-string">&quot;Build&quot;</span>));<br>mTabLayout.addTab(mTabLayout.newTab().setText(<span class="hljs-string">&quot;Screen&quot;</span>));<br>mTabLayout.addTab(mTabLayout.newTab().setText(<span class="hljs-string">&quot;WiFi&quot;</span>));<br>mTabLayout.addTab(mTabLayout.newTab().setText(<span class="hljs-string">&quot;ext-Storage&quot;</span>));<br>mTabLayout.addTab(mTabLayout.newTab().setText(<span class="hljs-string">&quot;app-Storage&quot;</span>));<br>mTabLayout.addTab(mTabLayout.newTab().setText(<span class="hljs-string">&quot;uri&quot;</span>));<br>mTabLayout.addTab(mTabLayout.newTab().setText(<span class="hljs-string">&quot;battery&quot;</span>));<br><br>mDashPagerAdapter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DashPagerAdapter</span>(getSupportFragmentManager(), mTabLayout.getTabCount());<br><br>mViewPager.setAdapter(mDashPagerAdapter);<br>mViewPager.addOnPageChangeListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TabLayout</span>.TabLayoutOnPageChangeListener(mTabLayout));<br>mTabLayout.addOnTabSelectedListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TabLayout</span>.OnTabSelectedListener() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onTabSelected</span><span class="hljs-params">(TabLayout.Tab tab)</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">pos</span> <span class="hljs-operator">=</span> tab.getPosition();<br>        mViewPager.setCurrentItem(pos);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onTabUnselected</span><span class="hljs-params">(TabLayout.Tab tab)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onTabReselected</span><span class="hljs-params">(TabLayout.Tab tab)</span> &#123;<br><br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure></p><h2 id="Build类"><a href="#Build类" class="headerlink" title="Build类"></a>Build类</h2><p>比如这样</p><p><img src="http://rustblogres.rustfisher.com/phoneinfo-app-build-page-1p.jpg" alt="展示Build类的API"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O &amp;&amp;<br>        PackageManager.PERMISSION_GRANTED == ContextCompat.checkSelfPermission(<span class="hljs-built_in">this</span>, Manifest.permission.READ_PHONE_STATE)) &#123;<br>    mInfoReAdapter.addOrUpdate(K_SERIAL, <span class="hljs-string">&quot;Build.getSerial()&quot;</span>, Build.getSerial());<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    mInfoReAdapter.addOrUpdate(Build.SERIAL, <span class="hljs-string">&quot;Build.SERIAL&quot;</span>, Build.SERIAL);<br>&#125;<br>mInfoReAdapter.addOrUpdate(<span class="hljs-string">&quot;Build.getRadioVersion()&quot;</span>, <span class="hljs-string">&quot;Build.getRadioVersion()&quot;</span>, Build.getRadioVersion());<br>mInfoReAdapter.addOrUpdate(<span class="hljs-string">&quot;Build.ID               &quot;</span>, <span class="hljs-string">&quot;Build.ID&quot;</span>, Build.ID);<br><span class="hljs-comment">// ....</span><br>mInfoReAdapter.addOrUpdate(<span class="hljs-string">&quot;Build.USER             &quot;</span>, <span class="hljs-string">&quot;Build.USER&quot;</span>, Build.USER);<br>mInfoReAdapter.notifyDataSetChanged();<br></code></pre></td></tr></table></figure><h2 id="屏幕信息"><a href="#屏幕信息" class="headerlink" title="屏幕信息"></a>屏幕信息</h2><p>获取屏幕宽高。获取屏幕宽高的方法大约有3种，这里直接用view.post(runnable)的方式来获取实际宽高。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">View</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> findViewById(R.id.container);<br>root.post(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">wid</span> <span class="hljs-operator">=</span> root.getWidth();<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">height</span> <span class="hljs-operator">=</span> root.getHeight();<br>        Log.d(TAG, <span class="hljs-string">&quot;phone screen size [&quot;</span> + wid + <span class="hljs-string">&quot;, &quot;</span> + height + <span class="hljs-string">&quot;]&quot;</span>);<br>        mDashPagerAdapter.setPhoneScreenSize(wid, height);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>把像素转换成dp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">float</span> <span class="hljs-title function_">pxToDp</span><span class="hljs-params">(<span class="hljs-type">int</span> px)</span> &#123;<br>    <span class="hljs-keyword">return</span> (px / Resources.getSystem().getDisplayMetrics().density);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="存储路径信息"><a href="#存储路径信息" class="headerlink" title="存储路径信息"></a>存储路径信息</h2><p>比如获取到外部存储的路径等等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">mInfoReAdapter.addOrUpdateUpDown(<span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;Environment.getRootDirectory().getAbsolutePath()&quot;</span>,<br>        Environment.getRootDirectory().getAbsolutePath());<br></code></pre></td></tr></table></figure><h2 id="Uri类信息"><a href="#Uri类信息" class="headerlink" title="Uri类信息"></a>Uri类信息</h2><p>展示Uri类的一些信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Uri</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> Uri.fromFile(getActivity().getApplicationContext().getFilesDir());<br></code></pre></td></tr></table></figure><h2 id="crash-java-lang-ClassNotFoundException"><a href="#crash-java-lang-ClassNotFoundException" class="headerlink" title="crash java.lang.ClassNotFoundException"></a>crash java.lang.ClassNotFoundException</h2><p>Google play console 收集到的crash信息。崩溃机型是华为和三星。</p><p>Galaxy A40 (a40)， Note9 (crownlte)， A70 (a70q)， Note8 (greatlte)；Mate 10 Pro (HWBLA)</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs stylus">java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.RuntimeException</span>: <br>  at android<span class="hljs-selector-class">.app</span><span class="hljs-selector-class">.ActivityThread</span><span class="hljs-selector-class">.handleReceiver</span> (ActivityThread<span class="hljs-selector-class">.java</span>:<span class="hljs-number">3586</span>)<br>  at android<span class="hljs-selector-class">.app</span><span class="hljs-selector-class">.ActivityThread</span>.access$<span class="hljs-number">1300</span> (ActivityThread<span class="hljs-selector-class">.java</span>:<span class="hljs-number">240</span>)<br>  at android<span class="hljs-selector-class">.app</span>.ActivityThread<span class="hljs-variable">$H</span><span class="hljs-selector-class">.handleMessage</span> (ActivityThread<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1808</span>)<br>  at android<span class="hljs-selector-class">.os</span><span class="hljs-selector-class">.Handler</span><span class="hljs-selector-class">.dispatchMessage</span> (Handler<span class="hljs-selector-class">.java</span>:<span class="hljs-number">106</span>)<br>  at android<span class="hljs-selector-class">.os</span><span class="hljs-selector-class">.Looper</span><span class="hljs-selector-class">.loop</span> (Looper<span class="hljs-selector-class">.java</span>:<span class="hljs-number">214</span>)<br>  at android<span class="hljs-selector-class">.app</span><span class="hljs-selector-class">.ActivityThread</span><span class="hljs-selector-class">.main</span> (ActivityThread<span class="hljs-selector-class">.java</span>:<span class="hljs-number">7094</span>)<br>  at java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.Method</span><span class="hljs-selector-class">.invoke</span> (Native Method)<br>  at com<span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.os</span>.RuntimeInit<span class="hljs-variable">$MethodAndArgsCaller</span><span class="hljs-selector-class">.run</span> (RuntimeInit<span class="hljs-selector-class">.java</span>:<span class="hljs-number">494</span>)<br>  at com<span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.os</span><span class="hljs-selector-class">.ZygoteInit</span><span class="hljs-selector-class">.main</span> (ZygoteInit<span class="hljs-selector-class">.java</span>:<span class="hljs-number">975</span>)<br>Caused by: java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.ClassNotFoundException</span>: <br>  at dalvik<span class="hljs-selector-class">.system</span><span class="hljs-selector-class">.BaseDexClassLoader</span><span class="hljs-selector-class">.findClass</span> (BaseDexClassLoader<span class="hljs-selector-class">.java</span>:<span class="hljs-number">134</span>)<br>  at java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.ClassLoader</span><span class="hljs-selector-class">.loadClass</span> (ClassLoader<span class="hljs-selector-class">.java</span>:<span class="hljs-number">379</span>)<br>  at java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.ClassLoader</span><span class="hljs-selector-class">.loadClass</span> (ClassLoader<span class="hljs-selector-class">.java</span>:<span class="hljs-number">312</span>)<br>  at android<span class="hljs-selector-class">.app</span><span class="hljs-selector-class">.AppComponentFactory</span><span class="hljs-selector-class">.instantiateReceiver</span> (AppComponentFactory<span class="hljs-selector-class">.java</span>:<span class="hljs-number">84</span>)<br>  at androidx<span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.app</span><span class="hljs-selector-class">.CoreComponentFactory</span><span class="hljs-selector-class">.instantiateReceiver</span> (CoreComponentFactory<span class="hljs-selector-class">.java</span>:<span class="hljs-number">56</span>)<br>  at android<span class="hljs-selector-class">.app</span><span class="hljs-selector-class">.ActivityThread</span><span class="hljs-selector-class">.handleReceiver</span> (ActivityThread<span class="hljs-selector-class">.java</span>:<span class="hljs-number">3579</span>)<br></code></pre></td></tr></table></figure><p>根据<code>ActivityThread.handleReceiver</code>猜测，有一个广播接收器示例化失败了。<br>应用里只有一个动态注册的广播接收器。应该是注册失败了。手头上没有三星和华为。暂时没法重现。</p><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ul><li>[1.1.4] 2020-1-7<ul><li>使用新的UI样式</li></ul></li><li>[1.1.1] 2019-11-10<ul><li>修改电池广播接收器的信息类型</li></ul></li><li>[1.0.9] 2019-9-14<ul><li>修改ui</li></ul></li><li>[1.0.8] 2019-9-13<ul><li>增加了Uri类的信息</li></ul></li><li>[1.0.6] 2019-9-4<ul><li>增加了Environment类的信息</li><li>修复了定位权限对Wi-Fi信息界面的影响</li></ul></li><li>2019-8-17<ul><li>增加了屏幕尺寸信息</li><li>采用ViewPager + TabLayout显示多个页面</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Android_note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「SD编辑」开发记录</title>
    <link href="/Dev-note/dev-note-app-SDEdit/"/>
    <url>/Dev-note/dev-note-app-SDEdit/</url>
    
    <content type="html"><![CDATA[<p>SD - Slam Dump（并不是）</p><p>这个App的主要目的是满足广大人民群众对图片编辑的需求。</p><h2 id="字体问题"><a href="#字体问题" class="headerlink" title="字体问题"></a>字体问题</h2><p>Android默认的字体不太好看，也不一定能很好地匹配背景图。如果内置字体，遇到最大的问题是版权问题。<br>因此决定增加用户自行导入字体的功能，由用户来决定使用什么字体。</p><p>原来的字体文件是放在asset中。<code>Typeface.createFromAsset</code>直接引入并使用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Typeface</span> <span class="hljs-variable">tf</span> <span class="hljs-operator">=</span> Typeface.createFromAsset(mgr, <span class="hljs-string">&quot;fonts/fz_grid.ttf&quot;</span>);<br>mContentTv.setTypeface(tf);<br></code></pre></td></tr></table></figure></p><p>设计一个字体管理界面。用户自行选择将字体文件复制到App内部存储路径。<br>使用字体时，再用<code>Typeface.createFromFile()</code>获取Typeface。</p><h2 id="选择文件"><a href="#选择文件" class="headerlink" title="选择文件"></a>选择文件</h2><p>调用系统文件选择器<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">REQ_CODE_CHOOSE_FILE</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br>    <span class="hljs-comment">// 启动选择文件...</span><br>    <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(Intent.ACTION_GET_CONTENT);<br>    intent.setType(<span class="hljs-string">&quot;*/*&quot;</span>);<br>    startActivityForResult(intent, REQ_CODE_CHOOSE_FILE);<br>    <span class="hljs-comment">// ......</span><br><br>    <span class="hljs-comment">// 处理选择的文件</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onActivityResult</span><span class="hljs-params">(<span class="hljs-type">int</span> requestCode, <span class="hljs-type">int</span> resultCode, <span class="hljs-meta">@Nullable</span> Intent data)</span> &#123;<br>        <span class="hljs-keyword">switch</span> (requestCode) &#123;<br>            <span class="hljs-keyword">case</span> REQ_CODE_CHOOSE_FILE:<br>                <span class="hljs-keyword">if</span> (data != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-type">Uri</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> data.getData();<br>                    Log.d(TAG, <span class="hljs-string">&quot;onActivityResult: uri: &quot;</span> + uri);<br>                    <span class="hljs-keyword">if</span> (uri != <span class="hljs-literal">null</span> &amp;&amp; !TextUtils.isEmpty(uri.getPath())) &#123;<br>                        copyFile(uri);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        Log.e(TAG, <span class="hljs-string">&quot;onActivityResult: 选择的文件无效&quot;</span>);<br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    showShort(getApplicationContext(), <span class="hljs-string">&quot;没选中文件&quot;</span>);<br>                    Log.e(TAG, <span class="hljs-string">&quot;onActivityResult: data is NULL 没选中文件&quot;</span>);<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-built_in">super</span>.onActivityResult(requestCode, resultCode, data);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br></code></pre></td></tr></table></figure></p><h2 id="处理uri"><a href="#处理uri" class="headerlink" title="处理uri"></a>处理uri</h2><p>uri形如 </p><p>content://com.android.externalstorage.documents/document/primary%3ADownload%2Ffz_grid.ttf</p><p>uri.getPath获取到的并不是文件的绝对路径。但我们可以利用ContentResolver来获取到InputStream。<br>也可以获取到uri的文件名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">copyFile</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Uri uri)</span> &#123;<br>    mAddIv.setClickable(<span class="hljs-literal">false</span>);<br>    <span class="hljs-type">Animation</span> <span class="hljs-variable">rotate</span> <span class="hljs-operator">=</span> AnimationUtils.loadAnimation(getApplicationContext(), R.anim.rotate_scan);<br>    rotate.setDuration(<span class="hljs-number">400</span>);<br>    mAddIv.startAnimation(rotate);<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">Cursor</span> <span class="hljs-variable">cursor</span> <span class="hljs-operator">=</span> getContentResolver().query(uri, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>                <span class="hljs-type">int</span> <span class="hljs-variable">nameIndex</span> <span class="hljs-operator">=</span> cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);<br>                cursor.moveToFirst();<br>                <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> cursor.getString(nameIndex);<br>                cursor.close();<br>                <span class="hljs-type">InputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> getContentResolver().openInputStream(uri);<br>                <span class="hljs-type">File</span> <span class="hljs-variable">outputFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(TypefaceStore.getStorePath(getApplicationContext()), name);<br>                <span class="hljs-keyword">if</span> (outputFile.exists()) &#123;<br>                    <span class="hljs-type">boolean</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> outputFile.delete();<br>                    Log.d(TAG, <span class="hljs-string">&quot;删除旧文件: &quot;</span> + d);<br>                &#125;<br>                <span class="hljs-type">boolean</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> outputFile.createNewFile();<br>                Log.d(TAG, <span class="hljs-string">&quot;copyFile: 新建文件 &quot;</span> + n);<br>                <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(outputFile);<br>                <span class="hljs-type">byte</span>[] tmp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">2048</span>];<br>                <span class="hljs-type">int</span> i;<br>                <span class="hljs-keyword">while</span> ((i = fis.read(tmp)) != -<span class="hljs-number">1</span>) &#123;<br>                    fos.write(tmp, <span class="hljs-number">0</span>, i);<br>                &#125;<br>                fos.flush();<br>                fos.close();<br>                fis.close();<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                Log.e(TAG, <span class="hljs-string">&quot;copyFile ERROR:&quot;</span>, e);<br>                <br>            &#125;<br>            <br>        &#125;<br>    &#125;).start();<br><br>&#125;<br></code></pre></td></tr></table></figure><p>也可以简单地使用uri.getLastPathSegment来获取文件名<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">uri.getLastPathSegment();<br>String[] t = uriPath.split(File.separator);<br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> t[t.length - <span class="hljs-number">1</span>];<br></code></pre></td></tr></table></figure></p><p><a href="https://stackoverflow.com/questions/4263002/how-to-get-file-name-from-uri">https://stackoverflow.com/questions/4263002/how-to-get-file-name-from-uri</a></p><h2 id="Toolbar问题"><a href="#Toolbar问题" class="headerlink" title="Toolbar问题"></a>Toolbar问题</h2><p>使用toolbar时经常会遇到问题。例如<a href="https://stackoverflow.com/questions/26486730/in-android-app-toolbar-settitle-method-has-no-effect-application-name-is-shown">设置title的问题</a>。</p><p>这里自己创建一个统一的标题栏TitleBar。想要什么控件自己添加。</p><h2 id="Google-MobileAds"><a href="#Google-MobileAds" class="headerlink" title="Google MobileAds"></a>Google MobileAds</h2><p><code>MobileAds.initialize(getApplicationContext(), AdsMgr.GOOGLE_ADS_APP_ID);</code>的执行会占用很多时间。测试过程中发现小米手机甚至使用了3秒钟来执行这个方法。</p><p><a href="https://stackoverflow.com/questions/37418663/what-is-the-proper-way-to-call-mobileads-initialize">https://stackoverflow.com/questions/37418663/what-is-the-proper-way-to-call-mobileads-initialize</a></p><p>给启动页Activity一个纯色的启动背景。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;AppTheme.NoActionBar&quot;</span>&gt;</span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;windowActionBar&quot;</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;windowNoTitle&quot;</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;android:windowBackground&quot;</span>&gt;</span>@color/colorPrimary<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><br><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure></p><p>启动页中初始化Ads时实在是耗时太长，干脆放到子线程中去操作。<br>虽然<a href="https://developers.google.com/admob/android/quick-start">官方文档</a>建议的是越早初始化越好。但也不希望太影响用户体验。</p><h2 id="递归查看某个路径下的文件"><a href="#递归查看某个路径下的文件" class="headerlink" title="递归查看某个路径下的文件"></a>递归查看某个路径下的文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">treeDir</span><span class="hljs-params">(File dir, <span class="hljs-type">int</span> level)</span> &#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; level; i++) &#123;<br>            sb.append(<span class="hljs-string">&quot;-&quot;</span>);<br>        &#125;<br>        sb.append(<span class="hljs-string">&quot; &quot;</span>);<br>        <span class="hljs-keyword">if</span> (dir.isDirectory()) &#123;<br><span class="hljs-comment">//            LL.d(TAG, sb.toString() + dir.getName());</span><br>            level++;<br>            <span class="hljs-keyword">for</span> (File f : dir.listFiles()) &#123;<br>                treeDir(f, level);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">//            LL.d(TAG, sb.toString() + dir.getName());</span><br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="提供草稿功能"><a href="#提供草稿功能" class="headerlink" title="提供草稿功能"></a>提供草稿功能</h2><p>为方便用户使用，提供草稿功能。这就涉及到增删查改的操作。</p><p>[2019-7-31] 本来想直接用sqlite，但为了开发方便，选用了<a href="http://greenrobot.org/greendao/">greenDAO</a>。</p><p><a href="https://github.com/greenrobot/greenDAO">https://github.com/greenrobot/greenDAO</a></p><p>使用2个表，分别为Draft（存档）和DraftContent（图层）。DraftContent中存放着关联的存档ID。</p><p>能保存的东西都保存下来。</p><h3 id="greendao插入元素"><a href="#greendao插入元素" class="headerlink" title="greendao插入元素"></a>greendao插入元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Draft</span> <span class="hljs-variable">draft1</span> <span class="hljs-operator">=</span> genDraft(<span class="hljs-string">&quot;示例1&quot;</span>, p1Path);<br><span class="hljs-type">Draft</span> <span class="hljs-variable">draft2</span> <span class="hljs-operator">=</span> genDraft(<span class="hljs-string">&quot;示例2&quot;</span>, p2Path);<br><span class="hljs-type">Draft</span> <span class="hljs-variable">draft3</span> <span class="hljs-operator">=</span> genDraft(<span class="hljs-string">&quot;示例3&quot;</span>, p3Path);<br>Log.d(TAG, <span class="hljs-string">&quot;addDemoDraft: id: &quot;</span> + draft1.getDraftId() + <span class="hljs-string">&quot;,&quot;</span> + draft3.getDraftId());<br>daoSession.insert(draft1);<br>daoSession.insert(draft2);<br>daoSession.insert(draft3);<br></code></pre></td></tr></table></figure><p>插入元素后就有id了。</p><h3 id="greendao删除元素"><a href="#greendao删除元素" class="headerlink" title="greendao删除元素"></a>greendao删除元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">DraftDao</span> <span class="hljs-variable">draftDao</span> <span class="hljs-operator">=</span> daoSession.getDraftDao();<br><span class="hljs-type">DraftContentDao</span> <span class="hljs-variable">draftContentDao</span> <span class="hljs-operator">=</span> daoSession.getDraftContentDao();<br><span class="hljs-keyword">for</span> (Draft d : drafts) &#123;<br>    Log.d(TAG, <span class="hljs-string">&quot;删除 &quot;</span> + d.getName());<br>    draftDao.queryBuilder()<br>            .where(DraftDao.Properties.DraftId.eq(d.getDraftId())).buildDelete()<br>            .executeDeleteWithoutDetachingEntities();<br>    draftContentDao.queryBuilder()<br>            .where(DraftContentDao.Properties.RelativeDraftId.eq(d.getDraftId())).buildDelete()<br>            .executeDeleteWithoutDetachingEntities();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用DrawerLayout"><a href="#使用DrawerLayout" class="headerlink" title="使用DrawerLayout"></a>使用DrawerLayout</h2><p>报错： <code>IllegalArgumentException: No drawer view found with gravity LEFT</code></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.IllegalArgumentException</span>: No drawer view found with gravity LEFT<br>    at androidx<span class="hljs-selector-class">.drawerlayout</span><span class="hljs-selector-class">.widget</span><span class="hljs-selector-class">.DrawerLayout</span><span class="hljs-selector-class">.openDrawer</span>(DrawerLayout<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1736</span>)<br>    at androidx<span class="hljs-selector-class">.drawerlayout</span><span class="hljs-selector-class">.widget</span><span class="hljs-selector-class">.DrawerLayout</span><span class="hljs-selector-class">.openDrawer</span>(DrawerLayout<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1722</span>)<br></code></pre></td></tr></table></figure><p>忘记中xml中加上开抽屉方向了 tools:openDrawer=”start”<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">androidx.drawerlayout.widget.DrawerLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/main_page_root&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;vertical&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">tools:context</span>=<span class="hljs-string">&quot;.act.MainActivity&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">tools:openDrawer</span>=<span class="hljs-string">&quot;start&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure></p><p>抽屉加上方向 android:layout_gravity=”start”<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 抽屉 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_gravity</span>=<span class="hljs-string">&quot;start&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_marginEnd</span>=<span class="hljs-string">&quot;100dp&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;vertical&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure></p><h2 id="美术设计，App交互设计"><a href="#美术设计，App交互设计" class="headerlink" title="美术设计，App交互设计"></a>美术设计，App交互设计</h2><p>设计是一个比较令我头疼的问题。在这个看脸的时代，App一定要好看！对我而言，直接采用material design的风格会比较省事。<br>经过调整和对比，我选择使用暗色的风格。因为现在主流的图形编辑软件，颜色风格以暗色居多。</p><p>参考：</p><ul><li>看颜色示例 <a href="https://material.io/design/color/applying-color-to-ui.html#sheets-surfaces">https://material.io/design/color/applying-color-to-ui.html#sheets-surfaces</a></li><li>查颜色 <a href="https://material-ui.com/customization/color/">https://material-ui.com/customization/color/</a></li></ul><h2 id="文字编辑"><a href="#文字编辑" class="headerlink" title="文字编辑"></a>文字编辑</h2><p>文字内容，大小，旋转方向，颜色都可以调整。</p><p>需要一个调色盘来调整颜色。找个第三方的，好看能用即可。</p><h2 id="删除存档报错"><a href="#删除存档报错" class="headerlink" title="删除存档报错"></a>删除存档报错</h2><p>list类的经典异常 ConcurrentModificationException。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.ConcurrentModificationException</span><br>    at java<span class="hljs-selector-class">.util</span>.ArrayList<span class="hljs-variable">$Itr</span><span class="hljs-selector-class">.next</span>(ArrayList<span class="hljs-selector-class">.java</span>:<span class="hljs-number">860</span>)<br></code></pre></td></tr></table></figure><p>list删除元素时报错。这样写是不行的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (Data d : dataList) &#123;<br>    <span class="hljs-keyword">if</span> (d.selected) &#123;<br>        dataList.remove(d);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>用迭代器来删除元素。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Iterator&lt;Data&gt; iterator = dataList.iterator();<br><span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>    <span class="hljs-type">Data</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> iterator.next();<br>    <span class="hljs-keyword">if</span> (data.selected) &#123;<br>        iterator.remove();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h2 id="输出图片"><a href="#输出图片" class="headerlink" title="输出图片"></a>输出图片</h2><h3 id="保存View的显示内容"><a href="#保存View的显示内容" class="headerlink" title="保存View的显示内容"></a>保存View的显示内容</h3><p>获取一个view的bitmap，然后保存到文件去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取一个 View 的缓存视图</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> Bitmap <span class="hljs-title function_">getCacheBitmapFromView</span><span class="hljs-params">(View view)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">drawingCacheEnabled</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>    view.setDrawingCacheEnabled(drawingCacheEnabled);<br>    view.buildDrawingCache(drawingCacheEnabled);<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Bitmap</span> <span class="hljs-variable">drawingCache</span> <span class="hljs-operator">=</span> view.getDrawingCache();<br>    Bitmap bitmap;<br>    <span class="hljs-keyword">if</span> (drawingCache != <span class="hljs-literal">null</span>) &#123;<br>        bitmap = Bitmap.createBitmap(drawingCache);<br>        view.setDrawingCacheEnabled(<span class="hljs-literal">false</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        bitmap = <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> bitmap;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">saveBitmapFile</span><span class="hljs-params">(Bitmap bitmap, String fileAbsPath)</span> &#123;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(fileAbsPath); <span class="hljs-comment">// 将要保存图片的路径</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">if</span> (file.exists()) &#123;<br>            file.delete();<br>        &#125;<br>        <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(file));<br>        bitmap.compress(Bitmap.CompressFormat.JPEG, <span class="hljs-number">100</span>, bos);<br>        bos.flush();<br>        bos.close();<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="保存图片文件后的处理"><a href="#保存图片文件后的处理" class="headerlink" title="保存图片文件后的处理"></a>保存图片文件后的处理</h3><p>用户输出图片文件后，打开微信想发送这张图片。但是用户发现微信的快捷发送功能找不到这张图片。<br>怎么才能让微信知道这里新增了一张图片呢？</p><p>如果要发送广播<code>ACTION_MEDIA_MOUNTED</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">sendBroadcast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(Intent.ACTION_MEDIA_MOUNTED, Uri.fromFile(outputFile)));<br></code></pre></td></tr></table></figure><p>报错，没有足够的权限</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.SecurityException</span>: Permission Denial: not allowed to send broadcast android<span class="hljs-selector-class">.intent</span><span class="hljs-selector-class">.action</span>.MEDIA_MOUNTED<br></code></pre></td></tr></table></figure><p>Android KK开始，这个广播开始只能由系统发出。KK及之后的版本需使用<code>Intent.ACTION_MEDIA_SCANNER_SCAN_FILE</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">File</span> <span class="hljs-variable">outputFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath);<br>sendBroadcast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE, Uri.fromFile(outputFile)));<br></code></pre></td></tr></table></figure><p>参考</p><p><a href="https://stackoverflow.com/questions/24072489/java-lang-securityexception-permission-denial-not-allowed-to-send-broadcast-an">https://stackoverflow.com/questions/24072489/java-lang-securityexception-permission-denial-not-allowed-to-send-broadcast-an</a></p><h2 id="移动TextView"><a href="#移动TextView" class="headerlink" title="移动TextView"></a>移动TextView</h2><p>编辑页中有一个需求是手指拖动文字。</p><h3 id="1-1-x版本"><a href="#1-1-x版本" class="headerlink" title="1.1.x版本"></a>1.1.x版本</h3><p>1.1.0版本的做法是，在Activity的onTouch方法里来改变TextView的坐标。从而实现TextView的拖动效果。<br>父View和子View设同一个OnTouchListener。但是只有父view来处理触摸事件。<br>如果是子view接收到了触摸事件，则做一个bool标记firstOnTv = true，返回false，把触摸事件交给父view来处理。<br>父view处理触摸事件时，判断如果刚才点中的是子view（即mContentTv），则在MotionEvent.ACTION_MOVE时更改子view的坐标。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">private</span> View.<span class="hljs-type">OnTouchListener</span> <span class="hljs-variable">mWsOnTouchListener</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">View</span>.OnTouchListener() &#123;<br><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">firstOnTv</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// 最开始点中的是tv</span><br>        <span class="hljs-type">float</span> originTvX;           <span class="hljs-comment">// tv最开始的坐标</span><br>        <span class="hljs-type">float</span> originTvY;<br><br>        <span class="hljs-type">float</span> downX;<br>        <span class="hljs-type">float</span> downY;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onTouch</span><span class="hljs-params">(View v, MotionEvent event)</span> &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> v.getId();<br><span class="hljs-comment">//            Log.d(TAG, &quot;onTouch: touch tv: &quot; + (id == mContentTv.getId()) + &quot;, touch ws: &quot; + (id == mWorkspaceField.getId()));</span><br>            <span class="hljs-type">float</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> event.getX();<br>            <span class="hljs-type">float</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> event.getY();<br><span class="hljs-comment">//            Log.d(TAG, &quot;onTouch: [&quot; + x + &quot;, &quot; + y + &quot;] , &quot; + event);</span><br>            <span class="hljs-keyword">if</span> (event.getAction() == MotionEvent.ACTION_DOWN) &#123;<br>                mSaveIv.setEnabled(<span class="hljs-literal">true</span>);<br>                <span class="hljs-keyword">if</span> (id == mContentTv.getId()) &#123;<br>                    firstOnTv = <span class="hljs-literal">true</span>;<br>                    originTvX = mContentTv.getX();<br>                    originTvY = mContentTv.getY();<br><span class="hljs-comment">//                    Log.d(TAG, &quot;onTouch: 保存tv坐标 (&quot; + originTvX + &quot;, &quot; + originTvY + &quot;)&quot;);</span><br>                &#125;<br>                downX = event.getX();<br>                downY = event.getY();<br><span class="hljs-comment">//                Log.d(TAG, &quot;onTouch: down: x,y [&quot; + x + &quot;, &quot; + y + &quot;]&quot;);</span><br>                <span class="hljs-keyword">return</span> id != mContentTv.getId();<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (event.getAction() == MotionEvent.ACTION_MOVE) &#123;<br><span class="hljs-comment">//                Log.d(TAG, &quot;onTouch: move: x,y [&quot; + x + &quot;, &quot; + y + &quot;]&quot;);</span><br>                <span class="hljs-keyword">if</span> (!firstOnTv) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// 不移动tv，直接消耗掉这个操作</span><br>                &#125;<br>                <span class="hljs-type">float</span> <span class="hljs-variable">dx</span> <span class="hljs-operator">=</span> x - downX;<br>                <span class="hljs-type">float</span> <span class="hljs-variable">dy</span> <span class="hljs-operator">=</span> y - downY;<br>                <span class="hljs-keyword">if</span> (Math.abs(dx) &gt; <span class="hljs-number">2</span> &amp;&amp; Math.abs(dy) &gt; <span class="hljs-number">2</span>) &#123;<br>                    mContentTv.setX(originTvX + dx);<br>                    mContentTv.setY(originTvY + dy);<br>                &#125;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (event.getAction() == MotionEvent.ACTION_UP) &#123;<br>                firstOnTv = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">if</span> (mCanvasWid &gt; <span class="hljs-number">0</span> &amp;&amp; mCanvasHeight &gt; <span class="hljs-number">0</span>) &#123;<br>                    mDraftContent.setTvLocationXRatio(mContentTv.getX() / mCanvasWid);<br>                    mDraftContent.setTvLocationYRatio(mContentTv.getY() / mCanvasHeight);<br>                &#125;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;;<br><br></code></pre></td></tr></table></figure><h2 id="版本更新"><a href="#版本更新" class="headerlink" title="版本更新"></a>版本更新</h2><ul><li>2019-8-8 v1.1.1 版本更新<ul><li>解决了一些bug</li><li>UI调整，增加了抽屉的头图和欢迎文字</li></ul></li><li>2019-8-4 v1.1.0 版本更新</li></ul>]]></content>
    
    
    <categories>
      
      <category>Android_note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web tools 开发记录</title>
    <link href="/Dev-note/dev-note-web-tools/"/>
    <url>/Dev-note/dev-note-web-tools/</url>
    
    <content type="html"><![CDATA[<p><a href="http://tools.rustfisher.com/">http://tools.rustfisher.com/</a></p><p>平时开发中我们会用到一些工具，比如时间戳工具，查询ascii码，查询颜色色值等等。<br>做一些静态网页，把这些开发者，美术常用的功能集合起来，便于大家的工作和学习。</p><h2 id="时间戳工具"><a href="#时间戳工具" class="headerlink" title="时间戳工具"></a>时间戳工具</h2><p><a href="http://tools.rustfisher.com/timestamp-tool.html">http://tools.rustfisher.com/timestamp-tool.html</a></p><p>使用了bootstrap。颜色风格类似material design。</p><p>父div定义<code>position: relative;</code>，子元素可以指定位置<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">position</span>: absolute;<br><span class="hljs-attribute">bottom</span>: <span class="hljs-number">10px</span>;<br><span class="hljs-attribute">right</span>: <span class="hljs-number">10px</span>;<br></code></pre></td></tr></table></figure></p><h2 id="时钟网页-用于kindle"><a href="#时钟网页-用于kindle" class="headerlink" title="时钟网页 - 用于kindle"></a>时钟网页 - 用于kindle</h2><p><a href="https://tools.rustfisher.com/clock-k1.html">https://tools.rustfisher.com/clock-k1.html</a></p><p>结合kindle的特点，做一个时钟页面。颜色风格以黑白为主。<br>目前的kindle没有重力传感器，考虑添加功能，用户可以让网页旋转90度。</p><p>需要将元素居中显示。<br>这里采用的方法是flex布局。父元素设置display: flex。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.parentMain</span>&#123;<br><span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br><span class="hljs-attribute">display</span>: flex;<br><span class="hljs-attribute">justify-content</span>: center;<br><span class="hljs-attribute">align-items</span>: center;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>子元素的设置<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;main&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;parentMain&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;content&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:inline-block; margin: auto; align-content: center;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure></p><p>配合动态调整div大小<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">autoResizeDiv</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;main&#x27;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">height</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span> +<span class="hljs-string">&#x27;px&#x27;</span>;<br>&#125;<br><span class="hljs-variable language_">window</span>.<span class="hljs-property">onresize</span> = autoResizeDiv;<br><span class="hljs-title function_">autoResizeDiv</span>();<br></code></pre></td></tr></table></figure></p><p>设置<code>display:inline-block;text-align: center;</code>后，可以子元素水平居中显示。</p><h3 id="旋转div"><a href="#旋转div" class="headerlink" title="旋转div"></a>旋转div</h3><p>点击按钮，把某个div顺时针旋转90度。这里是想把时间显示区块旋转90度。<br>js控制css的属性，旋转div</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">timeFieldRotateDeg = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">rotateTimeFieldRight</span>(<span class="hljs-params"></span>) &#123;<br>timeFieldRotateDeg += <span class="hljs-number">90</span>;<br><span class="hljs-keyword">if</span>(timeFieldRotateDeg == <span class="hljs-number">360</span>) &#123;<br>timeFieldRotateDeg = <span class="hljs-number">0</span>;<br>&#125;<br>timeContentField = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;timeContentField&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;rotate time content field&#x27;</span>);<br>timeContentField.<span class="hljs-property">style</span>.<span class="hljs-property">webkitTransform</span> = <span class="hljs-string">&#x27;rotate(&#x27;</span>+timeFieldRotateDeg+<span class="hljs-string">&#x27;deg)&#x27;</span>; <br>timeContentField.<span class="hljs-property">style</span>.<span class="hljs-property">mozTransform</span>    = <span class="hljs-string">&#x27;rotate(&#x27;</span>+timeFieldRotateDeg+<span class="hljs-string">&#x27;deg)&#x27;</span>; <br>timeContentField.<span class="hljs-property">style</span>.<span class="hljs-property">msTransform</span>     = <span class="hljs-string">&#x27;rotate(&#x27;</span>+timeFieldRotateDeg+<span class="hljs-string">&#x27;deg)&#x27;</span>; <br>timeContentField.<span class="hljs-property">style</span>.<span class="hljs-property">oTransform</span>      = <span class="hljs-string">&#x27;rotate(&#x27;</span>+timeFieldRotateDeg+<span class="hljs-string">&#x27;deg)&#x27;</span>; <br>timeContentField.<span class="hljs-property">style</span>.<span class="hljs-property">transform</span>       = <span class="hljs-string">&#x27;rotate(&#x27;</span>+timeFieldRotateDeg+<span class="hljs-string">&#x27;deg)&#x27;</span>; <br>&#125;<br></code></pre></td></tr></table></figure><p>参考</p><ul><li><a href="https://stackoverflow.com/questions/19126432/rotate-a-div-using-javascript">https://stackoverflow.com/questions/19126432/rotate-a-div-using-javascript</a></li><li><a href="https://stackoverflow.com/questions/14233341/how-can-i-rotate-an-html-div-90-degrees">https://stackoverflow.com/questions/14233341/how-can-i-rotate-an-html-div-90-degrees</a></li></ul><h3 id="kindle适配问题"><a href="#kindle适配问题" class="headerlink" title="kindle适配问题"></a>kindle适配问题</h3><p>bootstrap似乎并不能在kindle的浏览器上很好的工作。<br>不采用动态计算屏幕宽高的方式。居中元素。</p><p><a href="https://tools.rustfisher.com/clock-k2.html">https://tools.rustfisher.com/clock-k2.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Web_note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android OkHttp + Retrofit 取消请求的方法</title>
    <link href="/Android/Android-OkHttp_Retrofit_cancel_request/"/>
    <url>/Android/Android-OkHttp_Retrofit_cancel_request/</url>
    
    <content type="html"><![CDATA[<p><a href="https://rustfisher.com/2019/06/26/Android/Android-OkHttp_Retrofit_cancel_request/">本文链接</a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在某一个界面，用户发起了一个网络请求，因为某种原因用户在网络请求完成前离开了当前界面，比较好的做法是取消这个网络请求。对于OkHttp来说，具体是调用<code>Call</code>的<code>cancel</code>方法。</p><p>如何找到这一个网络请求并取消掉它呢？</p><p>操作大致分为3步。第一步，在建立请求时，给请求（request）添加标记；第二步，根据标记，找到请求；最后，取消这个请求。</p><h1 id="OkHttp中的tag"><a href="#OkHttp中的tag" class="headerlink" title="OkHttp中的tag"></a>OkHttp中的tag</h1><p>要取消一个请求，OkHttp中可以使用cancel方法，<a href="https://www.jianshu.com/p/b74466039b84">参考</a>。</p><p>OkHttp的request对象有tag。可以根据tag来标示请求。<a href="https://stackoverflow.com/questions/46477195/how-to-cancel-the-request-using-okhttp">参考Stack Overflow</a>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Set tags for your requests when you build them:</span><br><span class="hljs-type">Request</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Request</span>.Builder().<br>url(url).tag(<span class="hljs-string">&quot;requestKey&quot;</span>).build();<br><br><span class="hljs-comment">//When you want to cancel:</span><br><span class="hljs-comment">//A) go through the queued calls and cancel if the tag matches:</span><br><span class="hljs-keyword">for</span> (Call call : mHttpClient.dispatcher().queuedCalls()) &#123;<br>    <span class="hljs-keyword">if</span> (call.request().tag().equals(<span class="hljs-string">&quot;requestKey&quot;</span>))<br>        call.cancel();<br>&#125;<br><br><span class="hljs-comment">//B) go through the running calls and cancel if the tag matches:</span><br><span class="hljs-keyword">for</span> (Call call : mHttpClient.dispatcher().runningCalls()) &#123;<br>    <span class="hljs-keyword">if</span> (call.request().tag().equals(<span class="hljs-string">&quot;requestKey&quot;</span>))<br>        call.cancel();<br>&#125;<br><br></code></pre></td></tr></table></figure><p>Retrofit中并没有显示地提供取消请求的接口。<a href="https://github.com/square/retrofit/issues/2608">2018年时Retrofit仍未提供直接访问call对象的方法</a><br>那么如何找到目标网络请求呢？</p><h1 id="Retrofit加入自定义header"><a href="#Retrofit加入自定义header" class="headerlink" title="Retrofit加入自定义header"></a>Retrofit加入自定义header</h1><p>给每个与页面（Activity，Fragment）相关的request加入自定义header，<a href="https://publicobject.com/2016/01/17/sneaking-data-into-an-okhttp-interceptor/">参考</a>。<br>给OkHttpClient添加拦截器。标记出页面的生存状态。如果页面销毁了，则取消对应的request。</p><p>以GithubOnAndroid项目为例，<a href="https://github.com/RustFisher/GithubOnAndroid">https://github.com/RustFisher/GithubOnAndroid</a></p><h2 id="添加标记"><a href="#添加标记" class="headerlink" title="添加标记"></a>添加标记</h2><p>持有一个ConcurrentHashMap&lt;String, Boolean&gt;来标记页面存活状态。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ConcurrentHashMap&lt;String, Boolean&gt; actLiveMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;(); <span class="hljs-comment">// 标记Activity是否存活</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">markPageAlive</span><span class="hljs-params">(String actName)</span> &#123;<br>    actLiveMap.put(actName, <span class="hljs-literal">true</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">markPageDestroy</span><span class="hljs-params">(String actName)</span> &#123;<br>    actLiveMap.put(actName, <span class="hljs-literal">false</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Activity中登记界面状态"><a href="#Activity中登记界面状态" class="headerlink" title="Activity中登记界面状态"></a>Activity中登记界面状态</h2><p>给当前Activity起名字。每个Activity的标记名必须唯一。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">MY_ACT_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;xxx1Activity&quot;</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        NetworkCenter.markPageAlive(MY_ACT_NAME);<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onDestroy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onDestroy();<br>        NetworkCenter.markPageDestroy(MY_ACT_NAME);<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="OkHttpClient添加拦截器"><a href="#OkHttpClient添加拦截器" class="headerlink" title="OkHttpClient添加拦截器"></a>OkHttpClient添加拦截器</h2><p>给OkHttpClient添加拦截器，在拦截器中检查页面的存活情况。<br>检查后，把这个自定义header移除掉。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">HEADER_ACT_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Activity-Name&quot;</span>; <span class="hljs-comment">// 标记Activity界面名字</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Interceptor</span> <span class="hljs-variable">lifeInterceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Interceptor</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> Response <span class="hljs-title function_">intercept</span><span class="hljs-params">(Chain chain)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>            <span class="hljs-type">Request</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> chain.request();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">actName</span> <span class="hljs-operator">=</span> request.header(HEADER_ACT_NAME);<br>            <span class="hljs-keyword">if</span> (!TextUtils.isEmpty(actName)) &#123;<br>                Log.d(TAG, <span class="hljs-string">&quot;lifeInterceptor: actName: &quot;</span> + actName);<br>                <span class="hljs-type">Boolean</span> <span class="hljs-variable">actLive</span> <span class="hljs-operator">=</span> actLiveMap.get(actName);<br>                <span class="hljs-keyword">if</span> (actLive == <span class="hljs-literal">null</span> || !actLive) &#123;<br>                    chain.call().cancel();<br>                    Log.d(TAG, <span class="hljs-string">&quot;lifeInterceptor: 取消请求, actName: &quot;</span> + actName);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    Log.d(TAG, <span class="hljs-string">&quot;lifeInterceptor: 发起请求, actName: &quot;</span> + actName);<br>                &#125;<br>            &#125;<br>            <span class="hljs-type">Request</span> <span class="hljs-variable">newRequest</span> <span class="hljs-operator">=</span> request.newBuilder().removeHeader(HEADER_ACT_NAME).build();<br>            <span class="hljs-keyword">return</span> chain.proceed(newRequest);<br>        &#125;<br>    &#125;;<br><br><br>OkHttpClient = <span class="hljs-keyword">new</span> <span class="hljs-title class_">OkHttpClient</span>.Builder()<br>        .readTimeout(<span class="hljs-number">10</span>, TimeUnit.SECONDS)<br>        .connectTimeout(<span class="hljs-number">10</span>, TimeUnit.SECONDS)<br>        .addInterceptor(lifeInterceptor) <span class="hljs-comment">// 添加拦截器</span><br>        .build();<br></code></pre></td></tr></table></figure><p>call.cancel()后，不会再走Retrofit的subscribe方法。</p><h2 id="添加header"><a href="#添加header" class="headerlink" title="添加header"></a>添加header</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GET(&quot;users/&#123;owner&#125;/repos&quot;)</span><br>Observable&lt;List&lt;UserRepo&gt;&gt; <span class="hljs-title function_">userRepo</span><span class="hljs-params">(</span><br><span class="hljs-params">        <span class="hljs-meta">@Header(NetworkCenter.HEADER_ACT_NAME)</span> <span class="hljs-meta">@Nullable</span> String actName,</span><br><span class="hljs-params">        <span class="hljs-meta">@Path(&quot;owner&quot;)</span> String owner,</span><br><span class="hljs-params">        <span class="hljs-meta">@Query(&quot;sort&quot;)</span> String sortType)</span>;<br></code></pre></td></tr></table></figure><p>更多请参考：</p><p><a href="https://rustfisher.com/2018/08/22/Android/Android-OkHttp_Retrofit_use_intro/">Android OkHttp + Retrofit 使用示例</a></p><p><a href="https://rustfisher.com/2019/06/26/Android/Android-OkHttp_Retrofit_cancel_request/">Android OkHttp + Retrofit 取消请求的方法</a></p><p><a href="https://rustfisher.com/2019/10/18/Android/Android-OkHttp_Retrofit_download_file/">Android OkHttp + Retrofit 下载文件与进度监听</a></p><p><a href="https://rustfisher.com/2019/10/18/Android/Android-OkHttp_Retrofit_download_file_partial/">Android OkHttp + Retrofit 断点续传</a></p>]]></content>
    
    
    <categories>
      
      <category>Android_note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>network</tag>
      
      <tag>OkHttp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android SparseArray 原理解析</title>
    <link href="/Android/Android-SparseArray_src_code_note/"/>
    <url>/Android/Android-SparseArray_src_code_note/</url>
    
    <content type="html"><![CDATA[<h1 id="Android-SparseArray-原理解析"><a href="#Android-SparseArray-原理解析" class="headerlink" title="Android SparseArray 原理解析"></a>Android SparseArray 原理解析</h1><h2 id="什么是SparseArray？"><a href="#什么是SparseArray？" class="headerlink" title="什么是SparseArray？"></a>什么是SparseArray？</h2><p>SparseArray存储的是键值对，以int作为key，Object作为value。Sparse有稀疏、缺少的意思。SparseArray应用场景是相对稀少的数据，一般是几百以内。</p><h2 id="SparseArray采用的数据结构？"><a href="#SparseArray采用的数据结构？" class="headerlink" title="SparseArray采用的数据结构？"></a>SparseArray采用的数据结构？</h2><p>SparseArray并不像HashMap采用一维数组+单链表和二叉树结构，而是采用两个一维数组，一个是存储key(int类型),一个是存value object。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] mKeys; <span class="hljs-comment">// 存储key</span><br><span class="hljs-keyword">private</span> Object[] mValues; <span class="hljs-comment">// 存储value对象</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> mSize; <span class="hljs-comment">// 记录存储键值对的数量</span><br></code></pre></td></tr></table></figure><p>mKeys和mValues读写时采用的下标是一一对应的。<br><img src="http://rustblogres.rustfisher.com/Android-SparseArray-mKeys-mValues.pngg" alt=""></p><h2 id="SparseArray默认容量多大？"><a href="#SparseArray默认容量多大？" class="headerlink" title="SparseArray默认容量多大？"></a>SparseArray默认容量多大？</h2><p>SparseArray在默认构造函数中指定其默认容量大小。默认为10</p><p>初始化后<code>mSize = 0</code>，实例化mKeys和mValues。</p><h2 id="SparseArray-get方法的流程分析"><a href="#SparseArray-get方法的流程分析" class="headerlink" title="SparseArray get方法的流程分析"></a>SparseArray get方法的流程分析</h2><p>输入一个int型的key，通过二分法查找匹配的下标。若没找到对应的下标，则返回null或用户指定的默认对象。</p><p>key是递增存放的。二分法查找下标时，可能会返回一个负值，此时表示在mKeys中没找到对应的键。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> E <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span> &#123;<br>    <span class="hljs-keyword">return</span> get(key, <span class="hljs-literal">null</span>);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Gets the Object mapped from the specified key, or the specified Object</span><br><span class="hljs-comment"> * if no such mapping has been made.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="hljs-keyword">public</span> E <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> key, E valueIfKeyNotFound)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> ContainerHelpers.binarySearch(mKeys, mSize, key); <span class="hljs-comment">// 二分法查找下标</span><br><br>    <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">0</span> || mValues[i] == DELETED) &#123; <br>    <span class="hljs-comment">// 找到的下标为负或当前位置元素以被删除，表明没找到</span><br>        <span class="hljs-keyword">return</span> valueIfKeyNotFound;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> (E) mValues[i]; <span class="hljs-comment">// 找到指定元素</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="SparseArray-put方法的流程分析"><a href="#SparseArray-put方法的流程分析" class="headerlink" title="SparseArray put方法的流程分析"></a>SparseArray put方法的流程分析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(<span class="hljs-type">int</span> key, E value)</span> &#123;<br>       <span class="hljs-comment">// 二分法找到key的下标</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> ContainerHelpers.binarySearch(mKeys, mSize, key);<br><br>        <span class="hljs-keyword">if</span> (i &gt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 代表当前已经存在key及其对应的值，直接替换value</span><br>            mValues[i] = value;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 表示当前并不存在key，则应添加新的键值对</span><br>            <span class="hljs-comment">// i取反，得到要添加的数组位置下标。二叉查找返回的是key的“应当”存放的位置下标。</span><br>            i = ~i;<br>            <br>            <span class="hljs-keyword">if</span> (i &lt; mSize &amp;&amp; mValues[i] == DELETED) &#123;<br>                <span class="hljs-comment">// 原来位置上的元素已经被删掉了，直接赋值替换</span><br>                mKeys[i] = key;<br>                mValues[i] = value;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <br>            <span class="hljs-keyword">if</span> (mGarbage &amp;&amp; mSize &gt;= mKeys.length) &#123;<br>                <span class="hljs-comment">// 容量不足，进行回收操作</span><br>                gc();<br>                <span class="hljs-comment">// 重新查找目标下标</span><br>                i = ~ContainerHelpers.binarySearch(mKeys, mSize, key);<br>            &#125;<br>            <span class="hljs-comment">// 目标下标为i，将key添加进mKeys数组中</span><br>            mKeys = GrowingArrayUtils.insert(mKeys, mSize, i, key);<br>            <span class="hljs-comment">// 目标下标为i，将value插入mValues数组中</span><br>            mValues = GrowingArrayUtils.insert(mValues, mSize, i, value);<br>            <span class="hljs-comment">// 已存储的数据个数加1</span><br>            mSize++;<br>        &#125;<br>&#125;<br><br><span class="hljs-comment">// GrowingArrayUtils.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T[] insert(T[] array, <span class="hljs-type">int</span> currentSize, <span class="hljs-type">int</span> index, T element) &#123;<br>        <span class="hljs-keyword">assert</span> currentSize &lt;= array.length;<br><br>        <span class="hljs-keyword">if</span> (currentSize + <span class="hljs-number">1</span> &lt;= array.length) &#123;<br>            <span class="hljs-comment">// 当前数组容量充足，index开始的元素后移1位</span><br>            System.arraycopy(array, index, array, index + <span class="hljs-number">1</span>, currentSize - index);<br>            array[index] = element;<br>            <span class="hljs-keyword">return</span> array;<br>        &#125;<br>        <br>        <span class="hljs-comment">// 容量不足，先扩容生成新的数组newArray</span><br>        <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>        T[] newArray = ArrayUtils.newUnpaddedArray((Class&lt;T&gt;)array.getClass().getComponentType(),<br>                growSize(currentSize));<br>        <span class="hljs-comment">// 将原来数组index之前的部分复制到新数组对象中</span><br>        System.arraycopy(array, <span class="hljs-number">0</span>, newArray, <span class="hljs-number">0</span>, index);<br>        newArray[index] = element; <span class="hljs-comment">// 插入元素</span><br>        <span class="hljs-comment">// 将原数组index+1之后的元素拷贝到新数组中</span><br>        System.arraycopy(array, index, newArray, index + <span class="hljs-number">1</span>, array.length - index);<br>        <span class="hljs-keyword">return</span> newArray;<br>    &#125;<br><br><span class="hljs-comment">// 扩容计算规则，当前容量小于等于4则返回8；否则返回2倍的容量</span><br><span class="hljs-comment">// 扩容后最小容量是8</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">growSize</span><span class="hljs-params">(<span class="hljs-type">int</span> currentSize)</span> &#123;<br>        <span class="hljs-keyword">return</span> currentSize &lt;= <span class="hljs-number">4</span> ? <span class="hljs-number">8</span> : currentSize * <span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="key下标的二叉查找方法分析"><a href="#key下标的二叉查找方法分析" class="headerlink" title="key下标的二叉查找方法分析"></a>key下标的二叉查找方法分析</h2><p>二叉查找方法<code>ContainerHelpers.binarySearch(int[] array, int size, int value)</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(<span class="hljs-type">int</span>[] array, <span class="hljs-type">int</span> size, <span class="hljs-type">int</span> value)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">lo</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">hi</span> <span class="hljs-operator">=</span> size - <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">while</span> (lo &lt;= hi) &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (lo + hi) &gt;&gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">midVal</span> <span class="hljs-operator">=</span> array[mid];<br><br>        <span class="hljs-keyword">if</span> (midVal &lt; value) &#123;<br>            lo = mid + <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (midVal &gt; value) &#123;<br>            hi = mid - <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> mid;  <span class="hljs-comment">// value found</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ~lo;  <span class="hljs-comment">// value not present</span><br>&#125;<br></code></pre></td></tr></table></figure></p><p>如果没有找到输入value对应的下标，则会返回一个按位取反后的值（一般是个负值）。</p><p>例如输入array是 [1,2,4,5]，size是4，value是3；那么会得到2的取反值。而<code>2</code>就是value的目标位置下标。</p><h2 id="SparseArray最大容量？每次扩容多少？"><a href="#SparseArray最大容量？每次扩容多少？" class="headerlink" title="SparseArray最大容量？每次扩容多少？"></a>SparseArray最大容量？每次扩容多少？</h2><p>SparseArray并不像HashMap一样定义有最大容量是多少，最大可以达到Integer.MAX_VALUE，可能会报oom。每次扩容时如果当前容量小于5则扩容是8，否则扩容为原容量的2倍。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">growSize</span><span class="hljs-params">(<span class="hljs-type">int</span> currentSize)</span> &#123;<br>        <span class="hljs-keyword">return</span> currentSize &lt;= <span class="hljs-number">4</span> ? <span class="hljs-number">8</span> : currentSize * <span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="SparseArray与HashMap的比较，应用场景是？"><a href="#SparseArray与HashMap的比较，应用场景是？" class="headerlink" title="SparseArray与HashMap的比较，应用场景是？"></a>SparseArray与HashMap的比较，应用场景是？</h2><ul><li>SparseArray采用的不是哈希算法，HashMap采用的是哈希算法。</li><li>SparseArray采用的是两个一维数组分别用于存储键和值，HashMap采用的是一维数组+单向链表或二叉树。</li><li>SparseArray key只能是int类型，而HashMap的key是Object。</li><li>SparseArray  key是有序存储（升序），而HashMap不是。</li><li>SparseArray 默认容量是10，而HashMap默认容量是16。</li><li>SparseArray 默认每次扩容是2倍于原来的容量，而HashMap默认每次扩容时是原容量*0.75倍</li><li>SparseArray value的存储被不像HashMap一样需要额外的需要一个实体类（Node）进行包装</li><li>SparseArray查找元素总体而言比HashMap要逊色，因为SparseArray查找是需要经过二分法的过程，而HashMap不存在冲突的情况其技术处的hash对应的下标直接就可以取到值。</li></ul><p>针对上面与HashMap的比较，采用SparseArray还是HashMap，建议根据如下需求选取：</p><ul><li>如果对内存要求比较高，而对查询效率没什么大的要求，可以是使用SparseArray</li><li>数量在百级别的SparseArray比HashMap有更好的优势</li><li>要求key是int类型的，因为HashMap会对int自定装箱变成Integer类型</li><li>要求key是有序的且是升序</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jianshu.com/p/30a2bfb202b4">https://www.jianshu.com/p/30a2bfb202b4</a></p>]]></content>
    
    
    <categories>
      
      <category>Android_note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android源码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL Mac 安装与简单配置</title>
    <link href="/Database/MySQL-install_and_config_Mac/"/>
    <url>/Database/MySQL-install_and_config_Mac/</url>
    
    <content type="html"><![CDATA[<h2 id="homebrew安装mysql"><a href="#homebrew安装mysql" class="headerlink" title="homebrew安装mysql"></a>homebrew安装mysql</h2><p>使用brew命令安装mysql<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mb:~ rustfisher$ brew install mysql<br></code></pre></td></tr></table></figure></p><h2 id="启动停止mysql服务"><a href="#启动停止mysql服务" class="headerlink" title="启动停止mysql服务"></a>启动停止mysql服务</h2><p>启动服务 <code>mysql.server start</code><br>安装时没有设置密码，可以直接<code>mysql -uroot</code>登入。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">mb:~ rustfisher$ mysql.server start<br>Starting MySQL<br>. SUCCESS! <br><br>mb:~ rustfisher$ mysql -uroot<br>Welcome to the MySQL monitor.  Commands end with ; or \g.<br>Your MySQL connection <span class="hljs-built_in">id</span> is 9<br>Server version: 8.0.12 Homebrew<br><br>Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.<br><br>Oracle is a registered trademark of Oracle Corporation and/or its<br>affiliates. Other names may be trademarks of their respective<br>owners.<br><br>Type <span class="hljs-string">&#x27;help;&#x27;</span> or <span class="hljs-string">&#x27;\h&#x27;</span> <span class="hljs-keyword">for</span> <span class="hljs-built_in">help</span>. Type <span class="hljs-string">&#x27;\c&#x27;</span> to clear the current input statement.<br><br>mysql&gt; <span class="hljs-built_in">exit</span>;<br>Bye<br></code></pre></td></tr></table></figure></p><p>输入mysql指令遇到错误<br><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">mysql&gt; <span class="hljs-keyword">show</span> <span class="hljs-keyword">database</span>;<br>ERROR <span class="hljs-number">1064</span> (<span class="hljs-number">42000</span>): You have an error <span class="hljs-keyword">in</span> your <span class="hljs-keyword">SQL</span> syntax; <span class="hljs-keyword">check</span> the manual that corresponds <span class="hljs-keyword">to</span> your MySQL <span class="hljs-keyword">server</span> <span class="hljs-keyword">version</span> <span class="hljs-keyword">for</span> the right syntax <span class="hljs-keyword">to</span> use near <span class="hljs-string">&#x27;database&#x27;</span> at <span class="hljs-type">line</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></p><p>指令输入错误，修正一下<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">mysql&gt; show databases;</span><br><span class="hljs-section">+--------------------+</span><br><span class="hljs-section">| Database           |</span><br><span class="hljs-section">+--------------------+</span><br>| information<span class="hljs-emphasis">_schema |</span><br><span class="hljs-emphasis">| mysql              |</span><br><span class="hljs-emphasis">| performance_</span>schema |<br><span class="hljs-section">| sys                |</span><br><span class="hljs-section">+--------------------+</span><br>4 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure></p><p>停止mysql服务的命令 <code>mysql.server stop</code><br><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs node-repl">mb:anindexserver rustfisher$ mysql.server stop<br>Shutting down MySQL<br><span class="hljs-meta prompt_">...</span> <span class="language-javascript"><span class="hljs-variable constant_">SUCCESS</span>! </span><br></code></pre></td></tr></table></figure></p><h2 id="简单操作"><a href="#简单操作" class="headerlink" title="简单操作"></a>简单操作</h2><h3 id="更改密码"><a href="#更改密码" class="headerlink" title="更改密码"></a>更改密码</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">mysql&gt; <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;yourpwd&#x27;</span>;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.05</span> sec)<br></code></pre></td></tr></table></figure><p>设定了密码后，登录需要输入密码<br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">mb:</span>anindexserver rustfisher$ mysql -uroot -p<br>Enter password: <br>Welcome <span class="hljs-keyword">to</span> the MySQL monitor.  Commands <span class="hljs-keyword">end</span> <span class="hljs-keyword">with</span> ; <span class="hljs-built_in">or</span> \g.<br><br></code></pre></td></tr></table></figure></p><p>参考：</p><ul><li><a href="https://dev.mysql.com/doc/refman/8.0/en/resetting-permissions.html">https://dev.mysql.com/doc/refman/8.0/en/resetting-permissions.html</a></li></ul><h2 id="可视化工具-mysql-workbench"><a href="#可视化工具-mysql-workbench" class="headerlink" title="可视化工具 mysql workbench"></a>可视化工具 mysql workbench</h2><p>官方文档请参考 <a href="https://dev.mysql.com/downloads/workbench/">https://dev.mysql.com/downloads/workbench/</a></p><h3 id="mysql-workbench-需要primary-key"><a href="#mysql-workbench-需要primary-key" class="headerlink" title="mysql workbench 需要primary key"></a>mysql workbench 需要primary key</h3><p>需要有primary key才能编辑内容</p><p><a href="https://stackoverflow.com/questions/10815029/mysql-workbench-edit-table-data-is-read-only">https://stackoverflow.com/questions/10815029/mysql-workbench-edit-table-data-is-read-only</a></p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>mac中配置文件默认路径为 <code>/usr/local/etc/my.cnf</code></p><p>可以修改port。<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># Default Homebrew MySQL server config</span><br><span class="hljs-section">[mysqld]</span><br><span class="hljs-comment"># Only allow connections from localhost</span><br><span class="hljs-attr">port</span>=<span class="hljs-number">9527</span><br><span class="hljs-attr">bind-address</span> = <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br></code></pre></td></tr></table></figure><br>这里限制了连接的端口。</p><p>参考： <a href="https://www.cyberciti.biz/faq/change-default-mysql-port-under-linuxunix/">https://www.cyberciti.biz/faq/change-default-mysql-port-under-linuxunix/</a></p>]]></content>
    
    
    <categories>
      
      <category>Database</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>mac</tag>
      
      <tag>安装mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python3 发送邮件功能</title>
    <link href="/Python/python3-send-email/"/>
    <url>/Python/python3-send-email/</url>
    
    <content type="html"><![CDATA[<p>发信邮箱是腾讯企业邮箱。开发环境 Windows7。</p><p>主要使用<strong>smtplib</strong>来实现发邮件的功能。</p><h2 id="简单的发送邮件功能"><a href="#简单的发送邮件功能" class="headerlink" title="简单的发送邮件功能"></a>简单的发送邮件功能</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 发送邮件</span><br><span class="hljs-keyword">import</span> smtplib<br><span class="hljs-keyword">from</span> email.mime.multipart <span class="hljs-keyword">import</span> MIMEMultipart<br><span class="hljs-keyword">from</span> email.mime.text <span class="hljs-keyword">import</span> MIMEText<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send_email</span>():<br>    fromaddr = <span class="hljs-string">&quot;from1@your_email.com&quot;</span> <span class="hljs-comment"># 你的发件邮箱</span><br>    toaddr = <span class="hljs-string">&quot;to1@your_email.com&quot;</span> <span class="hljs-comment"># 目标邮箱</span><br>    msg = MIMEMultipart()<br>    msg[<span class="hljs-string">&#x27;From&#x27;</span>] = fromaddr<br>    msg[<span class="hljs-string">&#x27;To&#x27;</span>] = toaddr<br>    msg[<span class="hljs-string">&#x27;Subject&#x27;</span>] = <span class="hljs-string">&quot;SUBJECT OF THE MAIL&quot;</span><br><br>    body = <span class="hljs-string">&quot;YOUR MESSAGE HERE&quot;</span><br>    msg.attach(MIMEText(body, <span class="hljs-string">&#x27;plain&#x27;</span>))<br><br>    server = smtplib.SMTP(<span class="hljs-string">&#x27;smtp.exmail.qq.com&#x27;</span>, <span class="hljs-number">25</span>) <span class="hljs-comment"># 默认端口25</span><br>    server.starttls()<br>    server.login(fromaddr, <span class="hljs-string">&quot;xxxx密码&quot;</span>)<br>    text = msg.as_string()<br>    server.sendmail(fromaddr, toaddr, text)<br>    server.quit()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;start sending email&#x27;</span>)<br>    send_email()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;end...&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="邮件带上附件"><a href="#邮件带上附件" class="headerlink" title="邮件带上附件"></a>邮件带上附件</h2><p>Windows下注意文件路径的表达方式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 发送邮件</span><br><span class="hljs-keyword">import</span> smtplib<br><span class="hljs-keyword">from</span> email <span class="hljs-keyword">import</span> encoders<br><span class="hljs-keyword">from</span> email.mime.base <span class="hljs-keyword">import</span> MIMEBase<br><span class="hljs-keyword">from</span> email.mime.multipart <span class="hljs-keyword">import</span> MIMEMultipart<br><span class="hljs-keyword">from</span> email.mime.text <span class="hljs-keyword">import</span> MIMEText<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send_email</span>(<span class="hljs-params">from_email, pwd, target_email_list=[], attachment_file_list=[]</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    单独发送邮件</span><br><span class="hljs-string">    create on 2018-11-14</span><br><span class="hljs-string">    :param from_email: 源邮箱</span><br><span class="hljs-string">    :param pwd: 源邮箱密码</span><br><span class="hljs-string">    :param target_email_list:  目标邮件列表</span><br><span class="hljs-string">    :param attachment_file_list:  附件路径列表</span><br><span class="hljs-string">    :return: void</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(target_email_list) &lt;= <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ERR: 目标邮件列表为空 -&gt; 退出&#x27;</span>)<br>        <span class="hljs-keyword">return</span><br><br>    <span class="hljs-keyword">for</span> target_email <span class="hljs-keyword">in</span> target_email_list:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;sending to &#x27;</span> + target_email)<br>        msg = MIMEMultipart()<br>        msg[<span class="hljs-string">&#x27;From&#x27;</span>] = from_email<br>        msg[<span class="hljs-string">&#x27;To&#x27;</span>] = target_email<br>        msg[<span class="hljs-string">&#x27;Subject&#x27;</span>] = <span class="hljs-string">&quot;更新&quot;</span><br><br>        body = <span class="hljs-string">&#x27;&#x27;&#x27;尊敬的客户，</span><br><span class="hljs-string">    你好，请查收文件。</span><br><span class="hljs-string">谢谢！</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span><br>        msg.attach(MIMEText(body, <span class="hljs-string">&#x27;plain&#x27;</span>))<br><br>        <span class="hljs-keyword">for</span> file_path <span class="hljs-keyword">in</span> attachment_file_list:<br>            filename = <span class="hljs-built_in">str</span>(file_path).split(<span class="hljs-string">&#x27;\\&#x27;</span>)[-<span class="hljs-number">1</span>]<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;file_path &quot;</span> + file_path + <span class="hljs-string">&quot; filename: &quot;</span> + filename)<br>            attachment = <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&quot;rb&quot;</span>)<br><br>            part = MIMEBase(<span class="hljs-string">&#x27;application&#x27;</span>, <span class="hljs-string">&#x27;octet-stream&#x27;</span>)<br>            part.set_payload(attachment.read())<br>            encoders.encode_base64(part)<br>            part.add_header(<span class="hljs-string">&#x27;Content-Disposition&#x27;</span>, <span class="hljs-string">&quot;attachment; filename= %s&quot;</span> % filename)<br><br>            msg.attach(part)<br><br>            server = smtplib.SMTP(<span class="hljs-string">&#x27;smtp.exmail.qq.com&#x27;</span>, <span class="hljs-number">25</span>)<br>            server.starttls()<br>            server.login(from_email, pwd)<br>            text = msg.as_string()<br>            server.sendmail(from_email, target_email, text)<br>            server.quit()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;start sending email&#x27;</span>)<br>    send_email(from_email=<span class="hljs-string">&quot;your_email.com&quot;</span>,<br>               pwd=<span class="hljs-string">&quot;密码&quot;</span>,<br>               target_email_list=[<span class="hljs-string">&quot;target1@foxmail.com&quot;</span>, <span class="hljs-string">&quot;target2@qq.com&quot;</span>],<br>               attachment_file_list=[<br>                   <span class="hljs-string">r&quot;E:\your_path.rar&quot;</span>])<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;end...&#x27;</span>)<br></code></pre></td></tr></table></figure><p>参考：</p><ul><li><a href="https://blog.csdn.net/u011846143/article/details/78274911?locationNum=9&amp;fps=1">https://blog.csdn.net/u011846143/article/details/78274911?locationNum=9&amp;fps=1</a></li><li><a href="http://naelshiab.com/tutorial-send-email-python/">http://naelshiab.com/tutorial-send-email-python/</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Flutter - 处理手势</title>
    <link href="/Flutter/Flutter-Gesture_handle/"/>
    <url>/Flutter/Flutter-Gesture_handle/</url>
    
    <content type="html"><![CDATA[<h1 id="Flutter-处理手势"><a href="#Flutter-处理手势" class="headerlink" title="Flutter - 处理手势"></a>Flutter - 处理手势</h1><p>点击，滑动等等手势。</p><h2 id="处理点击"><a href="#处理点击" class="headerlink" title="处理点击"></a>处理点击</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ul><li>创建自定义button类</li><li>在其中使用<code>GestureDetector</code>并复写<code>onTap</code>回调</li></ul><p>代码实现<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class="hljs-comment">/// <span class="language-markdown">自定义button</span></span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ButtonSample1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> GestureDetector(<br>      onTap: () &#123;<br>        <span class="hljs-keyword">final</span> snackBar = SnackBar(content: Text(<span class="hljs-string">&quot;Now you tap the <span class="hljs-subst">$this</span>&quot;</span>),);<br>        Scaffold.of(context).showSnackBar(snackBar);<br>      &#125;,<br>      child: Container(<br>        padding: EdgeInsets.all(<span class="hljs-number">12.0</span>),<br>        margin: EdgeInsets.all(<span class="hljs-number">12.0</span>),<br>        decoration: BoxDecoration(color: Theme<br>            .of(context)<br>            .buttonColor,<br>            borderRadius: BorderRadius.circular(<span class="hljs-number">8.0</span>)),<br>        child: Text(<span class="hljs-string">&quot;<span class="hljs-subst">$this</span>&quot;</span>),),<br>    );<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></p><p>参考： <a href="https://flutter.io/cookbook/gestures/handling-taps/">https://flutter.io/cookbook/gestures/handling-taps/</a></p><h4 id="带波纹效果的按钮"><a href="#带波纹效果的按钮" class="headerlink" title="带波纹效果的按钮"></a>带波纹效果的按钮</h4><p>使用<code>InkWell</code>。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">/// <span class="language-markdown">带有波纹效果的按钮</span></span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ButtonSample2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> InkWell(<br>      onTap: () &#123;<br>        <span class="hljs-keyword">final</span> snackBar = SnackBar(content: Text(<span class="hljs-string">&quot;Now you tap the <span class="hljs-subst">$this</span>&quot;</span>),);<br>        Scaffold.of(context).showSnackBar(snackBar);<br>      &#125;,<br>      child: Container(<br>        padding: EdgeInsets.all(<span class="hljs-number">12.0</span>),<br>        child: Text(<span class="hljs-string">&quot;<span class="hljs-subst">$this</span>&quot;</span>),<br>      ),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>Flutter提供的按钮控件还有<code>RaisedButton</code>和<code>FlatButton</code>。</p><h2 id="列表侧滑删除"><a href="#列表侧滑删除" class="headerlink" title="列表侧滑删除"></a>列表侧滑删除</h2><p>步骤：</p><ul><li>创建一个列表</li><li>用<code>Dismissible</code>包装每一个item</li><li>提供删除时的UI显示</li></ul><h3 id="创建列表"><a href="#创建列表" class="headerlink" title="创建列表"></a>创建列表</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">final</span> items = <span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">String</span>&gt;.generate(<span class="hljs-number">10</span>, (i) =&gt; <span class="hljs-string">&quot;Item <span class="hljs-subst">$i</span>&quot;</span>);<br></code></pre></td></tr></table></figure><p>创建字符串列表。这个列表不能放在<code>build</code>中，要定义为State的全局变量。<br>否则删除item时，无法从view tree中移除item，从而报错。</p><h3 id="删除时的UI"><a href="#删除时的UI" class="headerlink" title="删除时的UI"></a>删除时的UI</h3><p>设置<code>Dismissible</code>的background，可以在删除时显示。</p><p>示例界面代码<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class="hljs-comment">/// <span class="language-markdown">侧滑删除列表界面</span></span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SwipeToDismissPage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatefulWidget</span> </span>&#123;<br>  SwipeToDismissPage(&#123;Key key&#125;) : <span class="hljs-keyword">super</span>(key: key);<br><br>  <span class="hljs-meta">@override</span><br>  State&lt;StatefulWidget&gt; createState() &#123;<br>    <span class="hljs-keyword">return</span> SwipeState();<br>  &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SwipeState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">SwipeToDismissPage</span>&gt; </span>&#123;<br>  <span class="hljs-keyword">final</span> items = <span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">String</span>&gt;.generate(<span class="hljs-number">10</span>, (i) =&gt; <span class="hljs-string">&quot;Item <span class="hljs-subst">$i</span>&quot;</span>); <span class="hljs-comment">// 列表必须放在外面定义</span><br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Scaffold(<br>      appBar: AppBar(<br>        title: Text(<br>          <span class="hljs-string">&quot;Swipe to dismiss&quot;</span>,<br>        ),<br>      ),<br>      body: ListView.builder(<br>          itemCount: items.length,<br>          itemBuilder: (context, index) &#123;<br>            <span class="hljs-keyword">final</span> item = items[index];<br>            <span class="hljs-keyword">return</span> Dismissible(<br>              key: Key(item),<br>              onDismissed: (direction) &#123;<br>                setState(() &#123;<br>                  items.removeAt(index);<br>                  <span class="hljs-built_in">print</span>(direction);<br>                &#125;);<br>                Scaffold.of(context)<br>                    .showSnackBar(SnackBar(content: Text(<span class="hljs-string">&#x27;remove <span class="hljs-subst">$item</span>&#x27;</span>)));<br>              &#125;,<br>              child: ListTile(<br>                title: Text(<span class="hljs-string">&#x27;<span class="hljs-subst">$item</span>&#x27;</span>),<br>              ),<br>              background: Container(<br>                color: Colors.red,<br>              ),<br>            );<br>          &#125;),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h2 id="选择GestureDetector的响应形式"><a href="#选择GestureDetector的响应形式" class="headerlink" title="选择GestureDetector的响应形式"></a>选择GestureDetector的响应形式</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart">behavior: HitTestBehavior.opaque<br></code></pre></td></tr></table></figure><p><a href="https://docs.flutter.io/flutter/rendering/HitTestBehavior-class.html">https://docs.flutter.io/flutter/rendering/HitTestBehavior-class.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Flutter_note</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Flutter - 页面间跳转操作</title>
    <link href="/Flutter/Flutter-Navigator_demo1/"/>
    <url>/Flutter/Flutter-Navigator_demo1/</url>
    
    <content type="html"><![CDATA[<h2 id="切换到一个新的界面并且能跳回来"><a href="#切换到一个新的界面并且能跳回来" class="headerlink" title="切换到一个新的界面并且能跳回来"></a>切换到一个新的界面并且能跳回来</h2><p>大多数App都包含多个界面。比如数据列表页和详细页。<br>Android中的页面可以是Activity；iOS中使用ViewController。在Flutter中，页面也是<code>widget</code>。<br>使用<code>Navigator</code>来切换页面。</p><p>步骤：</p><ul><li>1.创建2个页面</li><li>2.用<code>Navigator.push</code>跳去第二个页面</li><li>3.用<code>Navigator.pop</code>回到第一个页面</li></ul><p>push和pop很容易让人联想到栈。Android中有ActivityStack，用来存放Activity。当前的Activity就在栈顶。</p><h3 id="1-创建2个页面"><a href="#1-创建2个页面" class="headerlink" title="1.创建2个页面"></a>1.创建2个页面</h3><p>创建2个简单的界面，界面中只有一个按钮。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FirstScreen</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Scaffold(appBar: AppBar(title: Text(<span class="hljs-string">&#x27;First page&#x27;</span>),),<br>      body: Center(child: RaisedButton(<br>          child: Text(<span class="hljs-string">&#x27;Go to 2nd page&#x27;</span>),<br>          onPressed: () &#123;<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;This is first page&#x27;</span>);<br>            <span class="hljs-comment">// 执行想要的操作..........</span><br>          &#125;),),);<br>  &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecondScreen</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;<span class="hljs-subst">$&#123;<span class="hljs-keyword">this</span>&#125;</span> hashCode=<span class="hljs-subst">$&#123;<span class="hljs-keyword">this</span>.hashCode&#125;</span>&#x27;</span>);<br>    <span class="hljs-keyword">return</span> Scaffold(appBar: AppBar(title: Text(<span class="hljs-string">&#x27;Second page&#x27;</span>),),<br>      body: Center(child: RaisedButton(<br>          child: Text(<span class="hljs-string">&quot;Go back&quot;</span>),<br>          onPressed: () &#123;<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;This is 2nd page&#x27;</span>);<br>            <span class="hljs-comment">// 执行操作........</span><br>          &#125;),),);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="2-用Navigator-push跳转去第二个界面"><a href="#2-用Navigator-push跳转去第二个界面" class="headerlink" title="2.用Navigator.push跳转去第二个界面"></a>2.用<code>Navigator.push</code>跳转去第二个界面</h3><p><code>push</code>方法会向栈中添加一个由Navigator管理的<code>Route</code>。<br><code>push</code>方法接受一个<code>Route</code>（暂称为路由），这里新建一个<code>Route</code>，使用用<code>MaterialPageRoute</code>。</p><p>在第一个页面中按钮添加回调的操作<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart">onPressed: () &#123;<br>Navigator.push(context,<br>    MaterialPageRoute(builder: (context) =&gt; SecondScreen()));<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="3-用Navigator-pop回到第一个界面"><a href="#3-用Navigator-pop回到第一个界面" class="headerlink" title="3.用Navigator.pop回到第一个界面"></a>3.用<code>Navigator.pop</code>回到第一个界面</h3><p><code>Navigator.pop</code>会移除navigator管理的当前的路由（效果是移除当前界面）。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">// 第二个页面中</span><br>onPressed: () &#123;<br>  Navigator.pop(context);<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class="hljs-keyword">void</span> main() &#123;<br>  runApp(<span class="hljs-keyword">new</span> MaterialApp(<br>    title: <span class="hljs-string">&#x27;navigate demo&#x27;</span>,<br>    home: <span class="hljs-keyword">new</span> FirstScreen(),));<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FirstScreen</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Scaffold(appBar: AppBar(title: Text(<span class="hljs-string">&#x27;First page&#x27;</span>),),<br>      body: Center(child: RaisedButton(<br>          child: Text(<span class="hljs-string">&#x27;Go to 2nd page&#x27;</span>),<br>          onPressed: () &#123;<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;This is first page&#x27;</span>);<br>            Navigator.push(context,<br>                MaterialPageRoute(builder: (context) =&gt; SecondScreen()));<br>          &#125;),),);<br>  &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecondScreen</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;<span class="hljs-subst">$&#123;<span class="hljs-keyword">this</span>&#125;</span> hashCode=<span class="hljs-subst">$&#123;<span class="hljs-keyword">this</span>.hashCode&#125;</span>&#x27;</span>);<br>    <span class="hljs-keyword">return</span> Scaffold(appBar: AppBar(title: Text(<span class="hljs-string">&#x27;Second page&#x27;</span>),),<br>      body: Center(child: RaisedButton(<br>          child: Text(<span class="hljs-string">&quot;Go back&quot;</span>),<br>          onPressed: () &#123;<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;This is 2nd page&#x27;</span>);<br>            Navigator.pop(context);<br>          &#125;),),);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>代码请参阅： <a href="https://github.com/RustFisher/flutter_basic">https://github.com/RustFisher/flutter_basic</a></p>]]></content>
    
    
    <categories>
      
      <category>Flutter_note</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>「Learn」开发记录</title>
    <link href="/Dev-note/dev-note-app-learn/"/>
    <url>/Dev-note/dev-note-app-learn/</url>
    
    <content type="html"><![CDATA[<p>开发App过程中遇到的一些问题和解决办法。临时记录一些解决方案。</p><h2 id="音频"><a href="#音频" class="headerlink" title="音频"></a>音频</h2><p><a href="https://rustfisher.com/2019/09/19/Android/Android-MediaPlayer_intro/">Android MediaPlayer基础。</a><br><a href="https://rustfisher.com/2019/09/22/Android/Android-MediaPlayer_use_play_audio/">在线音频播放，使用MediaPlayer。</a><br><a href="https://rustfisher.com/2019/09/23/Android/Android-Media_download_stream_file/">下载在线音频到本地，使用URLConnection。</a></p><h2 id="自定义ViewGroup"><a href="#自定义ViewGroup" class="headerlink" title="自定义ViewGroup"></a>自定义ViewGroup</h2><p>继承自LinearLayout，自定义子View的排布方式。</p><h3 id="crash-ViewGroup-resetResolvedLayoutDirection"><a href="#crash-ViewGroup-resetResolvedLayoutDirection" class="headerlink" title="crash ViewGroup.resetResolvedLayoutDirection"></a>crash ViewGroup.resetResolvedLayoutDirection</h3><p>给LinearLayout addView的时候报错<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">E/AndroidRuntime:     at android<span class="hljs-selector-class">.view</span><span class="hljs-selector-class">.ViewGroup</span><span class="hljs-selector-class">.resetResolvedLayoutDirection</span>(ViewGroup<span class="hljs-selector-class">.java</span>:<span class="hljs-number">7291</span>)<br>    at android<span class="hljs-selector-class">.view</span><span class="hljs-selector-class">.ViewGroup</span><span class="hljs-selector-class">.resetResolvedLayoutDirection</span>(ViewGroup<span class="hljs-selector-class">.java</span>:<span class="hljs-number">7291</span>)<br></code></pre></td></tr></table></figure></p><p>检查代码，发现addView的时候把LinearLayout自己添加进去了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">LinearLayout</span> <span class="hljs-variable">wordCube</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinearLayout</span>(<span class="hljs-built_in">this</span>);<br>wordCube.addView(wordCube, chTvParams);<br></code></pre></td></tr></table></figure></p><p>改成<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">LinearLayout</span> <span class="hljs-variable">wordCube</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinearLayout</span>(<span class="hljs-built_in">this</span>);<br>wordCube.addView(tv, chTvParams); <span class="hljs-comment">// 要加的是tv</span><br></code></pre></td></tr></table></figure></p><h2 id="Bugly热更新"><a href="#Bugly热更新" class="headerlink" title="Bugly热更新"></a>Bugly热更新</h2><p>Bugly热更新方案集成了腾讯的tinker，自带了补丁包发布平台。</p><p>文档</p><p><a href="https://bugly.qq.com/docs/user-guide/instruction-manual-android-hotfix/?v=20181014122344#_3">https://bugly.qq.com/docs/user-guide/instruction-manual-android-hotfix/?v=20181014122344#_3</a></p><p>tinker不支持热更新新增四大组件，不能修改Manifest文件。但是可以修改四大组件里面的逻辑。<br>可以修改layout文件和资源文件。</p><h2 id="Assets遍历文件"><a href="#Assets遍历文件" class="headerlink" title="Assets遍历文件"></a>Assets遍历文件</h2><p>assets里存放着四千多个文件，红米6A遍历一次要2秒多。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">String[] list = context.getAssets().list(<span class="hljs-string">&quot;folder&quot;</span>); <span class="hljs-comment">// 执行这一句要两千多毫秒</span><br></code></pre></td></tr></table></figure><h2 id="语音识别方案"><a href="#语音识别方案" class="headerlink" title="语音识别方案"></a>语音识别方案</h2><p>主力方案为百度语音识别。</p><p>综合价格考虑，将科大讯飞的<a href="https://www.xfyun.cn/services/voicedictation">语音听写</a>作为备用方案。</p><p>将百度语音识别与讯飞听写的SDK一起引入到App中。由后台控制用户使用哪一个语音引擎。</p><h2 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h2><p>项目采用的是mvvm架构。有2个页面要用到同一个数据源。把这个数据源单独抽出来，设计监听器。</p><p>原框架的下载文件功能有一个bug。如果下载时抛出了异常，也会调用success回调。<br>这里是在下载时记录目标文件的长度，在success回调中检查本地文件大小与这个长度是否一致。</p><h2 id="限速下载"><a href="#限速下载" class="headerlink" title="限速下载"></a>限速下载</h2><p>在io流那里进行延时操作。用Thread.sleep方法。<br>阻塞的是socket的操作。</p><h2 id="下载安装apk"><a href="#下载安装apk" class="headerlink" title="下载安装apk"></a>下载安装apk</h2><p>下载了新版本apk后，调用代码进行安装。根据手机系统版本的不同选择不同的安装方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">installApk</span><span class="hljs-params">(Context context,String downloadApk)</span> &#123;<br>    <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(Intent.ACTION_VIEW);<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(downloadApk);<br>    <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) &#123;<br>        <span class="hljs-type">Uri</span> <span class="hljs-variable">apkUri</span> <span class="hljs-operator">=</span> FileProvider.getUriForFile(context, <span class="hljs-string">&quot;com.iNTGO.nndc.fileprovider&quot;</span>, file);<br>        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);<br>        intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION|<br>                        Intent.FLAG_GRANT_WRITE_URI_PERMISSION);<br>        intent.setDataAndType(apkUri, <span class="hljs-string">&quot;application/vnd.android.package-archive&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">Uri</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> Uri.fromFile(file);<br>        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);<br>        intent.setDataAndType(uri, <span class="hljs-string">&quot;application/vnd.android.package-archive&quot;</span>);<br>    &#125;<br>    context.startActivity(intent);<br>&#125;<br></code></pre></td></tr></table></figure><p>对于小米4c android 5.1.1（API 22），如果把apk放在app内部存储，packageInstaller是无法安装的。要把apk放在公共存储中才能安装。</p><h2 id="修改Android系统镜像（img）"><a href="#修改Android系统镜像（img）" class="headerlink" title="修改Android系统镜像（img）"></a>修改Android系统镜像（img）</h2><p>装一个VMware Workstation Pro，下载一个Ubuntu 16的镜像（iso）。用的是阿里云的资源，比较快。<br>一系列的mount，打包后，刷机一直不成功。找到个ROM助手，尝试一下。修改了system.img后，线刷进去，卡米（卡在开机的MI logo界面）。<br>查一下发现，是selinux处于enforcing状态，没法装。小米4c用的是MIUI8，商家说没法root。MiUI7可以root。<br>还没找到非root情况下关闭selinux的方法。</p><h2 id="动画效果"><a href="#动画效果" class="headerlink" title="动画效果"></a>动画效果</h2><p>加一些动效会让界面更加生动有活力。</p><h3 id="属性动画-星星飞行"><a href="#属性动画-星星飞行" class="headerlink" title="属性动画 - 星星飞行"></a>属性动画 - 星星飞行</h3><p>控制星星飞入，定位，飞出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">flyInTime</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">stayTime</span> <span class="hljs-operator">=</span> <span class="hljs-number">520</span>;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">flyOutTime</span> <span class="hljs-operator">=</span> <span class="hljs-number">250</span>;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">totalTime</span> <span class="hljs-operator">=</span> flyInTime + stayTime + flyOutTime;<br>        binding.starIv.setX(inX);<br>        binding.starIv.setY(yStay);<br>        binding.starIv.setVisibility(View.VISIBLE);<br>        setStarIvSize(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">ValueAnimator</span> <span class="hljs-variable">animator</span> <span class="hljs-operator">=</span> ValueAnimator.ofInt(<span class="hljs-number">1</span>, totalTime);<br>        animator.setDuration(totalTime);<br>        animator.setInterpolator(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AccelerateInterpolator</span>());<br>        animator.addUpdateListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ValueAnimator</span>.AnimatorUpdateListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onAnimationUpdate</span><span class="hljs-params">(ValueAnimator valueAnimator)</span> &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) valueAnimator.getAnimatedValue();<br>                <span class="hljs-type">ImageView</span> <span class="hljs-variable">starIv</span> <span class="hljs-operator">=</span> binding.starIv;<br>                <span class="hljs-keyword">if</span> (value &lt; flyInTime) &#123;<br>                    <span class="hljs-type">float</span> <span class="hljs-variable">inProgress</span> <span class="hljs-operator">=</span> value / (<span class="hljs-number">1.0f</span> * flyInTime);<br>                    <span class="hljs-type">float</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> inProgress * (xStay - inX) + inX;<br>                    <span class="hljs-type">float</span> y;<br>                    <span class="hljs-keyword">if</span> (value &lt; flyInTime / <span class="hljs-number">2</span>) &#123;<br>                        y = yStay + <span class="hljs-number">20</span> - inProgress * <span class="hljs-number">60</span>;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        y = yStay - <span class="hljs-number">20</span> + inProgress * <span class="hljs-number">60</span>;<br>                    &#125;<br>                    starIv.setX(x);<br>                    starIv.setY(y);<br>                    setStarIvSize((<span class="hljs-type">int</span>) (mStarIvOriginWid * (inProgress)), (<span class="hljs-type">int</span>) (mStarIvOriginHeight * (inProgress)));<br><span class="hljs-comment">//                    Log.d(TAG, &quot;onAnimationUpdate: value: &quot; + value + &quot;, progress: &quot; + inProgress + &quot;, x: &quot; + x);</span><br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value &lt; flyInTime + stayTime) &#123;<br>                    starIv.setX(xStay);<br>                    starIv.setY(yStay);<br>                    setStarIvSize(mStarIvOriginWid, mStarIvOriginHeight);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">if</span> (valueAnimator.isRunning()) &#123;<br>                        <span class="hljs-type">float</span> <span class="hljs-variable">progress</span> <span class="hljs-operator">=</span> (value - flyInTime - stayTime) / (<span class="hljs-number">1.0f</span> * flyOutTime);<br>                        starIv.setX(xStay + (progress * Math.abs(endX - xStay)));<br>                        starIv.setY(yStay - (progress * Math.abs(endY - yStay)));<br>                        setStarIvSize((<span class="hljs-type">int</span>) (mStarIvOriginWid * (<span class="hljs-number">1</span> - progress)), (<span class="hljs-type">int</span>) (mStarIvOriginHeight * (<span class="hljs-number">1</span> - progress)));<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (value &gt;= totalTime - <span class="hljs-number">10</span>) &#123;<br>                    binding.starIv.setVisibility(View.GONE);<br>                &#125;<br>            &#125;<br>        &#125;);<br>        animator.start();<br><br>    <span class="hljs-comment">// 改变星星ImageView的大小，LayoutParams不能弄错了</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setStarIvSize</span><span class="hljs-params">(<span class="hljs-type">int</span> wid, <span class="hljs-type">int</span> height)</span> &#123;<br>        RelativeLayout.<span class="hljs-type">LayoutParams</span> <span class="hljs-variable">lp</span> <span class="hljs-operator">=</span> (RelativeLayout.LayoutParams) binding.starIv.getLayoutParams();<br>        lp.width = wid;<br>        lp.height = height;<br>        binding.starIv.setLayoutParams(lp);<br>    &#125;<br></code></pre></td></tr></table></figure><p>如果一个View在LinearLayout里，它的坐标没有那么容易获取。</p><p>下面的代码获取到的坐标是[0,0]。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">imageView.post(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span>[] location = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>];<br>        imageView.getLocationOnScreen(location);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure></p><p><a href="https://developer.android.google.cn/training/transitions/custom-transitions">创建自定义过渡动画 - Google</a><br><a href="https://developer.android.google.cn/training/animation/layout.html">自动为布局更新添加动画 - Google</a></p><h2 id="退出App"><a href="#退出App" class="headerlink" title="退出App"></a>退出App</h2><p>在登录界面，点击返回键即退出整个App。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">mExitApp</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onBackPressed</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onBackPressed();<br>        mExitApp = <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onDestroy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onDestroy();<br>        <span class="hljs-keyword">if</span> (mExitApp) &#123;<br>            System.exit(<span class="hljs-number">0</span>);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="crash"><a href="#crash" class="headerlink" title="crash"></a>crash</h2><p>为了提高程序的健壮性，很多时候并不能过于相信服务器返回的结果。该加判空就判空。<br>如果服务器返回空的数据或者字段，要有对应的措施。</p><h3 id="gc超时"><a href="#gc超时" class="headerlink" title="gc超时"></a>gc超时</h3><p>该异常表示调用超时。</p><p>解决方案：一般是系统在gc时，调用对象的finalize超时导致</p><p>解决办法：<br>1.检查分析finalize的实现为什么耗时较高，修复它；<br>2.检查日志查看GC是否过于频繁，导致超时，减少内容开销，防止内存泄露。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs stylus">android<span class="hljs-selector-class">.content</span><span class="hljs-selector-class">.res</span>.XmlBlock<span class="hljs-variable">$Parser</span><span class="hljs-selector-class">.finalize</span>() timed out after <span class="hljs-number">10</span> seconds<br><br>android<span class="hljs-selector-class">.content</span><span class="hljs-selector-class">.res</span><span class="hljs-selector-class">.AssetManager</span><span class="hljs-selector-class">.xmlBlockGone</span>(AssetManager<span class="hljs-selector-class">.java</span>:<span class="hljs-number">500</span>)<br><br>android<span class="hljs-selector-class">.content</span><span class="hljs-selector-class">.res</span><span class="hljs-selector-class">.AssetManager</span><span class="hljs-selector-class">.xmlBlockGone</span>(AssetManager<span class="hljs-selector-class">.java</span>:<span class="hljs-number">500</span>)<br>android<span class="hljs-selector-class">.content</span><span class="hljs-selector-class">.res</span><span class="hljs-selector-class">.XmlBlock</span><span class="hljs-selector-class">.decOpenCountLocked</span>(XmlBlock<span class="hljs-selector-class">.java</span>:<span class="hljs-number">63</span>)<br>android<span class="hljs-selector-class">.content</span><span class="hljs-selector-class">.res</span><span class="hljs-selector-class">.XmlBlock</span>.access$<span class="hljs-number">1600</span>(XmlBlock<span class="hljs-selector-class">.java</span>:<span class="hljs-number">34</span>)<br>android<span class="hljs-selector-class">.content</span><span class="hljs-selector-class">.res</span>.XmlBlock<span class="hljs-variable">$Parser</span><span class="hljs-selector-class">.close</span>(XmlBlock<span class="hljs-selector-class">.java</span>:<span class="hljs-number">448</span>)<br>android<span class="hljs-selector-class">.content</span><span class="hljs-selector-class">.res</span>.XmlBlock<span class="hljs-variable">$Parser</span><span class="hljs-selector-class">.finalize</span>(XmlBlock<span class="hljs-selector-class">.java</span>:<span class="hljs-number">454</span>)<br>java<span class="hljs-selector-class">.lang</span>.Daemons<span class="hljs-variable">$FinalizerDaemon</span><span class="hljs-selector-class">.doFinalize</span>(Daemons<span class="hljs-selector-class">.java</span>:<span class="hljs-number">191</span>)<br>java<span class="hljs-selector-class">.lang</span>.Daemons<span class="hljs-variable">$FinalizerDaemon</span><span class="hljs-selector-class">.run</span>(Daemons<span class="hljs-selector-class">.java</span>:<span class="hljs-number">174</span>)<br>java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.Thread</span><span class="hljs-selector-class">.run</span>(Thread<span class="hljs-selector-class">.java</span>:<span class="hljs-number">818</span>)<br></code></pre></td></tr></table></figure><h3 id="RuntimeException-Cannot-create-an-instance-of-class"><a href="#RuntimeException-Cannot-create-an-instance-of-class" class="headerlink" title="RuntimeException: Cannot create an instance of class"></a>RuntimeException: Cannot create an instance of class</h3><p>使用了MVVM的框架，创建viewModel时报错。检查发现忘记复写方法<code>initViewModel</code>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> MyViewModel <span class="hljs-title function_">initViewModel</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">MyAppViewModelFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> MyAppViewModelFactory.getInstance(getApplication());<br>    <span class="hljs-keyword">return</span> ViewModelProviders.of(<span class="hljs-built_in">this</span>, factory).get(MyViewModel.class);<br>&#125;<br></code></pre></td></tr></table></figure></p><h2 id="ANR"><a href="#ANR" class="headerlink" title="ANR"></a>ANR</h2><h3 id="死循环导致的ANR"><a href="#死循环导致的ANR" class="headerlink" title="死循环导致的ANR"></a>死循环导致的ANR</h3><p>之前业务逻辑中，有一个随机添加不重复字符串的功能。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span> (needCheckList.size() &lt; <span class="hljs-number">3</span>) &#123;<br>    <span class="hljs-type">Random</span> <span class="hljs-variable">rd</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">word</span> <span class="hljs-operator">=</span> wordList.get(rd.nextInt(wordList.size()));<br>    <span class="hljs-keyword">if</span>(!needCheckList.contains(word)) &#123;<br>        needCheckList.add(word);<br>    &#125;<br>    <span class="hljs-comment">// .....</span><br>&#125;<br></code></pre></td></tr></table></figure><br>这段代码的效率不高。伪随机数不能保证高效地不重复地取到新的下标。<br>在某些性能较差的手机上，陷入多次循环后有可能导致anr。 anr message 表明此时CPU占用率超过100%。<br>我们使用<code>Collections.shuffle(wordList);</code>来代替伪随机数，也能实现随机取出字符串的效果。提高健壮性。</p><h2 id="gradle"><a href="#gradle" class="headerlink" title="gradle"></a>gradle</h2><p>想在Terminal里使用gradlew命令，还得先在电脑上安装jdk。<br>现在（2019-11-18）想在官网下载个jdk，还得登录oracle账号。网速很慢，去别的地方下载jdk-8u181-windows-x64。</p><h3 id="多渠道自动打包"><a href="#多渠道自动打包" class="headerlink" title="多渠道自动打包"></a>多渠道自动打包</h3><p>假设我们有很多种渠道，每个渠道的<code>manifestPlaceholders</code>的内容都不同。<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gradle">productFlavors &#123;<br>    xxx &#123;<br>        manifestPlaceholders = [XX_ID  : <span class="hljs-string">&quot;123&quot;</span>,<br>                                XX_KEY : <span class="hljs-string">&quot;key_key&quot;</span>]<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>之前渠道少的时候，可以点击gradle task一个个来打包。<br>现在渠道种类多了（比如二十多个），再一个个点击就很累。想要一键打包或者一行命令打包，有什么成熟好用的多渠道打包方式呢？<br>我们尝试了<a href="https://github.com/Meituan-Dianping/walle">美团点评的walle</a>，号称是<code>Android Signature V2 Scheme签名下的新一代渠道包打包神器</code>。<br>试着接入walle的姿势可能不对，打包不成功。此时看到有人说<a href="https://github.com/Meituan-Dianping/walle/issues/312">不支持多渠道不同的包名和配置manifestPlaceholders</a>，暂时先不使用walle。</p><p>已经使用了Bugly，有很多形如<code>assembleXxxRelease</code>的任务。<br>我们可以在终端命令行里执行gradlew命令来打包。<br>Windows环境下就是<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bat">gradlew assembleXxxRelease<br></code></pre></td></tr></table></figure></p><p>那么写一个bat脚本，把这几十个渠道包按顺序一个个打包出来。<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bat">gradlew assembleXxxRelease &amp;&amp; gradlew assembleYyyRelease &amp;&amp; gradlew assembleZzzRelease<br></code></pre></td></tr></table></figure><br>这个方法非常“暴力”，仅仅是替代了手动执行的过程。</p><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><h3 id="BindingCommand-问题"><a href="#BindingCommand-问题" class="headerlink" title="BindingCommand 问题"></a>BindingCommand 问题</h3><p>由于历史原因，App使用了一个MVVM框架。layout中可以绑定BindingCommand。<br>不知道是不是开发姿势不对，快速点击某个按钮时，对应的<code>BindingCommand</code>并不能立即响应。连续点击会错过点击事件。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">BindingCommand</span> <span class="hljs-variable">myCommand</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BindingCommand</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BindingAction</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">call</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// my logic</span><br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure></p><p>而换用<code>setOnClickListener</code>可以立刻监听到每一个点击事件。<br>为了追求响应速度，在某些地方采用设置监听器的方式了。</p><h2 id="界面UI"><a href="#界面UI" class="headerlink" title="界面UI"></a>界面UI</h2><h3 id="android-跑马灯重复抖动的解决方法"><a href="#android-跑马灯重复抖动的解决方法" class="headerlink" title="android 跑马灯重复抖动的解决方法"></a>android 跑马灯重复抖动的解决方法</h3><p>解决的方法，在跑马灯控件外层，再嵌套一个布局控件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;0dp&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_weight</span>=<span class="hljs-string">&quot;55&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;horizontal&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">com.rustfisher.view.MarqueeTextView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/tv_name&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:ellipsize</span>=<span class="hljs-string">&quot;marquee&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:focusable</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:focusableInTouchMode</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:maxWidth</span>=<span class="hljs-string">&quot;150dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:singleLine</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;10sp&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="EditText划词选词弹出菜单"><a href="#EditText划词选词弹出菜单" class="headerlink" title="EditText划词选词弹出菜单"></a>EditText划词选词弹出菜单</h3><p>et可选，弹出了系统的菜单。</p><p>et不可选，弹出了自定义的菜单。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">registerForContextMenu(mEt);<br>mEt.setOnCreateContextMenuListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">View</span>.OnCreateContextMenuListener() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreateContextMenu</span><span class="hljs-params">(<span class="hljs-keyword">final</span> ContextMenu menu, View v, ContextMenu.ContextMenuInfo menuInfo)</span> &#123;<br>        Log.d(TAG, <span class="hljs-string">&quot;onCreateContextMenu: selected: &quot;</span> + mEt.getSelectionStart() + <span class="hljs-string">&quot;, &quot;</span> + mEt.getSelectionEnd()); <span class="hljs-comment">// 都是0</span><br>        getMenuInflater().inflate(R.menu.et_menu, menu);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure></p><p>et可选，弹出了自定义菜单。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java">mEt.setCustomSelectionActionModeCallback(genActionModeCallback1());<br><br><span class="hljs-keyword">private</span> ActionMode.Callback <span class="hljs-title function_">genActionModeCallback1</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActionMode</span>.Callback() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onCreateActionMode</span><span class="hljs-params">(ActionMode mode, Menu menu)</span> &#123;<br>            Log.d(TAG, <span class="hljs-string">&quot;onCreateActionMode:&quot;</span><br>                    + <span class="hljs-string">&quot; selected: &quot;</span> + mEt.getSelectionStart() + <span class="hljs-string">&quot;, &quot;</span> + mEt.getSelectionEnd());<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onPrepareActionMode</span><span class="hljs-params">(ActionMode mode, Menu menu)</span> &#123;<br>            Log.d(TAG, <span class="hljs-string">&quot;onPrepareActionMode: &quot;</span> + <span class="hljs-string">&quot; selected: &quot;</span> + mEt.getSelectionStart() + <span class="hljs-string">&quot;, &quot;</span> + mEt.getSelectionEnd());<br>            menu.clear();<br>            mode.getMenuInflater().inflate(R.menu.et_menu, menu);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onActionItemClicked</span><span class="hljs-params">(ActionMode mode, MenuItem item)</span> &#123;<br>            Log.d(TAG, <span class="hljs-string">&quot;onActionItemClicked: &quot;</span> + <span class="hljs-string">&quot; selected: &quot;</span> + mEt.getSelectionStart() + <span class="hljs-string">&quot;, &quot;</span> + mEt.getSelectionEnd());<br>            mode.finish();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onDestroyActionMode</span><span class="hljs-params">(ActionMode mode)</span> &#123;<br>            Log.d(TAG, <span class="hljs-string">&quot;onDestroyActionMode: &quot;</span> + <span class="hljs-string">&quot; selected: &quot;</span> + mEt.getSelectionStart() + <span class="hljs-string">&quot;, &quot;</span> + mEt.getSelectionEnd());<br>        &#125;<br>    &#125;;<br>&#125;<br><br></code></pre></td></tr></table></figure><br>1+手机可以用，但小米手机无法弹出自定义菜单。此法不能通用。</p><h3 id="竖直的进度条"><a href="#竖直的进度条" class="headerlink" title="竖直的进度条"></a>竖直的进度条</h3><p><a href="https://stackoverflow.com/questions/3926395/android-set-a-progressbar-to-be-a-vertical-bar-instead-of-horizontal">https://stackoverflow.com/questions/3926395/android-set-a-progressbar-to-be-a-vertical-bar-instead-of-horizontal</a></p><h3 id="获取statusbar高度"><a href="#获取statusbar高度" class="headerlink" title="获取statusbar高度"></a>获取statusbar高度</h3><p>在Activity中获取DecorView。通过DecorView的位置来判断statusBar的高度。Activity别设置成全屏的就好。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getStatusBarHeight</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Rect</span> <span class="hljs-variable">rectangle</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Rect</span>();<br>    <span class="hljs-type">Window</span> <span class="hljs-variable">window</span> <span class="hljs-operator">=</span> getWindow();<br>    window.getDecorView().getWindowVisibleDisplayFrame(rectangle);<br>    Log.d(TAG, <span class="hljs-string">&quot;getStatusBarHeight: &quot;</span> + rectangle.top);<br>&#125;<br></code></pre></td></tr></table></figure><p>让statusbar不占位置，并设置成透明背景。<br>底下的虚拟系统按键（Home，back，menu）不能受影响。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;AppTheme&quot;</span> <span class="hljs-attr">parent</span>=<span class="hljs-string">&quot;Theme.AppCompat.DayNight.NoActionBar&quot;</span>&gt;</span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;android:windowTranslucentStatus&quot;</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;android:windowTranslucentNavigation&quot;</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;android:statusBarColor&quot;</span>&gt;</span>@android:color/transparent<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><br><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure></p><h3 id="drawable-vector-assets"><a href="#drawable-vector-assets" class="headerlink" title="drawable - vector assets"></a>drawable - vector assets</h3><p>通过引入svg文件得到的drawable，layout中直接设置src使用drawable。小米4c和红米6A手机屏幕上图像错乱。<br>改变ImageView的大小不起作用。清楚as缓存也不起作用。</p><p>如果不在layout中设置，而是在代码中<code>setImageResource</code>则显示正常。</p><h3 id="设计界面"><a href="#设计界面" class="headerlink" title="设计界面"></a>设计界面</h3><p>去花瓣网上找灵感。<br>比如设计列表界面，可以给每个项目增加一个小背景。可以是颜色，可以是背景图。</p><h2 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h2><h3 id="设计接口获取数据"><a href="#设计接口获取数据" class="headerlink" title="设计接口获取数据"></a>设计接口获取数据</h3><p>项目里用OKHttp框架来进行网络请求。返回结果被转化成对象<code>Entity</code>。<br>同一个服务器返回里装有相同结构的A,B,C对象。它们的名字不一样，GsonFormat的时候是分开成3个类的。<br>为了让代码更简洁，把这3个对象进行抽象。<br>一开始是做了一个抽象类，让这3个类继承。但是OKHttp那边会报错。</p><p>然后改用了接口的方式。设计的接口里有一些通用方法。在<code>Entity</code>里让那3个类都实现这个接口，然后在方法中返回我们要的数据。</p><h2 id="AsyncTask"><a href="#AsyncTask" class="headerlink" title="AsyncTask"></a>AsyncTask</h2><h3 id="资源分配"><a href="#资源分配" class="headerlink" title="资源分配"></a>资源分配</h3><p>AsyncTask背后有一个线程池。调用了<code>execute()</code>并不能保证任务立刻被执行。<br>换用Thread。</p><h2 id="App设置"><a href="#App设置" class="headerlink" title="App设置"></a>App设置</h2><h3 id="分屏设置"><a href="#分屏设置" class="headerlink" title="分屏设置"></a>分屏设置</h3><p>如果不进行设置，默认是允许分屏的。这里我们把分屏给禁止。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">android:networkSecurityConfig=&quot;@xml/network_security_config&quot;<br>android:resizeableActivity=&quot;false&quot;<br></code></pre></td></tr></table></figure></p><p>添加在application标签里。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">application</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;.app.MyApplication&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:allowBackup</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:icon</span>=<span class="hljs-string">&quot;@mipmap/ic_launcher&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:label</span>=<span class="hljs-string">&quot;@string/app_name&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:networkSecurityConfig</span>=<span class="hljs-string">&quot;@xml/network_security_config&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:theme</span>=<span class="hljs-string">&quot;@style/AppTheme&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure></p><h2 id="adb"><a href="#adb" class="headerlink" title="adb"></a>adb</h2><h3 id="系统App"><a href="#系统App" class="headerlink" title="系统App"></a>系统App</h3><p>把apk放进root后的手机里，当做是系统app。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-function">F:\<span class="hljs-title">IE</span>\<span class="hljs-title">MyApp0826</span>\<span class="hljs-title">app</span>\<span class="hljs-title">libs</span>&gt;<span class="hljs-title">adb</span> <span class="hljs-title">root</span></span><br><span class="hljs-function"><span class="hljs-title">F</span>:\<span class="hljs-title">IE</span>\<span class="hljs-title">MyApp0826</span>\<span class="hljs-title">app</span>\<span class="hljs-title">libs</span>&gt;<span class="hljs-title">adb</span> <span class="hljs-title">remount</span></span><br><span class="hljs-function"><span class="hljs-title">remount</span> <span class="hljs-title">succeeded</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">F</span>:\<span class="hljs-title">IE</span>\<span class="hljs-title">MyApp0826</span>\<span class="hljs-title">app</span>\<span class="hljs-title">libs</span>&gt;<span class="hljs-title">adb</span> <span class="hljs-title">shell</span> <span class="hljs-title">mkdir</span> /<span class="hljs-title">system</span>/<span class="hljs-title">priv</span>-<span class="hljs-title">app</span>/<span class="hljs-title">MyApp</span></span><br><span class="hljs-function"><span class="hljs-title">F</span>:\<span class="hljs-title">IE</span>\<span class="hljs-title">MyApp0826</span>\<span class="hljs-title">app</span>\<span class="hljs-title">libs</span>&gt;<span class="hljs-title">adb</span> <span class="hljs-title">shell</span> <span class="hljs-title">chmod</span> 755 /<span class="hljs-title">system</span>/<span class="hljs-title">priv</span>-<span class="hljs-title">app</span>/<span class="hljs-title">MyApp</span></span><br><span class="hljs-function"><span class="hljs-title">F</span>:\<span class="hljs-title">IE</span>\<span class="hljs-title">MyApp0826</span>\<span class="hljs-title">app</span>\<span class="hljs-title">libs</span>&gt;<span class="hljs-title">adb</span> <span class="hljs-title">shell</span> <span class="hljs-title">chmod</span> 644 /<span class="hljs-title">system</span>/<span class="hljs-title">priv</span>-<span class="hljs-title">app</span>/<span class="hljs-title">MyApp</span>/<span class="hljs-title">MyApp.apk</span></span><br><span class="hljs-function"><span class="hljs-title">F</span>:\<span class="hljs-title">IE</span>\<span class="hljs-title">MyApp0826</span>\<span class="hljs-title">app</span>\<span class="hljs-title">libs</span>&gt;<span class="hljs-title">adb</span> <span class="hljs-title">shell</span> <span class="hljs-title">chmod</span> 755 /<span class="hljs-title">system</span>/<span class="hljs-title">priv</span>-<span class="hljs-title">app</span>/<span class="hljs-title">MyApp</span>/<span class="hljs-title">lib</span></span><br><span class="hljs-function"><span class="hljs-title">F</span>:\<span class="hljs-title">IE</span>\<span class="hljs-title">MyApp0826</span>\<span class="hljs-title">app</span>\<span class="hljs-title">libs</span>&gt;<span class="hljs-title">adb</span> <span class="hljs-title">shell</span> <span class="hljs-title">chmod</span> 755 /<span class="hljs-title">system</span>/<span class="hljs-title">priv</span>-<span class="hljs-title">app</span>/<span class="hljs-title">MyApp</span>/<span class="hljs-title">lib</span>/<span class="hljs-title">arm</span></span><br><span class="hljs-function"><span class="hljs-title">F</span>:\<span class="hljs-title">IE</span>\<span class="hljs-title">MyApp0826</span>\<span class="hljs-title">app</span>\<span class="hljs-title">libs</span>&gt;<span class="hljs-title">adb</span> <span class="hljs-title">shell</span> <span class="hljs-title">sync</span></span><br><span class="hljs-function"><span class="hljs-title">F</span>:\<span class="hljs-title">IE</span>\<span class="hljs-title">MyApp0826</span>\<span class="hljs-title">app</span>\<span class="hljs-title">libs</span>&gt;<span class="hljs-title">adb</span> <span class="hljs-title">shell</span> <span class="hljs-title">reboot</span></span><br></code></pre></td></tr></table></figure><h3 id="范围内随机数"><a href="#范围内随机数" class="headerlink" title="范围内随机数"></a>范围内随机数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Random</span> <span class="hljs-variable">rand</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>(seed);<br><span class="hljs-type">int</span> <span class="hljs-variable">random_integer</span> <span class="hljs-operator">=</span> rand.nextInt(upperbound-lowerbound) + lowerbound;<br></code></pre></td></tr></table></figure><h2 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h2><h3 id="Handler与单例"><a href="#Handler与单例" class="headerlink" title="Handler与单例"></a>Handler与单例</h3><p>单例模式加上Handler。有人把handler直接交给单例。长生命周期的一直持有短生命周期的对象，没法回收造成内存泄漏。</p><p>viewModel中有一个handler，而handler被单例持有。handler是直接实例化的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">aHandler = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Handler</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleMessage</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Message msg)</span> &#123;<br>        handleResult(msg);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><br>handleResult方法中使用了viewModel的数据列表。</p><p>这样在新建一个viewModel的时候，单例持有旧的handler，handler持有的还是旧的那个数据列表。<br>内存中就有2份不一样的数据列表。</p><p>修复方案：<br>首先不能让单例持有这个handler。<br>其次退出viewModel的时候，把handler中的消息清空。</p>]]></content>
    
    
    <categories>
      
      <category>Android_note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android OkHttp + Retrofit 使用示例</title>
    <link href="/Android/Android-OkHttp_Retrofit_use_intro/"/>
    <url>/Android/Android-OkHttp_Retrofit_use_intro/</url>
    
    <content type="html"><![CDATA[<p><a href="https://rustfisher.com/2018/08/22/Android/Android-OkHttp_Retrofit_use_intro/">本文链接</a></p><p>OkHttp + Retrofit使用示例。从引入依赖，编写接口，到发起网络请求。</p><p><a href="https://github.com/square/okhttp">https://github.com/square/okhttp</a></p><h1 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h1><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><p>引入依赖，使用Retrofit2。<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">implementation</span> &#x27;com.squareup.retrofit2:retrofit:<span class="hljs-number">2</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span>&#x27;<br><span class="hljs-attribute">implementation</span> &#x27;com.squareup.retrofit2:converter-gson:<span class="hljs-number">2</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span>&#x27;<br><span class="hljs-attribute">implementation</span> &#x27;com.squareup.retrofit2:adapter-rxjava:<span class="hljs-number">2</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span>&#x27;<br></code></pre></td></tr></table></figure></p><h2 id="查询-Query"><a href="#查询-Query" class="headerlink" title="查询 @Query"></a>查询 <code>@Query</code></h2><p>例如URL <code>https://base_url/backend-service/config?env=dev</code>，问号后面属于查询内容。<br>不论是GET或POST，都要用<code>@Query</code>这个注解。否则会报异常。</p><h2 id="URL填充与拼接"><a href="#URL填充与拼接" class="headerlink" title="URL填充与拼接"></a>URL填充与拼接</h2><p>单纯URL填充可以用<code>@Path</code>注解。<br>例如下面这个post请求。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@POST(&quot;user-service/user/&#123;uid&#125;/token/refresh&quot;)</span><br>Call&lt;RefreshTokenResp&gt; <span class="hljs-title function_">refreshToken</span><span class="hljs-params">(<span class="hljs-meta">@Path(&quot;uid&quot;)</span> String uid, <span class="hljs-meta">@Query(&quot;token&quot;)</span> String token)</span>;<br></code></pre></td></tr></table></figure></p><h2 id="GET带有查询的参数"><a href="#GET带有查询的参数" class="headerlink" title="GET带有查询的参数"></a>GET带有查询的参数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">CfgService</span> &#123;<br><br>    <span class="hljs-meta">@GET(&quot;backend-service/config&quot;)</span><br>    Call&lt;ServerCfgResp&gt; <span class="hljs-title function_">getServerCfg</span><span class="hljs-params">(<span class="hljs-meta">@Query(&quot;env&quot;)</span> String env)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="POST，带有查询的参数和body"><a href="#POST，带有查询的参数和body" class="headerlink" title="POST，带有查询的参数和body"></a>POST，带有查询的参数和body</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-meta">@POST(&quot;user-service/login&quot;)</span><br>    Call&lt;LoginResp&gt; <span class="hljs-title function_">login</span><span class="hljs-params">(<span class="hljs-meta">@Query(&quot;lenovoST&quot;)</span> String token, <span class="hljs-meta">@Query(&quot;realm&quot;)</span> String realm,</span><br><span class="hljs-params">                            <span class="hljs-meta">@Body</span> RequestBody body)</span>;<br><br>    <span class="hljs-meta">@POST(&quot;user-service/logout&quot;)</span><br>    Call&lt;CommonEntity&gt; <span class="hljs-title function_">logout</span><span class="hljs-params">(<span class="hljs-meta">@Query(&quot;token&quot;)</span> String token, <span class="hljs-meta">@Body</span> RequestBody body)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用的时候要创建<code>RequestBody</code>；先调查好后台接受的body类型。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>map.put(<span class="hljs-string">&quot;system&quot;</span>, <span class="hljs-string">&quot;Android&quot;</span>);<br>map.put(<span class="hljs-string">&quot;phoneBrand&quot;</span>, Build.BRAND);<br>map.put(<span class="hljs-string">&quot;modelNum&quot;</span>, Build.MODEL);<br><span class="hljs-type">Gson</span> <span class="hljs-variable">gson</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>();<br><span class="hljs-type">String</span> <span class="hljs-variable">bodyJson</span> <span class="hljs-operator">=</span> gson.toJson(map);<br><span class="hljs-type">RequestBody</span> <span class="hljs-variable">requestBody</span> <span class="hljs-operator">=</span> RequestBody.create(MediaType.parse(<span class="hljs-string">&quot;application/json&quot;</span>), bodyJson);<br></code></pre></td></tr></table></figure></p><p>初始化<code>OkHttpClient</code>；这里信任所有的SSL证书（正式环境不建议这么做）。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> CfgService cfgService;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initService</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">SSLSocketFactory</span> <span class="hljs-variable">sslSocketFactory</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            sslSocketFactory = SSLUtils.getSSLSocketFactory();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        OkHttpClient.<span class="hljs-type">Builder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OkHttpClient</span>.Builder();<br>        <span class="hljs-keyword">if</span> (sslSocketFactory != <span class="hljs-literal">null</span>) &#123;<br>            Log.d(TAG, <span class="hljs-string">&quot;sslSocketFactory != null&quot;</span>);<br>            builder.sslSocketFactory(sslSocketFactory);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            Log.w(TAG, <span class="hljs-string">&quot;sslSocketFactory == null&quot;</span>);<br>        &#125;<br>        builder.hostnameVerifier(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HostnameVerifier</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">verify</span><span class="hljs-params">(String hostname, SSLSession session)</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// 强制返回true</span><br>            &#125;<br>        &#125;);<br>        <span class="hljs-type">OkHttpClient</span> <span class="hljs-variable">lenClient</span> <span class="hljs-operator">=</span> builder.build();<br>        <span class="hljs-type">Retrofit</span> <span class="hljs-variable">retrofit</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Retrofit</span>.Builder()<br>                .baseUrl(ServerCfg.HOST_URL)<br>                .client(lenClient)<br>                .addCallAdapterFactory(RxJavaCallAdapterFactory.create())<br>                .addConverterFactory(GsonConverterFactory.create())<br>                .build();<br>        cfgService = retrofit.create(CfgService.class);<br>    &#125;<br></code></pre></td></tr></table></figure></p><h2 id="调用网络请求"><a href="#调用网络请求" class="headerlink" title="调用网络请求"></a>调用网络请求</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">mNetworkManager.getUserApi().login(mLenovoToken, ServerCfg.RID, requestBody).enqueue(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Callback</span>&lt;LoginResp&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onResponse</span><span class="hljs-params">(Call&lt;LoginResp&gt; call, <span class="hljs-keyword">final</span> Response&lt;LoginResp&gt; response)</span> &#123;<br>                <span class="hljs-comment">//...</span><br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onFailure</span><span class="hljs-params">(Call&lt;LoginResp&gt; call, <span class="hljs-keyword">final</span> Throwable t)</span> &#123;<br>                <span class="hljs-comment">//...</span><br>            &#125;<br>        &#125;);<br></code></pre></td></tr></table></figure><h2 id="信任所有服务器的ssl"><a href="#信任所有服务器的ssl" class="headerlink" title="信任所有服务器的ssl"></a>信任所有服务器的ssl</h2><p><strong>并不推荐这么做</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SSLUtils</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 信任所有服务器</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SSLSocketFactory <span class="hljs-title function_">getSSLSocketFactory</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">SSLSocketFactory</span> <span class="hljs-variable">sslSocketFactory</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">SSLContext</span> <span class="hljs-variable">sslContext</span> <span class="hljs-operator">=</span> SSLContext.getInstance(<span class="hljs-string">&quot;TLS&quot;</span>);<br>        sslContext.init(<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TrustManager</span>[]&#123;createTrustAllManager()&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecureRandom</span>());<br>        sslSocketFactory = sslContext.getSocketFactory();<br>        <span class="hljs-keyword">return</span> sslSocketFactory;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> X509TrustManager <span class="hljs-title function_">createTrustAllManager</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">X509TrustManager</span> <span class="hljs-variable">tm</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            tm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">X509TrustManager</span>() &#123;<br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkClientTrusted</span><span class="hljs-params">(X509Certificate[] chain, String authType)</span><br>                        <span class="hljs-keyword">throws</span> CertificateException &#123;<br>                    <span class="hljs-comment">//do nothing，接受任意客户端证书</span><br>                &#125;<br><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkServerTrusted</span><span class="hljs-params">(X509Certificate[] chain, String authType)</span><br>                        <span class="hljs-keyword">throws</span> CertificateException &#123;<br>                    <span class="hljs-comment">//do nothing，接受任意服务端证书</span><br>                &#125;<br><br>                <span class="hljs-keyword">public</span> X509Certificate[] getAcceptedIssuers() &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">X509Certificate</span>[<span class="hljs-number">0</span>];<br>                &#125;<br>            &#125;;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> tm;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="service使用io-reactivex-Observable"><a href="#service使用io-reactivex-Observable" class="headerlink" title="service使用io.reactivex.Observable"></a>service使用io.reactivex.Observable</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> io.reactivex.Observable; <span class="hljs-comment">// 这个是rx2的包</span><br><span class="hljs-comment">// ---</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户反馈接口</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> content 用户输入的反馈内容</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@POST(&quot;feedbackAction&quot;)</span><br>    Observable&lt;UserFeedback&gt; <span class="hljs-title function_">userFeedback</span><span class="hljs-params">(<span class="hljs-meta">@Query(&quot;appVersion&quot;)</span> String appVersion,</span><br><span class="hljs-params">                                          <span class="hljs-meta">@Query(&quot;phoneModel&quot;)</span> String phoneModel,</span><br><span class="hljs-params">                                          <span class="hljs-meta">@Query(&quot;phoneOsVersion&quot;)</span> String osVersion,</span><br><span class="hljs-params">                                          <span class="hljs-meta">@Query(&quot;submitContent&quot;)</span> String content)</span>;<br><br></code></pre></td></tr></table></figure><h1 id="示例1-Retrofit2，RxJava2"><a href="#示例1-Retrofit2，RxJava2" class="headerlink" title="示例1 - Retrofit2，RxJava2"></a>示例1 - Retrofit2，RxJava2</h1><h2 id="引入依赖-1"><a href="#引入依赖-1" class="headerlink" title="引入依赖"></a>引入依赖</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">implementation</span> &#x27;com.squareup.retrofit2:retrofit:<span class="hljs-number">2</span>.<span class="hljs-number">5</span>.<span class="hljs-number">0</span>&#x27;<br><span class="hljs-attribute">implementation</span> &#x27;com.squareup.retrofit2:converter-gson:<span class="hljs-number">2</span>.<span class="hljs-number">5</span>.<span class="hljs-number">0</span>&#x27;<br><span class="hljs-attribute">implementation</span> &#x27;com.squareup.retrofit2:adapter-rxjava2:<span class="hljs-number">2</span>.<span class="hljs-number">3</span>.<span class="hljs-number">0</span>&#x27;<br><span class="hljs-attribute">implementation</span> &#x27;io.reactivex.rxjava2:rxandroid:<span class="hljs-number">2</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span>&#x27;<br><span class="hljs-attribute">implementation</span> &#x27;io.reactivex.rxjava2:rxjava:<span class="hljs-number">2</span>.<span class="hljs-number">2</span>.<span class="hljs-number">8</span>&#x27;<br></code></pre></td></tr></table></figure><h2 id="定义interface"><a href="#定义interface" class="headerlink" title="定义interface"></a>定义interface</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">import</span> io.reactivex.Observable;<br><span class="hljs-keyword">import</span> retrofit2.http.Field;<br><span class="hljs-keyword">import</span> retrofit2.http.FieldMap;<br><span class="hljs-keyword">import</span> retrofit2.http.FormUrlEncoded;<br><span class="hljs-keyword">import</span> retrofit2.http.GET;<br><span class="hljs-keyword">import</span> retrofit2.http.POST;<br><span class="hljs-keyword">import</span> retrofit2.http.Query;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * RustDrone后台接口</span><br><span class="hljs-comment"> * Created on 2019-5-17</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">RustDroneCommonService</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户反馈接口</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> content 用户输入的反馈内容</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@FormUrlEncoded</span><br>    <span class="hljs-meta">@POST(&quot;feedbackAction&quot;)</span><br>    Observable&lt;FeedbackResp&gt; <span class="hljs-title function_">userFeedback</span><span class="hljs-params">(<span class="hljs-meta">@Field(&quot;appVersion&quot;)</span> String appVersion,</span><br><span class="hljs-params">                                          <span class="hljs-meta">@Field(&quot;phoneModel&quot;)</span> String phoneModel,</span><br><span class="hljs-params">                                          <span class="hljs-meta">@Field(&quot;phoneOsVersion&quot;)</span> String osVersion,</span><br><span class="hljs-params">                                          <span class="hljs-meta">@Field(&quot;submitContent&quot;)</span> String content,</span><br><span class="hljs-params">                                          <span class="hljs-meta">@FieldMap</span> Map&lt;String, String&gt; map)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取手机验证码</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mobile 手机号</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GET(&quot;verifyCode&quot;)</span><br>    Observable&lt;PhoneCodeResp&gt; <span class="hljs-title function_">getPhoneCode</span><span class="hljs-params">(<span class="hljs-meta">@Query(&quot;mobile&quot;)</span> String mobile, <span class="hljs-meta">@Query(&quot;oprType&quot;)</span> <span class="hljs-type">int</span> type)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="调用接口"><a href="#调用接口" class="headerlink" title="调用接口"></a>调用接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> io.reactivex.Observer;<br><span class="hljs-keyword">import</span> io.reactivex.android.schedulers.AndroidSchedulers;<br><span class="hljs-keyword">import</span> io.reactivex.disposables.Disposable;<br><span class="hljs-keyword">import</span> io.reactivex.schedulers.Schedulers;<br><br>RustDroneDataCenter.getCenter().getCommonService().userFeedback(BuildConfig.VERSION_NAME,<br>                    Build.MODEL.replace(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;-&quot;</span>), Build.VERSION.RELEASE, fd, ext)<br>                    .subscribeOn(Schedulers.newThread())<br>                    .observeOn(AndroidSchedulers.mainThread())<br>                    .subscribe(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Observer</span>&lt;FeedbackResp&gt;() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onSubscribe</span><span class="hljs-params">(Disposable d)</span> &#123;<br><span class="hljs-comment">//                            LL.dn(TAG, &quot;onSubscribe: &quot; + d);</span><br>                        &#125;<br><br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onNext</span><span class="hljs-params">(FeedbackResp feedbackResp)</span> &#123;<br>                            LL.dn(TAG, <span class="hljs-string">&quot;onNext: &quot;</span> + feedbackResp);<br>                            <span class="hljs-keyword">if</span> (feedbackResp.getCode() == <span class="hljs-number">0</span>) &#123;<br>                                popSubmitSuccessDialog();<br>                            &#125; <span class="hljs-keyword">else</span> &#123;<br>                                LL.e(<span class="hljs-string">&quot;上传用户反馈失败&quot;</span>);<br>                                mPbLayout.setVisibility(View.GONE);<br>                                popRetryDialog();<br>                            &#125;<br>                        &#125;<br><br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onError</span><span class="hljs-params">(Throwable e)</span> &#123;<br>                            LL.e(<span class="hljs-string">&quot;上传用户反馈失败 code: &quot;</span> + e);<br>                            mPbLayout.setVisibility(View.GONE);<br>                            popRetryDialog();<br>                        &#125;<br><br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onComplete</span><span class="hljs-params">()</span> &#123;<br>                            mPbLayout.setVisibility(View.GONE);<br>                            LL.dn(TAG, <span class="hljs-string">&quot;onComplete: 上传结束&quot;</span>);<br>                        &#125;<br>                    &#125;);<br></code></pre></td></tr></table></figure><h1 id="GithubOnAndroid示例"><a href="#GithubOnAndroid示例" class="headerlink" title="GithubOnAndroid示例"></a>GithubOnAndroid示例</h1><p>代码地址： <a href="https://github.com/RustFisher/GithubOnAndroid">https://github.com/RustFisher/GithubOnAndroid</a></p><h2 id="添加拦截器"><a href="#添加拦截器" class="headerlink" title="添加拦截器"></a>添加拦截器</h2><h3 id="定义拦截器"><a href="#定义拦截器" class="headerlink" title="定义拦截器"></a>定义拦截器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 仅仅是示例，不做任何处理</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">Interceptor</span> <span class="hljs-variable">doNothingInterceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Interceptor</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Response <span class="hljs-title function_">intercept</span><span class="hljs-params">(Chain chain)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        Log.d(TAG, <span class="hljs-string">&quot;Interceptor1: intercept&quot;</span>);<br>        <span class="hljs-keyword">return</span> chain.proceed(chain.request());<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="添加拦截器-1"><a href="#添加拦截器-1" class="headerlink" title="添加拦截器"></a>添加拦截器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">OkHttpClient</span> <span class="hljs-variable">okHttpClient</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OkHttpClient</span>.Builder()<br>                .readTimeout(<span class="hljs-number">10</span>, TimeUnit.SECONDS)<br>                .connectTimeout(<span class="hljs-number">10</span>, TimeUnit.SECONDS)<br>                .addInterceptor(doNothingInterceptor) <span class="hljs-comment">// 添加拦截器</span><br>                .addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Interceptor</span>() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> Response <span class="hljs-title function_">intercept</span><span class="hljs-params">(Chain chain)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>                        Log.d(TAG, <span class="hljs-string">&quot;Interceptor2: intercept&quot;</span>);<br>                        <span class="hljs-keyword">return</span> chain.proceed(chain.request());<br>                    &#125;<br>                &#125;)<br>                .addNetworkInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Interceptor</span>() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> Response <span class="hljs-title function_">intercept</span><span class="hljs-params">(Chain chain)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>                        Log.d(TAG, <span class="hljs-string">&quot;NetworkInterceptor1: intercept&quot;</span>);<br>                        <span class="hljs-keyword">return</span> chain.proceed(chain.request());<br>                    &#125;<br>                &#125;)<br>                .build();<br></code></pre></td></tr></table></figure><h4 id="拦截器中增加header"><a href="#拦截器中增加header" class="headerlink" title="拦截器中增加header"></a>拦截器中增加header</h4><p>操作chain中的request。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">// 添加一些公共参数</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">Interceptor</span> <span class="hljs-variable">RustDroneInterceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Interceptor</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Response <span class="hljs-title function_">intercept</span><span class="hljs-params">(Chain chain)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">Request</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> chain.request().newBuilder()<br>                .addHeader(<span class="hljs-string">&quot;token&quot;</span>, UserCenter.getToken())<br>                .build();<br>        <span class="hljs-keyword">return</span> chain.proceed(request);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>更多请参考：</p><p><a href="https://rustfisher.com/2018/08/22/Android/Android-OkHttp_Retrofit_use_intro/">Android OkHttp + Retrofit 使用示例</a></p><p><a href="https://rustfisher.com/2019/06/26/Android/Android-OkHttp_Retrofit_cancel_request/">Android OkHttp + Retrofit 取消请求的方法</a></p><p><a href="https://rustfisher.com/2019/10/18/Android/Android-OkHttp_Retrofit_download_file/">Android OkHttp + Retrofit 下载文件与进度监听</a></p><p><a href="https://rustfisher.com/2019/10/18/Android/Android-OkHttp_Retrofit_download_file_partial/">Android OkHttp + Retrofit 断点续传</a></p>]]></content>
    
    
    <categories>
      
      <category>Android_note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>network</tag>
      
      <tag>OkHttp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「drone」开发记录</title>
    <link href="/Dev-note/dev-note-app-drone/"/>
    <url>/Dev-note/dev-note-app-drone/</url>
    
    <content type="html"><![CDATA[<h2 id="斜体文字被切掉了一块"><a href="#斜体文字被切掉了一块" class="headerlink" title="斜体文字被切掉了一块"></a>斜体文字被切掉了一块</h2><p>TextView.setText的时候在右边加上一个空格。</p><p>或者<code>string.xml</code>中添加<code>&amp;#x200A;</code>来占位。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">string</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dp_page_ready&quot;</span>&gt;</span>READY<span class="hljs-symbol">&amp;#x200A;</span><span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br></code></pre></td></tr></table></figure><p>或者在TextView.setText的时候加上一个空格。</p><h2 id="动态给LinearLayout添加子View"><a href="#动态给LinearLayout添加子View" class="headerlink" title="动态给LinearLayout添加子View"></a>动态给LinearLayout添加子View</h2><p>一列27个自定义view，如果要写到xml里就太麻烦了。<br>在Java代码中新建子View，设置LayoutParams，然后添加到LinearLayout里。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initGrids</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">bigGridHeightPx</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) dpToPx(<span class="hljs-number">10</span>);<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">bigGrid2MarginVerticalPx</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) dpToPx(<span class="hljs-number">3</span>);<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">smallGridHeightPx</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) dpToPx(<span class="hljs-number">6</span>); <span class="hljs-comment">// 这里有27个格点</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">smallGridMarginBotPx</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) dpToPx(<span class="hljs-number">1</span>);<br><br>    <span class="hljs-type">LinearLayout</span> <span class="hljs-variable">linearLayoutLeft1</span> <span class="hljs-operator">=</span> findViewById(R.id.dp_page_g_field_left1);<br>    <span class="hljs-type">LinearLayout</span> <span class="hljs-variable">linearLayoutLeft2</span> <span class="hljs-operator">=</span> findViewById(R.id.dp_page_g_field_left2);<br>    mLeftGridList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-type">GridsHorView</span> <span class="hljs-variable">g1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GridsHorView</span>(<span class="hljs-built_in">this</span>);<br>    <span class="hljs-type">GridsHorView</span> <span class="hljs-variable">g2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GridsHorView</span>(<span class="hljs-built_in">this</span>);<br>    <span class="hljs-type">GridsHorView</span> <span class="hljs-variable">g3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GridsHorView</span>(<span class="hljs-built_in">this</span>);<br><br>    LinearLayout.<span class="hljs-type">LayoutParams</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinearLayout</span>.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, bigGridHeightPx);<br>    LinearLayout.<span class="hljs-type">LayoutParams</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinearLayout</span>.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, bigGridHeightPx);<br>    p2.setMargins(<span class="hljs-number">0</span>, bigGrid2MarginVerticalPx, <span class="hljs-number">0</span>, bigGrid2MarginVerticalPx);<br>    linearLayoutLeft1.addView(g1, p1);<br>    linearLayoutLeft1.addView(g2, p2);<br>    linearLayoutLeft1.addView(g3, p1);<br>    mLeftGridList.addAll(Arrays.asList(g1, g2, g3));<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">27</span>; i++) &#123;<br>        <span class="hljs-type">GridsHorView</span> <span class="hljs-variable">smallGrid</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GridsHorView</span>(<span class="hljs-built_in">this</span>);<br>        smallGrid.setAlphaValue((<span class="hljs-type">int</span>) (<span class="hljs-number">255</span> * (<span class="hljs-number">1</span> - <span class="hljs-number">0.02</span> * i)));<br>        LinearLayout.<span class="hljs-type">LayoutParams</span> <span class="hljs-variable">sp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinearLayout</span>.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, smallGridHeightPx);<br>        sp.setMargins(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, smallGridMarginBotPx);<br>        mLeftGridList.add(smallGrid);<br>        linearLayoutLeft2.addView(smallGrid, sp);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (GridsHorView g : mLeftGridList) &#123;<br>        g.setOri(GridsHorView.Ori.RIGHT_TO_LEFT);<br>        g.disableMode();<br>        g.setCubeCount(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 初始化右边（P2）的格子...</span><br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">float</span> <span class="hljs-title function_">dpToPx</span><span class="hljs-params">(<span class="hljs-type">float</span> dp)</span> &#123;<br>    <span class="hljs-keyword">return</span> dp * getResources().getDisplayMetrics().density;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="获取当前WiFi的名字"><a href="#获取当前WiFi的名字" class="headerlink" title="获取当前WiFi的名字"></a>获取当前WiFi的名字</h2><p>需要定位权限。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getWiFiName</span><span class="hljs-params">(Context context)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">wifiId</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;WIFI_NAME_NOT_FOUND&quot;</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">WifiManager</span> <span class="hljs-variable">wifiMgr</span> <span class="hljs-operator">=</span> (WifiManager) context.getSystemService(Context.WIFI_SERVICE);<br>        <span class="hljs-type">WifiInfo</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> wifiMgr.getConnectionInfo();<br>        wifiId = info != <span class="hljs-literal">null</span> ? info.getSSID() : <span class="hljs-literal">null</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!TextUtils.isEmpty(wifiId) &amp;&amp; wifiId.startsWith(<span class="hljs-string">&quot;\&quot;&quot;</span>)) &#123;<br>        wifiId = wifiId.substring(<span class="hljs-number">1</span>); <span class="hljs-comment">// 删去前面那个引号</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> wifiId;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个方法适用于判断WiFi名称的前缀。</p><h2 id="检查权限的方法"><a href="#检查权限的方法" class="headerlink" title="检查权限的方法"></a>检查权限的方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkPermission</span><span class="hljs-params">(String[] permissions, <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> reqCode)</span> &#123;<br>    List&lt;String&gt; perList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (String p : permissions) &#123;<br>        <span class="hljs-keyword">if</span> (PackageManager.PERMISSION_GRANTED != ContextCompat.checkSelfPermission(<span class="hljs-built_in">this</span>, p)) &#123;<br>            LL.e(<span class="hljs-string">&quot;没有权限: &quot;</span> + p);<br>            perList.add(p);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!perList.isEmpty()) &#123;<br>        String[] per = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[perList.size()];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; per.length; i++) &#123;<br>            per[i] = perList.get(i);<br>        &#125;<br>        ActivityCompat.requestPermissions(<span class="hljs-built_in">this</span>, per, reqCode);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="设置Click监听器"><a href="#设置Click监听器" class="headerlink" title="设置Click监听器"></a>设置Click监听器</h2><p>应用在Activity中，给一堆view设置同一个监听器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 设置点击监听器</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setOnClickListeners</span><span class="hljs-params">(View.OnClickListener l, View... views)</span> &#123;<br>    <span class="hljs-keyword">for</span> (View v : views) &#123;<br>        v.setOnClickListener(l);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setOnClickListeners</span><span class="hljs-params">(View.OnClickListener l, <span class="hljs-type">int</span>... resIds)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> r : resIds) &#123;<br>        findViewById(r).setOnClickListener(l);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="设置字体"><a href="#设置字体" class="headerlink" title="设置字体"></a>设置字体</h2><p>先把字体加载好。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTvPangMenAndItalic</span><span class="hljs-params">(<span class="hljs-type">int</span>... tvResIds)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : tvResIds) &#123;<br>        ((TextView) findViewById(i)).setTypeface(AppControl.getPangMenTf(), Typeface.ITALIC);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTvPangMenAndItalic</span><span class="hljs-params">(TextView... tvs)</span> &#123;<br>    <span class="hljs-keyword">for</span> (TextView t : tvs) &#123;<br>        t.setTypeface(AppControl.getPangMenTf(), Typeface.ITALIC);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="收起软键盘"><a href="#收起软键盘" class="headerlink" title="收起软键盘"></a>收起软键盘</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">hideSoftKeyboard</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">InputMethodManager</span> <span class="hljs-variable">inputMgr</span> <span class="hljs-operator">=</span> (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);<br>        inputMgr.hideSoftInputFromWindow(getCurrentFocus().getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        LL.e(<span class="hljs-string">&quot;rustApp&quot;</span>, e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="判断网络是否有连接"><a href="#判断网络是否有连接" class="headerlink" title="判断网络是否有连接"></a>判断网络是否有连接</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isNetworkAvailable</span><span class="hljs-params">(Context context)</span> &#123;<br>    <span class="hljs-type">ConnectivityManager</span> <span class="hljs-variable">connectivity</span> <span class="hljs-operator">=</span> (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);<br><br>    <span class="hljs-keyword">if</span> (connectivity == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        NetworkInfo[] info = connectivity.getAllNetworkInfo();<br>        <span class="hljs-keyword">if</span> (info != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">for</span> (NetworkInfo anInfo : info) &#123;<br>                <span class="hljs-keyword">if</span> (anInfo.getState() == NetworkInfo.State.CONNECTED) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="判断某个App是否安装"><a href="#判断某个App是否安装" class="headerlink" title="判断某个App是否安装"></a>判断某个App是否安装</h2><p>获取PackageManager通过包名来判断某个App是否安装。<br>但是有的手机在获取PackageManager的时候就能抛出异常。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">appInstalledOrNot</span><span class="hljs-params">(String uri)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">PackageManager</span> <span class="hljs-variable">pm</span> <span class="hljs-operator">=</span> getPackageManager();<br>        pm.getPackageInfo(uri, PackageManager.GET_ACTIVITIES);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        LL.e(<span class="hljs-string">&quot;appInstalledOrNot: &quot;</span> + uri, e);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>总而言之这并不是个很好的办法。</p><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><p>一些性能优化的处理措施和思考。</p><h3 id="给UI线程更多的CPU资源"><a href="#给UI线程更多的CPU资源" class="headerlink" title="给UI线程更多的CPU资源"></a>给UI线程更多的CPU资源</h3><p>数据库的操作放在子线程中进行。数据库线程也可能会和UI线程争抢CPU的时间片。<br>假设数据库要删除大量数据（比如1万条）。<br>那么我们可以尝试在数据库处理了某个数量（例如1千）的操作后，sleep一下，给UI线程让出CPU时间。<br>但现在一般都是多核手机，具体效果有待考量。</p><h2 id="log记录工具"><a href="#log记录工具" class="headerlink" title="log记录工具"></a>log记录工具</h2><p>把log写到文件里。用RandomAccessFile与MappedByteBuffer写日志到文件中。任务处理放在子线程中，由HandlerThread来管理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LL</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Level</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">D</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D&quot;</span>; <span class="hljs-comment">// 普通debug</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">W</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;W&quot;</span>; <span class="hljs-comment">// 警告</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">E</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;E&quot;</span>; <span class="hljs-comment">// 错误</span><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">defTag</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;App&quot;</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">showLogcat</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">writeFile</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-comment">// 注意申请SD卡读写权限</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">logFileDir</span> <span class="hljs-operator">=</span> Environment.getExternalStorageDirectory().getAbsolutePath() +<br>            File.separator + <span class="hljs-string">&quot;rust&quot;</span> + File.separator + <span class="hljs-string">&quot;logs&quot;</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String fileName;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;LogListener&gt; listenerList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> HandlerThread handlerThread;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Handler writerHandler;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">LOG_FILE_GROW_SIZE</span> <span class="hljs-operator">=</span> <span class="hljs-number">1024</span> * <span class="hljs-number">10</span>; <span class="hljs-comment">// log文件每次增长的大小</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-variable">gCurrentLogPos</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;                  <span class="hljs-comment">// log文件当前写到的位置 - 注意要单线程处理</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 使用前必须调用此方法进行准备</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> context 建议传入applicationContext</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> fileDir 存放log文件的目录</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">prepare</span><span class="hljs-params">(Context context, <span class="hljs-meta">@NonNull</span> String fileDir, String logFilePrefix)</span> &#123;<br>        gCurrentLogPos = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (TextUtils.isEmpty(fileDir)) &#123;<br>            <span class="hljs-keyword">if</span> (Environment.getExternalStorageState().equals(<br>                    Environment.MEDIA_MOUNTED)) &#123;<br>                logFileDir = Environment.getExternalStorageDirectory().getAbsolutePath() +<br>                        File.separator + <span class="hljs-string">&quot;rust&quot;</span> + File.separator + <span class="hljs-string">&quot;logs&quot;</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                logFileDir = context.getFilesDir().getAbsolutePath() +<br>                        File.separator + <span class="hljs-string">&quot;rust&quot;</span> + File.separator + <span class="hljs-string">&quot;logs&quot;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            logFileDir = fileDir;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == handlerThread) &#123;<br>            handlerThread = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HandlerThread</span>(<span class="hljs-string">&quot;LL&quot;</span>);<br>            handlerThread.start();<br>        &#125;<br>        writerHandler = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Handler</span>(handlerThread.getLooper());<br>        fileName = logFilePrefix + <span class="hljs-string">&quot;_&quot;</span> + System.currentTimeMillis() + <span class="hljs-string">&quot;.txt&quot;</span>;<br>        Log.d(defTag, <span class="hljs-string">&quot;[prepare] file: &quot;</span> + fileName);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getLogFileDir</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> logFileDir;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getFileName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> fileName;<br>    &#125;<br><br>    <span class="hljs-comment">// 退出</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quit</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (writerHandler != <span class="hljs-literal">null</span>) &#123;<br>            writerHandler.removeCallbacksAndMessages(<span class="hljs-literal">null</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (handlerThread != <span class="hljs-literal">null</span>) &#123;<br>            handlerThread.quit();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDefTag</span><span class="hljs-params">(String t)</span> &#123;<br>        LL.defTag = t;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setWriteFile</span><span class="hljs-params">(<span class="hljs-type">boolean</span> w)</span> &#123;<br>        LL.writeFile = w;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">d</span><span class="hljs-params">(String content)</span> &#123;<br>        d(defTag, content, writeFile);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">d</span><span class="hljs-params">(String tag, String content)</span> &#123;<br>        d(tag, content, writeFile);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dn</span><span class="hljs-params">(String content)</span> &#123;<br>        d(defTag, content, <span class="hljs-literal">false</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 不写到文件中</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dn</span><span class="hljs-params">(String tag, String content)</span> &#123;<br>        d(tag, content, <span class="hljs-literal">false</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">d</span><span class="hljs-params">(String tag, String content, <span class="hljs-type">boolean</span> write)</span> &#123;<br>        <span class="hljs-keyword">if</span> (showLogcat) &#123;<br>            Log.d(tag, content);<br>        &#125;<br>        tellLog(Level.D, tag, content);<br>        <span class="hljs-keyword">if</span> (write) &#123;<br>            <span class="hljs-keyword">if</span> (writerHandler != <span class="hljs-literal">null</span>) &#123;<br>                writerHandler.post(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WriteRunnable</span>(tag, content));<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// log级别 WARN - w</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">w</span><span class="hljs-params">(String content)</span> &#123;<br>        w(defTag, content, writeFile);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">w</span><span class="hljs-params">(String tag, String content)</span> &#123;<br>        w(tag, content, writeFile);<br>    &#125;<br><br>    <span class="hljs-comment">// 不写到文件中</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">wn</span><span class="hljs-params">(String content)</span> &#123;<br>        w(defTag, content, <span class="hljs-literal">false</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 不写到文件中</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">wn</span><span class="hljs-params">(String tag, String content)</span> &#123;<br>        w(tag, content, <span class="hljs-literal">false</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">w</span><span class="hljs-params">(String tag, String content, <span class="hljs-type">boolean</span> write)</span> &#123;<br>        <span class="hljs-keyword">if</span> (showLogcat) &#123;<br>            Log.w(tag, content);<br>        &#125;<br>        tellLog(Level.W, tag, content);<br>        <span class="hljs-keyword">if</span> (write) &#123;<br>            <span class="hljs-keyword">if</span> (writerHandler != <span class="hljs-literal">null</span>) &#123;<br>                writerHandler.post(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WriteRunnable</span>(tag, content));<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">e</span><span class="hljs-params">(String content)</span> &#123;<br>        e(defTag, content);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">e</span><span class="hljs-params">(String tag, String content)</span> &#123;<br>        e(tag, content, writeFile);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">e</span><span class="hljs-params">(String tag, Exception e)</span> &#123;<br>        e(tag, e.getMessage(), writeFile);<br>    &#125;<br><br>    <span class="hljs-comment">// 只打log  不写文件</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">en</span><span class="hljs-params">(String tag, String content)</span> &#123;<br>        e(tag, content, <span class="hljs-literal">false</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">e</span><span class="hljs-params">(String tag, String content, <span class="hljs-type">boolean</span> write)</span> &#123;<br>        <span class="hljs-keyword">if</span> (showLogcat) &#123;<br>            Log.e(tag, content);<br>        &#125;<br>        tellLog(Level.E, tag, content);<br>        <span class="hljs-keyword">if</span> (write) &#123;<br>            <span class="hljs-keyword">if</span> (writerHandler != <span class="hljs-literal">null</span>) &#123;<br>                writerHandler.post(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WriteRunnable</span>(tag, content));<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tellLog</span><span class="hljs-params">(String level, String tag, String content)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != listenerList) &#123;<br>            <span class="hljs-keyword">for</span> (LogListener l : listenerList) &#123;<br>                l.onLog(level, tag, content);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addListener</span><span class="hljs-params">(LogListener l)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == listenerList) &#123;<br>            listenerList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        &#125;<br>        listenerList.add(l);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeListener</span><span class="hljs-params">(LogListener l)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != listenerList) &#123;<br>            listenerList.remove(l);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WriteRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>        String mmTag;<br>        String mmContent;<br><br>        WriteRunnable(String tag, String content) &#123;<br>            <span class="hljs-built_in">this</span>.mmTag = tag;<br>            <span class="hljs-built_in">this</span>.mmContent = content;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">logTimeFormat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;HH:mm:ss.SSS&quot;</span>, Locale.CHINA);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">logContent</span> <span class="hljs-operator">=</span> logTimeFormat.format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()) + <span class="hljs-string">&quot; [&quot;</span> + mmTag + <span class="hljs-string">&quot;] &quot;</span> + mmContent + <span class="hljs-string">&quot;\r\n&quot;</span>;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">File</span> <span class="hljs-variable">dir</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(logFileDir);<br>                <span class="hljs-keyword">if</span> (!dir.exists()) &#123;<br>                    <span class="hljs-type">boolean</span> <span class="hljs-variable">mk</span> <span class="hljs-operator">=</span> dir.mkdirs();<br>                    Log.d(defTag, <span class="hljs-string">&quot;make dir &quot;</span> + mk);<br>                &#125;<br>                <span class="hljs-type">File</span> <span class="hljs-variable">eFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(logFileDir + File.separator + fileName);<br>                <span class="hljs-type">byte</span>[] strBytes = logContent.getBytes();<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">RandomAccessFile</span> <span class="hljs-variable">randomAccessFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomAccessFile</span>(eFile, <span class="hljs-string">&quot;rw&quot;</span>);<br>                    MappedByteBuffer mappedByteBuffer;<br>                    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">inputLen</span> <span class="hljs-operator">=</span> strBytes.length;<br>                    <span class="hljs-keyword">if</span> (!eFile.exists()) &#123;<br>                        <span class="hljs-type">boolean</span> <span class="hljs-variable">nf</span> <span class="hljs-operator">=</span> eFile.createNewFile();<br>                        Log.d(defTag, <span class="hljs-string">&quot;new log file &quot;</span> + nf);<br>                        mappedByteBuffer = randomAccessFile.getChannel().map(FileChannel.MapMode.READ_WRITE, gCurrentLogPos, LOG_FILE_GROW_SIZE);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        mappedByteBuffer = randomAccessFile.getChannel().map(FileChannel.MapMode.READ_WRITE, gCurrentLogPos, inputLen);<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (mappedByteBuffer.remaining() &lt; inputLen) &#123;<br>                        mappedByteBuffer = randomAccessFile.getChannel().map(FileChannel.MapMode.READ_WRITE, gCurrentLogPos, LOG_FILE_GROW_SIZE + inputLen);<br><span class="hljs-comment">//                        Log.d(defTag, &quot;run: grow size &quot;);</span><br>                    &#125;<br><span class="hljs-comment">//                    Log.d(defTag, &quot;run: gCurrentLogPos: &quot; + gCurrentLogPos + &quot;, pos: &quot; + mappedByteBuffer.position() + &quot;, remaining: &quot; + mappedByteBuffer.remaining());</span><br>                    mappedByteBuffer.put(strBytes);<br>                    gCurrentLogPos += inputLen;<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    Log.e(defTag, <span class="hljs-string">&quot;WriteRunnable run: &quot;</span>, e);<br>                    <span class="hljs-keyword">if</span> (!eFile.exists()) &#123;<br>                        <span class="hljs-type">boolean</span> <span class="hljs-variable">nf</span> <span class="hljs-operator">=</span> eFile.createNewFile();<br>                        Log.d(defTag, <span class="hljs-string">&quot;new log file &quot;</span> + nf);<br>                    &#125;<br>                    <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(eFile, <span class="hljs-literal">true</span>);<br>                    os.write(logContent.getBytes());<br>                    os.flush();<br>                    os.close();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>                Log.e(defTag, <span class="hljs-string">&quot;写log文件出错: &quot;</span>, e);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>监听器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogListener</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onLog</span><span class="hljs-params">(String level, String tag, String content)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="自定义View"><a href="#自定义View" class="headerlink" title="自定义View"></a>自定义View</h2><p>一些自定义的view，比如一些折线图，条形图。</p><h3 id="折线图-ColorAutoLineChart"><a href="#折线图-ColorAutoLineChart" class="headerlink" title="折线图 ColorAutoLineChart"></a>折线图 ColorAutoLineChart</h3><p>单独一条折线，可自动缩放Y轴高度。使用FloatBuffer来存储数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ColorAutoLineChart</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">View</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;AppColorAutoLineChart&quot;</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> <span class="hljs-variable">yMax</span> <span class="hljs-operator">=</span> <span class="hljs-number">1856f</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> <span class="hljs-variable">yMin</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1024f</span>;<br><br>    <span class="hljs-comment">// 图表线条在view顶部留出的间距</span><br>    <span class="hljs-type">float</span> <span class="hljs-variable">viewYStart</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-type">float</span> <span class="hljs-variable">axisTextSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">7</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">onShowPointsCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">256</span>;  <span class="hljs-comment">// 当前显示的数据个数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">cacheMaxPoint</span> <span class="hljs-operator">=</span> <span class="hljs-number">9000</span>;     <span class="hljs-comment">// 数据存储最大个数</span><br><br>    <span class="hljs-type">float</span> <span class="hljs-variable">axisLineWid</span> <span class="hljs-operator">=</span> <span class="hljs-number">1f</span>; <span class="hljs-comment">// 坐标轴线条宽度</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">dataLineWid</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><br>    <span class="hljs-comment">// 数据线颜色</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">dataColor</span> <span class="hljs-operator">=</span> Color.WHITE;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> <span class="hljs-variable">xStep</span> <span class="hljs-operator">=</span> <span class="hljs-number">1.0f</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> viewWidth;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> viewHeight;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> <span class="hljs-variable">botLeftXOnView</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 图表左下点在view中的x坐标</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> <span class="hljs-variable">botLeftYOnView</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> <span class="hljs-variable">originYToBottom</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>; <span class="hljs-comment">// 图表原点距离view底部的距离</span><br><br>    <span class="hljs-keyword">private</span> FloatBuffer dataBuffer;<br><br>    <span class="hljs-keyword">private</span> Paint bgPaint;<br>    <span class="hljs-keyword">private</span> Paint linePaint;<br>    <span class="hljs-keyword">private</span> Paint wavePaint;<br>    <span class="hljs-type">Path</span> <span class="hljs-variable">wavePath</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(); <span class="hljs-comment">// 用来画渐变色</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">waveTopColor</span> <span class="hljs-operator">=</span> Color.parseColor(<span class="hljs-string">&quot;#f65212&quot;</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ColorAutoLineChart</span><span class="hljs-params">(Context context)</span> &#123;<br>        <span class="hljs-built_in">this</span>(context, <span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ColorAutoLineChart</span><span class="hljs-params">(Context context, AttributeSet attrs)</span> &#123;<br>        <span class="hljs-built_in">this</span>(context, attrs, <span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ColorAutoLineChart</span><span class="hljs-params">(Context context, AttributeSet attrs, <span class="hljs-type">int</span> defStyleAttr)</span> &#123;<br>        <span class="hljs-built_in">super</span>(context, attrs, defStyleAttr);<br>        init(context);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addData</span><span class="hljs-params">(<span class="hljs-type">int</span>[] data)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : data) &#123;<br>            addData(i);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addData</span><span class="hljs-params">(<span class="hljs-type">float</span> data)</span> &#123;<br>        dataBuffer.put(data);<br>        <span class="hljs-keyword">if</span> (dataBuffer.position() &gt; (dataBuffer.capacity() * <span class="hljs-number">2</span> / <span class="hljs-number">3</span>)) &#123;<br>            <span class="hljs-type">float</span>[] bufferArr = dataBuffer.array();<br>            System.arraycopy(bufferArr, dataBuffer.position() - cacheMaxPoint, bufferArr, <span class="hljs-number">0</span>, cacheMaxPoint);<br>            dataBuffer.position(cacheMaxPoint);<br><span class="hljs-comment">//            Log.d(TAG, &quot;把当前数据移动到buffer起始位置 &quot; + dataBuffer);</span><br>        &#125;<br>        invalidate();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(Context context)</span> &#123;<br>        dataBuffer = FloatBuffer.allocate(<span class="hljs-number">3</span> * cacheMaxPoint); <span class="hljs-comment">// 分配3倍的空间</span><br>        bgPaint = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Paint</span>(Paint.ANTI_ALIAS_FLAG);<br>        linePaint = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Paint</span>(Paint.ANTI_ALIAS_FLAG);<br>        wavePaint = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Paint</span>(Paint.ANTI_ALIAS_FLAG);<br>        bgPaint.setStrokeWidth(axisLineWid);<br>        bgPaint.setStyle(Paint.Style.STROKE);<br>        linePaint.setStrokeWidth(dataLineWid);<br>        linePaint.setStyle(Paint.Style.STROKE);<br>        linePaint.setColor(dataColor);<br><br>        botLeftXOnView = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, <span class="hljs-number">0</span>, context.getResources().getDisplayMetrics());<br>        originYToBottom = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, <span class="hljs-number">20</span>, context.getResources().getDisplayMetrics());<br>        viewYStart = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, <span class="hljs-number">20</span>, context.getResources().getDisplayMetrics());<br>        axisLineWid = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, <span class="hljs-number">1</span>, context.getResources().getDisplayMetrics());<br>        axisTextSize = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP, <span class="hljs-number">8</span>, context.getResources().getDisplayMetrics());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onSizeChanged</span><span class="hljs-params">(<span class="hljs-type">int</span> w, <span class="hljs-type">int</span> h, <span class="hljs-type">int</span> oldw, <span class="hljs-type">int</span> oldh)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onSizeChanged(w, h, oldw, oldh);<br>        viewWidth = getWidth();<br>        viewHeight = getHeight();<br>        botLeftYOnView = viewHeight - originYToBottom;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onDraw</span><span class="hljs-params">(Canvas canvas)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onDraw(canvas);<br>        canvas.drawColor(Color.TRANSPARENT);<br>        xStep = (viewWidth - botLeftXOnView) / (onShowPointsCount - <span class="hljs-number">1</span>);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">dataStartIndexInBuffer</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 数据在buffer中的起始下标</span><br>        <span class="hljs-keyword">if</span> (dataBuffer.position() &gt; onShowPointsCount) &#123;<br>            dataStartIndexInBuffer = dataBuffer.position() - onShowPointsCount;<br>        &#125;<br>        <span class="hljs-type">float</span>[] bufferArr = dataBuffer.array();<br>        <span class="hljs-type">float</span> <span class="hljs-variable">maxData</span> <span class="hljs-operator">=</span> bufferArr[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">float</span> <span class="hljs-variable">minData</span> <span class="hljs-operator">=</span> bufferArr[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> dataStartIndexInBuffer; i &lt; dataBuffer.position(); i++) &#123;<br>            <span class="hljs-type">float</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> bufferArr[i];<br>            <span class="hljs-keyword">if</span> (cur &lt; minData) &#123;<br>                minData = cur;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cur &gt; maxData) &#123;<br>                maxData = cur;<br>            &#125;<br>        &#125;<br><br>        drawWave(canvas, dataStartIndexInBuffer);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drawWave</span><span class="hljs-params">(Canvas canvas, <span class="hljs-type">int</span> dataStartIndexInBuffer)</span> &#123;<br>        wavePath.reset();<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">float</span> <span class="hljs-variable">yDataRange</span> <span class="hljs-operator">=</span> yMax - yMin;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">float</span> <span class="hljs-variable">yAxisRangeOnView</span> <span class="hljs-operator">=</span> botLeftYOnView - viewYStart;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">float</span> <span class="hljs-variable">yDataStep</span> <span class="hljs-operator">=</span> yAxisRangeOnView / yDataRange;<br><br>        <span class="hljs-type">float</span>[] dataArr = dataBuffer.array();<br>        <span class="hljs-type">float</span> <span class="hljs-variable">maxData</span> <span class="hljs-operator">=</span> dataArr[dataStartIndexInBuffer];<br><br>        <span class="hljs-type">float</span> <span class="hljs-variable">waveStartX</span> <span class="hljs-operator">=</span> botLeftXOnView;<br>        <span class="hljs-type">float</span> <span class="hljs-variable">waveStartY</span> <span class="hljs-operator">=</span> getYL(dataArr[dataStartIndexInBuffer], yDataStep);<br>        wavePath.moveTo(waveStartX, waveStartY);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> dataStartIndexInBuffer; i &lt; dataBuffer.position() - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-type">float</span> <span class="hljs-variable">curData</span> <span class="hljs-operator">=</span> dataArr[i];<br>            <span class="hljs-type">float</span> <span class="hljs-variable">nextData</span> <span class="hljs-operator">=</span> dataArr[i + <span class="hljs-number">1</span>];<br>            wavePath.lineTo(botLeftXOnView + (i - dataStartIndexInBuffer + <span class="hljs-number">1</span>) * xStep, getYL(nextData, yDataStep));<br>            canvas.drawLine(botLeftXOnView + (i - dataStartIndexInBuffer) * xStep, getYL(curData, yDataStep),<br>                    botLeftXOnView + (i - dataStartIndexInBuffer + <span class="hljs-number">1</span>) * xStep, getYL(nextData, yDataStep),<br>                    linePaint);<br>            maxData = Math.max(maxData, nextData);<br>        &#125;<br>        wavePath.lineTo(viewWidth, viewHeight);<br>        wavePath.lineTo(botLeftXOnView, viewHeight);<br>        wavePath.lineTo(waveStartX, waveStartY);<br>        wavePath.close();<br>        wavePaint.setShader(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LinearGradient</span>(<span class="hljs-number">0</span>, getYL(maxData, yDataStep), <span class="hljs-number">0</span>, viewHeight, waveTopColor, Color.TRANSPARENT, Shader.TileMode.CLAMP));<br>        canvas.drawPath(wavePath, wavePaint);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> <span class="hljs-title function_">getYL</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-type">float</span> yData, <span class="hljs-type">float</span> yDataStep)</span> &#123;<br>        <span class="hljs-keyword">return</span> botLeftYOnView - (yData - yMin) * yDataStep;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="后台用户行为记录"><a href="#后台用户行为记录" class="headerlink" title="后台用户行为记录"></a>后台用户行为记录</h2><p>最开始设计后台服务的时候，并没有考虑到太多的记录功能。仅仅记录了用户登录行为。<br>今后应该记录更详细的。例如获取用户信息，时间，客户端类型，userID等等。获取用户信息是否成功，可作为缓存登录的依据。</p><p>后台可以记录的用户行为，例如获取用户信息，用户查看飞行记录列表，用户查看飞行记录详情，用户点赞。</p><h2 id="WebView设置"><a href="#WebView设置" class="headerlink" title="WebView设置"></a>WebView设置</h2><p>webview不显示图片的问题。LL后加载https的网页，默认会不加载http的资源。需要设置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">webSettings.setBlockNetworkImage(<span class="hljs-literal">false</span>);<br>webSettings.setMixedContentMode(WebSettings.MIXED_CONTENT_ALWAYS_ALLOW);<br></code></pre></td></tr></table></figure><h2 id="方法调用记录调用原因"><a href="#方法调用记录调用原因" class="headerlink" title="方法调用记录调用原因"></a>方法调用记录调用原因</h2><p>调用某个方法的时候，比如中止某项功能。可以在log上记录一些原因，方便debug。</p><h2 id="Glide"><a href="#Glide" class="headerlink" title="Glide"></a>Glide</h2><h3 id="设定播放gif的次数"><a href="#设定播放gif的次数" class="headerlink" title="设定播放gif的次数"></a>设定播放gif的次数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">Glide.get(getApplicationContext()).setMemoryCategory(MemoryCategory.NORMAL);<br>Glide.with(<span class="hljs-built_in">this</span>).asGif().listener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestListener</span>&lt;GifDrawable&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onLoadFailed</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> GlideException e, Object model, Target&lt;GifDrawable&gt; target, <span class="hljs-type">boolean</span> isFirstResource)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onResourceReady</span><span class="hljs-params">(GifDrawable resource, Object model, Target&lt;GifDrawable&gt; target, DataSource dataSource, <span class="hljs-type">boolean</span> isFirstResource)</span> &#123;<br>        resource.setLoopCount(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;).load(R.drawable.app_start_up).into(imageView);<br>imageView.setOnApplyWindowInsetsListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">View</span>.OnApplyWindowInsetsListener() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> WindowInsets <span class="hljs-title function_">onApplyWindowInsets</span><span class="hljs-params">(View v, WindowInsets insets)</span> &#123;<br>        MyAppControl.setPhoneStatusBarHeight(insets.getSystemWindowInsetTop());<br>        <span class="hljs-keyword">return</span> insets;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android_note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flutter International 国际化，Localization 本地化， 使用字符串Map</title>
    <link href="/Flutter/Flutter-International_localization_with_string_map/"/>
    <url>/Flutter/Flutter-International_localization_with_string_map/</url>
    
    <content type="html"><![CDATA[<p>记录一种简单的方式实现字符串的国际化。</p><p>这里没有用到<code>Intl</code>包，而是将所需的字符串存放在一个map中。</p><p>步骤：</p><ul><li><code>MaterialApp</code>中添加本地化代理和语言类型</li><li>创建文字资源文件</li><li>新建一个类继承<code>LocalizationsDelegate</code>，和文字资源文件联系起来</li><li>使用代理获取想要的文字资源</li></ul><p>新建项目<code>international_demo</code>，得到一个带按钮示例工程。改造一下<code>MaterialApp</code>。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyApp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MaterialApp(<br>      title: <span class="hljs-string">&#x27;Flutter Demo&#x27;</span>,<br>      theme: <span class="hljs-keyword">new</span> ThemeData(<br>        primarySwatch: Colors.blue,<br>      ),<br>      localizationsDelegates: [<span class="hljs-comment">// 添加区域</span><br>        <span class="hljs-comment">// 准备在这里添加我们自己创建的代理</span><br>        GlobalMaterialLocalizations.delegate,<br>        GlobalWidgetsLocalizations.delegate,<br>      ],<br>      supportedLocales: [ <span class="hljs-comment">// 添加区域</span><br>        <span class="hljs-keyword">const</span> Locale(<span class="hljs-string">&#x27;en&#x27;</span>, <span class="hljs-string">&#x27;US&#x27;</span>), <span class="hljs-comment">// English</span><br>        <span class="hljs-keyword">const</span> Locale(<span class="hljs-string">&#x27;he&#x27;</span>, <span class="hljs-string">&#x27;IL&#x27;</span>), <span class="hljs-comment">// Hebrew</span><br>        <span class="hljs-comment">// 可以继续添加我们想要支持的语言类型</span><br>      ],<br>      home: <span class="hljs-keyword">new</span> MyHomePage(title: <span class="hljs-string">&#x27;Flutter Demo Home Page&#x27;</span>),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="创建资源文件"><a href="#创建资源文件" class="headerlink" title="创建资源文件"></a>创建资源文件</h3><p>新建<code>localization_src.dart</code>，将字符串存入一个map中。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoLocalizations</span> </span>&#123;<br>  DemoLocalizations(<span class="hljs-keyword">this</span>.locale);<br><br>  <span class="hljs-keyword">final</span> Locale locale;<br><br>  <span class="hljs-keyword">static</span> DemoLocalizations of(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Localizations.of&lt;DemoLocalizations&gt;(context, DemoLocalizations);<br>  &#125;<br><br>  <span class="hljs-keyword">static</span> <span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">String</span>&gt;&gt; _localizedValues = &#123;<br>    <span class="hljs-string">&#x27;en&#x27;</span>: &#123;<br>      <span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;Hello World&#x27;</span>,<br>    &#125;,<br>    <span class="hljs-string">&#x27;es&#x27;</span>: &#123;<br>      <span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;Hola Mundo&#x27;</span>,<br>    &#125;,<br>    <span class="hljs-string">&#x27;zh&#x27;</span>: &#123;<br>      <span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;你好呀&#x27;</span>,<br>    &#125;,<br>  &#125;;<br><br>  <span class="hljs-built_in">String</span> <span class="hljs-keyword">get</span> title &#123;<br>    <span class="hljs-keyword">return</span> _localizedValues[locale.languageCode][<span class="hljs-string">&#x27;title&#x27;</span>];<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>这里仅以<code>title</code>为例，有英语、西班牙语和中文三种。</p><h3 id="创建代理"><a href="#创建代理" class="headerlink" title="创建代理"></a>创建代理</h3><p>新建一个类继承<code>LocalizationsDelegate</code>，复写3个方法。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;dart:async&#x27;</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/foundation.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:international_demo/localization_src.dart&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoLocalizationsDelegate</span></span><br><span class="hljs-class">    <span class="hljs-keyword">extends</span> <span class="hljs-title">LocalizationsDelegate</span>&lt;<span class="hljs-title">DemoLocalizations</span>&gt; </span>&#123;<br>  <span class="hljs-keyword">const</span> DemoLocalizationsDelegate();<br><br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-built_in">bool</span> isSupported(Locale locale) =&gt;<br>      [<span class="hljs-string">&#x27;en&#x27;</span>, <span class="hljs-string">&#x27;es&#x27;</span>, <span class="hljs-string">&#x27;zh&#x27;</span>].contains(locale.languageCode);<br><br>  <span class="hljs-meta">@override</span><br>  Future&lt;DemoLocalizations&gt; load(Locale locale) &#123;<br>    <span class="hljs-keyword">return</span> SynchronousFuture&lt;DemoLocalizations&gt;(DemoLocalizations(locale));<br>  &#125;<br><br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-built_in">bool</span> shouldReload(DemoLocalizationsDelegate old) =&gt; <span class="hljs-keyword">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br>复写的load方法中，使用了<code>SynchronousFuture</code>。</p><h3 id="使用代理"><a href="#使用代理" class="headerlink" title="使用代理"></a>使用代理</h3><p>回到<code>main.dart</code>。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyApp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MaterialApp(<br>      title: <span class="hljs-string">&#x27;Flutter Demo&#x27;</span>,<br>      theme: <span class="hljs-keyword">new</span> ThemeData(<br>        primarySwatch: Colors.blue,<br>      ),<br>      localizationsDelegates: [<br>        DemoLocalizationsDelegate(),<span class="hljs-comment">// 这是我们新建的代理</span><br>        GlobalMaterialLocalizations.delegate,<br>        GlobalWidgetsLocalizations.delegate,<br>      ],<br>      supportedLocales: [<br>        <span class="hljs-keyword">const</span> Locale(<span class="hljs-string">&#x27;en&#x27;</span>, <span class="hljs-string">&#x27;US&#x27;</span>), <span class="hljs-comment">// English</span><br>        <span class="hljs-keyword">const</span> Locale(<span class="hljs-string">&#x27;he&#x27;</span>, <span class="hljs-string">&#x27;IL&#x27;</span>), <span class="hljs-comment">// Hebrew</span><br>        <span class="hljs-keyword">const</span> Locale(<span class="hljs-string">&#x27;zh&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>),   <span class="hljs-comment">// 新添中文，后面的countryCode暂时不指定</span><br>      ],<br>      home: <span class="hljs-keyword">new</span> MyHomePage(title: <span class="hljs-string">&#x27;Flutter Demo Home Page&#x27;</span>),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>在<code>_MyHomePageState</code>中调用<code>DemoLocalizations</code>。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dart">DemoLocalizations localizations = DemoLocalizations.of(context);<br><span class="hljs-built_in">print</span>(localizations); <span class="hljs-comment">// 打印出 I/flutter (25535): Instance of &#x27;DemoLocalizations&#x27;</span><br></code></pre></td></tr></table></figure><br>观察logcat，可知我们获得了DemoLocalizations的实例。</p><p>获取<code>title</code><br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart">DemoLocalizations.of(context).title<br></code></pre></td></tr></table></figure></p><p>如果需要更多的字符串，需要我们手动在资源文件的map中添加。<br>这里仅以title为例。</p><p><img src="http://rustblogres.rustfisher.com/flutter-string-map-demo-proj.png" alt="文件"></p><p>参考：</p><ul><li>官方文档 <a href="https://flutter.io/tutorials/internationalization/">https://flutter.io/tutorials/internationalization/</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Flutter_note</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Flutter International 国际化，Localization 本地化， 使用Intl</title>
    <link href="/Flutter/Flutter-International_localization_with_Intl/"/>
    <url>/Flutter/Flutter-International_localization_with_Intl/</url>
    
    <content type="html"><![CDATA[<p>新建项目，得到一个示例工程。本例中使用intl包来管理文字资源。</p><p>项目地址： <a href="https://github.com/RustFisher/localization_demo">https://github.com/RustFisher/localization_demo</a></p><p>步骤：</p><ul><li>添加依赖项 - intl</li><li>创建文字资源文件</li><li>生成<code>arb</code>文件<ul><li>新增和修改<code>arb</code>文件</li></ul></li><li>根据<code>arb</code>生成<code>dart</code>文件</li><li>创建localization代理，新建一个类继承<code>LocalizationsDelegate</code>，和文字资源文件联系起来</li><li><code>MaterialApp</code>中添加本地化代理和语言类型</li><li>使用文字资源</li></ul><h3 id="添加依赖项"><a href="#添加依赖项" class="headerlink" title="添加依赖项"></a>添加依赖项</h3><p><code>pubspec.yaml</code>添加依赖项<code>flutter_localizations</code>，然后运行一下<code>flutter packages get</code>。<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">dependencies:</span><br><span class="hljs-symbol">  flutter:</span><br><span class="hljs-symbol">    sdk:</span> flutter<br><span class="hljs-meta"># 添加下面的依赖项</span><br><span class="hljs-symbol">  flutter_localizations:</span><br><span class="hljs-symbol">    sdk:</span> flutter<br><span class="hljs-symbol">  intl:</span> <span class="hljs-number">0.15</span><span class="hljs-number">.6</span><br><span class="hljs-symbol">  intl_translation:</span> <span class="hljs-number">0.16</span><span class="hljs-number">.7</span><br></code></pre></td></tr></table></figure></p><h3 id="编辑dart文件"><a href="#编辑dart文件" class="headerlink" title="编辑dart文件"></a>编辑dart文件</h3><p>新建<code>app_strings.dart</code>文件。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;dart:async&#x27;</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:intl/intl.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/widgets.dart&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppStrings</span> </span>&#123;<br>  AppStrings(Locale locale) : _localeName = locale.toString();<br><br>  <span class="hljs-keyword">final</span> <span class="hljs-built_in">String</span> _localeName;<br><br>  <span class="hljs-keyword">static</span> Future&lt;AppStrings&gt; load(Locale locale) &#123;<br>    <span class="hljs-keyword">return</span> initializeMessages(locale.toString())<br>        .then((<span class="hljs-built_in">Object</span> _) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> AppStrings(locale);<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">static</span> AppStrings of(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Localizations.of&lt;AppStrings&gt;(context, AppStrings);<br>  &#125;<br><br>  <span class="hljs-built_in">String</span> title() &#123;<br>    <span class="hljs-keyword">return</span> Intl.message(<br>      <span class="hljs-string">&#x27;Localization Demo&#x27;</span>,<br>      name: <span class="hljs-string">&#x27;title&#x27;</span>,<br>      desc: <span class="hljs-string">&#x27;应用标题&#x27;</span>,<br>      locale: _localeName,<br>    );<br>  &#125;<br><br>  <span class="hljs-built_in">String</span> click() =&gt; Intl.message(<br>    <span class="hljs-string">&#x27;Click&#x27;</span>,<br>    name: <span class="hljs-string">&#x27;click&#x27;</span>,<br>    desc: <span class="hljs-string">&#x27;点击&#x27;</span>,<br>    locale: _localeName,<br>  );<br><br>  <span class="hljs-built_in">String</span> helloFromDemo() =&gt; Intl.message(<br>    <span class="hljs-string">&#x27;Hello~&#x27;</span>,<br>    name: <span class="hljs-string">&#x27;helloFromDemo&#x27;</span>,<br>    desc: <span class="hljs-string">&#x27;一句问候&#x27;</span>,<br>    locale: _localeName,<br>  );<br>&#125;<br></code></pre></td></tr></table></figure><br>此时<code>initializeMessages</code>方法会显示警告，暂时不用管，生成arb文件后再添加引用。</p><h3 id="生成arb文件"><a href="#生成arb文件" class="headerlink" title="生成arb文件"></a>生成<code>arb</code>文件</h3><p>进入项目目录，运行<code>intl</code>的命令。<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/e/</span>ws/localization_demo<br>$ flutter pub pub run intl_translation:extract_to_arb --output-dir=lib<span class="hljs-regexp">/l10n lib/</span>app_strings.dart<br></code></pre></td></tr></table></figure></p><p>生成<code>l10n/intl_messages.arb</code>，内容如下。可以看出是JSON格式的文本。<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs perl">&#123;<br>  <span class="hljs-string">&quot;@@last_modified&quot;</span>: <span class="hljs-string">&quot;2018-07-15T22:13:19.218221&quot;</span>,<br>  <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;Localization Demo&quot;</span>,<br>  <span class="hljs-string">&quot;@title&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;应用标题&quot;</span>,<br>    <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>    <span class="hljs-string">&quot;placeholders&quot;</span>: &#123;&#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;click&quot;</span>: <span class="hljs-string">&quot;Click&quot;</span>,<br>  <span class="hljs-string">&quot;@click&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;点击&quot;</span>,<br>    <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>    <span class="hljs-string">&quot;placeholders&quot;</span>: &#123;&#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;helloFromDemo&quot;</span>: <span class="hljs-string">&quot;Hello~&quot;</span>,<br>  <span class="hljs-string">&quot;@helloFromDemo&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;一句问候&quot;</span>,<br>    <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>    <span class="hljs-string">&quot;placeholders&quot;</span>: &#123;&#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h4 id="新增和修改arb文件"><a href="#新增和修改arb文件" class="headerlink" title="新增和修改arb文件"></a>新增和修改<code>arb</code>文件</h4><p>前面生成了<code>l10n/intl_messages.arb</code>，我们可以把它当成模板。复制粘贴一下，同目录下得到<code>intl_en.arb</code>和<code>intl_zh.arb</code>。文件名规则可以自己定。<br>以<code>intl_zh.arb</code>为例：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs dart">&#123;<br>  <span class="hljs-string">&quot;@@last_modified&quot;</span>: <span class="hljs-string">&quot;2018-07-15T22:13:19.218221&quot;</span>,<br>  <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;国际化示例App&quot;</span>,<br>  <span class="hljs-string">&quot;@title&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;应用标题&quot;</span>,<br>    <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>    <span class="hljs-string">&quot;placeholders&quot;</span>: &#123;&#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;click&quot;</span>: <span class="hljs-string">&quot;点击&quot;</span>,<br>  <span class="hljs-string">&quot;@click&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;点击&quot;</span>,<br>    <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>    <span class="hljs-string">&quot;placeholders&quot;</span>: &#123;&#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;helloFromDemo&quot;</span>: <span class="hljs-string">&quot;你好呀~&quot;</span>,<br>  <span class="hljs-string">&quot;@helloFromDemo&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;一句问候&quot;</span>,<br>    <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>    <span class="hljs-string">&quot;placeholders&quot;</span>: &#123;&#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><em>这里也可以把<code>intl_messages.arb</code>删掉。本例保留这个文件。</em></p><h3 id="根据arb生成dart文件"><a href="#根据arb生成dart文件" class="headerlink" title="根据arb生成dart文件"></a>根据<code>arb</code>生成<code>dart</code>文件</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">$ flutter pub pub run intl_translation:generate_from_arb <span class="hljs-comment">--output-dir=lib/l10n \</span><br>   <span class="hljs-comment">--no-use-deferred-loading lib/app_strings.dart lib/l10n/intl_*.arb</span><br><br><span class="hljs-keyword">No</span> @@locale <span class="hljs-keyword">or</span> _locale field <span class="hljs-built_in">found</span> <span class="hljs-keyword">in</span> intl_en, assuming <span class="hljs-string">&#x27;en&#x27;</span> based <span class="hljs-keyword">on</span> the file <span class="hljs-type">name</span>.<br><span class="hljs-keyword">No</span> @@locale <span class="hljs-keyword">or</span> _locale field <span class="hljs-built_in">found</span> <span class="hljs-keyword">in</span> intl_messages, assuming <span class="hljs-string">&#x27;messages&#x27;</span> based <span class="hljs-keyword">on</span> the file <span class="hljs-type">name</span>.<br><span class="hljs-keyword">No</span> @@locale <span class="hljs-keyword">or</span> _locale field <span class="hljs-built_in">found</span> <span class="hljs-keyword">in</span> intl_zh, assuming <span class="hljs-string">&#x27;zh&#x27;</span> based <span class="hljs-keyword">on</span> the file <span class="hljs-type">name</span>.<br></code></pre></td></tr></table></figure><p>暂时无视警告。<br>此时在<code>app_strings.dart</code>中添加对<code>l10n/intl_messages.arb</code>的引用。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:localization_demo/l10n/messages_all.dart&#x27;</span>;<br></code></pre></td></tr></table></figure><br>警告消失~</p><p><img src="http://rustblogres.rustfisher.com/flutter-arb-dart.png" alt="生成的文件"></p><p>更新了arb文件后，需要重新生成dart文件。</p><h3 id="创建localization代理"><a href="#创建localization代理" class="headerlink" title="创建localization代理"></a>创建localization代理</h3><p>创建<code>localizations_delegate.dart</code>。新建<code>AppLocalizationsDelegate</code>类继承<code>LocalizationsDelegate</code>，复写方法。<br>泛型指定为前面的<code>AppStrings</code>。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;dart:async&#x27;</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/widgets.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:localization_demo/app_strings.dart&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppLocalizationsDelegate</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">LocalizationsDelegate</span>&lt;<span class="hljs-title">AppStrings</span>&gt; </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Future&lt;AppStrings&gt; load(Locale locale) &#123;<br>    <span class="hljs-keyword">return</span> AppStrings.load(locale);<br>  &#125;<br><br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-built_in">bool</span> isSupported(Locale locale) =&gt;<br>      [<span class="hljs-string">&#x27;zh&#x27;</span>, <span class="hljs-string">&#x27;en&#x27;</span>].contains(locale.languageCode); <span class="hljs-comment">// 支持的类型要包含App中注册的类型</span><br><br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-built_in">bool</span> shouldReload(AppLocalizationsDelegate old) =&gt; <span class="hljs-keyword">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="MaterialApp中添加本地化代理和语言类型"><a href="#MaterialApp中添加本地化代理和语言类型" class="headerlink" title="MaterialApp中添加本地化代理和语言类型"></a><code>MaterialApp</code>中添加本地化代理和语言类型</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyApp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MaterialApp(<br>      title: <span class="hljs-string">&#x27;Flutter Demo&#x27;</span>,<br>      theme: <span class="hljs-keyword">new</span> ThemeData(<br>        primarySwatch: Colors.blue,<br>      ),<br>      localizationsDelegates: [<br>        AppLocalizationsDelegate(), <span class="hljs-comment">// 我们定义的代理</span><br>        GlobalMaterialLocalizations.delegate,<br>        GlobalWidgetsLocalizations.delegate,<br>      ],<br>      supportedLocales: [ <span class="hljs-comment">// 支持的语言类型</span><br>        <span class="hljs-keyword">const</span> Locale(<span class="hljs-string">&#x27;en&#x27;</span>, <span class="hljs-string">&#x27;US&#x27;</span>), <span class="hljs-comment">// English</span><br>        <span class="hljs-keyword">const</span> Locale(<span class="hljs-string">&#x27;zh&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>),<br>      ],<br>      home: <span class="hljs-keyword">new</span> MyHomePage(title: <span class="hljs-string">&#x27;Flutter Demo Home Page&#x27;</span>),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用文字资源"><a href="#使用文字资源" class="headerlink" title="使用文字资源"></a>使用文字资源</h3><p>获取到AppStrings的实例。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dart">AppStrings appStrings = AppStrings.of(context);<br><span class="hljs-built_in">print</span>(appStrings); <span class="hljs-comment">// logcat:  I/flutter ( 7478): Instance of &#x27;AppStrings&#x27;</span><br></code></pre></td></tr></table></figure></p><p><img src="http://rustblogres.rustfisher.com/flutter-international-demo-project.png" alt="示例工程结构"></p><p>注意，在MaterialApp中使用文字资源时，因为context的关系，要使用<code>onGenerateTitle</code>。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart">onGenerateTitle: (context) &#123;<br>  <span class="hljs-keyword">return</span> AppStrings.of(context).title();<br>&#125;,<br></code></pre></td></tr></table></figure></p><h3 id="支持语言的类型"><a href="#支持语言的类型" class="headerlink" title="支持语言的类型"></a>支持语言的类型</h3><p>代理<code>isSupported</code>方法中的语言类型最好是和App中<code>supportedLocales</code>的一致<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dart">  <span class="hljs-meta">@override</span><br>  <span class="hljs-built_in">bool</span> isSupported(Locale locale) =&gt;<br>      [<span class="hljs-string">&#x27;zh&#x27;</span>, <span class="hljs-string">&#x27;en&#x27;</span>].contains(locale.languageCode);<br><br><span class="hljs-comment">// App中`supportedLocales`</span><br>      supportedLocales: [<br>        <span class="hljs-keyword">const</span> Locale(<span class="hljs-string">&#x27;en&#x27;</span>, <span class="hljs-string">&#x27;US&#x27;</span>), <span class="hljs-comment">// English</span><br>        <span class="hljs-keyword">const</span> Locale(<span class="hljs-string">&#x27;zh&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>),<br>      ],<br></code></pre></td></tr></table></figure><br>否则可能出现获取不到AppStrings的异常。</p><p>参考：</p><ul><li><a href="https://flutter.io/tutorials/internationalization/">https://flutter.io/tutorials/internationalization/</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Flutter_note</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Flutter Drawer 抽屉视图与自定义header</title>
    <link href="/Flutter/Flutter-Drawer_and_custom_header/"/>
    <url>/Flutter/Flutter-Drawer_and_custom_header/</url>
    
    <content type="html"><![CDATA[<p>移动开发中，drawerLayout抽屉视图是比较常用的一种控件。一般将用户的头像，用户名等信息在抽屉视图中呈现。<br>drawer中也可以提供一些选项，比如跳转去设置页，跳转去用户资料页面等等。</p><p>Flutter提供了<code>Drawer</code>组件；结合<code>ListView</code>等组件，开发者可以快速地制作出抽屉视图。</p><h3 id="使用material中的UserAccountsDrawerHeader"><a href="#使用material中的UserAccountsDrawerHeader" class="headerlink" title="使用material中的UserAccountsDrawerHeader"></a>使用material中的<code>UserAccountsDrawerHeader</code></h3><p>使用material中的<code>UserAccountsDrawerHeader</code>，设置<code>accountName</code>和<code>currentAccountPicture</code>。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyHomePage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatefulWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  State&lt;StatefulWidget&gt; createState() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> _MyHomePageState();<br>  &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_MyHomePageState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">MyHomePage</span>&gt; </span>&#123;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    Widget userHeader = UserAccountsDrawerHeader(<br>      accountName: <span class="hljs-keyword">new</span> Text(<span class="hljs-string">&#x27;Tom&#x27;</span>),<br>      accountEmail: <span class="hljs-keyword">new</span> Text(<span class="hljs-string">&#x27;tom@xxx.com&#x27;</span>),<br>      currentAccountPicture: <span class="hljs-keyword">new</span> CircleAvatar(<br>        backgroundImage: AssetImage(<span class="hljs-string">&#x27;images/pic1.jpg&#x27;</span>), radius: <span class="hljs-number">35.0</span>,),);<br><br>    <span class="hljs-keyword">return</span> Scaffold(appBar: AppBar(title: Text(<span class="hljs-string">&quot;Home&quot;</span>),),<br>      body: <span class="hljs-keyword">new</span> Center(child: <span class="hljs-keyword">new</span> Text(<span class="hljs-string">&#x27;Home page&#x27;</span>),),<br>      drawer: Drawer(<br>        child: ListView(<br>          padding: EdgeInsets.zero,<br>          children: &lt;Widget&gt;[<br>            userHeader , <span class="hljs-comment">// 可在这里替换自定义的header</span><br>            ListTile(title: Text(<span class="hljs-string">&#x27;Item 1&#x27;</span>),<br>              leading: <span class="hljs-keyword">new</span> CircleAvatar(child: <span class="hljs-keyword">new</span> Icon(Icons.school),),<br>              onTap: () &#123;<br>                Navigator.pop(context);<br>              &#125;,),<br>            ListTile(title: Text(<span class="hljs-string">&#x27;Item 2&#x27;</span>),<br>              leading: <span class="hljs-keyword">new</span> CircleAvatar(child: <span class="hljs-keyword">new</span> Text(<span class="hljs-string">&#x27;B2&#x27;</span>),),<br>              onTap: () &#123;<br>                Navigator.pop(context);<br>              &#125;,),<br>            ListTile(title: Text(<span class="hljs-string">&#x27;Item 3&#x27;</span>),<br>              leading: <span class="hljs-keyword">new</span> CircleAvatar(<br>                child: <span class="hljs-keyword">new</span> Icon(Icons.list),),<br>              onTap: () &#123;<br>                Navigator.pop(context);<br>              &#125;,),<br>          ],<br>        ),<br>      ),);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用UserAccountsDrawerHeader效果如下</p><p><img src="http://rustblogres.rustfisher.com/flutter-userAccountsDrawerHeader.webp" alt="使用UserAccountsDrawerHeader效果"></p><p><code>UserAccountsDrawerHeader</code>文档请见 <a href="https://docs.flutter.io/flutter/material/UserAccountsDrawerHeader-class.html">https://docs.flutter.io/flutter/material/UserAccountsDrawerHeader-class.html</a></p><h3 id="自定义header"><a href="#自定义header" class="headerlink" title="自定义header"></a>自定义header</h3><p>Flutter有<code>DrawerHeader</code>，我们对其进行自定义。</p><ul><li><code>DrawerHeader</code>设置padding为0，充满整个顶部</li><li><code>DrawerHeader</code>的child使用<code>Stack</code>，目的是放置背景图片</li><li>在<code>Stack</code>偏左下的位置放置头像和用户名<ul><li>先用<code>Align</code>确定对齐方式为<code>FractionalOffset.bottomLeft</code></li><li><code>Align</code>的child为<code>Container</code>，并设定一个具体高度</li><li>头像与文字的<code>Container</code>仿照<code>ListTile</code>的风格，左边是一个头像，右边是文字；使用<code>Row</code>来分隔头像和文字</li><li>文字部分先用<code>Container</code>的margin做出间隔，再放入一个<code>Column</code>来存放<code>Text</code></li><li>文字<code>Column</code>设置水平方向左对齐与竖直方向居中</li></ul></li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs dart">Widget header = DrawerHeader(<br>  padding: EdgeInsets.zero, <span class="hljs-comment">/* padding置为0 */</span><br>  child: <span class="hljs-keyword">new</span> Stack(children: &lt;Widget&gt;[ <span class="hljs-comment">/* 用stack来放背景图片 */</span><br>    <span class="hljs-keyword">new</span> Image.asset(<br>      <span class="hljs-string">&#x27;images/p_h_r_600.png&#x27;</span>, fit: BoxFit.fill, width: <span class="hljs-built_in">double</span>.infinity,),<br>    <span class="hljs-keyword">new</span> Align(<span class="hljs-comment">/* 先放置对齐 */</span><br>      alignment: FractionalOffset.bottomLeft,<br>      child: Container(<br>        height: <span class="hljs-number">70.0</span>,<br>        margin: EdgeInsets.only(left: <span class="hljs-number">12.0</span>, bottom: <span class="hljs-number">12.0</span>),<br>        child: <span class="hljs-keyword">new</span> Row(<br>          mainAxisSize: MainAxisSize.min, <span class="hljs-comment">/* 宽度只用包住子组件即可 */</span><br>          crossAxisAlignment: CrossAxisAlignment.start,<br>          mainAxisAlignment: MainAxisAlignment.start,<br>          children: &lt;Widget&gt;[<br>            <span class="hljs-keyword">new</span> CircleAvatar(<br>              backgroundImage: AssetImage(<span class="hljs-string">&#x27;images/pic1.jpg&#x27;</span>),<br>              radius: <span class="hljs-number">35.0</span>,),<br>            <span class="hljs-keyword">new</span> Container(<br>              margin: EdgeInsets.only(left: <span class="hljs-number">6.0</span>),<br>              child: <span class="hljs-keyword">new</span> Column(<br>                crossAxisAlignment: CrossAxisAlignment.start, <span class="hljs-comment">// 水平方向左对齐</span><br>                mainAxisAlignment: MainAxisAlignment.center, <span class="hljs-comment">// 竖直方向居中</span><br>                children: &lt;Widget&gt;[<br>                  <span class="hljs-keyword">new</span> Text(<span class="hljs-string">&quot;Tom&quot;</span>, style: <span class="hljs-keyword">new</span> TextStyle(<br>                      fontSize: <span class="hljs-number">20.0</span>,<br>                      fontWeight: FontWeight.w400,<br>                      color: Colors.white),),<br>                  <span class="hljs-keyword">new</span> Text(<span class="hljs-string">&quot;What&#x27;s up&quot;</span>, style: <span class="hljs-keyword">new</span> TextStyle(<br>                      fontSize: <span class="hljs-number">14.0</span>, color: Colors.white),),<br>                ],<br>              ),<br>            ),<br>          ],),<br>      ),<br>    ),<br>  ]),);<br></code></pre></td></tr></table></figure><p>自定义header的效果图</p><p><img src="http://rustblogres.rustfisher.com/flutter-custom-header-cat.webp" alt="自定义header的效果图"></p><p>在自定义header的过程中，我们组合使用了多种widget；</p><p>有层叠的<code>Stack</code>，用于对齐的<code>Align</code>，设定具体尺寸和margin的<code>Container</code>，水平放置的<code>Row</code>以及竖直放置的<code>Column</code>。</p><p>这些widget的各有特点，根据具体情况来组合使用。同一个UI效果，做法也不止一种。</p>]]></content>
    
    
    <categories>
      
      <category>Flutter_note</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Flutter widget动画效果之CurvedAnimation</title>
    <link href="/Flutter/Flutter-CurvedAnimation/"/>
    <url>/Flutter/Flutter-CurvedAnimation/</url>
    
    <content type="html"><![CDATA[<p>在Android中，我们可以用XML来指定动画样式，或者调用View的<code>animate()</code>方法。在Flutter中，widget的动画效果利用<code>animated</code>动画化组件的动画库来实现。</p><p>Flutter中，使用<code>AnimationController</code>来控制动画暂停、调整进度、停止和倒退。<code>AnimationController</code>继承自<code>Animation&lt;double&gt;</code>。</p><p>在vsync信号发出时，需要一个触发器来通知它，从而在每帧中产生一个0到1的线性差值。</p><p>一个Controller可以与多个动画进行关联。</p><blockquote><p>当整个屏幕刷新完毕，即一个垂直刷新周期完成，会有短暂的空白期，此时发出 VSync 信号。</p></blockquote><h2 id="动画样式示例-CurvedAnimation与FadeTransition"><a href="#动画样式示例-CurvedAnimation与FadeTransition" class="headerlink" title="动画样式示例 - CurvedAnimation与FadeTransition"></a>动画样式示例 - CurvedAnimation与FadeTransition</h2><p>用<code>CurvedAnimation</code>实现一个动画效果。<br>给widget指定动画效果，用Controller来控制动画的播放。<br>下面这个例子是关于FadeTransition的。用一个FloatingActionButton来控制动画播放。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class="hljs-keyword">void</span> main() =&gt; runApp(<span class="hljs-keyword">new</span> AnimationApp());<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnimationApp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MaterialApp(<br>      title: <span class="hljs-string">&#x27;Animation&#x27;</span>,<br>      theme: <span class="hljs-keyword">new</span> ThemeData(primarySwatch: Colors.blue),<br>      home: <span class="hljs-keyword">new</span> HomePage(<br>        title: <span class="hljs-string">&#x27;动画示例&#x27;</span>,<br>      ),<br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HomePage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatefulWidget</span> </span>&#123;<br>  <span class="hljs-keyword">final</span> <span class="hljs-built_in">String</span> title;<br><br>  HomePage(&#123;Key key, <span class="hljs-keyword">this</span>.title&#125;) : <span class="hljs-keyword">super</span>(key: key);<br><br>  <span class="hljs-meta">@override</span><br>  State&lt;StatefulWidget&gt; createState() =&gt; <span class="hljs-keyword">new</span> _HomePageState();<br>&#125;<br><br><span class="hljs-comment">// 需要Ticker</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_HomePageState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">HomePage</span>&gt; <span class="hljs-title">with</span> <span class="hljs-title">TickerProviderStateMixin</span> </span>&#123;<br>  AnimationController controller;<br>  CurvedAnimation curveEaseIn, bounceIn, linear, decelerate;<br>  <span class="hljs-built_in">bool</span> _animationFlag = <span class="hljs-keyword">true</span>;<br><br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-keyword">void</span> initState() &#123;<br>    <span class="hljs-keyword">super</span>.initState();<br>    controller = <span class="hljs-keyword">new</span> AnimationController(<br>        duration: <span class="hljs-keyword">new</span> <span class="hljs-built_in">Duration</span>(milliseconds: <span class="hljs-number">2000</span>), vsync: <span class="hljs-keyword">this</span>);<br>    curveEaseIn = <span class="hljs-keyword">new</span> CurvedAnimation(parent: controller, curve: Curves.easeIn);<br>    bounceIn = <span class="hljs-keyword">new</span> CurvedAnimation(parent: controller, curve: Curves.bounceIn);<br>    linear = <span class="hljs-keyword">new</span> CurvedAnimation(parent: controller, curve: Curves.linear);<br>    decelerate =<br>        <span class="hljs-keyword">new</span> CurvedAnimation(parent: controller, curve: Curves.decelerate);<br>  &#125;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    buildItemWidget(<br>        CurvedAnimation animation, MaterialColor color, <span class="hljs-built_in">String</span> itemText) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Column(<br>        children: &lt;Widget&gt;[<br>          <span class="hljs-keyword">new</span> FadeTransition(<br>            opacity: animation,<br>            child: <span class="hljs-keyword">new</span> FlutterLogo(<br>              size: <span class="hljs-number">100.0</span>,<br>              colors: color,<br>            ),<br>          ),<br>          <span class="hljs-keyword">new</span> Text(itemText)<br>        ],<br>      );<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Scaffold(<br>      appBar: <span class="hljs-keyword">new</span> AppBar(<br>        title: <span class="hljs-keyword">new</span> Text(widget.title),<br>      ),<br>      floatingActionButton: <span class="hljs-keyword">new</span> FloatingActionButton(<br>        onPressed: () &#123;<br>          <span class="hljs-keyword">if</span> (_animationFlag) &#123;<br>            controller.forward();<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            controller.reverse();<br>          &#125;<br>          _animationFlag = !_animationFlag;<br>        &#125;,<br>        child: <span class="hljs-keyword">new</span> Icon(Icons.star),<br>      ),<br>      body: <span class="hljs-keyword">new</span> Center(<br>        child: <span class="hljs-keyword">new</span> GridView.extent(<br>          maxCrossAxisExtent: <span class="hljs-number">170.0</span>,<br>          padding: <span class="hljs-keyword">const</span> EdgeInsets.all(<span class="hljs-number">12.0</span>),<br>          children: &lt;Widget&gt;[<br>            buildItemWidget(curveEaseIn, Colors.blue, <span class="hljs-string">&#x27;Curves.easeIn&#x27;</span>),<br>            buildItemWidget(bounceIn, Colors.amber, <span class="hljs-string">&#x27;Curves.bounceIn&#x27;</span>),<br>            buildItemWidget(linear, Colors.red, <span class="hljs-string">&#x27;Curves.linear&#x27;</span>),<br>            buildItemWidget(decelerate, Colors.indigo, <span class="hljs-string">&#x27;Curves.decelerate&#x27;</span>),<br>            buildItemWidget(<br>                <span class="hljs-keyword">new</span> CurvedAnimation(<br>                    parent: controller, curve: Curves.elasticIn),<br>                Colors.pink,<br>                <span class="hljs-string">&#x27;Curves.elasticIn&#x27;</span>),<br>            buildItemWidget(<br>                <span class="hljs-keyword">new</span> CurvedAnimation(parent: controller, curve: Curves.ease),<br>                Colors.purple,<br>                <span class="hljs-string">&#x27;Curves.ease&#x27;</span>),<br>          ],<br>        ),<br>      ),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><img src="http://rustblogres.rustfisher.com/flutter-CurvedAnimation-demo-6-icons.webp" alt="效果图1"></p>]]></content>
    
    
    <categories>
      
      <category>Flutter_note</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Flutter 加载网络图片的几种方式</title>
    <link href="/Flutter/Flutter-Load_image_from_network/"/>
    <url>/Flutter/Flutter-Load_image_from_network/</url>
    
    <content type="html"><![CDATA[<p>对很多移动应用来说，加载网络图片是很常见的基本功能。Android中常用Glide等图片库。Flutter提供了Image组件来展示不同类型的图片。</p><p>加载网络图片有几种方式：</p><ul><li><code>Image.network</code></li><li><code>FadeInImage.memoryNetwork</code></li><li>使用<code>cached_network_image</code>中的<code>CachedNetworkImage</code></li></ul><h2 id="使用Image-network加载图片"><a href="#使用Image-network加载图片" class="headerlink" title="使用Image.network加载图片"></a>使用<code>Image.network</code>加载图片</h2><p>根据URL加载图片，使用<code>Image.network</code>构造器<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart">Image.network(<br>  <span class="hljs-string">&#x27;https://raw.githubusercontent.com/flutter/website/master/_includes/code/layout/lakes/images/lake.jpg&#x27;</span>,<br>)<br></code></pre></td></tr></table></figure></p><h3 id="Image组件也支持GIF格式的图片"><a href="#Image组件也支持GIF格式的图片" class="headerlink" title="Image组件也支持GIF格式的图片"></a>Image组件也支持GIF格式的图片</h3><p>使用方法如下，和上面的用法一样<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart">Image.network(<br>  <span class="hljs-string">&#x27;https://github.com/flutter/plugins/raw/master/packages/video_player/doc/demo_ipod.gif?raw=true&#x27;</span>,<br>);<br></code></pre></td></tr></table></figure></p><h3 id="Image-network的例子"><a href="#Image-network的例子" class="headerlink" title="Image.network的例子"></a><code>Image.network</code>的例子</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class="hljs-keyword">void</span> main() =&gt; runApp(<span class="hljs-keyword">new</span> ImageDemoApp());<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ImageDemoApp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MaterialApp(<br>      title: <span class="hljs-string">&#x27;Image Demo&#x27;</span>,<br>      home: <span class="hljs-keyword">new</span> HomePage(),<br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HomePage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatefulWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  State&lt;StatefulWidget&gt; createState() =&gt; <span class="hljs-keyword">new</span> _HomePageState();<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_HomePageState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">HomePage</span>&gt; </span>&#123;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Scaffold(<br>      appBar: <span class="hljs-keyword">new</span> AppBar(title: <span class="hljs-keyword">new</span> Text(<span class="hljs-string">&#x27;Web Image Demo Page&#x27;</span>),),<br>      body: <span class="hljs-keyword">new</span> ListView(children: &lt;Widget&gt;[<br>        Container(<br>          margin: EdgeInsets.only(bottom: <span class="hljs-number">12.0</span>),<br>          decoration: BoxDecoration(color: Colors.grey),<br>          child: Column(children: &lt;Widget&gt;[<br>            Image.network(<br>              <span class="hljs-string">&#x27;https://raw.githubusercontent.com/flutter/website/master/_includes/code/layout/lakes/images/lake.jpg&#x27;</span>,<br>            ),<br>            Text(<span class="hljs-string">&#x27;Image.network&#x27;</span>)<br>          ],),<br>        ),<br>        Container(<br>          margin: EdgeInsets.only(bottom: <span class="hljs-number">12.0</span>),<br>          decoration: BoxDecoration(color: Colors.grey),<br>          child: Column(children: &lt;Widget&gt;[<br>            Image.network(<br>              <span class="hljs-string">&#x27;https://github.com/flutter/plugins/raw/master/packages/video_player/doc/demo_ipod.gif?raw=true&#x27;</span>,<br>            ),<br>            Text(<span class="hljs-string">&#x27;Image.network  Animated Gifs&#x27;</span>)<br>          ],),<br>        ),<br>      ],),<br>    );<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="http://rustblogres.rustfisher.com/flutter-load-img-Image-network.webp" alt="Image.network加载图片"></p><h2 id="有默认占位图和淡入效果"><a href="#有默认占位图和淡入效果" class="headerlink" title="有默认占位图和淡入效果"></a>有默认占位图和淡入效果</h2><p>在图片加载过程中，给用户展示一张默认的图片，能提高用户体验。<br>使用<code>FadeInImage</code>组件来达到这个功能。<code>FadeInImage</code>能处理内存中，App资源或者网络上的图片。</p><h3 id="加载网络图片"><a href="#加载网络图片" class="headerlink" title="加载网络图片"></a>加载网络图片</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:transparent_image/transparent_image.dart&#x27;</span>;<br><br>FadeInImage.memoryNetwork(<br>  placeholder: kTransparentImage,<br>  image: <span class="hljs-string">&#x27;https://github.com/flutter/website/blob/master/_includes/code/layout/lakes/images/lake.jpg?raw=true&#x27;</span>,<br>);<br></code></pre></td></tr></table></figure><h4 id="示例效果"><a href="#示例效果" class="headerlink" title="示例效果"></a>示例效果</h4><p>使用<code>FadeInImage.memoryNetwork</code><br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:transparent_image/transparent_image.dart&#x27;</span>;<br><br><span class="hljs-keyword">void</span> main() =&gt; runApp(<span class="hljs-keyword">new</span> FadeInImageDemoApp());<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FadeInImageDemoApp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MaterialApp(<br>      title: <span class="hljs-string">&#x27;Image Demo&#x27;</span>,<br>      home: <span class="hljs-keyword">new</span> HomePage(),<br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HomePage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatefulWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  State&lt;StatefulWidget&gt; createState() =&gt; <span class="hljs-keyword">new</span> _HomePageState();<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_HomePageState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">HomePage</span>&gt; </span>&#123;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Scaffold(<br>      appBar: <span class="hljs-keyword">new</span> AppBar(title: <span class="hljs-keyword">new</span> Text(<span class="hljs-string">&#x27;Fade In Image Demo Page&#x27;</span>),),<br>      body: Stack(<br>        children: &lt;Widget&gt;[<br>          Center(child: CircularProgressIndicator()),<br>          Center(child: FadeInImage.memoryNetwork(<br>            image: <span class="hljs-string">&#x27;https://raw.githubusercontent.com/flutter/website/master/_includes/code/layout/lakes/images/lake.jpg&#x27;</span>,<br>            placeholder: kTransparentImage<span class="hljs-comment">/* 透明图片 */</span>,)),<br>        ],<br>      ),<br>    );<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><br><img src="http://rustblogres.rustfisher.com/flutter-load-img-place-holder.webp" alt="占位图与淡入效果"></p><h3 id="使用应用内的图片来做占位图"><a href="#使用应用内的图片来做占位图" class="headerlink" title="使用应用内的图片来做占位图"></a>使用应用内的图片来做占位图</h3><p>使用<code>FadeInImage.assetNetwork</code></p><p>代码<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_HomePageState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">HomePage</span>&gt; </span>&#123;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Scaffold(<br>      appBar: <span class="hljs-keyword">new</span> AppBar(title: <span class="hljs-keyword">new</span> Text(<span class="hljs-string">&#x27;Fade In Image Demo Page&#x27;</span>),),<br>      body: Center(child: FadeInImage.assetNetwork(<br>        image: <span class="hljs-string">&#x27;https://raw.githubusercontent.com/flutter/website/master/_includes/code/layout/lakes/images/lake.jpg&#x27;</span>,<br>        placeholder: <span class="hljs-string">&#x27;images/birds.gif&#x27;</span> <span class="hljs-comment">/* 指定gif */</span>,)),<br>    );<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></p><p><img src="http://rustblogres.rustfisher.com/flutter-load-img-show-gif.webp" alt="使用自定的gif图片"></p><h2 id="使用缓存图片"><a href="#使用缓存图片" class="headerlink" title="使用缓存图片"></a>使用缓存图片</h2><p>使用<code>cached_network_image</code>包。参见 <a href="https://pub.dartlang.org/packages/cached_network_image">https://pub.dartlang.org/packages/cached_network_image</a> 。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart">CachedNetworkImage(<br>  imageUrl: <span class="hljs-string">&#x27;https://github.com/flutter/website/blob/master/_includes/code/layout/lakes/images/lake.jpg?raw=true&#x27;</span>,<br>);<br></code></pre></td></tr></table></figure></p><p>添加placeholder<br><code>cached_network_image</code>的placeholder支持任意组件，比如<code>CircularProgressIndicator</code><br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart">CachedNetworkImage(<br>  placeholder: CircularProgressIndicator(),<br>  imageUrl: <span class="hljs-string">&#x27;https://github.com/flutter/website/blob/master/_includes/code/layout/lakes/images/lake.jpg?raw=true&#x27;</span>,<br>);<br></code></pre></td></tr></table></figure></p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:cached_network_image/cached_network_image.dart&#x27;</span>;<br><br><span class="hljs-keyword">void</span> main() =&gt; runApp(<span class="hljs-keyword">new</span> MyApp());<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyApp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> MaterialApp(<br>      title: <span class="hljs-string">&#x27;Cached image load&#x27;</span>,<br>      home: Scaffold(appBar: AppBar(title: <span class="hljs-keyword">new</span> Text(<span class="hljs-string">&#x27;Cache Image Load&#x27;</span>),),<br>        body: Center(child: CachedNetworkImage(<br>            placeholder: CircularProgressIndicator(),<br>            imageUrl: <span class="hljs-string">&#x27;https://github.com/flutter/website/blob/master/_includes/code/layout/lakes/images/lake.jpg?raw=true&#x27;</span>),),),<br>    );<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Flutter_note</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Flutter 布局常用的 widgets（Common layout widgets）</title>
    <link href="/Flutter/Flutter-Layout_common_widgets/"/>
    <url>/Flutter/Flutter-Layout_common_widgets/</url>
    
    <content type="html"><![CDATA[<p>简单列举总结一下常用的布局widget。<br>Flutter有丰富的layout组件库。其中有一些是常用库。<br>下面的widget分为两类：标准组件和来自Material Components的特殊组件。<br>只有Material App能够使用Material Components的组件。</p><p>标准组件 - Standard widgets</p><ul><li>Container<ul><li>给一个组件添加 padding, margins, 边界（borders）, 背景颜色或其它装饰（decorations）。</li></ul></li><li>GridView<ul><li>将多个widget放在一个可滑动的表格中。</li></ul></li><li>ListView<ul><li>将多个widget放在一个可滑动的列表中。</li></ul></li><li>Stack<ul><li>在一个widget上面盖上另一个widget。</li></ul></li></ul><p>Material Components</p><ul><li>Card<ul><li>将一些相近的信息装进一个有圆角和阴影的盒子里。</li></ul></li><li>ListTile<ul><li>一个Row中装载最多3行文字；可选则在前面或尾部添加图标。</li></ul></li></ul><h2 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h2><p><code>Container</code>用法比较自由。可以把整个layout放进container里面，然后改变背景颜色或图片。</p><p>Container 小结:</p><ul><li>添加 padding, margins, 和边界（borders）</li><li>能够更好背景颜色和图片</li><li>包含一个单独的子widget，这个子widget可以是Row、Column或一个widget树的根widget</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/1630262-d20671411ff400eb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="container结构"></p><p>测试代码<code>widgetdemo/container_page.dart</code><br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:demo_flutter/widgetdemo/container_page.dart&#x27;</span>;<br><span class="hljs-comment">// 引入自定义的包......</span><br><br><span class="hljs-keyword">void</span> main() =&gt; runApp(<span class="hljs-keyword">new</span> MyApp());<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyApp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MaterialApp(<br>      title: <span class="hljs-string">&#x27;Container demo 1&#x27;</span>,<br>      theme: <span class="hljs-keyword">new</span> ThemeData(primarySwatch: Colors.brown),<br>      home: <span class="hljs-keyword">new</span> ContainerDemoPage(), <span class="hljs-comment">// 这里换上想要测试的界面</span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p><code>widgetdemo/container_page.dart</code>代码<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class="hljs-comment">/// <span class="language-markdown">container示例界面</span></span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ContainerDemoPage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatefulWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  State&lt;StatefulWidget&gt; createState() =&gt; <span class="hljs-keyword">new</span> _ContainerDemoPageState();<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_ContainerDemoPageState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">ContainerDemoPage</span>&gt; </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    Expanded imageExpanded(<span class="hljs-built_in">String</span> img) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Expanded(child: <span class="hljs-keyword">new</span> Container(<br>        decoration: <span class="hljs-keyword">new</span> BoxDecoration(<br>            border: <span class="hljs-keyword">new</span> Border.all(width: <span class="hljs-number">10.0</span>, color: Colors.black38),<br>            borderRadius: <span class="hljs-keyword">const</span> BorderRadius.all(<br>                <span class="hljs-keyword">const</span> Radius.circular(<span class="hljs-number">8.0</span>))),<br>        margin: <span class="hljs-keyword">const</span> EdgeInsets.all(<span class="hljs-number">4.0</span>),<br>        child: <span class="hljs-keyword">new</span> Image.asset(img),<br>      ));<br>    &#125;<br><br>    <span class="hljs-keyword">var</span> container = <span class="hljs-keyword">new</span> Container(<br>      decoration: <span class="hljs-keyword">new</span> BoxDecoration(color: Colors.black26),<br>      child: <span class="hljs-keyword">new</span> Column(<br>        children: &lt;Widget&gt;[<br>          <span class="hljs-keyword">new</span> Row(children: &lt;Widget&gt;[<br>            imageExpanded(<span class="hljs-string">&#x27;images/c1.jpg&#x27;</span>),<br>            imageExpanded(<span class="hljs-string">&#x27;images/c2.jpg&#x27;</span>),<br>          ],),<br>          <span class="hljs-keyword">new</span> Row(children: &lt;Widget&gt;[<br>            imageExpanded(<span class="hljs-string">&#x27;images/d1.jpg&#x27;</span>),<br>            imageExpanded(<span class="hljs-string">&#x27;images/d2.jpg&#x27;</span>),<br>          ],),<br>          <span class="hljs-keyword">new</span> Row(children: &lt;Widget&gt;[<br>            imageExpanded(<span class="hljs-string">&#x27;images/p1.jpg&#x27;</span>),<br>          ],)<br>        ],<br>      ),<br>    );<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Scaffold(<br>      appBar: <span class="hljs-keyword">new</span> AppBar(title: <span class="hljs-keyword">new</span> Text(<span class="hljs-string">&#x27;Container Page demo&#x27;</span>),),<br>      body: <span class="hljs-keyword">new</span> Center(<br>        child: container,<br>      ),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><img src="https://upload-images.jianshu.io/upload_images/1630262-09b60b9be8d21d64.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="container示例"></p><h2 id="GridView"><a href="#GridView" class="headerlink" title="GridView"></a>GridView</h2><p>用GridView来将widget放入一个2维的列表中。<br>GridView提供了2个预装配好的列表，也可以自己建立自定义列表。<br>GridView支持滚动。</p><p>GridView 小结:</p><ul><li>将多个widget放进一个表格中</li><li>当超出渲染范围时，自动提供滚动功能</li><li>可自定义格子，也可用下面提供的2种<ul><li>GridView.count 指定列的数目</li><li>GridView.extent 允许指定子项的最大像素宽度</li></ul></li></ul><h3 id="示例1-用GridView-extent"><a href="#示例1-用GridView-extent" class="headerlink" title="示例1 - 用GridView.extent"></a>示例1 - 用<code>GridView.extent</code></h3><p><code>GridView.extent</code>指定子项占据的最大宽度<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class="hljs-comment">/// <span class="language-markdown">gridView示例界面1</span></span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GridDemo1Page</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatefulWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  State&lt;StatefulWidget&gt; createState() =&gt; <span class="hljs-keyword">new</span> _GridDemo1PageState();<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_GridDemo1PageState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">GridDemo1Page</span>&gt; </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Scaffold(<br>      appBar: <span class="hljs-keyword">new</span> AppBar(title: <span class="hljs-keyword">new</span> Text(<span class="hljs-string">&#x27;Grid Page 1 demo&#x27;</span>),),<br>      body: <span class="hljs-keyword">new</span> Center(<br>        child: buildGrid(),<br>      ),<br>    );<br>  &#125;<br><br>  <span class="hljs-built_in">List</span>&lt;Container&gt; _buildGridTileList(<span class="hljs-built_in">int</span> count) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">List</span>&lt;Container&gt;.generate(count, (<span class="hljs-built_in">int</span> index) =&gt;<br>    <span class="hljs-keyword">new</span> Container(child: <span class="hljs-keyword">new</span> Image.asset(<span class="hljs-string">&#x27;images/pic<span class="hljs-subst">$&#123;index + <span class="hljs-number">1</span>&#125;</span>.jpg&#x27;</span>),));<br>  &#125;<br><br>  Widget buildGrid() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> GridView.extent(<br>      maxCrossAxisExtent: <span class="hljs-number">150.0</span>,<br>      padding: <span class="hljs-keyword">const</span> EdgeInsets.all(<span class="hljs-number">4.0</span>),<br>      mainAxisSpacing: <span class="hljs-number">4.0</span>,<br>      crossAxisSpacing: <span class="hljs-number">4.0</span>,<br>      children: _buildGridTileList(<span class="hljs-number">30</span>),);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><img src="https://upload-images.jianshu.io/upload_images/1630262-a4b3065259a460b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="用GridView.extent"></p><h3 id="示例2-用GridView-count"><a href="#示例2-用GridView-count" class="headerlink" title="示例2 - 用GridView.count"></a>示例2 - 用<code>GridView.count</code></h3><p><code>crossAxisCount</code>设为2，分成2列。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dart">Widget buildGrid() &#123;<br>  <span class="hljs-keyword">var</span> countGrid = GridView.count(<br>    crossAxisCount: <span class="hljs-number">2</span>,<br>    mainAxisSpacing: <span class="hljs-number">4.0</span>,<br>    crossAxisSpacing: <span class="hljs-number">4.0</span>,<br>    padding: <span class="hljs-keyword">const</span> EdgeInsets.all(<span class="hljs-number">4.0</span>),<br>    childAspectRatio: <span class="hljs-number">1.3</span>,<br>    children: _buildGridTileList(<span class="hljs-number">30</span>),<br>  );<br>  <span class="hljs-keyword">return</span> countGrid;<br>&#125;<br></code></pre></td></tr></table></figure><br><img src="https://upload-images.jianshu.io/upload_images/1630262-1e5ec7ea72e1d8ea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="GridView.count示例"></p><h2 id="ListView"><a href="#ListView" class="headerlink" title="ListView"></a>ListView</h2><p><a href="https://docs.flutter.io/flutter/widgets/ListView-class.html">ListView</a>能以列的形式展示数据。当内容超过渲染范围时，自动提供滚动的功能。</p><h4 id="ListView-小结"><a href="#ListView-小结" class="headerlink" title="ListView 小结"></a>ListView 小结</h4><ul><li>把子视图装进列表中</li><li>水平或竖直都可以</li><li>支持滑动</li><li>相比于Column，可选配置比较少，但更易用并且支持滑动</li></ul><p>和Android中的ListView差别不大</p><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><p>把<code>ListTile</code>当做子项来装载数据。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListViewPage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatefulWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  State&lt;StatefulWidget&gt; createState() =&gt; <span class="hljs-keyword">new</span> _ListViewPageState();<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_ListViewPageState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">ListViewPage</span>&gt; </span>&#123;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-built_in">List</span>&lt;Widget&gt; list = &lt;Widget&gt;[];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">30</span>; i++) &#123;<br>      list.add(<span class="hljs-keyword">new</span> ListTile(<br>        title: <span class="hljs-keyword">new</span> Text(<span class="hljs-string">&#x27;title<span class="hljs-subst">$i</span>&#x27;</span>, style: _itemTextStyle,),<br>        subtitle: <span class="hljs-keyword">new</span> Text(<span class="hljs-string">&#x27;A&#x27;</span>),<br>        leading: i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span><br>            ? <span class="hljs-keyword">new</span> Icon(Icons.theaters, color: Colors.blue,)<br>            : <span class="hljs-keyword">new</span> Icon(Icons.restaurant, color: Colors.blue,),<br>      ));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Scaffold(<br>      appBar: <span class="hljs-keyword">new</span> AppBar(title: <span class="hljs-keyword">new</span> Text(<span class="hljs-string">&#x27;ListView Demo&#x27;</span>),),<br>      body: <span class="hljs-keyword">new</span> Center(child: <span class="hljs-keyword">new</span> ListView(children: list,),),<br>    );<br>  &#125;<br>&#125;<br><br>TextStyle _itemTextStyle = <span class="hljs-keyword">new</span> TextStyle(<br>    fontWeight: FontWeight.w500, fontSize: <span class="hljs-number">14.0</span>);<br></code></pre></td></tr></table></figure><br><img src="https://upload-images.jianshu.io/upload_images/1630262-a93fcfd8a54f8ce2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ListView参考效果图1"></p><p>另外可以参考 <a href="https://github.com/flutter/flutter/blob/master/examples/flutter_gallery/lib/demo/colors_demo.dart">https://github.com/flutter/flutter/blob/master/examples/flutter_gallery/lib/demo/colors_demo.dart</a></p><h2 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h2><p>使用<a href="https://docs.flutter.io/flutter/widgets/Stack-class.html">Stack</a>在widget之上显示另一些widget，通常用来显示图片。<br>显示的widget可以完全地把底部widget盖住。</p><h4 id="Stack-小结"><a href="#Stack-小结" class="headerlink" title="Stack 小结:"></a>Stack 小结:</h4><ul><li>用来在当前widget上面再盖上一层widget</li><li>Stack children中的第一个widget放在最下，后面的widget会一层层盖上去</li><li>Stack的内容不支持滚动</li><li>可以裁剪超出范围的子widget</li></ul><h3 id="Stack示例1"><a href="#Stack示例1" class="headerlink" title="Stack示例1"></a>Stack示例1</h3><p>显示一个<code>CircleAvatar</code><br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StackPage1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatefulWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  State&lt;StatefulWidget&gt; createState() =&gt; <span class="hljs-keyword">new</span> _StackPage1State();<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_StackPage1State</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">StackPage1</span>&gt; </span>&#123;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">var</span> stack = <span class="hljs-keyword">new</span> Stack(<br>      alignment: <span class="hljs-keyword">const</span> Alignment(<span class="hljs-number">0.6</span>, <span class="hljs-number">0.6</span>),<br>      children: &lt;Widget&gt;[<br>        <span class="hljs-keyword">new</span> CircleAvatar(<br>          backgroundImage: <span class="hljs-keyword">new</span> AssetImage(<span class="hljs-string">&#x27;images/android_1.jpg&#x27;</span>),<br>          radius: <span class="hljs-number">100.0</span>,),<br>        <span class="hljs-keyword">new</span> Container(decoration: <span class="hljs-keyword">new</span> BoxDecoration(color: Colors.black45),<br>          child: <span class="hljs-keyword">new</span> Text(<br>            <span class="hljs-string">&#x27;Android Avatar&#x27;</span>, style: <span class="hljs-keyword">new</span> TextStyle(color: Colors.white70),),),<br>        <span class="hljs-keyword">new</span> Container(decoration: <span class="hljs-keyword">new</span> BoxDecoration(color: Colors.transparent),<br>          padding: <span class="hljs-keyword">const</span> EdgeInsets.fromLTRB(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">100.0</span>, <span class="hljs-number">0.0</span>),<br>          child: <span class="hljs-keyword">new</span> CircleAvatar(<br>            backgroundImage: <span class="hljs-keyword">new</span> AssetImage(<span class="hljs-string">&#x27;images/p_box1.png&#x27;</span>),<br>            backgroundColor: Colors.transparent,<br>            radius: <span class="hljs-number">10.0</span>,),),<br>      ],<br>    );<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Scaffold(<br>      appBar: <span class="hljs-keyword">new</span> AppBar(title: <span class="hljs-keyword">new</span> Text(<span class="hljs-string">&#x27;Stack Demo 1&#x27;</span>),),<br>      body: <span class="hljs-keyword">new</span> Center(child: stack,),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><img src="https://upload-images.jianshu.io/upload_images/1630262-3c747578f43bf9b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Stack示例1"></p><h2 id="Card"><a href="#Card" class="headerlink" title="Card"></a>Card</h2><p>Card来自Material组件库，可包含一些数据，通常用ListTile来组装。Card只有一个子widget，可以是column、row、list、grid或其它组合widget。<br>默认情况下，Card把自己的尺寸缩小为0像素。可以用<a href="https://docs.flutter.io/flutter/widgets/SizedBox-class.html">SizedBox</a>来指定card的尺寸。</p><p>Flutter中的Card有圆角和阴影效果。修改<code>elevation</code>可改变阴影效果。</p><p><code>elevation</code>取值范围，参考 <a href="https://material.io/guidelines/material-design/elevation-shadows.html">Elevation and Shadows</a></p><p>若设置的范围外的值，阴影效果会消失。</p><h4 id="Card-小结"><a href="#Card-小结" class="headerlink" title="Card 小结:"></a>Card 小结:</h4><ul><li>实现了<a href="https://material.io/guidelines/components/cards.html">Material Design card</a></li><li>用于展示相关的数据</li><li>有一个子项（child），可以是column、row、list、grid或其它组合widget</li><li>有圆角和阴影效果</li><li>不支持滚动</li></ul><h3 id="Card示例1"><a href="#Card示例1" class="headerlink" title="Card示例1"></a>Card示例1</h3><p>将前面的ListView示例修改一下<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListViewPage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatefulWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  State&lt;StatefulWidget&gt; createState() =&gt; <span class="hljs-keyword">new</span> _ListViewPageState();<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_ListViewPageState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">ListViewPage</span>&gt; </span>&#123;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-built_in">List</span>&lt;Widget&gt; list = &lt;Widget&gt;[];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">30</span>; i++) &#123;<br>      list.add(<span class="hljs-keyword">new</span> Card(child: <span class="hljs-keyword">new</span> Column(<br>        children: &lt;Widget&gt;[<br>          <span class="hljs-keyword">new</span> Image.asset(<br>            <span class="hljs-string">&#x27;images/pic<span class="hljs-subst">$&#123;i + <span class="hljs-number">1</span>&#125;</span>.jpg&#x27;</span>,),<br>          <span class="hljs-keyword">new</span> ListTile(<br>            title: <span class="hljs-keyword">new</span> Text(<span class="hljs-string">&#x27;title<span class="hljs-subst">$i</span>&#x27;</span>, style: _itemTextStyle,),<br>            subtitle: <span class="hljs-keyword">new</span> Text(<span class="hljs-string">&#x27;A&#x27;</span>),<br>            leading: i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span><br>                ? <span class="hljs-keyword">new</span> Icon(Icons.theaters, color: Colors.blue,)<br>                : <span class="hljs-keyword">new</span> Icon(Icons.restaurant, color: Colors.blue,),<br>          ),<br>        ],<br>      ),));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Scaffold(<br>      appBar: <span class="hljs-keyword">new</span> AppBar(title: <span class="hljs-keyword">new</span> Text(<span class="hljs-string">&#x27;ListView Demo&#x27;</span>),),<br>      body: <span class="hljs-keyword">new</span> Center(child: <span class="hljs-keyword">new</span> ListView(children: list,),),<br>    );<br>  &#125;<br>&#125;<br><br>TextStyle _itemTextStyle = <span class="hljs-keyword">new</span> TextStyle(<br>    fontWeight: FontWeight.w500, fontSize: <span class="hljs-number">14.0</span>);<br></code></pre></td></tr></table></figure><br><img src="https://upload-images.jianshu.io/upload_images/1630262-46044fb55e1e989c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Card示例1"></p><h2 id="ListTile"><a href="#ListTile" class="headerlink" title="ListTile"></a>ListTile</h2><p>来自Material组件库的横向组件。可自定义3行文字及其可选的头尾图标。<br>此控件常与Card或ListView一起用。</p><h4 id="ListTile-小结"><a href="#ListTile-小结" class="headerlink" title="ListTile 小结:"></a>ListTile 小结:</h4><ul><li>可定制3行带图标的文字</li><li>相比于Row，配置更少，但更易用</li></ul><h2 id="加一个主界面"><a href="#加一个主界面" class="headerlink" title="加一个主界面"></a>加一个主界面</h2><p>放置一些按钮，点击跳转到相应的界面。<br>使用<code>Navigator.of(context).pushNamed(routeName)</code>来跳转。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:demo_flutter/widgetdemo/container_page.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:demo_flutter/widgetdemo/grid_page.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:demo_flutter/widgetdemo/listview_demo.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:demo_flutter/widgetdemo/stack_page1.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:demo_flutter/widgetdemo/button_page.dart&#x27;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-built_in">String</span> CONTAINER_DEMO_PAGE = <span class="hljs-string">&#x27;/a&#x27;</span>;<br><br><span class="hljs-keyword">void</span> main() &#123;<br>  runApp(<span class="hljs-keyword">new</span> MaterialApp(<br>    home: <span class="hljs-keyword">new</span> HomePage(),<br>    routes: &#123;<br>      CONTAINER_DEMO_PAGE: (BuildContext context) =&gt; <span class="hljs-keyword">new</span> ContainerDemoPage(),<br>      <span class="hljs-string">&#x27;/b&#x27;</span>: (BuildContext context) =&gt; <span class="hljs-keyword">new</span> GridDemo1Page(),<br>      <span class="hljs-string">&#x27;/c&#x27;</span>: (BuildContext context) =&gt; <span class="hljs-keyword">new</span> ListViewPage(),<br>      <span class="hljs-string">&#x27;/d&#x27;</span>: (BuildContext context) =&gt; <span class="hljs-keyword">new</span> StackPage1(),<br>      <span class="hljs-string">&#x27;/e&#x27;</span>: (BuildContext context) =&gt; <span class="hljs-keyword">new</span> ButtonPage(),<br>    &#125;,<br>  ));<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HomePage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatefulWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  State&lt;StatefulWidget&gt; createState() =&gt; <span class="hljs-keyword">new</span> _HomePageState();<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_HomePageState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">HomePage</span>&gt; </span>&#123;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    getGestureDetector(<span class="hljs-built_in">String</span> routeName, <span class="hljs-built_in">String</span> content) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> GestureDetector (<br>        onTap: () &#123;<br>          Navigator.of(context).pushNamed(routeName);<br>        &#125;,<br>        child: <span class="hljs-keyword">new</span> Container (<br>            padding: EdgeInsets.all(<span class="hljs-number">20.0</span>),<br>            child: <span class="hljs-keyword">new</span> Center(child: <span class="hljs-keyword">new</span> Text (content),)),<br>      );<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Scaffold(<br>      appBar: <span class="hljs-keyword">new</span> AppBar(title: <span class="hljs-keyword">new</span> Text(<span class="hljs-string">&#x27;Home&#x27;</span>),),<br>      body: <span class="hljs-keyword">new</span> Column(children: &lt;Widget&gt;[<br>        getGestureDetector(CONTAINER_DEMO_PAGE, <span class="hljs-string">&#x27;Container Demo&#x27;</span>),<br>        getGestureDetector(<span class="hljs-string">&#x27;/b&#x27;</span>, <span class="hljs-string">&#x27;Grid Demo 1&#x27;</span>),<br>        getGestureDetector(<span class="hljs-string">&#x27;/c&#x27;</span>, <span class="hljs-string">&#x27;ListView Demo&#x27;</span>),<br>        getGestureDetector(<span class="hljs-string">&#x27;/d&#x27;</span>, <span class="hljs-string">&#x27;Stack Demo&#x27;</span>),<br>        getGestureDetector(<span class="hljs-string">&#x27;/e&#x27;</span>, <span class="hljs-string">&#x27;Button Page&#x27;</span>),<br>      ],),<br>    );<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>Flutter_note</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Flutter工程常见问题集合</title>
    <link href="/Flutter/Flutter-project_common_questions/"/>
    <url>/Flutter/Flutter-project_common_questions/</url>
    
    <content type="html"><![CDATA[<p>在学习使用flutter的过程中，遇到一些工程上的问题。比如flutter的配置，IDE的设置等等。</p><h2 id="flutter-doctor-需要jdk1-8"><a href="#flutter-doctor-需要jdk1-8" class="headerlink" title="flutter doctor 需要jdk1.8"></a>flutter doctor 需要jdk1.8</h2><p>需要jdk1.8；如果装的是jdk9及以后的版本，flutter doctor会一直提示你需要升级android SDK</p><p><a href="https://flutter.io/flutter-for-android/#views">https://flutter.io/flutter-for-android/#views</a></p><h2 id="flutter升级遇到网络错误-Got-socket-error"><a href="#flutter升级遇到网络错误-Got-socket-error" class="headerlink" title="flutter升级遇到网络错误 - Got socket error"></a>flutter升级遇到网络错误 - Got socket error</h2><p>win7双击打开<code>flutter_console.bat</code>，尝试用<code>flutter upgrade</code>升级时，遇到错误。<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">E:\sdk_flutter\flutter&gt;flutter upgrade<br>Checking Dart SDK <span class="hljs-built_in">version</span>...<br>Downloading Dart SDK <span class="hljs-built_in">from</span> Flutter engine <span class="hljs-number">09</span>d05a38912a3c1a906e95099cac9a7e14fae85<br>f...<br>Unzipping Dart SDK...<br>Updating flutter tool...<br>Got <span class="hljs-built_in">socket</span> error trying <span class="hljs-built_in">to</span> find package mockito <span class="hljs-keyword">at</span> <span class="hljs-keyword">https</span>://pub.dartlang.org.<br>Error: Unable <span class="hljs-built_in">to</span> <span class="hljs-string">&#x27;pub upgrade&#x27;</span> flutter tool. Retrying <span class="hljs-keyword">in</span> <span class="hljs-literal">five</span> <span class="hljs-built_in">seconds</span>...<br></code></pre></td></tr></table></figure><br>报错：连接不上<a href="https://pub.dartlang.org">https://pub.dartlang.org</a></p><p>用梯子和不用梯子都会报这个错误。查阅官网<a href="https://flutter.io/get-started/install/">https://flutter.io/get-started/install/</a></p><p><img src="http://rustblogres.rustfisher.com/flutter-install-note.webp" alt="https://flutter.io/get-started/install"></p><p>官网说中国用户请参考<a href="https://github.com/flutter/flutter/wiki/Using-Flutter-in-China">https://github.com/flutter/flutter/wiki/Using-Flutter-in-China</a></p><p>参考文章建议设置2个环境变量<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">export PUB_HOSTED_URL=[https:<span class="hljs-regexp">//</span>pub.flutter-io.cn](https:<span class="hljs-regexp">//</span>pub.flutter-io.cn/) <br>export FLUTTER_STORAGE_BASE_URL=[https:<span class="hljs-regexp">//</span>storage.flutter-io.cn](https:<span class="hljs-regexp">//</span>storage.flutter-io.cn/)<br></code></pre></td></tr></table></figure><br>我用的是win7，在环境变量 -&gt; 用户变量中添加了这2个变量<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">FLUTTER_STORAGE_BASE_URL  https:<span class="hljs-regexp">//</span>storage.flutter-io.cn<br>PUB_HOSTED_URL   https:<span class="hljs-regexp">//</span>pub.flutter-io.cn  <br></code></pre></td></tr></table></figure><br>再重新执行<code>flutter upgrade</code>即可</p><p>使用<code>flutter_console.bat</code>时，应该<strong>以管理员身份运行</strong></p><h2 id="Android-Studio-3-0-1-的flutter项目找不到设备-no-connected-device"><a href="#Android-Studio-3-0-1-的flutter项目找不到设备-no-connected-device" class="headerlink" title="Android Studio 3.0.1 的flutter项目找不到设备 - no connected device"></a>Android Studio 3.0.1 的flutter项目找不到设备 - no connected device</h2><p>尝试运行flutter项目时，出现提示框</p><p><img src="http://rustblogres.rustfisher.com/flutter-no-connect-device.webp" alt="no connected device"></p><p>此时注意到as顶部工具栏的右边少了设备框【Flutter Device Selection】</p><p><img src="http://rustblogres.rustfisher.com/flutter-as-top-bar.webp" alt="as顶部栏"><br>红圈的位置本应该显示当前连接的设备，但是在代码写错一次后，这一栏就消失了。</p><h3 id="错误排查"><a href="#错误排查" class="headerlink" title="错误排查"></a>错误排查</h3><p>尝试清缓存并重启as，那一栏仍然未出现</p><p><img src="http://rustblogres.rustfisher.com/clear-and-restart-as.webp" alt="清缓存并重启as"></p><p>flutter已经升级到当前最新版本。<br>在git-bash中运行<code>flutter doctor</code>，并没有发现什么问题。<br><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">$ flutter doctor<br>Doctor <span class="hljs-keyword">summary</span> (<span class="hljs-keyword">to</span> see <span class="hljs-keyword">all</span> details, run flutter doctor -v):<br>[√] Flutter (Channel beta, v0<span class="hljs-number">.5</span><span class="hljs-number">.1</span>, <span class="hljs-keyword">on</span> Microsoft Windows [<span class="hljs-keyword">Version</span> <span class="hljs-number">6.1</span><span class="hljs-number">.7601</span>], locale zh-CN)<br>[√] Android toolchain - develop <span class="hljs-keyword">for</span> Android devices (Android SDK <span class="hljs-number">27.0</span><span class="hljs-number">.3</span>)<br>[√] Android Studio (<span class="hljs-keyword">version</span> <span class="hljs-number">3.0</span>)<br>[√] Connected devices (<span class="hljs-number">1</span> available)<br><br>• <span class="hljs-keyword">No</span> issues <span class="hljs-built_in">found</span>!<br></code></pre></td></tr></table></figure><br>由此猜测是Android Studio的问题。新建一个flutter工程，观察到设备框又正常了</p><p><img src="http://rustblogres.rustfisher.com/flutter-as-device-box.webp" alt="新建的flutter工程"><br>那么原来工程里面为何总是说找不到设备？</p><p>仔细回想了一下，参考flutter教程时，添加了一个<code>images</code>目录，并且修改了<code>pubspec.yaml</code>文件。检查发现assets的缩进弄错了。把缩进改成2个空格后，设备框就出现了。<br><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs llvm"># To <span class="hljs-keyword">add</span> assets <span class="hljs-keyword">to</span> your application<span class="hljs-punctuation">,</span> <span class="hljs-keyword">add</span> an assets <span class="hljs-keyword">section</span><span class="hljs-punctuation">,</span> like this:<br><span class="hljs-symbol">assets:</span><br>  - images/lake.jpg<br></code></pre></td></tr></table></figure><br>由此可见，as对<code>pubspec.yaml</code>文件十分敏感。</p><h2 id="Flutter-示例工程flutter-gallery遇到的网络问题"><a href="#Flutter-示例工程flutter-gallery遇到的网络问题" class="headerlink" title="Flutter 示例工程flutter_gallery遇到的网络问题"></a>Flutter 示例工程<code>flutter_gallery</code>遇到的网络问题</h2><p>beta分支的<code>flutter_gallery</code>把资源文件都放在了 <a href="https://flutter.googlesource.com/gallery-assets/">https://flutter.googlesource.com/gallery-assets/</a></p><p>这个用浏览器是可以打开的，但是as运行的时候会报 fatal: not a git repository ；</p><p>参考 <a href="https://github.com/flutter/flutter/issues/13763">https://github.com/flutter/flutter/issues/13763</a> ，决定把channel切换到master</p><p>切换到master channel后，把flutter中的bin目录整个删掉；运行flutter doctor重新下载一次dart的SDK。可运行master中的demo。</p><h2 id="Android-Studio找不到Flutter-SDK"><a href="#Android-Studio找不到Flutter-SDK" class="headerlink" title="Android Studio找不到Flutter SDK"></a>Android Studio找不到Flutter SDK</h2><p>运行了<code>flutter upgrade</code>后，打开as发现找不到SDK了。<br>开发环境是win7，进行检查：</p><ul><li>环境变量是正常的</li><li>使用cmd运行flutter doctor正常</li><li>as能跑普通的安卓工程</li></ul><p>检查flutter sdk git 仓库的情况，发现有些文件被修改了。使用git将其更新。运行<code>flutter doctor</code>重新编译SDK。<br>打开as发现问题解决。</p>]]></content>
    
    
    <categories>
      
      <category>Flutter_note</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Android Intent 传递数据大小限制</title>
    <link href="/Android/Android-Intent_extra_size_limit/"/>
    <url>/Android/Android-Intent_extra_size_limit/</url>
    
    <content type="html"><![CDATA[<p>在<code>sendBroadcast</code>，<code>startActivity</code>时，我们会用到Intent。<br>Intent可以携带一些数据，比如基本类型数据int、Boolean，或是String，或是序列化对象，Parcelable与Serializable。</p><p>Intent传递数据时，如果数据太大，可能会出现异常。比如App闪退，或是Intent发送不成功，logcat报错等等。</p><p>这就牵涉到一个问题：Intent 传递数据大小限制。</p><p>Intent到底能够携带多少数据呢？</p><h2 id="使用Intent传送数据时，可能会出现异常"><a href="#使用Intent传送数据时，可能会出现异常" class="headerlink" title="使用Intent传送数据时，可能会出现异常"></a>使用Intent传送数据时，可能会出现异常</h2><p>在Intent中传入一个Parcelable对象；例如传入一个bitmap对象。</p><p>代码参考： <a href="https://github.com/AnRFDev/android-Basic4">https://github.com/AnRFDev/android-Basic4</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Bitmap</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> Bitmap.createScaledBitmap(srcBmp, dstWid, dstHeight, <span class="hljs-literal">false</span>);<br><span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(MSG_INTENT);<br>intent.putExtra(K_PIC, b1);<br></code></pre></td></tr></table></figure><br>选择bitmap的原因是，Bitmap实现了<code>Parcelable</code>接口，并且可以通过<code>getByteCount()</code>得知所占内存大小。</p><p><code>sendBroadcast</code>时，报出如下信息<br><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs roboconf">V/ActivityManager: Broadcast: Intent &#123; <span class="hljs-attribute">act=intent_bi flg=0x10 (has extras) &#125; ordered=false userid=0 callerApp=ProcessRecord&#123;27aeaaf5 31217</span>:com<span class="hljs-variable">.rustfisher</span><span class="hljs-variable">.basic</span>4/u0a113&#125;<br>E/JavaBinder: !!! FAILED BINDER TRANSACTION !!!<br>W/BroadcastQueue: Failure sending broadcast Intent &#123; act=intent_bi flg=0x10 (has extras) &#125;<br>       android<span class="hljs-variable">.os</span><span class="hljs-variable">.TransactionTooLargeException</span><br>           at android<span class="hljs-variable">.os</span><span class="hljs-variable">.BinderProxy</span><span class="hljs-variable">.transactNative</span>(Native Method)<br>           at android<span class="hljs-variable">.os</span><span class="hljs-variable">.BinderProxy</span><span class="hljs-variable">.transact</span>(Binder<span class="hljs-variable">.java</span>:504)<br>           at android<span class="hljs-variable">.app</span><span class="hljs-variable">.ApplicationThreadProxy</span><span class="hljs-variable">.scheduleRegisteredReceiver</span>(ApplicationThreadNative<span class="hljs-variable">.java</span>:1170)<br>           at com<span class="hljs-variable">.android</span><span class="hljs-variable">.server</span><span class="hljs-variable">.am</span><span class="hljs-variable">.BroadcastQueue</span><span class="hljs-variable">.performReceiveLocked</span>(BroadcastQueue<span class="hljs-variable">.java</span>:576)<br>           at com<span class="hljs-variable">.android</span><span class="hljs-variable">.server</span><span class="hljs-variable">.am</span><span class="hljs-variable">.BroadcastQueue</span><span class="hljs-variable">.deliverToRegisteredReceiverLocked</span>(BroadcastQueue<span class="hljs-variable">.java</span>:848)<br>           at com<span class="hljs-variable">.android</span><span class="hljs-variable">.server</span><span class="hljs-variable">.am</span><span class="hljs-variable">.BroadcastQueue</span><span class="hljs-variable">.processNextBroadcast</span>(BroadcastQueue<span class="hljs-variable">.java</span>:917)<br>           at com<span class="hljs-variable">.android</span><span class="hljs-variable">.server</span><span class="hljs-variable">.am</span><span class="hljs-variable">.BroadcastQueue</span>$BroadcastHandler<span class="hljs-variable">.handleMessage</span>(BroadcastQueue<span class="hljs-variable">.java</span>:254)<br>           at android<span class="hljs-variable">.os</span><span class="hljs-variable">.Handler</span><span class="hljs-variable">.dispatchMessage</span>(Handler<span class="hljs-variable">.java</span>:111)<br>           at android<span class="hljs-variable">.os</span><span class="hljs-variable">.Looper</span><span class="hljs-variable">.loop</span>(Looper<span class="hljs-variable">.java</span>:194)<br>           at android<span class="hljs-variable">.os</span><span class="hljs-variable">.HandlerThread</span><span class="hljs-variable">.run</span>(HandlerThread<span class="hljs-variable">.java</span>:61)<br>           at com<span class="hljs-variable">.android</span><span class="hljs-variable">.server</span><span class="hljs-variable">.ServiceThread</span><span class="hljs-variable">.run</span>(ServiceThread<span class="hljs-variable">.java</span>:46)<br></code></pre></td></tr></table></figure></p><p>查看异常类<code>TransactionTooLargeException</code>，它继承了<code>RemoteException</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> android.os;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransactionTooLargeException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RemoteException</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TransactionTooLargeException</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TransactionTooLargeException</span><span class="hljs-params">(String msg)</span> &#123;<br>        <span class="hljs-built_in">super</span>(msg);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>从报错信息<code>FAILED BINDER TRANSACTION</code>可以看出，binder传送数据失败了。<br>追踪到<code>Binder</code>，它的<code>transactNative</code>方法报出<code>RemoteException</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">native</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">transactNative</span><span class="hljs-params">(<span class="hljs-type">int</span> code, Parcel data, Parcel reply,</span><br><span class="hljs-params">            <span class="hljs-type">int</span> flags)</span> <span class="hljs-keyword">throws</span> RemoteException;<br></code></pre></td></tr></table></figure><br>抛出的异常与Binder有关。</p><h2 id="Intent携带信息的大小受Binder限制"><a href="#Intent携带信息的大小受Binder限制" class="headerlink" title="Intent携带信息的大小受Binder限制"></a>Intent携带信息的大小受Binder限制</h2><p>Intent携带信息的大小其实是受Binder限制。本文标题也可以改为“Binder传递数据大小限制”。</p><p>数据以<code>Parcel</code>对象的形式存放在Binder传递缓存中。<br>如果数据或返回值比传递buffer大，则此次传递调用失败并抛出<code>TransactionTooLargeException</code>异常。</p><p>Binder传递缓存有一个限定大小，通常是1Mb。但同一个进程中所有的传输共享缓存空间。</p><p>多个地方在进行传输时，即时它们各自传输的数据不超出大小限制，<code>TransactionTooLargeException</code>异常也可能会被抛出。</p><p>在使用Intent传递数据时，1Mb并不是安全上限。因为Binder中可能正在处理其它的传输工作。<br>不同的机型和系统版本，这个上限值也可能会不同。</p><p>在其它地方，例如<code>onSaveInstanceState(@NonNull Bundle outState)</code>，也可能会遇到与Binder有关的<a href="https://medium.com/@mdmasudparvez/android-os-transactiontoolargeexception-on-nougat-solved-3b6e30597345">类似问题</a>。</p><h2 id="为什么Binder要限制传输数据的大小"><a href="#为什么Binder要限制传输数据的大小" class="headerlink" title="为什么Binder要限制传输数据的大小"></a>为什么Binder要限制传输数据的大小</h2><p>个人推测，作为一种IPC的方式，Binder并不是为传输大量数据而设计。</p><p>传输大量数据，可以考虑URL之类的方法。</p><p>参考</p><ul><li><a href="https://stackoverflow.com/questions/8434423/android-remote-method-data-limit">https://stackoverflow.com/questions/8434423/android-remote-method-data-limit</a></li><li><a href="https://developer.android.com/reference/android/os/TransactionTooLargeException">https://developer.android.com/reference/android/os/TransactionTooLargeException</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Android_note</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Android NDK Makefile相关与示例</title>
    <link href="/Android/NDK-Makefile_example/"/>
    <url>/Android/NDK-Makefile_example/</url>
    
    <content type="html"><![CDATA[<h2 id="Android-mk与Application-mk"><a href="#Android-mk与Application-mk" class="headerlink" title="Android.mk与Application.mk"></a><code>Android.mk</code>与<code>Application.mk</code></h2><p>Android Studio 3之前，需要编写<code>Android.mk</code>和<code>Application.mk</code>文件。</p><p>使用jdk8或jdk7中提供的<code>javah</code>来生成头文件。</p><h3 id="build-gradle设定jni"><a href="#build-gradle设定jni" class="headerlink" title="build.gradle设定jni"></a><code>build.gradle</code>设定jni</h3><p>以下是某模块的<code>build.gradle</code>文件<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">android &#123;<br>    <span class="hljs-comment">// ....</span><br>    sourceSets<span class="hljs-selector-class">.main</span> &#123;<br>        jni<span class="hljs-selector-class">.srcDirs</span> = <span class="hljs-selector-attr">[]</span> <span class="hljs-comment">// 禁止自动执行ndk-build</span><br>        jniLibs<span class="hljs-selector-class">.srcDirs</span> = <span class="hljs-selector-attr">[<span class="hljs-string">&#x27;src/main/libs&#x27;</span>]</span> <span class="hljs-comment">// 设定成so文件生成的目录</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="指定模块的名字"><a href="#指定模块的名字" class="headerlink" title="指定模块的名字"></a>指定模块的名字</h3><p>在<code>Android.mk</code>文件中指定模块的名字<br><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fix"><span class="hljs-attr">LOCAL_MODULE :</span>=<span class="hljs-string"> modname</span><br></code></pre></td></tr></table></figure><br>编译得到<code>libmodname.so</code>文件</p><p>加载库文件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> &#123;<br>    System.loadLibrary(<span class="hljs-string">&quot;modname&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="利用-TARGET-ARCH-ABI-判断目标架构类别"><a href="#利用-TARGET-ARCH-ABI-判断目标架构类别" class="headerlink" title="利用$(TARGET_ARCH_ABI)判断目标架构类别"></a>利用<code>$(TARGET_ARCH_ABI)</code>判断目标架构类别</h3><p>Android Studio 3之前，需要编写<code>Android.mk</code>和<code>Application.mk</code>文件。使用jdk8或jdk7。</p><p>一个典型<code>Application.mk</code><br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs makefile">APP_ABI := arm64-v8a armeabi-v7a<br>APP_PLATFORM := android-19<br>APP_STL := gnustl_static<br>APP_CPPFLAGS += -std=c++11<br></code></pre></td></tr></table></figure><br>指定了2种架构</p><p>在<code>Android.mk</code>中，可以用<code>$(TARGET_ARCH_ABI)</code>判断目标架构类别；<br>例如jni目录中有如下的文件<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">jni<br>|<span class="hljs-string">-- Android.mk</span><br><span class="hljs-string"></span>|<span class="hljs-string">-- Application.mk</span><br><span class="hljs-string"></span>|<span class="hljs-string">-- something.cpp</span><br><span class="hljs-string"></span>|<span class="hljs-string">-- include</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- something.h</span><br><span class="hljs-string"></span>|<span class="hljs-string">-- lib</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- arm64-v8a</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   `-- libcustom.a</span><br><span class="hljs-string"></span>|<span class="hljs-string">   `-- armeabi-v7a</span><br><span class="hljs-string"></span>|<span class="hljs-string">       `-- libcustom.a</span><br></code></pre></td></tr></table></figure></p><p><code>Android.mk</code>中判断当前编译的目标架构而加载库文件<code>libcustom.a</code><br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile">LOCAL_LDFLAGS := <span class="hljs-variable">$(LOCAL_PATH)</span>/lib/<span class="hljs-variable">$(TARGET_ARCH_ABI)</span>/libcustom.a<br></code></pre></td></tr></table></figure></p><h3 id="引用OpenCV模块"><a href="#引用OpenCV模块" class="headerlink" title="引用OpenCV模块"></a>引用OpenCV模块</h3><p>假设已经下载好<code>opencv-3.2.0</code>SDK，<code>Android.mk</code>中引用<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gradle">OPENCVROOT:=$(LOCAL_PATH)<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>opencv-<span class="hljs-number">3.2</span>.<span class="hljs-number">0</span>-android-sdk/OpenCV-android-sdk<br>OPENCV_CAMERA_MODULES:=off<br>OPENCV_INSTALL_MODULES:=on<br>OPENCV_LIB_TYPE:=<span class="hljs-keyword">STATIC</span><br><br><span class="hljs-keyword">include</span> $&#123;OPENCVROOT&#125;<span class="hljs-regexp">/sdk/</span><span class="hljs-keyword">native</span><span class="hljs-regexp">/jni/</span>OpenCV.mk<br></code></pre></td></tr></table></figure><br>使用相对路径找到sdk，引入OpenCV的mk文件</p><h2 id="Android-NDK-通用-makefile-与相关配置"><a href="#Android-NDK-通用-makefile-与相关配置" class="headerlink" title="Android NDK 通用 makefile 与相关配置"></a>Android NDK 通用 makefile 与相关配置</h2><p><code>Android.mk</code><br><figure class="highlight mk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mk">LOCAL_PATH:= <span class="hljs-variable">$(<span class="hljs-built_in">call</span> my-<span class="hljs-built_in">dir</span>)</span><br><span class="hljs-keyword">include</span> <span class="hljs-variable">$(CLEAR_VARS)</span><br>LOCAL_MODULE := waveExtract<br>TARGET_ARCH_ABI := all<br><br>LOCAL_SRC_FILES := src/wave_display.c src/FFT.c<br><br>LOCAL_LDLIBS+= -L<span class="hljs-variable">$(SYSROOT)</span>/usr/lib -llog<br><br><span class="hljs-keyword">include</span> <span class="hljs-variable">$(BUILD_SHARED_LIBRARY)</span><br></code></pre></td></tr></table></figure></p><hr><p><code>Application.mk</code><br><figure class="highlight mk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mk">APP_PLATFORM := android-19<br>APP_MODULES := waveExtract<br>APP_ABI := armeabi-v7a arm64-v8a<br>APP_STL := stlport_static<br>APP_CPPFLAGS += -fexceptions<br><span class="hljs-comment"># for using c++ features,you need to enable these in your Makefile</span><br>APP_CPP_FEATURES += exceptions rtti<br></code></pre></td></tr></table></figure></p><hr><p><code>build.gradle</code><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs stylus">apply plugin: <span class="hljs-string">&#x27;com.android.library&#x27;</span><br><br>android &#123;<br>    compileSdkVersion <span class="hljs-number">28</span><br><br>    defaultConfig &#123;<br>        minSdkVersion <span class="hljs-number">19</span><br>        targetSdkVersion <span class="hljs-number">28</span><br>        versionCode <span class="hljs-number">1</span><br>        versionName <span class="hljs-string">&quot;1.0&quot;</span><br><br>        testInstrumentationRunner <span class="hljs-string">&quot;android.support.test.runner.AndroidJUnitRunner&quot;</span><br><br>    &#125;<br><br>    buildTypes &#123;<br>        release &#123;<br>            minifyEnabled false<br>            proguardFiles <span class="hljs-built_in">getDefaultProguardFile</span>(<span class="hljs-string">&#x27;proguard-android.txt&#x27;</span>), <span class="hljs-string">&#x27;proguard-rules.pro&#x27;</span><br>        &#125;<br>    &#125;<br><br>    sourceSets &#123;<br>        <span class="hljs-selector-tag">main</span> &#123;<br>            jni<span class="hljs-selector-class">.srcDirs</span> = <span class="hljs-selector-attr">[]</span><br>            jniLibs<span class="hljs-selector-class">.srcDirs</span> = <span class="hljs-selector-attr">[<span class="hljs-string">&#x27;src/main/libs&#x27;</span>]</span><br>        &#125;<br>    &#125;<br><br>&#125;<br><br>dependencies &#123;<br>    implementation <span class="hljs-built_in">fileTree</span>(dir: <span class="hljs-string">&#x27;libs&#x27;</span>, include: <span class="hljs-selector-attr">[<span class="hljs-string">&#x27;*.jar&#x27;</span>]</span>)<br><br>    implementation <span class="hljs-string">&#x27;com.android.support:appcompat-v7:28.+&#x27;</span><br>    testImplementation <span class="hljs-string">&#x27;junit:junit:4.12&#x27;</span><br>    androidTestImplementation <span class="hljs-string">&#x27;com.android.support.test:runner:1.0.2&#x27;</span><br>    androidTestImplementation <span class="hljs-string">&#x27;com.android.support.test.espresso:espresso-core:3.0.2&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>Android_note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NDK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Activity中获取View的宽高</title>
    <link href="/Android/Android-Activity_View_get_size/"/>
    <url>/Android/Android-Activity_View_get_size/</url>
    
    <content type="html"><![CDATA[<p>有些时候我们需要获取到View的宽高信息。在onCreate和onResume中尝试view.getWidth()或是view.getHeiht()时，我们会发现获取到的是0。<br>Activity视图在创建完成后，各个子view并不一定被加载完成。<br>获取宽高正确的方法有哪些呢？</p><h2 id="方法1-在Activity的onWindowFocusChanged获取宽高"><a href="#方法1-在Activity的onWindowFocusChanged获取宽高" class="headerlink" title="方法1 - 在Activity的onWindowFocusChanged获取宽高"></a>方法1 - 在Activity的<code>onWindowFocusChanged</code>获取宽高</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onWindowFocusChanged</span><span class="hljs-params">(<span class="hljs-type">boolean</span> hasFocus)</span> &#123;<br>    <span class="hljs-built_in">super</span>.onWindowFocusChanged(hasFocus);<br>    <span class="hljs-comment">// 在这里我们可以获取到View的真实宽高</span><br>    Log.d(TAG, <span class="hljs-string">&quot;onWindowFocusChanged: mBtn1.getWidth == &quot;</span> + mBtn1.getWidth());<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="方法2-使用ViewTreeObserver的OnGlobalLayoutListener回调"><a href="#方法2-使用ViewTreeObserver的OnGlobalLayoutListener回调" class="headerlink" title="方法2 - 使用ViewTreeObserver的OnGlobalLayoutListener回调"></a>方法2 - 使用ViewTreeObserver的<code>OnGlobalLayoutListener</code>回调</h2><p>获取View的ViewTreeObserver，添加回调<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ViewTreeObserver</span> <span class="hljs-variable">vto</span> <span class="hljs-operator">=</span> mBtn1.getViewTreeObserver();<br>vto.addOnGlobalLayoutListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ViewTreeObserver</span>.OnGlobalLayoutListener() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onGlobalLayout</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">height</span> <span class="hljs-operator">=</span> mBtn1.getHeight();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">width</span> <span class="hljs-operator">=</span> mBtn1.getWidth();<br>        Log.d(TAG, <span class="hljs-string">&quot;onGlobalLayout: mBtn1 &quot;</span> + width + <span class="hljs-string">&quot;, &quot;</span> + height);<br>        mBtn1.getViewTreeObserver().removeOnGlobalLayoutListener(<span class="hljs-built_in">this</span>);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure></p><h2 id="方法3-使用View-post-Runnable-action-方法"><a href="#方法3-使用View-post-Runnable-action-方法" class="headerlink" title="方法3 - 使用View.post(Runnable action)方法"></a>方法3 - 使用<code>View.post(Runnable action)</code>方法</h2><p>例如我们在onCreate中post一个Runnable<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        mBtn1 = findViewById(R.id.btn1);<br>        Log.d(TAG, <span class="hljs-string">&quot;mBtn1 post runnable&quot;</span>);<br>        mBtn1.post(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                Log.d(TAG, <span class="hljs-string">&quot;mBtn1: &quot;</span> + mBtn1.getWidth() + <span class="hljs-string">&quot;, &quot;</span> + mBtn1.getHeight());<br>            &#125;<br>        &#125;);<br>    &#125;<br><br><span class="hljs-comment">/* log</span><br><span class="hljs-comment">06-19 11:54:17.865 28009-28009/com.rustfisher.basic4 D/rustApp: mBtn1 post runnable</span><br><span class="hljs-comment">06-19 11:54:17.867 28009-28009/com.rustfisher.basic4 D/rustApp: [act2] onResume</span><br><span class="hljs-comment">06-19 11:54:17.899 28009-28009/com.rustfisher.basic4 D/rustApp: mBtn1: 355, 144</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><br>可以获取到view的宽高。从log的时间上可以看出，在view加载完毕后，执行的Runnable。</p><h2 id="应用-动态调整ImageView的宽高"><a href="#应用-动态调整ImageView的宽高" class="headerlink" title="应用 - 动态调整ImageView的宽高"></a>应用 - 动态调整ImageView的宽高</h2><p>获取到view的宽高后，我们可以动态地调整ImageView的高度。<br>假设图片宽高为704 * 440。xml中设置scaleType为fitXY。已知ImageView的宽度是固定的，我们可以调整高度。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">ImageView</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:scaleType</span>=<span class="hljs-string">&quot;fitXY&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>根据图片真实大小来重设ImageView的高度。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onWindowFocusChanged</span><span class="hljs-params">(<span class="hljs-type">boolean</span> hasFocus)</span> &#123;<br>    <span class="hljs-built_in">super</span>.onWindowFocusChanged(hasFocus);<br>    resetIntroIvParams();<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">resetIntroIvParams</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">height</span> <span class="hljs-operator">=</span> mIntroIv.getHeight(); <span class="hljs-comment">// 704 * 440</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">wid</span> <span class="hljs-operator">=</span> mIntroIv.getWidth();<br>    <span class="hljs-keyword">if</span> (height &gt; <span class="hljs-number">0</span> &amp;&amp; wid &gt; <span class="hljs-number">0</span>) &#123;<br>        ViewGroup.<span class="hljs-type">LayoutParams</span> <span class="hljs-variable">layoutParams</span> <span class="hljs-operator">=</span> mIntroIv.getLayoutParams();<br>        layoutParams.height = (<span class="hljs-type">int</span>) (wid * <span class="hljs-number">440.0</span> / <span class="hljs-number">704.0</span>);<br>        mIntroIv.setLayoutParams(layoutParams);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>Android_note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android_View</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android 使用 MediaExtractor 和 MediaMuxer 解析和封装 mp4 文件</title>
    <link href="/Android/Android-MediaMuxer_MediaExtractor_mp4/"/>
    <url>/Android/Android-MediaMuxer_MediaExtractor_mp4/</url>
    
    <content type="html"><![CDATA[<p>本文目的：使用 MediaExtractor 和 MediaMuxer 解析和封装 mp4 文件</p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>MP4或称MPEG-4第14部分（英语：MPEG-4 Part 14）是一种标准的数字多媒体容器格式。</p><p>MP4中的音频格式通常为AAC(audio/mp4a-latm)</p><h4 id="MediaExtractor"><a href="#MediaExtractor" class="headerlink" title="MediaExtractor"></a>MediaExtractor</h4><p><a href="https://developer.android.com/reference/android/media/MediaExtractor.html">MediaExtractor</a> 可用于分离多媒体容器中视频track和音频track</p><p><code>setDataSource()</code> 设置数据源，数据源可以是本地文件地址，也可以是网络地址</p><p><code>getTrackFormat(int index)</code> 来获取各个track的<code>MediaFormat</code>，通过<code>MediaFormat</code>来获取track的详细信息，如：MimeType、分辨率、采样频率、帧率等等</p><p><code>selectTrack(int index)</code> 通过下标选择指定的通道</p><p><code>readSampleData(ByteBuffer buffer, int offset)</code> 获取当前编码好的数据并存在指定好偏移量的buffer中</p><h4 id="MediaMuxer"><a href="#MediaMuxer" class="headerlink" title="MediaMuxer"></a>MediaMuxer</h4><p><a href="https://developer.android.com/reference/android/media/MediaMuxer.html">MediaMuxer</a> 可用于混合基本码流。将所有的信道的信息合成一个视频。<br>目前输出格式支持MP4，Webm，3GP。从Android Nougat开始支持向MP4中混入B-frames。</p><h3 id="提取并输出MP4文件中的视频部分"><a href="#提取并输出MP4文件中的视频部分" class="headerlink" title="提取并输出MP4文件中的视频部分"></a>提取并输出MP4文件中的视频部分</h3><p>从一个MP4文件中提取出视频，得到不含音频的MP4文件。</p><p>实现流程，首先是使用<code>MediaExtractor</code>提取，然后使用<code>MediaMuxer</code>输出MP4文件。</p><ul><li><code>MediaExtractor</code>设置数据源，找到并选择视频轨道的格式和下标</li><li><code>MediaMuxer</code>设置输出格式为<code>MUXER_OUTPUT_MPEG_4</code>，添加前面选定的格式，调用<code>start()</code>启动</li><li><code>MediaExtractor</code>读取帧数据，不停地将帧数据和相关信息传入<code>MediaMuxer</code></li><li>最后停止并释放<code>MediaMuxer</code>和<code>MediaExtractor</code><br>最好放在子线程中操作。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 提取视频</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> sourceVideoPath 原始视频文件</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> Exception 出错</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">extractVideo</span><span class="hljs-params">(String sourceVideoPath, String outVideoPath)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">MediaExtractor</span> <span class="hljs-variable">sourceMediaExtractor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MediaExtractor</span>();<br>    sourceMediaExtractor.setDataSource(sourceVideoPath);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">numTracks</span> <span class="hljs-operator">=</span> sourceMediaExtractor.getTrackCount();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">sourceVideoTrackIndex</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>; <span class="hljs-comment">// 原始视频文件视频轨道参数</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numTracks; ++i) &#123;<br>        <span class="hljs-type">MediaFormat</span> <span class="hljs-variable">format</span> <span class="hljs-operator">=</span> sourceMediaExtractor.getTrackFormat(i);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">mime</span> <span class="hljs-operator">=</span> format.getString(MediaFormat.KEY_MIME);<br>        Log.d(TAG, <span class="hljs-string">&quot;MediaFormat: &quot;</span> + mime);<br>        <span class="hljs-keyword">if</span> (mime.startsWith(<span class="hljs-string">&quot;video/&quot;</span>)) &#123;<br>            sourceMediaExtractor.selectTrack(i);<br>            sourceVideoTrackIndex = i;<br>            Log.d(TAG, <span class="hljs-string">&quot;selectTrack index=&quot;</span> + i + <span class="hljs-string">&quot;; format: &quot;</span> + mime);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">MediaMuxer</span> <span class="hljs-variable">outputMediaMuxer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MediaMuxer</span>(outVideoPath,<br>            MediaMuxer.OutputFormat.MUXER_OUTPUT_MPEG_4);<br>    outputMediaMuxer.addTrack(sourceMediaExtractor.getTrackFormat(sourceVideoTrackIndex));<br>    outputMediaMuxer.start();<br><br>    <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">inputBuffer</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">2</span>); <span class="hljs-comment">// 分配的内存要尽量大一些</span><br>    MediaCodec.<span class="hljs-type">BufferInfo</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MediaCodec</span>.BufferInfo();<br>    <span class="hljs-type">int</span> sampleSize;<br>    <span class="hljs-keyword">while</span> ((sampleSize = sourceMediaExtractor.readSampleData(inputBuffer, <span class="hljs-number">0</span>)) &gt;= <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">presentationTimeUs</span> <span class="hljs-operator">=</span> sourceMediaExtractor.getSampleTime();<br>        info.offset = <span class="hljs-number">0</span>;<br>        info.size = sampleSize;<br>        info.flags = MediaCodec.BUFFER_FLAG_SYNC_FRAME;<br>        info.presentationTimeUs = presentationTimeUs;<br>        outputMediaMuxer.writeSampleData(sourceVideoTrackIndex, inputBuffer, info);<br>        sourceMediaExtractor.advance();<br>    &#125;<br><br>    outputMediaMuxer.stop();<br>    outputMediaMuxer.release();    <span class="hljs-comment">// 停止并释放 MediaMuxer</span><br>    sourceMediaExtractor.release();<br>    sourceMediaExtractor = <span class="hljs-literal">null</span>;   <span class="hljs-comment">// 释放 MediaExtractor</span><br>&#125;<br></code></pre></td></tr></table></figure>如果上面的<code>ByteBuffer</code>分配的空间太小，<code>readSampleData(inputBuffer, 0)</code>可能会出现<code>IllegalArgumentException</code>异常。</li></ul><h3 id="提取MP4文件中的音频部分，获取音频文件"><a href="#提取MP4文件中的音频部分，获取音频文件" class="headerlink" title="提取MP4文件中的音频部分，获取音频文件"></a>提取MP4文件中的音频部分，获取音频文件</h3><h4 id="基于Java-MP4-Parser提取出AAC文件的方法"><a href="#基于Java-MP4-Parser提取出AAC文件的方法" class="headerlink" title="基于Java MP4 Parser提取出AAC文件的方法"></a>基于<code>Java MP4 Parser</code>提取出AAC文件的方法</h4><p><code>Java MP4 Parser</code> - <a href="https://github.com/sannies/mp4parser">https://github.com/sannies/mp4parser</a><br>Java实现读、写和创建MP4容器。但是和编解码音视频有区别。这里主要是提取与再合成。</p><p>下载<code>isoparser-1.1.22.jar</code>并添加进工程中；尝试过gradle直接导入，但不成功</p><p>找到视频文件中所有的音轨，将它们提取出来写入新的文件中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">extractAudioFromMP4</span><span class="hljs-params">(String outAudioPath, String sourceMP4Path)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">Movie</span> <span class="hljs-variable">movie</span> <span class="hljs-operator">=</span> MovieCreator.build(sourceMP4Path);<br>    List&lt;Track&gt; audioTracks = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (Track t : movie.getTracks()) &#123;<br>        <span class="hljs-keyword">if</span> (t.getHandler().equals(<span class="hljs-string">&quot;soun&quot;</span>)) &#123;<br>            audioTracks.add(t);<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">Movie</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Movie</span>();<br>    <span class="hljs-keyword">if</span> (audioTracks.size() &gt; <span class="hljs-number">0</span>) &#123;<br>        result.addTrack(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AppendTrack</span>(audioTracks.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Track</span>[audioTracks.size()])));<br>    &#125;<br>    <span class="hljs-type">Container</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMp4Builder</span>().build(result);<br>    <span class="hljs-type">FileChannel</span> <span class="hljs-variable">fc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomAccessFile</span>(outAudioPath, <span class="hljs-string">&quot;rw&quot;</span>).getChannel();<br>    out.writeContainer(fc);<br>    fc.close();<br>&#125;<br></code></pre></td></tr></table></figure><br>在红米手机上测试成功。从MP4文件（时长约2分20秒）中提取出的AAC文件可在手机上直接播放。</p><h3 id="将AAC音轨换到另一个MP4文件"><a href="#将AAC音轨换到另一个MP4文件" class="headerlink" title="将AAC音轨换到另一个MP4文件"></a>将AAC音轨换到另一个MP4文件</h3><p>MediaExtractor可以直接从提取AAC文件或MP4文件中提取ACC音轨，MediaMuxer来写入新的MP4文件。</p><p>提供音频的文件可以是MP4文件，也可以是AAC文件；另一个提供视频，混合输出新的MP4文件。</p><p>生成的视频的长度由提供视频的文件决定。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> outputVideoFilePath 输出视频文件路径</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> videoProviderPath   提供视频的MP4文件 时长以此为准</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> audioProviderPath   提供音频的文件</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> Exception 运行异常  例如读写文件异常</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">replaceAudioForMP4File</span><span class="hljs-params">(String outputVideoFilePath, String videoProviderPath,</span><br><span class="hljs-params">                                          String audioProviderPath)</span><br>        <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">MediaMuxer</span> <span class="hljs-variable">mediaMuxer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MediaMuxer</span>(outputVideoFilePath,<br>            MediaMuxer.OutputFormat.MUXER_OUTPUT_MPEG_4);<br><br>    <span class="hljs-comment">// 视频 MediaExtractor</span><br>    <span class="hljs-type">MediaExtractor</span> <span class="hljs-variable">mVideoExtractor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MediaExtractor</span>();<br>    mVideoExtractor.setDataSource(videoProviderPath);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">videoTrackIndex</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; mVideoExtractor.getTrackCount(); i++) &#123;<br>        <span class="hljs-type">MediaFormat</span> <span class="hljs-variable">format</span> <span class="hljs-operator">=</span> mVideoExtractor.getTrackFormat(i);<br>        <span class="hljs-keyword">if</span> (format.getString(MediaFormat.KEY_MIME).startsWith(<span class="hljs-string">&quot;video/&quot;</span>)) &#123;<br>            mVideoExtractor.selectTrack(i);<br>            videoTrackIndex = mediaMuxer.addTrack(format);<br>            Log.d(TAG, <span class="hljs-string">&quot;Video: format:&quot;</span> + format);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 音频 MediaExtractor</span><br>    <span class="hljs-type">MediaExtractor</span> <span class="hljs-variable">audioExtractor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MediaExtractor</span>();<br>    audioExtractor.setDataSource(audioProviderPath);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">audioTrackIndex</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; audioExtractor.getTrackCount(); i++) &#123;<br>        <span class="hljs-type">MediaFormat</span> <span class="hljs-variable">format</span> <span class="hljs-operator">=</span> audioExtractor.getTrackFormat(i);<br>        <span class="hljs-keyword">if</span> (format.getString(MediaFormat.KEY_MIME).startsWith(<span class="hljs-string">&quot;audio/&quot;</span>)) &#123;<br>            audioExtractor.selectTrack(i);<br>            audioTrackIndex = mediaMuxer.addTrack(format);<br>            Log.d(TAG, <span class="hljs-string">&quot;Audio: format:&quot;</span> + format);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    mediaMuxer.start(); <span class="hljs-comment">// 添加完所有轨道后start</span><br><br>    <span class="hljs-type">long</span> <span class="hljs-variable">videoEndPreTimeUs</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 封装视频track</span><br>    <span class="hljs-keyword">if</span> (-<span class="hljs-number">1</span> != videoTrackIndex) &#123;<br>        MediaCodec.<span class="hljs-type">BufferInfo</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MediaCodec</span>.BufferInfo();<br>        info.presentationTimeUs = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>);<br>        <span class="hljs-type">int</span> sampleSize;<br>        <span class="hljs-keyword">while</span> ((sampleSize = mVideoExtractor.readSampleData(buffer, <span class="hljs-number">0</span>)) &gt;= <span class="hljs-number">0</span>) &#123;<br>            info.offset = <span class="hljs-number">0</span>;<br>            info.size = sampleSize;<br>            info.flags = MediaCodec.BUFFER_FLAG_SYNC_FRAME;<br>            info.presentationTimeUs = mVideoExtractor.getSampleTime();<br>            videoEndPreTimeUs = info.presentationTimeUs;<br>            mediaMuxer.writeSampleData(videoTrackIndex, buffer, info);<br>            mVideoExtractor.advance();<br>        &#125;<br>    &#125;<br>    Log.d(TAG, <span class="hljs-string">&quot;视频 videoEndPreTimeUs &quot;</span> + videoEndPreTimeUs);<br><br>    <span class="hljs-comment">// 封装音频track</span><br>    <span class="hljs-keyword">if</span> (-<span class="hljs-number">1</span> != audioTrackIndex) &#123;<br>        MediaCodec.<span class="hljs-type">BufferInfo</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MediaCodec</span>.BufferInfo();<br>        info.presentationTimeUs = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>);<br>        <span class="hljs-type">int</span> sampleSize;<br>        <span class="hljs-keyword">while</span> ((sampleSize = audioExtractor.readSampleData(buffer, <span class="hljs-number">0</span>)) &gt;= <span class="hljs-number">0</span> &amp;&amp;<br>                audioExtractor.getSampleTime() &lt;= videoEndPreTimeUs) &#123;<br>            info.offset = <span class="hljs-number">0</span>;<br>            info.size = sampleSize;<br>            info.flags = MediaCodec.BUFFER_FLAG_SYNC_FRAME;<br>            info.presentationTimeUs = audioExtractor.getSampleTime();<br>            mediaMuxer.writeSampleData(audioTrackIndex, buffer, info);<br>            audioExtractor.advance();<br>        &#125;<br>    &#125;<br>    mVideoExtractor.release(); <span class="hljs-comment">// 释放MediaExtractor</span><br>    audioExtractor.release();<br>    mediaMuxer.stop();<br>    mediaMuxer.release();     <span class="hljs-comment">// 释放MediaMuxer</span><br>&#125;<br></code></pre></td></tr></table></figure></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Video: format:&#123;<span class="hljs-attribute">csd-1</span>=java.nio.ByteArrayBuffer[<span class="hljs-attribute">position</span>=0,limit=9,capacity=9], <span class="hljs-attribute">mime</span>=video/avc, <span class="hljs-attribute">frame-rate</span>=30, <span class="hljs-attribute">height</span>=1080, <span class="hljs-attribute">width</span>=1920, <span class="hljs-attribute">max-input-size</span>=1572864, <span class="hljs-attribute">isDMCMMExtractor</span>=1, <span class="hljs-attribute">durationUs</span>=12425577, <span class="hljs-attribute">csd-0</span>=java.nio.ByteArrayBuffer[<span class="hljs-attribute">position</span>=0,limit=20,capacity=20]&#125;<br>Audio: format:&#123;<span class="hljs-attribute">max-input-size</span>=5532, <span class="hljs-attribute">aac-profile</span>=2, <span class="hljs-attribute">mime</span>=audio/mp4a-latm, <span class="hljs-attribute">durationUs</span>=340101875, <span class="hljs-attribute">csd-0</span>=java.nio.ByteArrayBuffer[<span class="hljs-attribute">position</span>=0,limit=2,capacity=2], <span class="hljs-attribute">channel-count</span>=2, <span class="hljs-attribute">sample-rate</span>=44100&#125;<br></code></pre></td></tr></table></figure><h3 id="MP3转换为AAC"><a href="#MP3转换为AAC" class="headerlink" title="MP3转换为AAC"></a>MP3转换为AAC</h3><h4 id="使用-AndroidAudioConverter"><a href="#使用-AndroidAudioConverter" class="headerlink" title="使用 AndroidAudioConverter"></a>使用 AndroidAudioConverter</h4><p>AndroidAudioConverter - <a href="https://github.com/adrielcafe/AndroidAudioConverter">https://github.com/adrielcafe/AndroidAudioConverter</a></p><p>基于FFmpeg的第三方库。支持格式有AAC, MP3, M4A, WMA, WAV 和 FLAC</p><p>使用方法：</p><p><code>app/build.gradle</code><br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">repositories</span> &#123;<br>  maven &#123;<br>    url <span class="hljs-string">&quot;https://jitpack.io&quot;</span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">dependencies</span> &#123;<br>  <span class="hljs-keyword">compile</span> <span class="hljs-string">&#x27;com.github.adrielcafe:AndroidAudioConverter:0.0.8&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure></p><p>申请读写外部存储权限<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.READ_EXTERNAL_STORAGE&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><br>在<code>Application</code>类中加载库<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MuxerApp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Application</span> &#123;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate();<br>        AndroidAudioConverter.load(<span class="hljs-built_in">this</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ILoadCallback</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onSuccess</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-comment">// Great!</span><br>            &#125;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onFailure</span><span class="hljs-params">(Exception error)</span> &#123;<br>                <span class="hljs-comment">// FFmpeg is not supported by device</span><br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>使用转换功能<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">sourceMP3Path</span> <span class="hljs-operator">=</span> SOURCE_PATH + File.separator + <span class="hljs-string">&quot;music1.mp3&quot;</span>;<br>Log.d(TAG, <span class="hljs-string">&quot;转换开始 &quot;</span> + sourceMP3Path);<br><span class="hljs-type">File</span> <span class="hljs-variable">srcFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(sourceMP3Path);<br><span class="hljs-type">IConvertCallback</span> <span class="hljs-variable">callback</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IConvertCallback</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onSuccess</span><span class="hljs-params">(File convertedFile)</span> &#123;<br>        Log.d(TAG, <span class="hljs-string">&quot;onSuccess: &quot;</span> + convertedFile);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onFailure</span><span class="hljs-params">(Exception error)</span> &#123;<br>        Log.e(TAG, <span class="hljs-string">&quot;onFailure: &quot;</span>, error);<br>    &#125;<br>&#125;;<br>AndroidAudioConverter.with(getApplicationContext())<br>        <span class="hljs-comment">// Your current audio file</span><br>        .setFile(srcFile)<br><br>        <span class="hljs-comment">// Your desired audio format</span><br>        .setFormat(AudioFormat.AAC)<br><br>        <span class="hljs-comment">// An callback to know when conversion is finished</span><br>        .setCallback(callback)<br><br>        <span class="hljs-comment">// Start conversion</span><br>        .convert();<br></code></pre></td></tr></table></figure></p><p>在三星Note4上测试，转换13MB的MP3文件用了大约3分18秒。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://developer.android.com/reference/android/media/MediaExtractor.html">MediaExtractor - Android Developer</a></li><li><a href="https://developer.android.com/reference/android/media/MediaMuxer.html">MediaMuxer - Android Developer</a></li><li><a href="https://github.com/sannies/mp4parser">Java MP4 Parser</a></li></ul><p><a href="https://rustfisher.com/tags/Android-Media/">Android音视频相关文章</a><br><a href="https://rustfisher.com/2019/12/08/Android_tutorial_2020/Android-tutorial_2020_a_menu/">Android tutorial 2020</a></p>]]></content>
    
    
    <categories>
      
      <category>Android_note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android_Media</tag>
      
      <tag>Media</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android 模拟用户点击</title>
    <link href="/Android/adb_mock_touch_and_monkeyrunner/"/>
    <url>/Android/adb_mock_touch_and_monkeyrunner/</url>
    
    <content type="html"><![CDATA[<p>Android模拟用户点击。在自动化测试中可使用的工具。<br>可以利用adb命令，也可以使用Android SDK中的<code>monkeyrunner</code>工具。</p><ul><li>win7-64</li><li>gitbash</li></ul><h1 id="使用adb命令"><a href="#使用adb命令" class="headerlink" title="使用adb命令"></a>使用adb命令</h1><p>主要使用input命令<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vim">usage: <span class="hljs-built_in">input</span> ...<br><br>       <span class="hljs-built_in">input</span> text <span class="hljs-symbol">&lt;string&gt;</span><br>       <span class="hljs-built_in">input</span> keyevent &lt;key code <span class="hljs-keyword">number</span> <span class="hljs-built_in">or</span> name&gt;<br>       <span class="hljs-built_in">input</span> tap <span class="hljs-symbol">&lt;x&gt;</span> <span class="hljs-symbol">&lt;y&gt;</span><br>       <span class="hljs-built_in">input</span> swipe <span class="hljs-symbol">&lt;x1&gt;</span> <span class="hljs-symbol">&lt;y1&gt;</span> <span class="hljs-symbol">&lt;x2&gt;</span> <span class="hljs-symbol">&lt;y2&gt;</span><br></code></pre></td></tr></table></figure><br>keyevent指的是android对应的keycode，比如home键的keycode=3，back键的keycode=4</p><p>tap是touch屏幕的事件，只需给出x、y坐标即可</p><p>swipe模拟滑动的事件，给出起点和终点的坐标即可</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bat"># 模拟点击位置 (<span class="hljs-number">100</span>,<span class="hljs-number">100</span>)<br>adb shell input tap <span class="hljs-number">100</span> <span class="hljs-number">100</span><br><br># 模拟滑动 从(<span class="hljs-number">650</span>, <span class="hljs-number">250</span>)到(<span class="hljs-number">200</span>,<span class="hljs-number">300</span>)<br>adb shell input swipe <span class="hljs-number">650</span> <span class="hljs-number">250</span> <span class="hljs-number">200</span> <span class="hljs-number">300</span><br></code></pre></td></tr></table></figure><p>编写一个bat脚本，模拟用户滑动<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bat">@<span class="hljs-built_in">echo</span> off<br><span class="hljs-built_in">echo</span> --------- Mock <span class="hljs-built_in">start</span> ----------<br><br>:tag_start<br><span class="hljs-built_in">echo</span> running...<br>adb shell input swipe <span class="hljs-number">650</span> <span class="hljs-number">250</span> <span class="hljs-number">200</span> <span class="hljs-number">666</span><br>@<span class="hljs-built_in">ping</span> <span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span> -n <span class="hljs-number">8</span> &gt;<span class="hljs-built_in">nul</span><br><span class="hljs-keyword">goto</span> tag_start<br><br><span class="hljs-built_in">echo</span> --------- Mock finish ---------<br><span class="hljs-built_in">pause</span><br></code></pre></td></tr></table></figure></p><p>死循环发送滑动命令，延时语句<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bat">@<span class="hljs-built_in">ping</span> <span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span> -n <span class="hljs-number">8</span> &gt;<span class="hljs-built_in">nul</span><br></code></pre></td></tr></table></figure></p><h1 id="monkeyrunner"><a href="#monkeyrunner" class="headerlink" title="monkeyrunner"></a>monkeyrunner</h1><p>环境配置，配置好Java与Android SDK的环境变量。手机连接到电脑。<br>系统变量中加入<code>ANDROID_SWT</code>，此例中路径为<code>G:\SDK\tools\lib\x86_64</code></p><p>修改后的脚本<code>rustmonkeyrunner.bat</code>，Windows环境下需要在gitbash或CMD里运行</p><p>来自<a href="https://stackoverflow.com/questions/44666939/unable-to-access-jarfile-framework-monkeyrunner-25-3-2-jar">unable-to-access-jarfile-framework-monkeyrunner-25-3-2-jar</a><br><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs bat">@<span class="hljs-built_in">echo</span> off<br><span class="hljs-comment">rem Copyright (C) 2010 The Android Open Source Project</span><br><span class="hljs-comment">rem</span><br><span class="hljs-comment">rem Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="hljs-comment">rem you may not use this file except in compliance with the License.</span><br><span class="hljs-comment">rem You may obtain a copy of the License at</span><br><span class="hljs-comment">rem</span><br><span class="hljs-comment">rem      http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="hljs-comment">rem</span><br><span class="hljs-comment">rem Unless required by applicable law or agreed to in writing, software</span><br><span class="hljs-comment">rem distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="hljs-comment">rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="hljs-comment">rem See the License for the specific language governing permissions and</span><br><span class="hljs-comment">rem limitations under the License.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">rem don&#x27;t modify the caller&#x27;s environment</span><br><span class="hljs-built_in">setlocal</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">rem Set up prog to be the path of this script, including following symlinks,</span><br><span class="hljs-comment">rem and set up progdir to be the fully-qualified pathname of its directory.</span><br><span class="hljs-built_in">set</span> prog=%~f0<br><span class="hljs-comment"></span><br><span class="hljs-comment">rem Change current directory and drive to where the script is, to avoid</span><br><span class="hljs-comment">rem issues with directories containing whitespaces.</span><br><span class="hljs-built_in">cd</span> /d %~dp0<br><span class="hljs-comment"></span><br><span class="hljs-comment">rem Check we have a valid Java.exe in the path.</span><br><span class="hljs-built_in">set</span> java_exe=<br><span class="hljs-keyword">call</span> ..\lib\find_java.bat<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">defined</span> java_exe <span class="hljs-keyword">goto</span> :EOF<br><span class="hljs-keyword">for</span> /f <span class="hljs-variable">%%a</span> <span class="hljs-keyword">in</span> (&quot;<span class="hljs-variable">%APP_HOME%</span>\lib\monkeyrunner-<span class="hljs-number">25</span>.<span class="hljs-number">3</span>.<span class="hljs-number">2</span>.jar&quot;) <span class="hljs-keyword">do</span> <span class="hljs-built_in">set</span> jarfile=<span class="hljs-variable">%%~</span>nxa<br><span class="hljs-built_in">set</span> frameworkdir=.<br><span class="hljs-built_in">set</span> libdir=<br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">exist</span> <span class="hljs-variable">%frameworkdir%</span>\<span class="hljs-variable">%jarfile%</span> <span class="hljs-keyword">goto</span> JarFileOk<br>    <span class="hljs-built_in">set</span> frameworkdir=..\lib<br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">exist</span> <span class="hljs-variable">%frameworkdir%</span>\<span class="hljs-variable">%jarfile%</span> <span class="hljs-keyword">goto</span> JarFileOk<br>    <span class="hljs-built_in">set</span> frameworkdir=..\framework<br><br>:JarFileOk<br><br><span class="hljs-built_in">set</span> jarpath=<span class="hljs-variable">%frameworkdir%</span>\<span class="hljs-variable">%jarfile%</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">defined</span> ANDROID_SWT <span class="hljs-keyword">goto</span> QueryArch<br>    <span class="hljs-built_in">set</span> swt_path=<span class="hljs-variable">%ANDROID_SWT%</span><br>    <span class="hljs-keyword">goto</span> SwtDone<br><br>:QueryArch<br><br>    <span class="hljs-keyword">for</span> /f &quot;delims=&quot; <span class="hljs-variable">%%a</span> <span class="hljs-keyword">in</span> (&#x27;<span class="hljs-variable">%frameworkdir%</span>\..\bin\archquery&#x27;) <span class="hljs-keyword">do</span> <span class="hljs-built_in">set</span> swt_path=<span class="hljs-variable">%frameworkdir%</span>\<span class="hljs-variable">%%a</span><br><br>:SwtDone<br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">exist</span> &quot;<span class="hljs-variable">%swt_path%</span>&quot; <span class="hljs-keyword">goto</span> SetPath<br>    <span class="hljs-built_in">echo</span> SWT folder &#x27;<span class="hljs-variable">%swt_path%</span>&#x27; does <span class="hljs-keyword">not</span> <span class="hljs-keyword">exist</span>.<br>    <span class="hljs-built_in">echo</span> Please <span class="hljs-built_in">set</span> ANDROID_SWT to point to the folder containing swt.jar <span class="hljs-keyword">for</span> your platform.<br>    <span class="hljs-keyword">exit</span> /B<br><br>:SetPath<br><br><span class="hljs-keyword">call</span> &quot;<span class="hljs-variable">%java_exe%</span>&quot; -Xmx512m &quot;-Djava.ext.dirs=<span class="hljs-variable">%frameworkdir%</span>;<span class="hljs-variable">%swt_path%</span>&quot; -Dcom.android.monkeyrunner.bindir=..\..\platform-tools -jar <span class="hljs-variable">%jarpath%</span> %*<br></code></pre></td></tr></table></figure></p><p>运行脚本<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">Administrator@rust-PC ~<br>$ <span class="hljs-regexp">/cygdrive/g</span><span class="hljs-regexp">/SDK/</span>tools<span class="hljs-regexp">/bin/</span>rustmonkeyrunner.bat<br>Jython <span class="hljs-number">2.5</span>.<span class="hljs-number">3</span> (<span class="hljs-number">2.5</span>:c56500f08d34+, Aug <span class="hljs-number">13</span> <span class="hljs-number">2012</span>, <span class="hljs-number">14</span>:<span class="hljs-number">54</span>:<span class="hljs-number">35</span>)<br>[Java HotSpot(TM) <span class="hljs-number">64</span>-Bit Server VM (Oracle Corporation)] on java1.<span class="hljs-number">8.0</span>_77<br></code></pre></td></tr></table></figure></p><p>首次运行时import模块迟迟没有反应<br><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">from</span> com.android.monkeyrunner <span class="hljs-keyword">import</span> MonkeyRunner, MonkeyDevice, MonkeyImage</span><br></code></pre></td></tr></table></figure></p><p>尝试运行脚本<code>an_test2.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;importing module...&quot;</span>)<br><span class="hljs-keyword">from</span> com.android.monkeyrunner <span class="hljs-keyword">import</span> MonkeyRunner, MonkeyDevice, MonkeyImage<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;waiting for connection...&quot;</span>)<br>device = MonkeyRunner.waitForConnection()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;device found!&quot;</span>)<br><br>s_wid = <span class="hljs-built_in">int</span>(device.getProperty(<span class="hljs-string">&quot;display.width&quot;</span>))     <span class="hljs-comment"># 获取屏幕宽度像素</span><br>s_height = <span class="hljs-built_in">int</span>(device.getProperty(<span class="hljs-string">&quot;display.height&quot;</span>)) <span class="hljs-comment"># 获取屏幕高度像素</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;build.version.sdk &quot;</span> + <span class="hljs-built_in">str</span>(device.getProperty(<span class="hljs-string">&quot;build.version.sdk&quot;</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;display.width     &quot;</span> + <span class="hljs-built_in">str</span>(s_wid))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;display.height    &quot;</span> + <span class="hljs-built_in">str</span>(s_height))<br><br>drag_point_left_x = <span class="hljs-number">20</span><br>drag_point_right_x = s_wid - <span class="hljs-number">20</span><br>drag_point_y = s_height / <span class="hljs-number">2</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;current loop is &quot;</span> + <span class="hljs-built_in">str</span>(i))<br>    device.drag((drag_point_right_x, drag_point_y), (drag_point_left_x, drag_point_y), <span class="hljs-number">1.0</span>, <span class="hljs-number">50</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;waiting...&quot;</span>)<br>    MonkeyRunner.sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;continue&quot;</span>)<br>    device.drag((drag_point_left_x, drag_point_y), (drag_point_right_x, drag_point_y), <span class="hljs-number">0.5</span>, <span class="hljs-number">3</span>)<br>    MonkeyRunner.sleep(<span class="hljs-number">3</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-------- finish --------&quot;</span>)<br></code></pre></td></tr></table></figure><p>命令行直接执行，可以看到执行结果和相应的报错信息<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs gams">C:\Users\Administrator&gt;G:\SDK\tools\bin\rustmonkeyrunner.bat H:\fisher_p\py_ws\an_test2.py<br><span class="hljs-function"><span class="hljs-title">importing</span></span> module...<br><span class="hljs-function"><span class="hljs-title">waiting</span></span> <span class="hljs-keyword">for</span> connection...<br>device found!<br>build.version.sdk <span class="hljs-number">23</span><br><span class="hljs-keyword">display</span>.width     <span class="hljs-number">1440</span><br><span class="hljs-keyword">display</span>.height    <span class="hljs-number">2560</span><br>current <span class="hljs-keyword">loop</span> is <span class="hljs-number">0</span><br><span class="hljs-function"><span class="hljs-title">waiting</span></span>...<br>continue<br>current <span class="hljs-keyword">loop</span> is <span class="hljs-number">1</span><br># .....<br>-------- finish --------<br></code></pre></td></tr></table></figure><br>测试中发现，脚本可以运行在系统app。若当前打开的是第三方app，会直接报错，获取不到相应信息</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://stackoverflow.com/questions/15935622/getproperty-getsystemproperty-in-monkeyrunner-return-none">monkeyrunner 获取系统信息</a></li><li><a href="https://developer.android.com/studio/test/monkeyrunner/MonkeyDevice.html">Android MonkeyDevice - Google</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Android_note</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Android MediaCodec 编解码</title>
    <link href="/Android/Android-MediaCodec_use_demo/"/>
    <url>/Android/Android-MediaCodec_use_demo/</url>
    
    <content type="html"><![CDATA[<h2 id="Android-MediaCodec-使用方式"><a href="#Android-MediaCodec-使用方式" class="headerlink" title="Android MediaCodec 使用方式"></a>Android MediaCodec 使用方式</h2><p>使用MediaCodec进行编解码。输入H.264格式的数据，输出帧数据并发送给监听器。  </p><h4 id="H-264的配置"><a href="#H-264的配置" class="headerlink" title="H.264的配置"></a>H.264的配置</h4><p>创建并配置codec。配置codec时，若手动创建MediaFormat对象的话，一定要记得<strong>设置”csd-0”和”csd-1”这两个参数</strong>。<br>“csd-0”和”csd-1”这两个参数一定要和接收到的帧对应上。  </p><h4 id="输入数据"><a href="#输入数据" class="headerlink" title="输入数据"></a>输入数据</h4><p>给codec输入数据时，如果对输入数据进行排队，需要检查排队队列的情况。<br>例如一帧数据暂用1M内存，1秒30帧，排队队列有可能会暂用30M的内存。当内存暂用过高，我们需要采取一定的措施来减小内存占用。<br>codec硬解码时会受到手机硬件的影响。若手机性能不佳，编解码的速度有可能慢于原始数据输入。不得已的情况我们可以将排队中的旧数据抛弃，输入新数据。  </p><h4 id="解码器性能"><a href="#解码器性能" class="headerlink" title="解码器性能"></a>解码器性能</h4><p>对视频实时性要求高的场景，codec没有可用的输入缓冲区，<code>mCodec.dequeueInputBuffer</code>返回-1。<br>为了实时性，这里会强制释放掉输入输出缓冲区<code>mCodec.flush()</code>。  </p><h4 id="问题1-MediaCodec输入数据和输出数据数量之间有没有特定的关系"><a href="#问题1-MediaCodec输入数据和输出数据数量之间有没有特定的关系" class="headerlink" title="问题1 - MediaCodec输入数据和输出数据数量之间有没有特定的关系"></a>问题1 - MediaCodec输入数据和输出数据数量之间有没有特定的关系</h4><p>对于MediaCodec，输入数据和输出数据数量之间有没有特定的关系？假设输入10帧的数据，可以得到多少次输出？</p><p>实测发现，不能百分百保证输入输出次数是相等的。例如vivo x6 plus，输入30帧，能得到28帧结果。或者300次输入，得到298次输出。</p><h4 id="异常1-dequeueInputBuffer-0-一直返回-1"><a href="#异常1-dequeueInputBuffer-0-一直返回-1" class="headerlink" title="异常1 - dequeueInputBuffer(0)一直返回-1"></a>异常1 - dequeueInputBuffer(0)一直返回-1</h4><p>某些手机长时间编解码后，可能会出现尝试获取codec输入缓冲区时下标一直返回-1。<br>例如vivo x6 plus，运行约20分钟后，<code>mCodec.dequeueInputBuffer(0)</code>一直返回-1。</p><p>处理方法：如果一直返回-1，同步方式下尝试调用<code>codec.flush()</code>方法，异步方式下尝试<code>codec.flush()</code>后再调用<code>codec.start()</code>方法。</p><p>有一些手机解码速度太慢，有可能会经常返回-1。不要频繁调用<code>codec.flush()</code>，以免显示不正常。</p><h3 id="代码示例-同步方式进行编解码"><a href="#代码示例-同步方式进行编解码" class="headerlink" title="代码示例 - 同步方式进行编解码"></a>代码示例 - 同步方式进行编解码</h3><p>这一个例子使用同步方式进行编解码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 解码器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CodecDecoder</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;CodecDecoder&quot;</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">MIME_TYPE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;video/avc&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CSD0</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;csd-0&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CSD1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;csd-1&quot;</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TIME_INTERNAL</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DECODER_TIME_INTERNAL</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">private</span> MediaCodec mCodec;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> <span class="hljs-variable">mCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 媒体解码器MediaCodec用的</span><br><br>    <span class="hljs-comment">// 送入编解码器前的缓冲队列</span><br>    <span class="hljs-comment">// 需要实时监控这个队列所暂用的内存情况  在这里堵塞的话很容易引起OOM</span><br>    <span class="hljs-keyword">private</span> Queue&lt;<span class="hljs-type">byte</span>[]&gt; data = <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">private</span> DecoderThread decoderThread;<br>    <span class="hljs-keyword">private</span> CodecListener listener; <span class="hljs-comment">// 自定义的监听器  当解码得到帧数据时通过它发送出去</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CodecDecoder</span><span class="hljs-params">()</span> &#123;<br>        data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentLinkedQueue</span>&lt;&gt;();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isCodecCreated</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> mCodec!=<span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">createCodec</span><span class="hljs-params">(CodecListener listener, <span class="hljs-type">byte</span>[] spsBuffer, <span class="hljs-type">byte</span>[] ppsBuffer, <span class="hljs-type">int</span> width, <span class="hljs-type">int</span> height)</span> &#123;<br>        <span class="hljs-built_in">this</span>.listener = listener;<br>        <span class="hljs-keyword">try</span> &#123;<br>            mCodec = MediaCodec.createDecoderByType(Constants.MIME_TYPE);<br>            <span class="hljs-type">MediaFormat</span> <span class="hljs-variable">mediaFormat</span> <span class="hljs-operator">=</span> createVideoFormat(spsBuffer, ppsBuffer, width, height);<br>            mCodec.configure(mediaFormat, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">0</span>);<br>            mCodec.start();<br><br>            Log.d(TAG, <span class="hljs-string">&quot;decoderThread mediaFormat in:&quot;</span> + mediaFormat);<br><br>            decoderThread = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DecoderThread</span>();<br>            decoderThread.start();<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            Log.e(TAG, <span class="hljs-string">&quot;MediaCodec create error:&quot;</span> + e.getMessage());<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> MediaFormat <span class="hljs-title function_">createVideoFormat</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] spsBuffer, <span class="hljs-type">byte</span>[] ppsBuffer, <span class="hljs-type">int</span> width, <span class="hljs-type">int</span> height)</span> &#123;<br>        MediaFormat mediaFormat;<br>        mediaFormat = MediaFormat.createVideoFormat(MIME_TYPE, width, height);<br>        mediaFormat.setByteBuffer(CSD0, ByteBuffer.wrap(spsBuffer));<br>        mediaFormat.setByteBuffer(CSD1, ByteBuffer.wrap(ppsBuffer));<br>        mediaFormat.setInteger(MediaFormat.KEY_COLOR_FORMAT,<br>                MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420Flexible);<br><br>        <span class="hljs-keyword">return</span> mediaFormat;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> <span class="hljs-variable">lastInQueueTime</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 输入H.264帧数据  这里会监控排队情况</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addData</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] dataBuffer)</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">timeDiff</span> <span class="hljs-operator">=</span> System.currentTimeMillis() - lastInQueueTime;<br>        <span class="hljs-keyword">if</span> (timeDiff &gt; <span class="hljs-number">1</span>) &#123;<br>            lastInQueueTime = System.currentTimeMillis();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">queueSize</span> <span class="hljs-operator">=</span> data.size(); <span class="hljs-comment">// ConcurrentLinkedQueue查询长度时会遍历一次 在数据量巨大的情况下尽量少用这个方法</span><br>            <span class="hljs-keyword">if</span> (queueSize &gt; <span class="hljs-number">30</span>) &#123;<br>                data.clear();<br>                LogInFile.getLogger().e(<span class="hljs-string">&quot;frame queue 帧数据队列超出上限，自动清除数据 &quot;</span> + queueSize);<br>            &#125;<br>            data.add(dataBuffer.clone());<br>            Log.e(TAG, <span class="hljs-string">&quot;frame queue 添加一帧数据&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            LogInFile.getLogger().e(<span class="hljs-string">&quot;frame queue 添加速度太快,跳过此帧. timeDiff=&quot;</span> + timeDiff);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroyCodec</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (mCodec != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                mCount = <span class="hljs-number">0</span>;<br><br>                <span class="hljs-keyword">if</span>(data!=<span class="hljs-literal">null</span>) &#123;<br>                    data.clear();<br>                    data = <span class="hljs-literal">null</span>;<br>                &#125;<br><br>                <span class="hljs-keyword">if</span>(decoderThread!=<span class="hljs-literal">null</span>) &#123;<br>                    decoderThread.stopThread();<br>                    decoderThread = <span class="hljs-literal">null</span>;<br>                &#125;<br><br>                mCodec.release();<br>                mCodec = <span class="hljs-literal">null</span>;<br>            &#125;<br>            <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>                Log.d(TAG, <span class="hljs-string">&quot;destroyCodec exception:&quot;</span> + e.toString());<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DecoderThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">INPUT_BUFFER_FULL_COUNT_MAX</span> <span class="hljs-operator">=</span> <span class="hljs-number">50</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> isRunning;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">inputBufferFullCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 输入缓冲区满了多少次</span><br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stopThread</span><span class="hljs-params">()</span> &#123;<br>            isRunning = <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            setName(<span class="hljs-string">&quot;CodecDecoder_DecoderThread-&quot;</span> + getId());<br>            isRunning = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">while</span> (isRunning) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">if</span> (data != <span class="hljs-literal">null</span> &amp;&amp; !data.isEmpty()) &#123;<br>                        <span class="hljs-type">int</span> <span class="hljs-variable">inputBufferIndex</span> <span class="hljs-operator">=</span> mCodec.dequeueInputBuffer(<span class="hljs-number">0</span>);<br>                        <span class="hljs-keyword">if</span> (inputBufferIndex &gt;= <span class="hljs-number">0</span>) &#123;<br>                            <span class="hljs-type">byte</span>[] buf = data.poll();<br>                            <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">inputBuffer</span> <span class="hljs-operator">=</span> mCodec.getInputBuffer(inputBufferIndex);<br>                            <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != inputBuffer) &#123;<br>                                inputBuffer.clear();<br>                                inputBuffer.put(buf, <span class="hljs-number">0</span>, buf.length);<br>                                mCodec.queueInputBuffer(inputBufferIndex, <span class="hljs-number">0</span>,<br>                                        buf.length, mCount * TIME_INTERNAL, <span class="hljs-number">0</span>);<br>                                mCount++;<br>                            &#125;<br>                            inputBufferFullCount = <span class="hljs-number">0</span>; <span class="hljs-comment">// 还有缓冲区可以用的时候重置计数</span><br>                        &#125; <span class="hljs-keyword">else</span> &#123;<br>                            inputBufferFullCount++;<br>                            LogInFile.getLogger().e(TAG, <span class="hljs-string">&quot;decoderThread inputBuffer full.  inputBufferFullCount=&quot;</span> + inputBufferFullCount);<br>                            <span class="hljs-keyword">if</span> (inputBufferFullCount &gt; INPUT_BUFFER_FULL_COUNT_MAX) &#123;<br>                                mCount = <span class="hljs-number">0</span>;<br>                                mCodec.flush(); <span class="hljs-comment">// 在这里清除所有缓冲区</span><br>                                LogInFile.getLogger().e(TAG, <span class="hljs-string">&quot;mCodec.flush()...&quot;</span>);<br>                            &#125;<br>                        &#125;<br>                    &#125;<br><br>                    <span class="hljs-comment">// Get output buffer index</span><br>                    MediaCodec.<span class="hljs-type">BufferInfo</span> <span class="hljs-variable">bufferInfo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MediaCodec</span>.BufferInfo();<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">outputBufferIndex</span> <span class="hljs-operator">=</span> mCodec.dequeueOutputBuffer(bufferInfo, <span class="hljs-number">0</span>);<br>                    <span class="hljs-keyword">while</span> (outputBufferIndex &gt;= <span class="hljs-number">0</span>) &#123;<br>                        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> outputBufferIndex;<br>                        Log.d(TAG, <span class="hljs-string">&quot;releaseOutputBuffer &quot;</span> + Thread.currentThread().toString());<br>                        <span class="hljs-keyword">final</span> <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">outputBuffer</span> <span class="hljs-operator">=</span> byteBufferClone(mCodec.getOutputBuffer(index));<br>                        <span class="hljs-type">Image</span> <span class="hljs-variable">image</span> <span class="hljs-operator">=</span> mCodec.getOutputImage(index);<br>                        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != image) &#123;<br>                            <span class="hljs-comment">// 获取NV21格式的数据</span><br>                            <span class="hljs-keyword">final</span> <span class="hljs-type">byte</span>[] nv21 = ImageUtil.getDataFromImage(image, FaceDetectUtil.COLOR_FormatNV21);<br>                            <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">imageWid</span> <span class="hljs-operator">=</span> image.getWidth();<br>                            <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">imageHei</span> <span class="hljs-operator">=</span> image.getHeight();<br>                            <span class="hljs-comment">// 这里选择创建新的线程去发送数据 - 这是可优化的地方</span><br>                            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>                                <span class="hljs-meta">@Override</span><br>                                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                                    listener.onDataDecoded(outputBuffer,<br>                                            mCodec.getOutputFormat().getInteger(MediaFormat.KEY_COLOR_FORMAT),<br>                                            nv21, imageWid, imageHei);<br>                                &#125;<br>                            &#125;).start();<br>                        &#125; <span class="hljs-keyword">else</span> &#123;<br>                            listener.onDataDecoded(outputBuffer,<br>                                    mCodec.getOutputFormat().getInteger(MediaFormat.KEY_COLOR_FORMAT),<br>                                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">0</span>&#125;, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>                        &#125;<br><br>                        <span class="hljs-keyword">try</span> &#123;<br>                            mCodec.releaseOutputBuffer(index, <span class="hljs-literal">false</span>);<br>                        &#125; <span class="hljs-keyword">catch</span> (IllegalStateException ex) &#123;<br>                            android.util.Log.e(TAG, <span class="hljs-string">&quot;releaseOutputBuffer ERROR&quot;</span>, ex);<br>                        &#125;<br>                        outputBufferIndex = mCodec.dequeueOutputBuffer(bufferInfo, <span class="hljs-number">0</span>);<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    e.printStackTrace();<br>                    Log.e(TAG, <span class="hljs-string">&quot;decoderThread exception:&quot;</span> + e.getMessage());<br>                &#125;<br><br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(DECODER_TIME_INTERNAL);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// deep clone byteBuffer</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ByteBuffer <span class="hljs-title function_">byteBufferClone</span><span class="hljs-params">(ByteBuffer buffer)</span> &#123;<br>        <span class="hljs-keyword">if</span> (buffer.remaining() == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> ByteBuffer.wrap(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">0</span>&#125;);<br><br>        <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">clone</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(buffer.remaining());<br><br>        <span class="hljs-keyword">if</span> (buffer.hasArray()) &#123;<br>            System.arraycopy(buffer.array(), buffer.arrayOffset() + buffer.position(), clone.array(), <span class="hljs-number">0</span>, buffer.remaining());<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            clone.put(buffer.duplicate());<br>            clone.flip();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> clone;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></p><h3 id="代码示例-工具函数"><a href="#代码示例-工具函数" class="headerlink" title="代码示例 - 工具函数"></a>代码示例 - 工具函数</h3><p>一些工具函数。比如从image中取出NV21格式的数据。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">byte</span>[] getDataFromImage(Image image) &#123;<br>    <span class="hljs-keyword">return</span> getDataFromImage(image, COLOR_FormatNV21);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将Image根据colorFormat类型的byte数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">byte</span>[] getDataFromImage(Image image, <span class="hljs-type">int</span> colorFormat) &#123;<br>    <span class="hljs-keyword">if</span> (colorFormat != COLOR_FormatI420 &amp;&amp; colorFormat != COLOR_FormatNV21) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;only support COLOR_FormatI420 &quot;</span> + <span class="hljs-string">&quot;and COLOR_FormatNV21&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!isImageFormatSupported(image)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;can&#x27;t convert Image to byte array, format &quot;</span> + image.getFormat());<br>    &#125;<br>    <span class="hljs-type">Rect</span> <span class="hljs-variable">crop</span> <span class="hljs-operator">=</span> image.getCropRect();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">format</span> <span class="hljs-operator">=</span> image.getFormat();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">width</span> <span class="hljs-operator">=</span> crop.width();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">height</span> <span class="hljs-operator">=</span> crop.height();<br>    Image.Plane[] planes = image.getPlanes();<br>    <span class="hljs-type">byte</span>[] data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[width * height * ImageFormat.getBitsPerPixel(format) / <span class="hljs-number">8</span>];<br>    <span class="hljs-type">byte</span>[] rowData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[planes[<span class="hljs-number">0</span>].getRowStride()];<br>    <span class="hljs-type">int</span> <span class="hljs-variable">channelOffset</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">outputStride</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; planes.length; i++) &#123;<br>        <span class="hljs-keyword">switch</span> (i) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                channelOffset = <span class="hljs-number">0</span>;<br>                outputStride = <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">if</span> (colorFormat == COLOR_FormatI420) &#123;<br>                    channelOffset = width * height;<br>                    outputStride = <span class="hljs-number">1</span>;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (colorFormat == COLOR_FormatNV21) &#123;<br>                    channelOffset = width * height + <span class="hljs-number">1</span>;<br>                    outputStride = <span class="hljs-number">2</span>;<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                <span class="hljs-keyword">if</span> (colorFormat == COLOR_FormatI420) &#123;<br>                    channelOffset = (<span class="hljs-type">int</span>) (width * height * <span class="hljs-number">1.25</span>);<br>                    outputStride = <span class="hljs-number">1</span>;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (colorFormat == COLOR_FormatNV21) &#123;<br>                    channelOffset = width * height;<br>                    outputStride = <span class="hljs-number">2</span>;<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> planes[i].getBuffer();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rowStride</span> <span class="hljs-operator">=</span> planes[i].getRowStride();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">pixelStride</span> <span class="hljs-operator">=</span> planes[i].getPixelStride();<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">shift</span> <span class="hljs-operator">=</span> (i == <span class="hljs-number">0</span>) ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">w</span> <span class="hljs-operator">=</span> width &gt;&gt; shift;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> height &gt;&gt; shift;<br>        buffer.position(rowStride * (crop.top &gt;&gt; shift) + pixelStride * (crop.left &gt;&gt; shift));<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; row &lt; h; row++) &#123;<br>            <span class="hljs-type">int</span> length;<br>            <span class="hljs-keyword">if</span> (pixelStride == <span class="hljs-number">1</span> &amp;&amp; outputStride == <span class="hljs-number">1</span>) &#123;<br>                length = w;<br>                buffer.get(data, channelOffset, length);<br>                channelOffset += length;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                length = (w - <span class="hljs-number">1</span>) * pixelStride + <span class="hljs-number">1</span>;<br>                buffer.get(rowData, <span class="hljs-number">0</span>, length);<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">col</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; col &lt; w; col++) &#123;<br>                    data[channelOffset] = rowData[col * pixelStride];<br>                    channelOffset += outputStride;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (row &lt; h - <span class="hljs-number">1</span>) &#123;<br>                buffer.position(buffer.position() + rowStride - length);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> data;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 是否是支持的数据类型</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isImageFormatSupported</span><span class="hljs-params">(Image image)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">format</span> <span class="hljs-operator">=</span> image.getFormat();<br>    <span class="hljs-keyword">switch</span> (format) &#123;<br>        <span class="hljs-keyword">case</span> ImageFormat.YUV_420_888:<br>        <span class="hljs-keyword">case</span> ImageFormat.NV21:<br>        <span class="hljs-keyword">case</span> ImageFormat.YV12:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br>“csd-0”和”csd-1”是什么，对于H264视频的话，它对应的是sps和pps，对于AAC音频的话，对应的是ADTS，做音视频开发的人应该都知道，它一般存在于编码器生成的IDR帧之中。</p><p>得到的mediaFormat<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">mediaFormat <span class="hljs-keyword">in</span>:&#123;<span class="hljs-attribute">height</span>=720, <span class="hljs-attribute">width</span>=1280, <span class="hljs-attribute">csd-1</span>=java.nio.ByteArrayBuffer[<span class="hljs-attribute">position</span>=0,limit=7,capacity=7], <span class="hljs-attribute">mime</span>=video/avc, <span class="hljs-attribute">csd-0</span>=java.nio.ByteArrayBuffer[<span class="hljs-attribute">position</span>=0,limit=13,capacity=13], <span class="hljs-attribute">color-format</span>=2135033992&#125;<br></code></pre></td></tr></table></figure></p><h3 id="存储图片的方法"><a href="#存储图片的方法" class="headerlink" title="存储图片的方法"></a>存储图片的方法</h3><p>Image类在Android API21及以后功能十分强大。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dumpFile</span><span class="hljs-params">(String fileName, <span class="hljs-type">byte</span>[] data)</span> &#123;<br>    FileOutputStream outStream;<br>    <span class="hljs-keyword">try</span> &#123;<br>        outStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(fileName);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException ioe) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Unable to create output file &quot;</span> + fileName, ioe);<br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>        outStream.write(data);<br>        outStream.close();<br>    &#125; <span class="hljs-keyword">catch</span> (IOException ioe) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;failed writing data to file &quot;</span> + fileName, ioe);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">compressToJpeg</span><span class="hljs-params">(String fileName, Image image)</span> &#123;<br>    FileOutputStream outStream;<br>    <span class="hljs-keyword">try</span> &#123;<br>        outStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(fileName);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException ioe) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Unable to create output file &quot;</span> + fileName, ioe);<br>    &#125;<br>    <span class="hljs-type">Rect</span> <span class="hljs-variable">rect</span> <span class="hljs-operator">=</span> image.getCropRect();<br>    <span class="hljs-type">YuvImage</span> <span class="hljs-variable">yuvImage</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">YuvImage</span>(getDataFromImage(image, COLOR_FormatNV21), ImageFormat.NV21, rect.width(), rect.height(), <span class="hljs-literal">null</span>);<br>    yuvImage.compressToJpeg(rect, <span class="hljs-number">100</span>, outStream);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="NV21转bitmap的方法"><a href="#NV21转bitmap的方法" class="headerlink" title="NV21转bitmap的方法"></a>NV21转bitmap的方法</h3><p>直接存入文件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// in try catch</span><br><span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(Environment.getExternalStorageDirectory() + <span class="hljs-string">&quot;/imagename.jpg&quot;</span>);<br><span class="hljs-type">YuvImage</span> <span class="hljs-variable">yuvImage</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">YuvImage</span>(nv21bytearray, ImageFormat.NV21, width, height, <span class="hljs-literal">null</span>);<br>yuvImage.compressToJpeg(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Rect</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, width, height), <span class="hljs-number">100</span>, fos);<br>fos.close();<br></code></pre></td></tr></table></figure></p><p>获得Bitmap对象的方法，这个方法耗时耗内存<br>NV21 -&gt; yuvImage -&gt; jpeg -&gt; bitmap<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// in try catch</span><br><span class="hljs-type">YuvImage</span> <span class="hljs-variable">yuvImage</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">YuvImage</span>(nv21bytearray, ImageFormat.NV21, width, height, <span class="hljs-literal">null</span>);<br><span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>yuvImage.compressToJpeg(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Rect</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, width, height), <span class="hljs-number">100</span>, os);<br><span class="hljs-type">byte</span>[] jpegByteArray = os.toByteArray();<br><span class="hljs-type">Bitmap</span> <span class="hljs-variable">bitmap</span> <span class="hljs-operator">=</span> BitmapFactory.decodeByteArray(jpegByteArray, <span class="hljs-number">0</span>, jpegByteArray.length);<br>os.close();<br></code></pre></td></tr></table></figure></p><p>参考 <a href="https://stackoverflow.com/questions/32276522/convert-nv21-byte-array-into-bitmap-readable-format">https://stackoverflow.com/questions/32276522/convert-nv21-byte-array-into-bitmap-readable-format</a></p><h3 id="codec选择YUV420格式输出OutputBuffer的问题"><a href="#codec选择YUV420格式输出OutputBuffer的问题" class="headerlink" title="codec选择YUV420格式输出OutputBuffer的问题"></a>codec选择YUV420格式输出OutputBuffer的问题</h3><p>假设codec选择的格式是<code>COLOR_FormatYUV420Flexible</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">mediaFormat.setInteger(MediaFormat.KEY_COLOR_FORMAT, MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420Flexible);<br></code></pre></td></tr></table></figure><br>解码后，得到的格式是<code>COLOR_QCOM_FormatYUV420SemiPlanar32m // 0x7FA30C04</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">mCodec.getOutputFormat().getInteger(MediaFormat.KEY_COLOR_FORMAT)<br></code></pre></td></tr></table></figure><br>解码出来的<code>ByteBuffer oBuffer = mCodec.getOutputBuffer(index);</code>包含元素个数为1413120；记为<code>nv21Codec</code><br>而通过<code>mCodec.getOutputImage(index)</code>得到的image对象获取到的nv21数组元素个数为1382400；记为<code>nv21</code>，这些是我们想要的数据</p><p>对比这2个数组我们发现，前面的y部分是相同的。<code>nv21</code>前921600个元素是y数据，后460800个元素是uv数据。<br><code>nv21Codec</code>前921600个元素是y数据，之后的20480个字节都是0，再接下来的460800个元素是uv数据。最后的10240个字节是0</p><p><code>nv21</code>和<code>nv21Codec</code>的uv部分存储顺序是相反的。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.polarxiong.com/archives/Android-MediaCodec%E8%A7%86%E9%A2%91%E6%96%87%E4%BB%B6%E7%A1%AC%E4%BB%B6%E8%A7%A3%E7%A0%81-%E9%AB%98%E6%95%88%E7%8E%87%E5%BE%97%E5%88%B0YUV%E6%A0%BC%E5%BC%8F%E5%B8%A7-%E5%BF%AB%E9%80%9F%E4%BF%9D%E5%AD%98JPEG%E5%9B%BE%E7%89%87-%E4%B8%8D%E4%BD%BF%E7%94%A8OpenGL.html">Android: MediaCodec视频文件硬件解码,高效率得到YUV格式帧,快速保存JPEG图片(不使用OpenGL)(附Demo)</a></li><li><a href="https://www.polarxiong.com/archives/Android-Image%E7%B1%BB%E6%B5%85%E6%9E%90-%E7%BB%93%E5%90%88YUV_420_888.html">Android: Image类浅析(结合YUV_420_888)</a></li><li><a href="http://bigflake.com/mediacodec/">Android MediaCodec stuff</a></li><li><a href="http://blog.csdn.net/leixiaohua1020/">雷霄骅(leixiaohua1020)的专栏</a></li><li><a href="http://blog.csdn.net/leixiaohua1020/article/details/15811977">[总结]FFMPEG视音频编解码零基础学习方法 - 雷霄骅</a></li><li><a href="https://github.com/Bilibili/ijkplayer">Bilibili/ijkplayer - Github</a></li></ul><p>Android音视频相关文章请参考 <a href="https://rustfisher.com/tags/Android-Media/">https://rustfisher.com/tags/Android-Media/</a></p>]]></content>
    
    
    <categories>
      
      <category>Android_note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android_Media</tag>
      
      <tag>Media</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PyQt QFileDialog 文件选择弹窗</title>
    <link href="/PyQt_note/PyQt-QFileDialog_use/"/>
    <url>/PyQt_note/PyQt-QFileDialog_use/</url>
    
    <content type="html"><![CDATA[<p>弹出文件选择框。可以自定义选择框的标题，默认位置，目标文件后缀</p><p>选择框弹出后，会阻塞UI线程。</p><h2 id="PyQt5文件选择框的例子"><a href="#PyQt5文件选择框的例子" class="headerlink" title="PyQt5文件选择框的例子"></a>PyQt5文件选择框的例子</h2><p>这里只选择一个bat文件。如果默认目录不存在，则查找当前目录<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">_click_tu_choose_file_path_btn1</span>(<span class="hljs-params">self</span>):<br>    default_path = <span class="hljs-string">&#x27;C:\MY&#x27;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(default_path):<br>        default_path = os.getcwd()<br>    dlg = QFileDialog(<span class="hljs-literal">None</span>, <span class="hljs-string">&quot;choose_bat_file&quot;</span>, default_path, <span class="hljs-string">&#x27;All Files(*.bat)&#x27;</span>)<br>    dlg.setFileMode(QFileDialog.AnyFile)<br>    <span class="hljs-keyword">if</span> dlg.exec_():<br>        selected_name = dlg.selectedFiles()[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">if</span> selected_name:<br>            self.ma.tu_filePathTv1.setText(self.tr(selected_name))<br><br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>PyQt</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Python logging 基本用法</title>
    <link href="/Python/Python-logging-use/"/>
    <url>/Python/Python-logging-use/</url>
    
    <content type="html"><![CDATA[<p>本文记录<strong>logging</strong>模块的用法</p><p>创建文件<code>logger.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><br>LOG_FILE = <span class="hljs-string">&#x27;app_history.log&#x27;</span><br><br>logging.basicConfig(level=logging.INFO,<br>                    <span class="hljs-built_in">format</span>=<span class="hljs-string">&#x27;%(asctime)s - %(filename)s[line:%(lineno)d] %(levelname)s %(message)s&#x27;</span>,<br>                    <span class="hljs-comment"># datefmt=&#x27;%Y_%m_%d_%H:%M:%S&#x27;,</span><br>                    filename=LOG_FILE,<br>                    filemode=<span class="hljs-string">&#x27;a&#x27;</span>)<br><br>console = logging.StreamHandler()<br>console.setLevel(logging.INFO)<br>formatter = logging.Formatter(<span class="hljs-string">&#x27;%(name)-12s: %(levelname)-8s %(message)s&#x27;</span>)<br>console.setFormatter(formatter)<br>logging.getLogger(LOG_FILE).addHandler(console)<br></code></pre></td></tr></table></figure><p>调用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">logger.logging.info(<span class="hljs-string">&quot;%-13s connected: %r&quot;</span> % (ip_address, connected))<br></code></pre></td></tr></table></figure></p><p><code>%(asctime)s</code> 表示这个位置上是字符串形式的当前时间<br><code>datefmt=&#39;%Y_%m_%d_%H:%M:%S&#39;</code> 指定了时间格式；我们也可以不指定时间格式</p><p>查看写出的log文件<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2017</span>-<span class="hljs-number">11</span>-<span class="hljs-number">23</span> <span class="hljs-number">13</span>:<span class="hljs-number">39</span>:<span class="hljs-number">35</span>,<span class="hljs-number">295</span> - xxx.py[line:<span class="hljs-number">122</span>] INFO<span class="hljs-meta"> [MainWindow] --------- App Starts ---------</span><br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>PyQt5 安装商业版</title>
    <link href="/PyQt_note/PyQt-Install_licensed_PyQt/"/>
    <url>/PyQt_note/PyQt-Install_licensed_PyQt/</url>
    
    <content type="html"><![CDATA[<p>对于Windows7上的Python2，需要如下工具：</p><ul><li>visual studio</li><li>sip</li><li>Qt(SDK)</li></ul><p>如果电脑上已经装有了PyQt4，建议再装一份Python。与原来的分开。</p><h2 id="win7安装社区版Visual-Studio"><a href="#win7安装社区版Visual-Studio" class="headerlink" title="win7安装社区版Visual Studio"></a>win7安装社区版Visual Studio</h2><p>使用Visual Studio是为了它的编译工具和相关库。安装时选上Windows SDK。</p><p>对于VS2017来说，使用的是这个工具 “D:\Microsoft Visual Studio\2017\Community\Common7\Tools\VsDevCmd.bat”<br>开始-所有程序-Visual Studio 2017-Visual Studio Tools</p><p>vs安装路径 <code>D:\Microsoft Visual Studio</code><br>环境变量<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">D</span>:\Microsoft Visual Studio\<span class="hljs-number">2017</span>\Community\VC\Tools\MSVC\<span class="hljs-number">14</span>.<span class="hljs-number">11</span>.<span class="hljs-number">25503</span>\bin\Hostx64\x64;<br><span class="hljs-attribute">D</span>:\Microsoft Visual Studio\<span class="hljs-number">2017</span>\Community\VC\Tools\MSVC\<span class="hljs-number">14</span>.<span class="hljs-number">11</span>.<span class="hljs-number">25503</span>\lib;<br></code></pre></td></tr></table></figure></p><h2 id="Python2-7安装sip"><a href="#Python2-7安装sip" class="headerlink" title="Python2.7安装sip"></a>Python2.7安装sip</h2><p>win7 64位系统，但Python2.7是32位</p><p>下载sip源码包（例如sip-4.19.3），解压到任意位置。进入sip源码包，执行<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> configure.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure><br>这里Python2.7安装在<code>D:\python27</code>；于是sip位置在<code>D:\python27\Lib\site-packages\sip-4.19.3</code><br>打开vs的命令行，进入sip在Python中的目录，执行<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">nmake<br>nmake <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure></p><h2 id="win7安装Qt5"><a href="#win7安装Qt5" class="headerlink" title="win7安装Qt5"></a>win7安装Qt5</h2><p>到Qt官网下载安装包。为了照顾32位的Python2.7，这里选择Qt 5.6.3 for Windows 32-bit (VS 2015, 869 MB)</p><p>添加到环境变量中<br><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-name">D</span>:\Qt\Qt5\<span class="hljs-number">5.6</span><span class="hljs-number">.3</span>\msvc2015\bin;<span class="hljs-name">D</span>:\Qt\Qt5\Tools\QtCreator\bin<br></code></pre></td></tr></table></figure></p><h2 id="win7编译安装商业版PyQt5"><a href="#win7编译安装商业版PyQt5" class="headerlink" title="win7编译安装商业版PyQt5"></a>win7编译安装商业版PyQt5</h2><p>Python2.7</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-keyword">python</span> configure.py --<span class="hljs-keyword">disable</span> QtNfc<br>nmake<br>nmake install<br></code></pre></td></tr></table></figure><p>参考PyQt5的README<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">COMMERCIAL VERSION<br><br>If you have <span class="hljs-keyword">the</span> Commercial <span class="hljs-built_in">version</span> <span class="hljs-keyword">of</span> PyQt5 <span class="hljs-keyword">then</span> you should also have <span class="hljs-keyword">a</span><br>license <span class="hljs-built_in">file</span> that you downloaded separately.  The license <span class="hljs-built_in">file</span> must be copied<br><span class="hljs-built_in">to</span> <span class="hljs-keyword">the</span> <span class="hljs-string">&quot;sip&quot;</span> <span class="hljs-built_in">directory</span> <span class="hljs-keyword">before</span> starting <span class="hljs-built_in">to</span> build PyQt5.<br></code></pre></td></tr></table></figure><br>我们把买来的license文件复制到sip目录下。</p><p>在<code>E:\ws\doc\PyQtCommercial\PyQt5_commercial-5.9</code>中，把付费后得到的<code>pyqt-commercial.sip</code>复制到sip目录下</p><p>使用vs2017的命令行工具！</p><p><code>python configure.py</code>出现错误<br><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">Error: </span>Use the --qmake argument to explicitly specify a working Qt qmake.<br></code></pre></td></tr></table></figure><br>网上说是因为没有配置好Qt SDK的原因<br>可参考 <a href="https://stackoverflow.com/questions/7854599/pyqt-setup-for-qt-4-7-4">PyQt setup for Qt 4.7.4</a><br>解决错误后，会提示是否接受license。根据提示输入yes。</p><p>执行<code>python configure.py --disable QtNfc</code><br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Querying</span> qmake about your Qt installation...<br><span class="hljs-attribute">Determining</span> the details of your Qt installation...<br><span class="hljs-attribute">This</span> is the commercial version of PyQt <span class="hljs-number">5</span>.<span class="hljs-number">9</span> (licensed under the PyQt Commercial<br><span class="hljs-attribute">License</span>) for Python <span class="hljs-number">2</span>.<span class="hljs-number">7</span>.<span class="hljs-number">13</span> <span class="hljs-literal">on</span> win32.<br></code></pre></td></tr></table></figure></p><h3 id="nmake报错-cannot-open-file-“msvcprt-lib”"><a href="#nmake报错-cannot-open-file-“msvcprt-lib”" class="headerlink" title="nmake报错 cannot open file “msvcprt.lib”"></a>nmake报错 cannot open file “msvcprt.lib”</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">fatal <span class="hljs-keyword">error</span> LNK1104: cannot <span class="hljs-keyword">open</span> <span class="hljs-keyword">file</span> “msvcprt.lib”<br></code></pre></td></tr></table></figure><p>把lib路径添加到环境变量 <code>D:\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\lib;</code></p><h3 id="nmake报错-QtNfc-dll-fatal-error-LNK1169-one-or-more-multiply-defined-symbols-found"><a href="#nmake报错-QtNfc-dll-fatal-error-LNK1169-one-or-more-multiply-defined-symbols-found" class="headerlink" title="nmake报错 QtNfc.dll : fatal error LNK1169: one or more multiply defined symbols found"></a>nmake报错 QtNfc.dll : fatal error LNK1169: one or more multiply defined symbols found</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros">release\QtNfc.dll : fatal <span class="hljs-built_in">error</span> LNK1169: 找到一个或多个多重定义的符号<br>NMAKE : fatal <span class="hljs-built_in">error</span> U1077: “<span class="hljs-string">&quot;D:\Microsoft Visual Studio\2017\Community\VC\Tools</span><br><span class="hljs-string">\MSVC\14.11.25503\bin\HostX86\x86\link.EXE&quot;</span>”: 返回代码“0x491”<br>Stop.<br>NMAKE : fatal <span class="hljs-built_in">error</span> U1077: “<span class="hljs-string">&quot;D:\Microsoft Visual Studio\2017\Community\VC\Tools</span><br><span class="hljs-string">\MSVC\14.11.25503\bin\HostX86\x86\nmake.exe&quot;</span>”: 返回代码“0x2”<br>Stop.<br>NMAKE : fatal <span class="hljs-built_in">error</span> U1077: “cd”: 返回代码“0x2”<br>Stop.<br></code></pre></td></tr></table></figure><p>网上有相关的建议，把QtNfc“取消”掉，其实就是不编译QtNfc。</p><p><code>E:\ws\doc\PyQtCommercial\PyQt5_commercial-5.9&gt;python configure.py --disable QtNfc</code></p><blockquote><p><a href="http://python.6.x6.nabble.com/error-building-QtNfc-td5185657.html">http://python.6.x6.nabble.com/error-building-QtNfc-td5185657.html</a></p></blockquote><p><code>nmake</code> 需要一段时间。电脑比较差的话，大概要1个小时。<br><code>nmake install</code> 耗时约5分钟</p><h3 id="试运行PyQt5"><a href="#试运行PyQt5" class="headerlink" title="试运行PyQt5"></a>试运行PyQt5</h3><p>导入PyQt5模块试一试<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PyQt5.QtCore <span class="hljs-keyword">import</span> QTranslator<br><span class="hljs-keyword">from</span> PyQt5.QtGui <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> PyQt5.QtWidgets <span class="hljs-keyword">import</span> *<br></code></pre></td></tr></table></figure></p><p>对于Python2.7 PyQt5，使用pyinstaller来打包成exe文件<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">pyinstaller</span> ui_main.py<br></code></pre></td></tr></table></figure><br>得到相应的文件目录</p><h4 id="运行exe弹窗报错Qt-platform-plugin"><a href="#运行exe弹窗报错Qt-platform-plugin" class="headerlink" title="运行exe弹窗报错Qt platform plugin"></a>运行exe弹窗报错<code>Qt platform plugin</code></h4><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">this application failed <span class="hljs-built_in">to</span> <span class="hljs-built_in">start</span> because <span class="hljs-keyword">it</span> could <span class="hljs-keyword">not</span> find <span class="hljs-keyword">or</span> <span class="hljs-built_in">load</span> <span class="hljs-keyword">the</span> Qt <span class="hljs-built_in">platform</span> plugin <span class="hljs-string">&quot;windows&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;&quot;</span><br>Reinstalling <span class="hljs-keyword">the</span> application may fix this problem.<br></code></pre></td></tr></table></figure><p>报错原因是找不到 <code>Qt platform plugin</code><br>在Qt5，在安装目录下可找到 <code>D:\Qt\Qt5\Tools\QtCreator\bin\plugins\platforms</code><br>对于Python3，安装了GPL的PyQt5，可以找到 <code>D:\python35\Lib\site-packages\PyQt5\Qt\plugins\platforms</code></p><p>处理方法：<br>不打包成一个单一的exe文件，使用<code>pyinstaller ui_main.py</code>生成文件目录<br>在dist中，与exe文件同级的目录<code>PyQt5/qt/plugins</code>中，有platforms目录<br>把platforms文件夹复制到与exe文件同级的位置即可  </p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://stackoverflow.com/questions/25589103/how-to-install-pyqt5-on-windows-for-python-2">How to install PyQt5 on Windows for Python 2?</a></p><p><a href="http://python.6.x6.nabble.com/PyQT-Sip-installation-td1923578.html">编译安装PyQt5的过程</a></p><p><a href="https://riverbankcomputing.com/pipermail/pyqt/2012-July/031691.html">安装sip的建议</a></p>]]></content>
    
    
    <categories>
      
      <category>PyQt</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>find的使用</title>
    <link href="/Linux/find-use/"/>
    <url>/Linux/find-use/</url>
    
    <content type="html"><![CDATA[<p>比如删除～结尾的文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find . -name <span class="hljs-string">&quot;*~&quot;</span> -<span class="hljs-built_in">type</span> f -<span class="hljs-built_in">print</span> -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">rm</span> -rf &#123;&#125; \;<br></code></pre></td></tr></table></figure></p><p>删除文件名有特定字符的文件<br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-built_in">find</span> . -<span class="hljs-built_in">name</span> <span class="hljs-string">&quot;*abcd*&quot;</span> -<span class="hljs-built_in">exec</span> rm -f &#123;&#125; \;<br></code></pre></td></tr></table></figure></p><p>修改执行命令和文件类型，安装目录下所有apk文件<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> . -name <span class="hljs-string">&quot;*.apk&quot;</span> -type f -<span class="hljs-built_in">print</span> -exec adb install &#123;&#125; \;<br></code></pre></td></tr></table></figure></p><p>找到所有的json文件并且删除<br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-built_in">find</span> . -<span class="hljs-built_in">name</span> <span class="hljs-string">&quot;*.json&quot;</span> -<span class="hljs-built_in">exec</span> rm &#123;&#125; \;<br></code></pre></td></tr></table></figure></p><p>删除指定目录，比如删除所有的git目录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find . -<span class="hljs-built_in">type</span> d -iname <span class="hljs-string">&quot;.git&quot;</span> -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">rm</span> -rf &#123;&#125; \;<br></code></pre></td></tr></table></figure></p><p>找到当前目录下所有的apk并安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find . -name <span class="hljs-string">&quot;*.apk&quot;</span> -<span class="hljs-built_in">exec</span> adb install &#123;&#125; \;<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>Linux_note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PyQt 适配不同屏幕分辨率</title>
    <link href="/PyQt_note/PyQt-Adjust_screen_resolution/"/>
    <url>/PyQt_note/PyQt-Adjust_screen_resolution/</url>
    
    <content type="html"><![CDATA[<p>在宽高为<code>1366*768</code>下设计开发的界面，到了<code>2860*1620</code>屏幕下会显示不正常。<br>因为像素密度不同，<code>2860*1620</code>屏幕显示出来的控件很小。</p><h2 id="适配方法-根据当前屏幕调整控件大小和位置"><a href="#适配方法-根据当前屏幕调整控件大小和位置" class="headerlink" title="适配方法 - 根据当前屏幕调整控件大小和位置"></a>适配方法 - 根据当前屏幕调整控件大小和位置</h2><p>初始化时获取到当前屏幕的宽高像素值。<br>与原像素值相比求出比例<code>self.ratio_wid</code>，<code>self.ratio_height</code>。</p><p>找出所有的QWidget <code>self.findChildren(QWidget)</code>，遍历来改变大小和位置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PyQt4.QtGui <span class="hljs-keyword">import</span> QMainWindow, QApplication, QWidget<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ReMainWindow</span>(<span class="hljs-title class_ inherited__">QMainWindow</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, parent=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-comment"># ...........</span><br>        self.app = QApplication.instance()  <span class="hljs-comment"># Calculate the ratio. Design screen is [1366, 768]</span><br>        screen_resolution = self.app.desktop().screenGeometry()<br>        self.hw_ratio = <span class="hljs-number">768</span> / <span class="hljs-number">1366</span>  <span class="hljs-comment"># height / width</span><br>        self.ratio_wid = screen_resolution.width() / <span class="hljs-number">1366</span><br>        <span class="hljs-keyword">if</span> self.ratio_wid &lt; <span class="hljs-number">1</span>:<br>            self.ratio_wid = <span class="hljs-number">1</span><br>        self.ratio_height = screen_resolution.height() / <span class="hljs-number">768</span><br>        <span class="hljs-keyword">if</span> self.ratio_height &lt; <span class="hljs-number">1</span>:<br>            self.ratio_height = <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_init_ui_size</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot; Travel all the widgets and resize according to the ratio &quot;&quot;&quot;</span><br>        self._resize_with_ratio(self)<br>        <span class="hljs-keyword">for</span> q_widget <span class="hljs-keyword">in</span> self.findChildren(QWidget):<br>            <span class="hljs-comment"># print q_widget.objectName()</span><br>            self._resize_with_ratio(q_widget)<br>            self._move_with_ratio(q_widget)<br><br>            <span class="hljs-comment"># Don&#x27;t deal with the text browser</span><br>            <span class="hljs-comment"># for q_widget in self.findChildren(QAbstractScrollArea):</span><br>            <span class="hljs-comment">#     print q_widget.objectName()</span><br>            <span class="hljs-comment">#     self._resize_with_ratio(q_widget)</span><br>            <span class="hljs-comment">#     self._move_with_ratio(q_widget)</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_resize_with_ratio</span>(<span class="hljs-params">self, input_ui</span>):<br>        input_ui.resize(input_ui.width() * self.ratio_wid, input_ui.height() * self.ratio_height)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_move_with_ratio</span>(<span class="hljs-params">self, input_ui</span>):<br>        input_ui.move(input_ui.x() * self.ratio_wid, input_ui.y() * self.ratio_height)<br><br></code></pre></td></tr></table></figure><p>实践发现，不需要对QTextBrowser所属的<code>QAbstractScrollArea</code>处理。</p>]]></content>
    
    
    <categories>
      
      <category>PyQt</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>PyQt 语言国际化</title>
    <link href="/PyQt_note/PyQt-Locale/"/>
    <url>/PyQt_note/PyQt-Locale/</url>
    
    <content type="html"><![CDATA[<h2 id="PyQt4-语言国际化"><a href="#PyQt4-语言国际化" class="headerlink" title="PyQt4 语言国际化"></a>PyQt4 语言国际化</h2><p>使用<code>pylupdate4</code>将界面的py文件转成ts文件。</p><p>进入py文件所在目录，执行转换命令。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">/d/python27/Lib/site-packages/PyQt4/pylupdate4 ui_main.py -ts zh_CN.ts<br></code></pre></td></tr></table></figure></p><p>得到<code>zh_CN.ts</code>文件。这个文件本质上是xml文件。<br>当界面的py文件修改时，运行<code>pylupdate4</code>生成ts不会破坏原ts的翻译。</p><p>用Qt语言家（Linguist）打开<code>zh_CN.ts</code>文件。可以对相应的字符串进行翻译。<br>点击“发布”可获得<code>zh_CN.qm</code>文件。这就是qt的语言资源文件，是一个二进制文件。</p><p>创建app时，先加载语言资源文件<code>zh_CN.qm</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    configs.init_configs()  <span class="hljs-comment"># 确定语言配置</span><br>    app = QApplication(sys.argv)<br>    trans = QTranslator()  <span class="hljs-comment"># Setup locale, we need .qm files</span><br>    <span class="hljs-keyword">if</span> configs.g_locale_type == configs.LOCALE_ZH_CH:<br>        trans.load(<span class="hljs-string">&quot;res/locale/zh_CN&quot;</span>)  <span class="hljs-comment"># No need suffix .qm</span><br>        app.installTranslator(trans)<br><br>    main_d = FAMainWindow()<br>    main_d.show()<br>    sys.exit(app.exec_())<br><br></code></pre></td></tr></table></figure></p><h2 id="App运行中切换语言"><a href="#App运行中切换语言" class="headerlink" title="App运行中切换语言"></a>App运行中切换语言</h2><p>在程序运行时，我们可以选择当前显示的语言。不需要重新启动程序即可完成切换。</p><h3 id="准备语言资源文件"><a href="#准备语言资源文件" class="headerlink" title="准备语言资源文件"></a>准备语言资源文件</h3><p>以英文和简体中文为例，想要切换语言，需要这2种语言包<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ <span class="hljs-regexp">/d/</span>python27<span class="hljs-regexp">/Lib/</span>site-packages<span class="hljs-regexp">/PyQt4/</span>pylupdate4 ui_main.py -ts zh_CN.ts<br>$ <span class="hljs-regexp">/d/</span>python27<span class="hljs-regexp">/Lib/</span>site-packages<span class="hljs-regexp">/PyQt4/</span>pylupdate4 ui_main.py -ts en.ts<br></code></pre></td></tr></table></figure><br>借助Qt语言家发布得到<code>en.qm</code>和<code>zh_CN.qm</code>这2个文件，放在<code>res/locale</code>目录里</p><h3 id="在UI上设置触发切换语言"><a href="#在UI上设置触发切换语言" class="headerlink" title="在UI上设置触发切换语言"></a>在UI上设置触发切换语言</h3><p>界面上需要按钮或菜单栏的action；需要持有<code>QTranslator</code>；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python">    self.trans = QTranslator()  <span class="hljs-comment"># 初始化时获取 QTranslator</span><br>    self._init_trans()<br>    <span class="hljs-comment"># 添加了action来触发切换动作</span><br>    self.connect(self.ma.actionEnglish, SIGNAL(<span class="hljs-string">&quot;triggered()&quot;</span>), self._trigger_english)<br>    self.ma.action_ZhCN.triggered.connect(self._trigger_zh_cn)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_init_trans</span>(<span class="hljs-params">self</span>):<br>    ctx.read_locale_config()  <span class="hljs-comment"># 自定义的方法，用来读取json文件中的配置</span><br>    <span class="hljs-keyword">if</span> ctx.g_locale_type == ctx.LOCALE_ZH_CH:<br>        self._trigger_zh_cn()<br>    <span class="hljs-keyword">elif</span> ctx.g_locale_type == ctx.LOCALE_EN:<br>        self._trigger_english()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_trigger_english</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;[MainWindow] Change to English&quot;</span><br>    self.trans.load(<span class="hljs-string">&quot;res/locale/en&quot;</span>)<br>    _app = QApplication.instance()  <span class="hljs-comment"># 获取app实例</span><br>    _app.installTranslator(self.trans)<br>    self.ma.retranslateUi(self)<br>    ctx.change_to_en()  <span class="hljs-comment"># 将新的配置更新入json文件中</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_trigger_zh_cn</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;[MainWindow] Change to zh_CN&quot;</span><br>    self.trans.load(<span class="hljs-string">&quot;res/locale/zh_CN&quot;</span>)<br>    _app = QApplication.instance()<br>    _app.installTranslator(self.trans)<br>    self.ma.retranslateUi(self)<br>    ctx.change_to_zh_cn()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PyQt</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>PyQt 拖入</title>
    <link href="/PyQt_note/PyQt-Drag_and_drop/"/>
    <url>/PyQt_note/PyQt-Drag_and_drop/</url>
    
    <content type="html"><![CDATA[<p>PyQt支持拖入功能。比如拖入文件或者一段文本。</p><h3 id="拖入文本"><a href="#拖入文本" class="headerlink" title="拖入文本"></a>拖入文本</h3><p>定义了一个label继承自<code>QLabel</code>，初始化时设置允许拖入。</p><p>参见<a href="https://pythonspot.com/en/pyqt5-drag-and-drop/">pyqt5-drag-and-drop</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PyQt5 <span class="hljs-keyword">import</span> QtCore<br><span class="hljs-keyword">from</span> PyQt5.QtWidgets <span class="hljs-keyword">import</span> QMainWindow, QApplication, QListWidget, QAbstractItemView<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomLabel</span>(<span class="hljs-title class_ inherited__">QLabel</span>):<br> <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, title, parent</span>):<br>        <span class="hljs-built_in">super</span>().__init__(title, parent)<br>        self.setAcceptDrops(<span class="hljs-literal">True</span>)<br> <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">dragEnterEvent</span>(<span class="hljs-params">self, e</span>):<br>        <span class="hljs-keyword">if</span> e.mimeData().hasFormat(<span class="hljs-string">&#x27;text/plain&#x27;</span>):<br>            e.accept()<br>        <span class="hljs-keyword">else</span>:<br>            e.ignore()<br> <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">dropEvent</span>(<span class="hljs-params">self, e</span>):<br>        self.setText(e.mimeData().text())<br></code></pre></td></tr></table></figure><br>直接调用这个类，将它添加到界面上去。</p><h3 id="拖入文件，读取文件路径"><a href="#拖入文件，读取文件路径" class="headerlink" title="拖入文件，读取文件路径"></a>拖入文件，读取文件路径</h3><p>这里继承了QLabel。<code>Ui_MainWindow</code>是用designer画出来的界面。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PyQt5 <span class="hljs-keyword">import</span> QtCore<br><span class="hljs-keyword">from</span> PyQt5.QtWidgets <span class="hljs-keyword">import</span> QMainWindow, QApplication, QListWidget, QAbstractItemView<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LabMainWindow</span>(<span class="hljs-title class_ inherited__">QMainWindow</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(LabMainWindow, self).__init__()<br>        self.ma = Ui_MainWindow()<br>        self.ma.setupUi(self)<br>        self.drag_in_widget = DragInWidget(<span class="hljs-string">&quot;Drag in&quot;</span>, self)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_init_ui</span>(<span class="hljs-params">self</span>):<br>        self.drag_in_widget.move(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DragInWidget</span>(<span class="hljs-title class_ inherited__">QLabel</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, title, parent</span>):<br>        <span class="hljs-built_in">super</span>().__init__(title, parent)<br>        self.setAcceptDrops(<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">dragEnterEvent</span>(<span class="hljs-params">self, e</span>):<br>        <span class="hljs-keyword">if</span> e.mimeData().hasUrls():<br>            e.accept()<br>        <span class="hljs-keyword">else</span>:<br>            e.ignore()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">dropEvent</span>(<span class="hljs-params">self, e</span>):<br>        <span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> e.mimeData().urls():<br>            path = url.toLocalFile()<br>            <span class="hljs-keyword">if</span> os.path.isfile(path):<br>                <span class="hljs-built_in">print</span>(path)<br><br></code></pre></td></tr></table></figure><h3 id="QtWidgets-QFrame监听拖入事件"><a href="#QtWidgets-QFrame监听拖入事件" class="headerlink" title="QtWidgets.QFrame监听拖入事件"></a>QtWidgets.QFrame监听拖入事件</h3><p>监听到有效拖动事件后，利用<code>QtCore.pyqtSignal</code>把信息传递出去</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PyQt5 <span class="hljs-keyword">import</span> QtCore<br><span class="hljs-keyword">from</span> PyQt5.QtWidgets <span class="hljs-keyword">import</span> QMainWindow, QApplication, QListWidget, QAbstractItemView<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DragInWidget</span>(QtWidgets.QFrame):<br>    <span class="hljs-string">&quot;&quot;&quot; Drag files to this widget &quot;&quot;&quot;</span><br>    s_content = QtCore.pyqtSignal(<span class="hljs-built_in">str</span>)  <span class="hljs-comment"># emit file path</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, parent</span>):<br>        <span class="hljs-built_in">super</span>(DragInWidget, self).__init__(parent)<br>        self.setAcceptDrops(<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">dragEnterEvent</span>(<span class="hljs-params">self, e</span>):<br>        <span class="hljs-keyword">if</span> e.mimeData().hasUrls():<br>            e.accept()<br>        <span class="hljs-keyword">else</span>:<br>            e.ignore()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">dropEvent</span>(<span class="hljs-params">self, e</span>):<br>        <span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> e.mimeData().urls():<br>            path = url.toLocalFile()<br>            <span class="hljs-keyword">if</span> os.path.isfile(path):<br>                self.s_content.emit(path)<br>                <span class="hljs-built_in">print</span>(path)<br></code></pre></td></tr></table></figure><p>这个Frame可以覆盖在其他控件上面时，会拦截操作</p><h3 id="QListWidget拖入事件"><a href="#QListWidget拖入事件" class="headerlink" title="QListWidget拖入事件"></a>QListWidget拖入事件</h3><p>向<code>QListWidget</code>拖入文件，获取文件路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PyQt5 <span class="hljs-keyword">import</span> QtCore<br><span class="hljs-keyword">from</span> PyQt5.QtWidgets <span class="hljs-keyword">import</span> QMainWindow, QApplication, QListWidget, QAbstractItemView<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DragInWidget</span>(<span class="hljs-title class_ inherited__">QListWidget</span>):<br>    <span class="hljs-string">&quot;&quot;&quot; Drag files to this widget &quot;&quot;&quot;</span><br>    s_content = QtCore.pyqtSignal(<span class="hljs-built_in">str</span>)  <span class="hljs-comment"># emit file path</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, parent</span>):<br>        <span class="hljs-built_in">super</span>(DragInWidget, self).__init__(parent)<br>        self.setAcceptDrops(<span class="hljs-literal">True</span>)<br>        self.setDragDropMode(QAbstractItemView.InternalMove)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">dragEnterEvent</span>(<span class="hljs-params">self, e</span>):<br>        <span class="hljs-keyword">if</span> e.mimeData().hasUrls():<br>            e.accept()<br>        <span class="hljs-keyword">else</span>:<br>            e.ignore()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">dropEvent</span>(<span class="hljs-params">self, e</span>):<br>        <span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> e.mimeData().urls():<br>            path = url.toLocalFile()<br>            <span class="hljs-keyword">if</span> os.path.isfile(path):<br>                self.s_content.emit(path)<br>                <span class="hljs-built_in">print</span>(path)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PyQt</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>PyQt 打包</title>
    <link href="/PyQt_note/PyQt-Pack_app/"/>
    <url>/PyQt_note/PyQt-Pack_app/</url>
    
    <content type="html"><![CDATA[<h2 id="py2exe"><a href="#py2exe" class="headerlink" title="py2exe"></a>py2exe</h2><h3 id="PyQt4-中打包成EXE文件"><a href="#PyQt4-中打包成EXE文件" class="headerlink" title="PyQt4 中打包成EXE文件"></a>PyQt4 中打包成EXE文件</h3><p>将某个GUI程序打包成EXE文件。</p><p>Python2.7，在PyCharm中直接执行这个文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-keyword">from</span> distutils.core <span class="hljs-keyword">import</span> setup<br><span class="hljs-keyword">import</span> py2exe<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">import</span> main_window_re<br><br><span class="hljs-comment"># this allows to run it with a simple double click.</span><br>sys.argv.append(<span class="hljs-string">&#x27;py2exe&#x27;</span>)<br><br>py2exe_options = &#123;<br>    <span class="hljs-string">&quot;includes&quot;</span>: [<span class="hljs-string">&quot;sip&quot;</span>],<br>    <span class="hljs-string">&quot;dll_excludes&quot;</span>: [<span class="hljs-string">&quot;MSVCP90.dll&quot;</span>, ],<br>    <span class="hljs-string">&quot;compressed&quot;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;optimize&quot;</span>: <span class="hljs-number">2</span>,<br>    <span class="hljs-string">&quot;ascii&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">&quot;bundle_files&quot;</span>: <span class="hljs-number">1</span>,<br>&#125;<br><br>setup(<br>    name=<span class="hljs-string">&#x27;Reliability_test&#x27;</span>,<br>    version=main_window_re.VERSION_NAME,<br>    windows=[<span class="hljs-string">&#x27;main_window_re.py&#x27;</span>, ],<br>    zipfile=<span class="hljs-literal">None</span>,<br>    options=&#123;<span class="hljs-string">&#x27;py2exe&#x27;</span>: py2exe_options&#125;<br>)<br></code></pre></td></tr></table></figure><p>尝试过3.6和3.5版本，py2exe都不能正常工作。</p><h2 id="pyinstaller"><a href="#pyinstaller" class="headerlink" title="pyinstaller"></a>pyinstaller</h2><p><a href="https://github.com/pyinstaller/pyinstaller/wiki/FAQ">https://github.com/pyinstaller/pyinstaller/wiki/FAQ</a></p><p>由于电脑上安装了多个版本的Python，环境变量制定了Python2。<br>这里使用3.5版本的pyinstaller来打包。<br>注意<code>--paths</code>指定了路径。环境变量中并没有设置这个路径。我们指定去找PyQt5的依赖dll。</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">-p DIR, --paths DIR   A path <span class="hljs-keyword">to</span> search <span class="hljs-keyword">for</span> <span class="hljs-keyword">imports</span> (<span class="hljs-built_in">like</span> <span class="hljs-keyword">using</span> PYTHONPATH).<br>                      Multiple paths are allowed, separated <span class="hljs-keyword">by</span> <span class="hljs-comment">&#x27;;&#x27;, or use</span><br>                      this <span class="hljs-keyword">option</span> multiple times<br></code></pre></td></tr></table></figure><p>路径最好是加上引号，比如这里指定Qt5和PyQt5的路径<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">pyinstaller -<span class="hljs-selector-tag">p</span> <span class="hljs-string">&quot;D:\Qt\Qt5\5.6.3\msvc2015\bin&quot;</span> -<span class="hljs-selector-tag">p</span> <span class="hljs-string">&quot;D:\Python27_qt5\Lib\site-packages\PyQt5&quot;</span> main_lab.py<br></code></pre></td></tr></table></figure></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ <span class="hljs-regexp">/d/</span>python35<span class="hljs-regexp">/Scripts/</span>pyinstaller --paths <span class="hljs-regexp">/d/</span>python35<span class="hljs-regexp">/Lib/</span>site-packages<span class="hljs-regexp">/PyQt5/</span>Qt/bin --onefile main_lab.py<br><span class="hljs-number">106</span> INFO: PyInstaller: <span class="hljs-number">3.2</span>.<span class="hljs-number">1</span><br><span class="hljs-number">106</span> INFO: Python: <span class="hljs-number">3.5</span>.<span class="hljs-number">4</span>rc1<br><span class="hljs-number">106</span> INFO: Platform: Windows-<span class="hljs-number">7</span>-<span class="hljs-number">6.1</span>.<span class="hljs-number">7601</span>-SP1<br><span class="hljs-number">108</span> INFO: wrote E:\ws\eslab\lab\main_lab.spec<br><span class="hljs-number">109</span> INFO: UPX is not available.<br><span class="hljs-number">110</span> INFO: Extending PYTHONPATH with paths<br>[<span class="hljs-string">&#x27;E:\\ws\\eslab\\lab&#x27;</span>,<br> <span class="hljs-string">&#x27;D:\\python35\\Lib\\site-packages\\PyQt5\\Qt\\bin&#x27;</span>,<br> <span class="hljs-string">&#x27;E:\\ws\\eslab\\lab&#x27;</span>]<br>......<br></code></pre></td></tr></table></figure><p>生成单个窗口EXE文件。<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ <span class="hljs-regexp">/d/</span>python35<span class="hljs-regexp">/Scripts/</span>pyinstaller --paths <span class="hljs-regexp">/d/</span>python35<span class="hljs-regexp">/Lib/</span>site-packages<span class="hljs-regexp">/PyQt5/</span>Qt/bin -F -w main_lab.py<br></code></pre></td></tr></table></figure></p><p>生成exe文件后，报了一个找不到<code>lab</code>模块的错误。<br>这个模块刚好就是我们主界面所在的模块。<br>将引用的模块名<code>lab</code>删掉。重新生成exe文件。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> lab.file_utils <span class="hljs-keyword">import</span> FileUtils<br><span class="hljs-keyword">from</span> lab.mainwindow <span class="hljs-keyword">import</span> Ui_MainWindow<br><span class="hljs-comment">####################################</span><br><span class="hljs-keyword">from</span> file_utils <span class="hljs-keyword">import</span> FileUtils<br><span class="hljs-keyword">from</span> mainwindow <span class="hljs-keyword">import</span> Ui_MainWindow<br></code></pre></td></tr></table></figure></p><h3 id="运行exe找不到模块报错"><a href="#运行exe找不到模块报错" class="headerlink" title="运行exe找不到模块报错"></a>运行exe找不到模块报错</h3><p>使用默认方式打包，得到exe与文件目录<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">pyinstaller</span> main_lab.py<br></code></pre></td></tr></table></figure><br>将dist中的目录复制到另一台电脑，点击运行exe文件；提示找不到模块<br>在主ui文件中，添加路径<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> os<br><br>sys.path.append(os.getcwd())  <span class="hljs-comment"># Prepare path</span><br></code></pre></td></tr></table></figure></p><p>找不到模块，一般会报 <code>ImportError: No module named &#39;xxx&#39;</code> 错误<br>此时一般是找不到我们自己写的模块。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> my_package.ui_main <span class="hljs-keyword">import</span> Ui_MainWindow  <span class="hljs-comment"># 显示指定了my_package 打包得到的exe会找不到这个包</span><br><span class="hljs-keyword">from</span> my_widget <span class="hljs-keyword">import</span> DragInWidget  <span class="hljs-comment"># 不显示指定package  否则打包得到的exe会找不到包而无法运行</span><br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>PyQt</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Python 获取当前路径的方法</title>
    <link href="/Python/Python-get-path/"/>
    <url>/Python/Python-get-path/</url>
    
    <content type="html"><![CDATA[<p><a href="https://rustfisher.com/2017/07/31/Python/Python-get-path/">本文链接</a></p><h1 id="Python2-7-中获取路径的各种方法"><a href="#Python2-7-中获取路径的各种方法" class="headerlink" title="Python2.7 中获取路径的各种方法"></a>Python2.7 中获取路径的各种方法</h1><h2 id="sys-path"><a href="#sys-path" class="headerlink" title="sys.path"></a><code>sys.path</code></h2><p>模块搜索路径的字符串列表。由环境变量PYTHONPATH初始化得到。<br>sys.path[0]是调用Python解释器的当前脚本所在的目录。</p><h2 id="sys-argv"><a href="#sys-argv" class="headerlink" title="sys.argv"></a><code>sys.argv</code></h2><p>一个传给Python脚本的指令参数列表。<br>sys.argv[0]是脚本的名字（由系统决定是否是全名）<br>假设显示调用python指令，如<code>python demo.py</code>，会得到绝对路径；<br>若直接执行脚本，如<code>./demo.py</code>，会得到相对路径。</p><h2 id="os-getcwd"><a href="#os-getcwd" class="headerlink" title="os.getcwd()"></a><code>os.getcwd()</code></h2><p>获取当前工作路径。在这里是绝对路径。<br><a href="https://docs.python.org/2/library/os.html#os.getcwd">https://docs.python.org/2/library/os.html#os.getcwd</a></p><h2 id="file"><a href="#file" class="headerlink" title="__file__"></a><code>__file__</code></h2><p>获得模块所在的路径，可能得到相对路径。<br>如果显示执行Python，会得到绝对路径。<br>若按相对路径来直接执行脚本<code>./pyws/path_demo.py</code>，会得到相对路径。<br>为了获取绝对路径，可调用<code>os.path.abspath()</code></p><h1 id="os-path-中的一些方法"><a href="#os-path-中的一些方法" class="headerlink" title="os.path 中的一些方法"></a>os.path 中的一些方法</h1><h2 id="os-path-split-path"><a href="#os-path-split-path" class="headerlink" title="os.path.split(path)"></a><code>os.path.split(path)</code></h2><p>将路径名称分成头和尾一对。尾部永远不会带有斜杠。如果输入的路径以斜杠结尾，那么得到的空的尾部。<br>如果输入路径没有斜杠，那么头部位为空。如果输入路径为空，那么得到的头和尾都是空。<br><a href="https://docs.python.org/2/library/os.path.html#os.path.split">https://docs.python.org/2/library/os.path.html#os.path.split</a></p><h2 id="os-path-realpath-path"><a href="#os-path-realpath-path" class="headerlink" title="os.path.realpath(path)"></a><code>os.path.realpath(path)</code></h2><p>返回特定文件名的绝对路径。<br><a href="https://docs.python.org/2/library/os.path.html#os.path.realpath">https://docs.python.org/2/library/os.path.html#os.path.realpath</a></p><h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><p>环境 Win7, Python2.7<br>以<code>/e/pyws/path_demo.py</code>为例<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;sys.path[0] =&quot;</span>, sys.path[<span class="hljs-number">0</span>]<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;sys.argv[0] =&quot;</span>, sys.argv[<span class="hljs-number">0</span>]<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;__file__ =&quot;</span>, __file__<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;os.path.abspath(__file__) =&quot;</span>, os.path.abspath(__file__)<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;os.path.realpath(__file__) = &quot;</span>, os.path.realpath(__file__)<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;os.path.dirname(os.path.realpath(__file__)) =&quot;</span>, os.path.dirname(os.path.realpath(__file__))<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;os.path.split(os.path.realpath(__file__)) =&quot;</span>, os.path.split(os.path.realpath(__file__))<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;os.getcwd() =&quot;</span>, os.getcwd()<br></code></pre></td></tr></table></figure></p><p>在<code>/d</code>中运行，输出为<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus">$ python /e/pyws/path_demo<span class="hljs-selector-class">.py</span><br>sys<span class="hljs-selector-class">.path</span><span class="hljs-selector-attr">[0]</span> = E:\pyws<br>sys<span class="hljs-selector-class">.argv</span><span class="hljs-selector-attr">[0]</span> = E:/pyws/path_demo<span class="hljs-selector-class">.py</span><br>__file__ = E:/pyws/path_demo<span class="hljs-selector-class">.py</span><br>os<span class="hljs-selector-class">.path</span><span class="hljs-selector-class">.abspath</span>(__file__) = E:\pyws\path_demo<span class="hljs-selector-class">.py</span><br>os<span class="hljs-selector-class">.path</span><span class="hljs-selector-class">.realpath</span>(__file__) =  E:\pyws\path_demo<span class="hljs-selector-class">.py</span><br>os<span class="hljs-selector-class">.path</span><span class="hljs-selector-class">.dirname</span>(os<span class="hljs-selector-class">.path</span><span class="hljs-selector-class">.realpath</span>(__file__)) = E:\pyws<br>os<span class="hljs-selector-class">.path</span><span class="hljs-selector-class">.split</span>(os<span class="hljs-selector-class">.path</span><span class="hljs-selector-class">.realpath</span>(__file__)) = (<span class="hljs-string">&#x27;E:\\pyws&#x27;</span>, <span class="hljs-string">&#x27;path_demo.py&#x27;</span>)<br>os<span class="hljs-selector-class">.getcwd</span>() = D:\<br></code></pre></td></tr></table></figure></p><p>在e盘中用命令行直接执行脚本<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus">$ ./pyws/path_demo<span class="hljs-selector-class">.py</span><br>sys<span class="hljs-selector-class">.path</span><span class="hljs-selector-attr">[0]</span> = E:\pyws<br>sys<span class="hljs-selector-class">.argv</span><span class="hljs-selector-attr">[0]</span> = ./pyws/path_demo<span class="hljs-selector-class">.py</span><br>__file__ = ./pyws/path_demo<span class="hljs-selector-class">.py</span><br>os<span class="hljs-selector-class">.path</span><span class="hljs-selector-class">.abspath</span>(__file__) = E:\pyws\path_demo<span class="hljs-selector-class">.py</span><br>os<span class="hljs-selector-class">.path</span><span class="hljs-selector-class">.realpath</span>(__file__) =  E:\pyws\path_demo<span class="hljs-selector-class">.py</span><br>os<span class="hljs-selector-class">.path</span><span class="hljs-selector-class">.dirname</span>(os<span class="hljs-selector-class">.path</span><span class="hljs-selector-class">.realpath</span>(__file__)) = E:\pyws<br>os<span class="hljs-selector-class">.path</span><span class="hljs-selector-class">.split</span>(os<span class="hljs-selector-class">.path</span><span class="hljs-selector-class">.realpath</span>(__file__)) = (<span class="hljs-string">&#x27;E:\\pyws&#x27;</span>, <span class="hljs-string">&#x27;path_demo.py&#x27;</span>)<br>os<span class="hljs-selector-class">.getcwd</span>() = E:\<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>PyQt 线程类 QThread</title>
    <link href="/PyQt_note/PyQt-QThread/"/>
    <url>/PyQt_note/PyQt-QThread/</url>
    
    <content type="html"><![CDATA[<p>PyQt中的线程类 <code>QtCore.QThread</code>，使用时继承QThread类</p><p>启动界面的线程暂称为UI线程。界面执行命令时都在自己的UI线程中。<br>如果在UI线程中执行网络连接和数据库操作等耗时的操作，界面会被卡住，Windows下有可能会出现“无响应”的警告。<br>阻塞UI线程会降低用户体验和应用稳定性。因此我们可以把耗时操作放在线程中去执行。</p><p>QThread代表一个线程，我们可以复写run函数来执行我们要的操作。<br>QThread可以使用<code>QtCore.pyqtSignal</code>来与界面交互和传输数据。</p><h2 id="PyQt4-QThread-代码示例"><a href="#PyQt4-QThread-代码示例" class="headerlink" title="PyQt4 QThread 代码示例"></a>PyQt4 QThread 代码示例</h2><ul><li>Python2.7</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">from</span> PyQt4 <span class="hljs-keyword">import</span> QtCore<br><span class="hljs-keyword">from</span> PyQt4.QtCore <span class="hljs-keyword">import</span> QCoreApplication<br><span class="hljs-keyword">from</span> PyQt4.QtGui <span class="hljs-keyword">import</span> QWidget, QPushButton, QApplication, QTextBrowser<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TimeThread</span>(QtCore.QThread):<br>    signal_time = QtCore.pyqtSignal(<span class="hljs-built_in">str</span>, <span class="hljs-built_in">int</span>)  <span class="hljs-comment"># 信号</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, parent=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-built_in">super</span>(TimeThread, self).__init__(parent)<br>        self.working = <span class="hljs-literal">True</span><br>        self.num = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">start_timer</span>(<span class="hljs-params">self</span>):<br>        self.num = <span class="hljs-number">0</span><br>        self.start()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">while</span> self.working:<br>            <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Working&quot;</span>, self.thread()<br>            self.signal_time.emit(<span class="hljs-string">&quot;Running time:&quot;</span>, self.num)  <span class="hljs-comment"># 发送信号</span><br>            self.num += <span class="hljs-number">1</span><br>            self.sleep(<span class="hljs-number">1</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TimeDialog</span>(<span class="hljs-title class_ inherited__">QWidget</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(TimeDialog, self).__init__()<br>        self.timer_tv = QTextBrowser(self)<br>        self.init_ui()<br>        self.timer_t = TimeThread()<br>        self.timer_t.signal_time.connect(self.update_timer_tv)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">init_ui</span>(<span class="hljs-params">self</span>):<br>        self.resize(<span class="hljs-number">300</span>, <span class="hljs-number">200</span>)<br>        self.setWindowTitle(<span class="hljs-string">&#x27;TimeDialog&#x27;</span>)<br>        self.timer_tv.setText(<span class="hljs-string">&quot;Wait&quot;</span>)<br>        self.timer_tv.setGeometry(QtCore.QRect(<span class="hljs-number">10</span>, <span class="hljs-number">145</span>, <span class="hljs-number">198</span>, <span class="hljs-number">26</span>))<br>        self.timer_tv.move(<span class="hljs-number">0</span>, <span class="hljs-number">15</span>)<br><br>        btn1 = QPushButton(<span class="hljs-string">&#x27;Quit&#x27;</span>, self)<br>        btn1.setToolTip(<span class="hljs-string">&#x27;Click to quit&#x27;</span>)<br>        btn1.resize(btn1.sizeHint())<br>        btn1.move(<span class="hljs-number">200</span>, <span class="hljs-number">150</span>)<br>        btn1.clicked.connect(QCoreApplication.instance().quit)<br><br>        start_btn = QPushButton(<span class="hljs-string">&#x27;Start&#x27;</span>, self)<br>        start_btn.setToolTip(<span class="hljs-string">&quot;Click to start&quot;</span>)<br>        start_btn.move(<span class="hljs-number">50</span>, <span class="hljs-number">150</span>)<br>        self.connect(start_btn, QtCore.SIGNAL(<span class="hljs-string">&quot;clicked()&quot;</span>), self.click_start_btn)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">click_start_btn</span>(<span class="hljs-params">self</span>):<br>        self.timer_t.start_timer()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update_timer_tv</span>(<span class="hljs-params">self, text, number</span>):<br>        self.timer_tv.setText(self.tr(text + <span class="hljs-string">&quot; &quot;</span> + <span class="hljs-built_in">str</span>(number)))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app = QApplication(sys.argv)<br>    time_dialog = TimeDialog()<br>    time_dialog.show()<br><br>    sys.exit(app.exec_())<br></code></pre></td></tr></table></figure><p>QThread中使用的信号<code>signal_time = QtCore.pyqtSignal(str, int)</code> 指定了参数str和int<br>发送信号<code>self.signal_time.emit(&quot;Running time:&quot;, self.num)</code></p><p>外部接收信号<code>self.timer_t.signal_time.connect(self.update_timer_tv)</code><br>信号连接到方法<code>update_timer_tv(self, text, number)</code>，注意信号与方法的参数要一一对应</p><p>使用中我们可以定义多种不同的信号<code>QtCore.pyqtSignal</code></p><p>启动线程，调用<code>start()</code></p>]]></content>
    
    
    <categories>
      
      <category>PyQt</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Python 调用adb命令</title>
    <link href="/Python/Python-adb-use/"/>
    <url>/Python/Python-adb-use/</url>
    
    <content type="html"><![CDATA[<p>使用Python通过subprocess调用adb命令。</p><p>subprocess包主要功能是执行外部命令（相对Python而言）。和shell类似。</p><p>换言之除了adb命令外，利用subprocess可以执行其他的命令，比如ls，cd等等。</p><p>subprocess 可参考： <a href="https://docs.python.org/2/library/subprocess.html">https://docs.python.org/2/library/subprocess.html</a></p><p>在电脑上装好adb工具，配置好adb的环境变量，先确保shell中可以调用adb命令。</p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><ul><li>Python2.7</li></ul><p>类 <code>Adb</code>，封装了一些adb的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> subprocess<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Adb</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-string">&quot;&quot;&quot; Provides some adb methods &quot;&quot;&quot;</span><br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">adb_devices</span>():<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Do adb devices</span><br><span class="hljs-string">        :return The first connected device ID</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        cmd = <span class="hljs-string">&quot;adb devices&quot;</span><br>        c_line = subprocess.Popen(cmd, shell=<span class="hljs-literal">True</span>, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">if</span> c_line.find(<span class="hljs-string">&quot;List of devices attached&quot;</span>) &lt; <span class="hljs-number">0</span>:  <span class="hljs-comment"># adb is not working</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">return</span> c_line.split(<span class="hljs-string">&quot;\t&quot;</span>)[<span class="hljs-number">0</span>].split(<span class="hljs-string">&quot;\r\n&quot;</span>)[-<span class="hljs-number">1</span>]  <span class="hljs-comment"># This line may have different format</span><br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">pull_sd_dcim</span>(<span class="hljs-params">device, target_dir=<span class="hljs-string">&#x27;E:/files&#x27;</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot; Pull DCIM files from device &quot;&quot;&quot;</span><br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Pulling files&quot;</span><br>        des_path = os.path.join(target_dir, device)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(des_path):<br>            os.makedirs(des_path)<br>        <span class="hljs-built_in">print</span> des_path<br>        cmd = <span class="hljs-string">&quot;adb pull /sdcard/DCIM/ &quot;</span> + des_path<br>        result = subprocess.Popen(cmd, shell=<span class="hljs-literal">True</span>, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()<br>        <span class="hljs-built_in">print</span> result<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Finish!&quot;</span><br>        <span class="hljs-keyword">return</span> des_path<br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">some_adb_cmd</span>():<br>        p = subprocess.Popen(<span class="hljs-string">&#x27;adb shell cd sdcard&amp;&amp;ls&amp;&amp;cd ../sys&amp;&amp;ls&#x27;</span>,<br>                             stdout=subprocess.PIPE, stderr=subprocess.PIPE)<br>        return_code = p.poll()<br>        <span class="hljs-keyword">while</span> return_code <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            line = p.stdout.readline()<br>            return_code = p.poll()<br>            line = line.strip()<br>            <span class="hljs-keyword">if</span> line:<br>                <span class="hljs-built_in">print</span> line<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Done&quot;</span><br><br></code></pre></td></tr></table></figure><p><code>some_adb_cmd</code>方法执行一连串的命令。各个命令之间用<code>&amp;&amp;</code>连接。<br>接着是一个死循环，将执行结果打印出来。</p><h2 id="subprocess-说明"><a href="#subprocess-说明" class="headerlink" title="subprocess 说明"></a>subprocess 说明</h2><p><code>creationflags=CREATE_NEW_CONSOLE</code>在执行指令时弹出一个新的cmd窗口</p><p>可以执行指定的bat脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> _subprocess <span class="hljs-keyword">import</span> CREATE_NEW_CONSOLE<br><span class="hljs-keyword">from</span> subprocess <span class="hljs-keyword">import</span> Popen<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_click_new_cmd_window_btn</span>(<span class="hljs-params">self</span>):<br>        self.log.info(<span class="hljs-string">&quot;click_new_cmd_window_btn&quot;</span>)<br>        Popen(<span class="hljs-string">&#x27;cmd&#x27;</span>, creationflags=CREATE_NEW_CONSOLE)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_click_exe_bat_btn1</span>(<span class="hljs-params">self</span>):<br>        self.log.info(<span class="hljs-string">&quot;run bat&quot;</span>)<br>        Popen(<span class="hljs-string">&#x27;C:\MYDIR\_debug.bat&#x27;</span>, creationflags=CREATE_NEW_CONSOLE)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Python 查看目录中的文件</title>
    <link href="/Python/Python-scan-file/"/>
    <url>/Python/Python-scan-file/</url>
    
    <content type="html"><![CDATA[<p>一些关于文件的操作<br>例如，实现查看目录内容的功能。类似Linux下的<code>tree</code>命令。<br>统计目录下指定后缀文件的行数。</p><p>功能是将目录下所有的文件路径存入list中。<br>可以加入后缀判断功能，搜索指定的后缀名文件。<br>主要利用递归的方法来检索文件。</p><h3 id="仿造-tree-功能示例代码"><a href="#仿造-tree-功能示例代码" class="headerlink" title="仿造 tree 功能示例代码"></a>仿造 tree 功能示例代码</h3><ul><li>Python2.7</li></ul><p>列出目录下所有文件<br>递归法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">tree_dir</span>(<span class="hljs-params">path, c_path=<span class="hljs-string">&#x27;&#x27;</span>, is_root=<span class="hljs-literal">True</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Get file list under path. Like &#x27;tree&#x27;</span><br><span class="hljs-string">    :param path Root dir</span><br><span class="hljs-string">    :param c_path Child dir</span><br><span class="hljs-string">    :param is_root Current is root dir</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    res = []<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(path):<br>        <span class="hljs-keyword">return</span> res<br>    <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> os.listdir(path):<br>        <span class="hljs-keyword">if</span> os.path.isfile(os.path.join(path, f)):<br>            <span class="hljs-keyword">if</span> is_root:<br>                res.append(f)<br>            <span class="hljs-keyword">else</span>:<br>                res.append(os.path.join(c_path, f))<br>        <span class="hljs-keyword">else</span>:<br>            res.extend(tree_dir(os.path.join(path, f), f, is_root=<span class="hljs-literal">False</span>))<br>    <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure></p><p>下面是加入后缀判断的方法。在找到文件后，判断一下是否符合后缀要求。不符合要求的文件就跳过。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">tree_dir_sur</span>(<span class="hljs-params">path, c_path=<span class="hljs-string">&#x27;&#x27;</span>, is_root=<span class="hljs-literal">True</span>, suffix=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot; Get file list under path. Like &#x27;tree&#x27;</span><br><span class="hljs-string">    :param path Root dir</span><br><span class="hljs-string">    :param c_path Child dir</span><br><span class="hljs-string">    :param is_root Current is root dir</span><br><span class="hljs-string">    :param suffix Suffix of file</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    res = []<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(path) <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> os.path.isdir(path):<br>        <span class="hljs-keyword">return</span> res<br>    <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> os.listdir(path):<br>        <span class="hljs-keyword">if</span> os.path.isfile(os.path.join(path, f)) <span class="hljs-keyword">and</span> <span class="hljs-built_in">str</span>(f).endswith(suffix):<br>            <span class="hljs-keyword">if</span> is_root:<br>                res.append(f)<br>            <span class="hljs-keyword">else</span>:<br>                res.append(os.path.join(c_path, f))<br>        <span class="hljs-keyword">else</span>:<br>            res.extend(tree_dir_sur(os.path.join(path, f), f, is_root=<span class="hljs-literal">False</span>, suffix=suffix))<br>    <span class="hljs-keyword">return</span> res<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> tree_dir_sur(os.path.join(<span class="hljs-string">&#x27;E:\ws&#x27;</span>, <span class="hljs-string">&#x27;rnote&#x27;</span>, <span class="hljs-string">&#x27;Python_note&#x27;</span>), suffix=<span class="hljs-string">&#x27;md&#x27;</span>):<br>        <span class="hljs-built_in">print</span> p<br></code></pre></td></tr></table></figure></p><h3 id="统计目录下指定后缀文件的行数"><a href="#统计目录下指定后缀文件的行数" class="headerlink" title="统计目录下指定后缀文件的行数"></a>统计目录下指定后缀文件的行数</h3><p>仅适用os中的方法，仅检索目录中固定位置的文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">import</span> os<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">count_by_categories</span>(<span class="hljs-params">path</span>):<br>    <span class="hljs-string">&quot;&quot;&quot; Find all target files and count the lines &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(path):<br>        <span class="hljs-keyword">return</span><br>    c_l_dict = <span class="hljs-built_in">dict</span>()  <span class="hljs-comment"># e.g. &#123;category: lines&#125;</span><br>    category_list = [cate <span class="hljs-keyword">for</span> cate <span class="hljs-keyword">in</span> os.listdir(path) <span class="hljs-keyword">if</span><br>                     os.path.isdir(os.path.join(path, cate)) <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> cate.startswith(<span class="hljs-string">&#x27;.&#x27;</span>)]<br>    <span class="hljs-keyword">for</span> category_dir <span class="hljs-keyword">in</span> category_list:<br>        line_count = _sum_total_line(os.path.join(path, category_dir), <span class="hljs-string">&#x27;.md&#x27;</span>)<br>        <span class="hljs-keyword">if</span> line_count &gt; <span class="hljs-number">0</span>:<br>            c_l_dict[category_dir] = line_count<br>    <span class="hljs-keyword">return</span> c_l_dict<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_sum_total_line</span>(<span class="hljs-params">path, endswith=<span class="hljs-string">&#x27;.md&#x27;</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot; Get the total lines of target files &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(path) <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> os.path.isdir(path):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    total_lines = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> os.listdir(path):<br>        <span class="hljs-keyword">if</span> f.endswith(endswith):<br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(os.path.join(path, f)) <span class="hljs-keyword">as</span> cur_f:<br>                total_lines += <span class="hljs-built_in">len</span>(cur_f.readlines())<br>    <span class="hljs-keyword">return</span> total_lines<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    note_dir = <span class="hljs-string">&#x27;E:/ws/rnote&#x27;</span><br>    ca_l_dict = count_by_categories(note_dir)<br>    all_lines = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> ca_l_dict.keys():<br>        all_lines += ca_l_dict[k]<br><br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;all lines:&#x27;</span>, <span class="hljs-built_in">str</span>(all_lines)<br>    <span class="hljs-built_in">print</span> ca_l_dict<br></code></pre></td></tr></table></figure><p>以笔记文件夹为例，分别统计分类目录下文件的总行数，测试输出<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">all lines:</span> <span class="hljs-number">25433</span><br>&#123;<span class="hljs-attr">&#x27;flash_compile_git_note&#x27;:</span> <span class="hljs-number">334</span>, <span class="hljs-attr">&#x27;Linux_note&#x27;:</span> <span class="hljs-number">387</span>, <span class="hljs-attr">&#x27;Algorithm_note&#x27;:</span> <span class="hljs-number">3637</span>, <span class="hljs-attr">&#x27;Comprehensive&#x27;:</span> <span class="hljs-number">216</span>, <span class="hljs-attr">&#x27;advice&#x27;:</span> <span class="hljs-number">137</span>, <span class="hljs-attr">&#x27;Java_note&#x27;:</span> <span class="hljs-number">3013</span>, <span class="hljs-attr">&#x27;Android_note&#x27;:</span> <span class="hljs-number">11552</span>, <span class="hljs-attr">&#x27;DesignPattern&#x27;:</span> <span class="hljs-number">2646</span>, <span class="hljs-attr">&#x27;Python_note&#x27;:</span> <span class="hljs-number">787</span>, <span class="hljs-attr">&#x27;kotlin&#x27;:</span> <span class="hljs-number">184</span>, <span class="hljs-attr">&#x27;cpp_note&#x27;:</span> <span class="hljs-number">279</span>, <span class="hljs-attr">&#x27;PyQt_note&#x27;:</span> <span class="hljs-number">439</span>, <span class="hljs-attr">&#x27;reading&#x27;:</span> <span class="hljs-number">686</span>, <span class="hljs-attr">&#x27;backend&#x27;:</span> <span class="hljs-number">1136</span>&#125;<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Android AsyncTask 使用与分析</title>
    <link href="/Android/Android-AsyncTask_use_and_RTFSC/"/>
    <url>/Android/Android-AsyncTask_use_and_RTFSC/</url>
    
    <content type="html"><![CDATA[<p>本文简单介绍Android中的AsyncTask，并从源码角度分析它的流程和特点。  </p><p>AsyncTask有助于使用UI线程。<br>这个类能让你不主动使用多线程或Handler，在UI线程进行后台操作并发布结果。<br>是一个在不用多线程和Handler的情况下的帮助类。AsyncTask适用于短时间的操作（最多几秒）。<br>如需长时间的线程操作，建议使用多线程包<code>java.util.concurrent</code>中的API，比如<code>Executor</code>，<code>ThreadPoolExecutor</code> 和 <code>FutureTask</code></p><p>AsyncTask任务的构成：</p><ul><li>3种泛型：<code>Params</code>， <code>Progress</code> 和 <code>Result</code></li><li>4个步骤：<code>onPreExecute</code>, <code>doInBackground</code>, <code>onProgressUpdate</code> 和 <code>onPostExecute</code></li></ul><p><a href="https://developer.android.com/reference/android/os/AsyncTask.html">Google文档</a></p><h3 id="用法简介"><a href="#用法简介" class="headerlink" title="用法简介"></a>用法简介</h3><p>虚构一个计算任务<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 虚拟的计算任务</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CalculationTask</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AsyncTask</span>&lt;Float, Integer, Float&gt; &#123;<br>        <span class="hljs-keyword">protected</span> Float <span class="hljs-title function_">doInBackground</span><span class="hljs-params">(Float... inputs)</span> &#123;<br>            Log.d(TAG, <span class="hljs-string">&quot;doInBackground thread ID = &quot;</span> + Thread.currentThread().getId());<br>            <span class="hljs-type">long</span> <span class="hljs-variable">step</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-type">float</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">float</span> f : inputs) &#123;<br>                <span class="hljs-comment">// 假设这里有一些耗时的操作</span><br>                result += f;<br>            &#125;<br>            <span class="hljs-keyword">while</span> (step &lt; <span class="hljs-number">5</span>) &#123;<br>                result += step;<br>                step++;<br>                publishProgress((<span class="hljs-type">int</span>) step);<br>            &#125;<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onProgressUpdate</span><span class="hljs-params">(Integer... progress)</span> &#123;<br>            Log.d(TAG, <span class="hljs-string">&quot;onProgressUpdate thread ID = &quot;</span> + Thread.currentThread().getId());<br>            Log.d(TAG, <span class="hljs-string">&quot;onProgressUpdate: &quot;</span> + progress[<span class="hljs-number">0</span>]);<br>        &#125;<br><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onPostExecute</span><span class="hljs-params">(Float result)</span> &#123;<br>            Log.d(TAG, <span class="hljs-string">&quot;onPostExecute thread ID = &quot;</span> + Thread.currentThread().getId());<br>            Log.d(TAG, <span class="hljs-string">&quot;任务执行完毕&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 执行任务</span><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">CalculationTask</span>().execute(<span class="hljs-number">1.2f</span>, <span class="hljs-number">2.3f</span>, <span class="hljs-number">6.3f</span>);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">logcat</span><br><span class="hljs-comment">Main thread ID = 1</span><br><span class="hljs-comment">doInBackground thread ID = 8089</span><br><span class="hljs-comment">onProgressUpdate thread ID = 1</span><br><span class="hljs-comment">onProgressUpdate: 1</span><br><span class="hljs-comment">...</span><br><span class="hljs-comment">onProgressUpdate thread ID = 1</span><br><span class="hljs-comment">onProgressUpdate: 5</span><br><span class="hljs-comment">onPostExecute thread ID = 1</span><br><span class="hljs-comment">任务执行完毕</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure></p><h3 id="AsyncTask-使用的的泛型"><a href="#AsyncTask-使用的的泛型" class="headerlink" title="AsyncTask 使用的的泛型"></a>AsyncTask 使用的的泛型</h3><p>AsyncTask使用的3种泛型</p><ul><li>Params 送去执行的类型</li><li>Progress 后台计算的进度类型</li><li>Result 后台计算的结果</li></ul><p>不用的泛型可以用<code>Void</code>表示。例如<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTask</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AsyncTask</span>&lt;Void, Void, Void&gt; &#123; ... &#125;<br></code></pre></td></tr></table></figure></p><h3 id="异步任务的4个步骤"><a href="#异步任务的4个步骤" class="headerlink" title="异步任务的4个步骤"></a>异步任务的4个步骤</h3><p>异步任务执行时经过4个步骤</p><ul><li><code>onPreExecute()</code> UI线程在任务开始前调用这个方法。此方法常用来设置任务，比如在屏幕上显示一个进度条。</li><li><code>doInBackground(Params...)</code> <code>onPreExecute()</code>执行完毕后立即在后台线程中执行。这一步用来执行耗时的后台计算。<br>这个方法接受异步任务的参数，返回最后的任务结果。这一步可以调用<code>publishProgress(Progress...)</code>通知出去一个或多个进度。这些进度值会被<code>onProgressUpdate(Progress...)</code>在UI线程收到。</li><li><code>onProgressUpdate(Progress...)</code>  调用<code>publishProgress(Progress...)</code>后会在UI线程中执行。用来显示执行中任务的UI。</li><li><code>onPostExecute(Result)</code> 后台任务执行完毕时被调用。最终结果会被传入这个方法。</li></ul><h3 id="取消任务"><a href="#取消任务" class="headerlink" title="取消任务"></a>取消任务</h3><p>调用<code>cancel(boolean)</code>可随时取消任务。取消任务后<code>isCancelled()</code>会返回true。<br>调用这个方法后，后台任务<code>doInBackground(Object[])</code>执行完毕后会调用<code>onCancelled(Object)</code>而不再是<code>onPostExecute(Object)</code>。<br>为保证任务能被及时地取消，在<code>doInBackground(Object[])</code>中应该经常检查<code>isCancelled()</code>返回值</p><h3 id="线程规则-Threading-rules"><a href="#线程规则-Threading-rules" class="headerlink" title="线程规则 Threading rules"></a>线程规则 Threading rules</h3><p>一些线程规则</p><ul><li>异步任务必须从UI线程启动</li><li>必须在UI线程实例化AsyncTask类</li><li>必须在UI线程调用<code>execute(Params...)</code></li><li>不要手动调用<code>onPreExecute(), onPostExecute(Result), doInBackground(Params...), onProgressUpdate(Progress...)</code></li><li>同一个异步任务实例只能被执行一次。重复执行同一个异步任务实例会抛出异常（<code>IllegalStateException</code>）。</li></ul><h2 id="源码简析"><a href="#源码简析" class="headerlink" title="源码简析"></a>源码简析</h2><p>需要解决的问题：<br>AsyncTask是如何调用后台线程完成任务的？线程是如何调度的？</p><p>AsyncTask使用<code>Executor</code>，利用<code>WorkerRunnable</code>和<code>FutureTask</code>来执行后台任务<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> WorkerRunnable&lt;Params, Result&gt; mWorker; <span class="hljs-comment">// 实现了 Callable</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> FutureTask&lt;Result&gt; mFuture;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WorkerRunnable</span>&lt;Params, Result&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Callable</span>&lt;Result&gt; &#123;<br>    Params[] mParams;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>使用<code>Handler</code>来进行线程调度。内部定义了一个类<code>InternalHandler</code>。</p><h3 id="从execute-Params-params-方法切入"><a href="#从execute-Params-params-方法切入" class="headerlink" title="从execute(Params... params)方法切入"></a>从<code>execute(Params... params)</code>方法切入</h3><p>先看方法<code>execute(Params... params)</code>，使用默认执行器，并传入参数<br>调用<code>xecuteOnExecutor(Executor exec, Params... params)</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@MainThread</span> <span class="hljs-comment">// 指定在主线程执行</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> AsyncTask&lt;Params, Progress, Result&gt; <span class="hljs-title function_">execute</span><span class="hljs-params">(Params... params)</span> &#123;<br>    <span class="hljs-keyword">return</span> executeOnExecutor(sDefaultExecutor, params);<br>&#125;<br></code></pre></td></tr></table></figure></p><p>先判断当前状态，如果状态不是<code>Status.PENDING</code>，则抛出异常。<br>否则进入<code>Status.RUNNING</code>状态，执行<code>onPreExecute()</code>，再由执行器启动任务。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@MainThread</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> AsyncTask&lt;Params, Progress, Result&gt; <span class="hljs-title function_">executeOnExecutor</span><span class="hljs-params">(Executor exec,</span><br><span class="hljs-params">        Params... params)</span> &#123;<br>    <span class="hljs-keyword">if</span> (mStatus != Status.PENDING) &#123;<br>        <span class="hljs-keyword">switch</span> (mStatus) &#123;<br>            <span class="hljs-keyword">case</span> RUNNING:<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;Cannot execute task:&quot;</span><br>                        + <span class="hljs-string">&quot; the task is already running.&quot;</span>);<br>            <span class="hljs-keyword">case</span> FINISHED: <span class="hljs-comment">// 同一个任务实例只能够执行一次</span><br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;Cannot execute task:&quot;</span><br>                        + <span class="hljs-string">&quot; the task has already been executed &quot;</span><br>                        + <span class="hljs-string">&quot;(a task can be executed only once)&quot;</span>);<br>        &#125;<br>    &#125;<br>    mStatus = Status.RUNNING;<br>    onPreExecute();<br>    mWorker.mParams = params;<br>    exec.execute(mFuture); <span class="hljs-comment">// 开始进入后台线程执行任务</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><p><code>mWorker</code>带着传进来的参数，<code>mFuture</code>实例化时已经将<code>mWorker</code>注入。参看构造函数<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">AsyncTask</span><span class="hljs-params">()</span> &#123;<br>    mWorker = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WorkerRunnable</span>&lt;Params, Result&gt;() &#123;<br>        <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>            mTaskInvoked.set(<span class="hljs-literal">true</span>);<br><br>            Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);<br>            <span class="hljs-comment">// 在后台线程进行自定义的操作  这里面可以调用publishProgress方法</span><br>            <span class="hljs-type">Result</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> doInBackground(mParams); <br>            Binder.flushPendingCommands();<br>            <span class="hljs-keyword">return</span> postResult(result); <span class="hljs-comment">// 发送最终结果</span><br>        &#125;<br>    &#125;;<br><br>    mFuture = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;Result&gt;(mWorker) &#123; <span class="hljs-comment">// 依赖 mWorker</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">done</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                postResultIfNotInvoked(get());<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                android.util.Log.w(LOG_TAG, e);<br>            &#125; <span class="hljs-keyword">catch</span> (ExecutionException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;An error occurred while executing doInBackground()&quot;</span>,<br>                        e.getCause());<br>            &#125; <span class="hljs-keyword">catch</span> (CancellationException e) &#123;<br>                postResultIfNotInvoked(<span class="hljs-literal">null</span>);<br>            &#125;<br>        &#125;<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure></p><p><code>publishProgress</code>方法通过主线程的Handler向外通知进度<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WorkerThread</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">publishProgress</span><span class="hljs-params">(Progress... values)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!isCancelled()) &#123;<br>        getHandler().obtainMessage(MESSAGE_POST_PROGRESS,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">AsyncTaskResult</span>&lt;Progress&gt;(<span class="hljs-built_in">this</span>, values)).sendToTarget();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>后台任务执行完毕，<code>postResult</code>发送最终结果<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Result <span class="hljs-title function_">postResult</span><span class="hljs-params">(Result result)</span> &#123;<br>    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>    <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> getHandler().obtainMessage(MESSAGE_POST_RESULT,<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">AsyncTaskResult</span>&lt;Result&gt;(<span class="hljs-built_in">this</span>, result));<br>    message.sendToTarget(); <span class="hljs-comment">// 会走到finish方法</span><br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">finish</span><span class="hljs-params">(Result result)</span> &#123;<br>    <span class="hljs-keyword">if</span> (isCancelled()) &#123;<br>        onCancelled(result); <span class="hljs-comment">// 如果任务已经被取消了</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        onPostExecute(result); <span class="hljs-comment">// 通知任务执行完毕</span><br>    &#125;<br>    mStatus = Status.FINISHED;<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="关于默认执行器-sDefaultExecutor-和线程池"><a href="#关于默认执行器-sDefaultExecutor-和线程池" class="headerlink" title="关于默认执行器 sDefaultExecutor 和线程池"></a>关于默认执行器 <code>sDefaultExecutor</code> 和线程池</h3><p>源码中构建了一个线程池和一个自定义的执行器<code>SerialExecutor</code>。靠它们来执行后台任务。</p><p>参考源代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AsyncTask</span>&lt;Params, Progress, Result&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">CPU_COUNT</span> <span class="hljs-operator">=</span> Runtime.getRuntime().availableProcessors();<br>    <span class="hljs-comment">// 核心线程至少2个，最多4个</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">CORE_POOL_SIZE</span> <span class="hljs-operator">=</span> Math.max(<span class="hljs-number">2</span>, Math.min(CPU_COUNT - <span class="hljs-number">1</span>, <span class="hljs-number">4</span>));<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAXIMUM_POOL_SIZE</span> <span class="hljs-operator">=</span> CPU_COUNT * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">KEEP_ALIVE_SECONDS</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Executor</span> <span class="hljs-variable">SERIAL_EXECUTOR</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SerialExecutor</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">Executor</span> <span class="hljs-variable">sDefaultExecutor</span> <span class="hljs-operator">=</span> SERIAL_EXECUTOR;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ThreadFactory</span> <span class="hljs-variable">sThreadFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadFactory</span>() &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">mCount</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(<span class="hljs-number">1</span>);<br><br>        <span class="hljs-keyword">public</span> Thread <span class="hljs-title function_">newThread</span><span class="hljs-params">(Runnable r)</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r, <span class="hljs-string">&quot;AsyncTask #&quot;</span> + mCount.getAndIncrement());<br>        &#125;<br>    &#125;;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> BlockingQueue&lt;Runnable&gt; sPoolWorkQueue =<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;(<span class="hljs-number">128</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Executor THREAD_POOL_EXECUTOR; <span class="hljs-comment">// 实际执行者</span><br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-type">ThreadPoolExecutor</span> <span class="hljs-variable">threadPoolExecutor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<br>                CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE_SECONDS, TimeUnit.SECONDS,<br>                sPoolWorkQueue, sThreadFactory);<br>        threadPoolExecutor.allowCoreThreadTimeOut(<span class="hljs-literal">true</span>);<br>        THREAD_POOL_EXECUTOR = threadPoolExecutor;<br>    &#125;<br><br>    <span class="hljs-comment">// 默认执行器的类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SerialExecutor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Executor</span> &#123;<br>        <span class="hljs-keyword">final</span> ArrayDeque&lt;Runnable&gt; mTasks = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>&lt;Runnable&gt;();<br>        Runnable mActive;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Runnable r)</span> &#123;<br>            mTasks.offer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        r.run();<br>                    &#125; <span class="hljs-keyword">finally</span> &#123;<br>                        scheduleNext();<br>                    &#125;<br>                &#125;<br>            &#125;);<br>            <span class="hljs-keyword">if</span> (mActive == <span class="hljs-literal">null</span>) &#123;<br>                scheduleNext();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">scheduleNext</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">if</span> ((mActive = mTasks.poll()) != <span class="hljs-literal">null</span>) &#123;<br>                THREAD_POOL_EXECUTOR.execute(mActive);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>Android_note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Thread</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android IntentService 分析和用法</title>
    <link href="/Android/Android-IntentService-intro1/"/>
    <url>/Android/Android-IntentService-intro1/</url>
    
    <content type="html"><![CDATA[<p>IntentService的分析和用法，实用性介绍。</p><h2 id="IntentService-简介"><a href="#IntentService-简介" class="headerlink" title="IntentService 简介"></a>IntentService 简介</h2><ul><li>IntentService继承自Service，可用<code>startService</code>启动，也需要在<code>AndroidManifest.xml</code>中注册</li><li>IntentService在一个单独的worker线程中处理任务</li><li>任务完成后，会自动停止</li><li>可多次启动同一个IntentService，它们会自一个接一个地排队处理</li></ul><h2 id="IntentService-与-Service"><a href="#IntentService-与-Service" class="headerlink" title="IntentService 与 Service"></a>IntentService 与 Service</h2><p>耗时任务可以不用在Service中手动开启线程。<br>当操作完成时，我们不用手动停止IntentService，它会自动判定停止。  </p><h3 id="IntentService-自动停止"><a href="#IntentService-自动停止" class="headerlink" title="IntentService 自动停止"></a>IntentService 自动停止</h3><p>参考IntentService源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> ServiceHandler mServiceHandler;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServiceHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Handler</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ServiceHandler</span><span class="hljs-params">(Looper looper)</span> &#123;<br>        <span class="hljs-built_in">super</span>(looper);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleMessage</span><span class="hljs-params">(Message msg)</span> &#123;<br>        onHandleIntent((Intent)msg.obj);<br>        stopSelf(msg.arg1); <span class="hljs-comment">// 传入startID</span><br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">super</span>.onCreate();<br>    <span class="hljs-type">HandlerThread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HandlerThread</span>(<span class="hljs-string">&quot;IntentService[&quot;</span> + mName + <span class="hljs-string">&quot;]&quot;</span>);<br>    thread.start();<br><br>    mServiceLooper = thread.getLooper();<br>    mServiceHandler = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceHandler</span>(mServiceLooper);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onStart</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Intent intent, <span class="hljs-type">int</span> startId)</span> &#123;<br>    <span class="hljs-type">Message</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> mServiceHandler.obtainMessage();<br>    msg.arg1 = startId; <span class="hljs-comment">// 这个是停止服务的依据</span><br>    msg.obj = intent;<br>    mServiceHandler.sendMessage(msg);<br>&#125;<br></code></pre></td></tr></table></figure><br>利用<code>ServiceHandler</code>来控制生命周期。onCreate方法中开启了一个<code>HandlerThread</code>来处理请求。<br>在<code>onStart</code>中获取到<code>startId</code>。在<code>ServiceHandler</code>中每次处理完一个命令都会调用<code>stopSelf(int startId)</code>方法来停止服务。<br>IntentService直到命令队列中的所有命令被执行完后才会停止服务。</p><h2 id="用法示例"><a href="#用法示例" class="headerlink" title="用法示例"></a>用法示例</h2><p>新建一个模拟计算的后台服务<code>CalIntentService</code>继承<code>IntentService</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 模拟计算的后台服务</span><br><span class="hljs-comment"> * Created by Rust on 2017/6/9.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CalIntentService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IntentService</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;rustApp&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">mStartId</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 一定要一个无参构造器</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CalIntentService</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>(<span class="hljs-string">&quot;cal_intent_service_name&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Creates an IntentService.  Invoked by your subclass&#x27;s constructor.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name Used to name the worker thread, important only for debugging.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CalIntentService</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onStart</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Intent intent, <span class="hljs-type">int</span> startId)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onStart(intent, startId);<br>        mStartId = startId;<br>        Log.d(TAG, <span class="hljs-string">&quot;[CalIntentService] onStart, startId=&quot;</span> + mStartId); <span class="hljs-comment">// 复写这个方法来看startId</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onDestroy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onDestroy(); <span class="hljs-comment">// 观察生命周期</span><br>        Log.d(TAG, <span class="hljs-string">&quot;[CalIntentService] onDestroy. StartId=&quot;</span> + mStartId);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onHandleIntent</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Intent intent)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != intent) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> intent.getStringExtra(<span class="hljs-string">&quot;name&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> intent.getStringExtra(<span class="hljs-string">&quot;msg&quot;</span>);<br>            Log.d(TAG, <span class="hljs-string">&quot;[CalIntentService] 收到 name:&quot;</span> + name + <span class="hljs-string">&quot;, msg:&quot;</span> + msg + <span class="hljs-string">&quot;, at &quot;</span><br>                    + Thread.currentThread().toString());<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>); <span class="hljs-comment">// 模拟耗时操作</span><br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        Log.d(TAG, <span class="hljs-string">&quot;[CalIntentService] 计算结束.  mStartId=&quot;</span> + mStartId);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></p><p>AndroidManifest中注册这个服务。目前只允许本App使用<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">service</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.rustfisher.service.CalIntentService&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:exported</span>=<span class="hljs-string">&quot;false&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure></p><p>Activity中启动这个服务<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">btn2.setOnClickListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">View</span>.OnClickListener() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View v)</span> &#123;<br>        <span class="hljs-type">Intent</span> <span class="hljs-variable">calIntent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(getApplicationContext(), CalIntentService.class);<br>        calIntent.putExtra(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;Rust&quot;</span>);<br>        calIntent.putExtra(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;Click event: &quot;</span> + mClickCount++);<br>        startService(calIntent);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure></p><p>在手机上运行，快速点击几次按钮，启动IntentService，logcat输出<br><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs inform7"><span class="hljs-comment">[CalIntentService]</span> onStart, startId=1<br><span class="hljs-comment">[CalIntentService]</span> 收到 name:Rust, msg:Click event: 0, at Thread<span class="hljs-comment">[IntentService<span class="hljs-comment">[cal_intent_service_name]</span>,5,main]</span><br><span class="hljs-comment">[CalIntentService]</span> onStart, startId=2<br><span class="hljs-comment">[CalIntentService]</span> onStart, startId=3<br><span class="hljs-comment">[CalIntentService]</span> onStart, startId=4<br><span class="hljs-comment">[CalIntentService]</span> 计算结束.  最新StartId=4<br><span class="hljs-comment">[CalIntentService]</span> 收到 name:Rust, msg:Click event: 1, at Thread<span class="hljs-comment">[IntentService<span class="hljs-comment">[cal_intent_service_name]</span>,5,main]</span><br><span class="hljs-comment">[CalIntentService]</span> 计算结束.  最新StartId=4<br><span class="hljs-comment">[CalIntentService]</span> 收到 name:Rust, msg:Click event: 2, at Thread<span class="hljs-comment">[IntentService<span class="hljs-comment">[cal_intent_service_name]</span>,5,main]</span><br><span class="hljs-comment">[CalIntentService]</span> 计算结束.  最新StartId=4<br><span class="hljs-comment">[CalIntentService]</span> 收到 name:Rust, msg:Click event: 3, at Thread<span class="hljs-comment">[IntentService<span class="hljs-comment">[cal_intent_service_name]</span>,5,main]</span><br><span class="hljs-comment">[CalIntentService]</span> 计算结束.  最新StartId=4<br><span class="hljs-comment">[CalIntentService]</span> onDestroy. StartId=4<br></code></pre></td></tr></table></figure></p><p>可以看出，先执行<code>onStart</code>，然后排队执行<code>onHandleIntent</code>。任务全部结束后自行停止。</p>]]></content>
    
    
    <categories>
      
      <category>Android_note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android_service</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android Handler，Looper 与 MessageQueue 使用与分析</title>
    <link href="/Android/Android-Handler_src_note/"/>
    <url>/Android/Android-Handler_src_note/</url>
    
    <content type="html"><![CDATA[<h2 id="Handler-简介"><a href="#Handler-简介" class="headerlink" title="Handler 简介"></a>Handler 简介</h2><p>一个Handler允许发送和处理Message，通过关联线程的 MessageQueue 执行 Runnable 对象。<br>每个Handler实例都和一个单独的线程及其消息队列绑定。<br>可以将一个任务切换到Handler所在的线程中去执行。一个用法就是子线程通过Handler更新UI。</p><p>Handler主要有2种用法：</p><ul><li>做出计划，在未来某个时间点执行消息和Runnable</li><li>线程调度，在其他线程规划并执行任务</li></ul><p>要使用好Handler，需要了解与其相关的 <code>MessageQueue</code>， <code>Message</code>和<code>Looper</code>；不能孤立的看Handler。<br>Handler就像一个操作者（或者像一个对开发者开放的窗口），利用<code>MessageQueue</code>和<code>Looper</code>来实现任务调度和处理。  </p><p><strong>Handler持有 Looper 的实例，直接持有looper的消息队列。</strong></p><h3 id="属性与构造器"><a href="#属性与构造器" class="headerlink" title="属性与构造器"></a>属性与构造器</h3><p>Handler类中持有的实例，持有looper，messageQueue等等。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> Looper mLooper; <span class="hljs-comment">// Handler持有Looper实例</span><br><span class="hljs-keyword">final</span> MessageQueue mQueue; <span class="hljs-comment">// Handler持有消息队列</span><br><span class="hljs-keyword">final</span> Callback mCallback;<br></code></pre></td></tr></table></figure></p><p>在Handler的构造器中，我们可以看到Handler获取了Looper的消息队列。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Handler</span><span class="hljs-params">(Callback callback, <span class="hljs-type">boolean</span> async)</span> &#123;<br>    <span class="hljs-comment">// 处理异常</span><br>    mLooper = Looper.myLooper();<br>    <span class="hljs-comment">// 处理特殊情况...</span><br>    mQueue = mLooper.mQueue; <span class="hljs-comment">// 获取的是Looper的消息队列</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Handler</span><span class="hljs-params">(Looper looper, Callback callback, <span class="hljs-type">boolean</span> async)</span> &#123;<br>    mLooper = looper;<br>    mQueue = looper.mQueue; <span class="hljs-comment">// 获取的是Looper的消息队列</span><br>    mCallback = callback;<br>    mAsynchronous = async;<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="Handler的使用方法"><a href="#Handler的使用方法" class="headerlink" title="Handler的使用方法"></a>Handler的使用方法</h3><p>Handler发送和处理消息的几个方法</p><ul><li>void handleMessage( Message  msg):处理消息的方法，该方法通常被重写。</li><li>final boolean hasMessage(int  what):检查消息队列中是否包含有what属性为指定值的消息</li><li>final boolean hasMessage(int what ,Object object) :检查消息队列中是否包含有what好object属性指定值的消息</li><li>sendEmptyMessage(int what):发送空消息</li><li>final Boolean send EmptyMessageDelayed(int what ,long delayMillis):指定多少毫秒发送空消息</li><li>final  boolean sendMessage(Message msg):立即发送消息</li><li>final boolean sendMessageDelayed(Message msg,long delayMillis):多少秒之后发送消息</li></ul><h4 id="Handler-sendEmptyMessage-int-what-流程解析"><a href="#Handler-sendEmptyMessage-int-what-流程解析" class="headerlink" title="Handler.sendEmptyMessage(int what) 流程解析"></a>Handler.sendEmptyMessage(int what) 流程解析</h4><p>获取一个Message实例，并立即将Message实例添加到消息队列中去。<br>简要流程如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 立刻发送一个empty消息</span><br>sendEmptyMessage(<span class="hljs-type">int</span> what) <br><br><span class="hljs-comment">// 发送延迟为0的empty消息  这个方法里通过Message.obtain()获取一个Message实例</span><br>sendEmptyMessageDelayed(what, <span class="hljs-number">0</span>) <br><br><span class="hljs-comment">// 计算消息的计划执行时间，进入下一阶段</span><br>sendMessageDelayed(Message msg, <span class="hljs-type">long</span> delayMillis)<br><br><span class="hljs-comment">// 在这里判断队列是否为null  若为null则直接返回false</span><br>sendMessageAtTime(Message msg, <span class="hljs-type">long</span> uptimeMillis)<br><br><span class="hljs-comment">// 将消息添加到队列中</span><br>enqueueMessage(MessageQueue queue, Message msg, <span class="hljs-type">long</span> uptimeMillis)<br><br><span class="hljs-comment">// 接下来是MessageQueue添加消息</span><br><span class="hljs-comment">// MessageQueue.java</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">enqueueMessage</span><span class="hljs-params">(Message msg, <span class="hljs-type">long</span> when)</span><br></code></pre></td></tr></table></figure><br>可以看到，最后是把message添加到了messageQueue中。</p><h4 id="Handler-取消任务"><a href="#Handler-取消任务" class="headerlink" title="Handler 取消任务"></a>Handler 取消任务</h4><p>要取消任务时，调用下面这个方法<code>removeCallbacksAndMessages(Object token)</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeCallbacksAndMessages</span><span class="hljs-params">(Object token)</span> &#123;<br>    mQueue.removeCallbacksAndMessages(<span class="hljs-built_in">this</span>, token);<br>&#125;<br></code></pre></td></tr></table></figure><br>通过调用<code>Message.recycleUnchecked()</code>方法，取消掉与此Handler相关联的Message。</p><p>相关的消息队列会执行取消指令<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">removeCallbacksAndMessages</span><span class="hljs-params">(Handler h, Object object)</span><br></code></pre></td></tr></table></figure></p><h3 id="消息驱动与Handler"><a href="#消息驱动与Handler" class="headerlink" title="消息驱动与Handler"></a>消息驱动与Handler</h3><p>Android是消息驱动的，实现消息驱动有几个要素</p><ul><li>消息的表示：Message</li><li>消息队列：MessageQueue</li><li>消息循环，用于循环取出消息进行处理：Looper</li><li>消息处理，消息循环从消息队列中取出消息后要对消息进行处理：Handler</li></ul><h4 id="初始化消息队列"><a href="#初始化消息队列" class="headerlink" title="初始化消息队列"></a>初始化消息队列</h4><p>在Looper构造器中即创建了一个MessageQueue，<strong>Looper持有消息队列的实例</strong>。</p><h4 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h4><p>通过Looper.prepare初始化好消息队列后就可以调用Looper.loop进入消息循环了，然后我们就可以向消息队列发送消息，<br>消息循环就会取出消息进行处理，在看消息处理之前，先看一下消息是怎么被添加到消息队列的。</p><h4 id="消息循环"><a href="#消息循环" class="headerlink" title="消息循环"></a>消息循环</h4><p>Java层的消息都保存在了Java层MessageQueue的成员mMessages中，Native层的消息都保存在了Native Looper的<br>mMessageEnvelopes中，这就可以说有两个消息队列，而且都是按时间排列的。</p><h2 id="Message-和-MessageQueue-简介"><a href="#Message-和-MessageQueue-简介" class="headerlink" title="Message 和 MessageQueue 简介"></a>Message 和 MessageQueue 简介</h2><p>与Handler工作的几个组件Looper、MessageQueue各自的作用：</p><ul><li>1.Handler：它把消息发送给Looper管理的MessageQueue,并负责处理Looper分给它的消息</li><li>2.MessageQueue：管理Message，由Looper管理</li><li>3.Looper：每个线程只有一个Looper，比如UI线程中，系统会默认的初始化一个Looper对象，它负责管理MessageQueue，不断的从MessageQueue中取消息，并将相对应的消息分给Handler处理。</li></ul><h3 id="Message"><a href="#Message" class="headerlink" title="Message"></a>Message</h3><p>Message 属于被传递，被使用的角色。Message 是包含描述和任意数据对象的“消息”，能被发送给<code>Handler</code>。Message包含2个int属性和一个额外的对象。<br>虽然构造器是公开的，但获取实例最好的办法是调用<code>Message.obtain()</code>或<code>Handler.obtainMessage()</code>。这样可以从他们的可回收对象池中获取到消息实例。一般来说，每个Message实例持有一个Handler。</p><p>Message部分属性值<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*package*/</span> Handler target; <span class="hljs-comment">// 指定的Handler</span><br><br><span class="hljs-comment">/*package*/</span> Runnable callback;<br><br><span class="hljs-comment">// 可以组成链表</span><br><span class="hljs-comment">// sometimes we store linked lists of these things</span><br><span class="hljs-comment">/*package*/</span> Message next;<br></code></pre></td></tr></table></figure><br>从这里也不难看出，每个Message都持有Handler实例。如果Handler持有Activity的引用，Activity onDestroy后Message却仍然在队列中，因为Handler与Activity的强关联，会造成Activity无法被GC回收，导致内存泄露。<br>因此在Activity onDestroy 时，与Activity关联的Handler应清除它的队列由Activity产生的任务，避免内存泄露。</p><p>重置自身的方法，将属性全部重置<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">recycle</span><span class="hljs-params">()</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">recycleUnchecked</span><span class="hljs-params">()</span><br></code></pre></td></tr></table></figure></p><p>获取Message实例的常用方法，得到的实例与传入的Handler绑定<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Same as &#123;<span class="hljs-doctag">@link</span> #obtain()&#125;, but sets the value for the &lt;em&gt;target&lt;/em&gt; member on the Message returned.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> h  Handler to assign to the returned Message object&#x27;s &lt;em&gt;target&lt;/em&gt; member.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> A Message object from the global pool.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Message <span class="hljs-title function_">obtain</span><span class="hljs-params">(Handler h)</span> &#123;<br>    <span class="hljs-type">Message</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> obtain();<br>    m.target = h;<br><br>    <span class="hljs-keyword">return</span> m;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>将消息发送给Handler<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Sends this Message to the Handler specified by &#123;<span class="hljs-doctag">@link</span> #getTarget&#125;.</span><br><span class="hljs-comment"> * Throws a null pointer exception if this field has not been set.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendToTarget</span><span class="hljs-params">()</span> &#123;<br>    target.sendMessage(<span class="hljs-built_in">this</span>); <span class="hljs-comment">// target 就是与消息绑定的Handler</span><br>&#125;<br></code></pre></td></tr></table></figure><br>调用这个方法后，Handler会将消息添加进它的消息队列<code>MessageQueue</code>中。</p><h3 id="MessageQueue"><a href="#MessageQueue" class="headerlink" title="MessageQueue"></a>MessageQueue</h3><p>持有一列可以被Looper分发的Message。一般来说由Handler将Message添加到MessageQueue中。<br>获取当前线程的MessageQueue方法是<code>Looper.myQueue()</code>。通过<code>Looper.getMainLooper()</code>获取到主线程的looper。</p><h2 id="Looper-简介"><a href="#Looper-简介" class="headerlink" title="Looper 简介"></a>Looper 简介</h2><p>Looper与MessageQueue紧密关联。在一个线程中运行的消息循环。线程默认情况下是没有与之管理的消息循环的。<br>要创建一个消息循环，在线程中调用prepare，然后调用loop。即开始处理消息，直到循环停止。大多数情况下通过Handler来与消息循环互动。</p><p>Handler与Looper在线程中交互的典型例子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">LooperThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">public</span> Handler mHandler;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        Looper.prepare(); <span class="hljs-comment">// 为当前线程准备一个Looper</span><br>        <span class="hljs-comment">// 创建Handler实例，Handler会获取当前线程的Looper</span><br>        <span class="hljs-comment">// 如果实例化Handler时当前线程没有Looper，会报异常 RuntimeException</span><br>        mHandler = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Handler</span>() &#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleMessage</span><span class="hljs-params">(Message msg)</span> &#123;<br>                <span class="hljs-comment">// process incoming messages here</span><br>            &#125;<br>        &#125;;<br>        Looper.loop(); <span class="hljs-comment">// Looper开始运行</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>调用了<code>Looper.loop()</code>之后，looper开始运行。当looper的messageQueue中没有消息时，相关的线程处于什么状态呢？<br>查看looper的源码，看到loop方法里面有一个死循环。queue.next()方法是可能会阻塞线程的。如果从queue中获取到null，则表明此消息队列正在退出。此时looper的死循环也会被返回。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (;;) &#123;<br>    <span class="hljs-type">Message</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> queue.next(); <span class="hljs-comment">// might block</span><br>    <span class="hljs-keyword">if</span> (msg == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// No message indicates that the message queue is quitting.</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><br>调用looper的quit方法，实际上调用了<code>mQueue.quit(false)</code>。消息队列退出后，looper的loop死循环也被退出了。</p><p>进入MessageQueue的next方法去看，发现里面也有一个死循环。没有消息时，这个死循环会阻塞在<code>nativePollOnce</code>这个方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Message <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-comment">// ...</span><br>        nativePollOnce(ptr, nextPollTimeoutMillis);<br>        <span class="hljs-comment">// 处理message对象</span><br></code></pre></td></tr></table></figure></p><p>我们知道Thread有New（新建，未运行），RUNNABLE（正常运行），BLOCKED，WAITING（线程拥有了某个锁之后, 调用了他的wait方法, 等待其他线程/锁拥有者调用 notify / notifyAll），TIMED_WAITING，TERMINATED（已经执行完毕）这几种状态。消息队列中没有消息，在nativePollOnce方法中“等待”。相关线程则处于RUNNABLE状态。</p><p>参考：<a href="https://stackoverflow.com/questions/38818642/android-what-is-message-queue-native-poll-once-in-android">https://stackoverflow.com/questions/38818642/android-what-is-message-queue-native-poll-once-in-android</a></p><h3 id="Looper中的属性"><a href="#Looper中的属性" class="headerlink" title="Looper中的属性"></a>Looper中的属性</h3><p>Looper持有MessageQueue；唯一的主线程Looper <code>sMainLooper</code>；Looper当前线程 <code>mThread</code>；<br>存储Looper的<code>sThreadLocal</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// sThreadLocal.get() will return null unless you&#x27;ve called prepare().</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;Looper&gt; sThreadLocal = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;Looper&gt;();<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Looper sMainLooper;  <span class="hljs-comment">// guarded by Looper.class</span><br><br><span class="hljs-keyword">final</span> MessageQueue mQueue; <span class="hljs-comment">// Handler会获取这个消息队列实例（参考Handler构造器）</span><br><span class="hljs-keyword">final</span> Thread mThread; <span class="hljs-comment">// Looper当前线程</span><br></code></pre></td></tr></table></figure></p><p>ThreadLocal并不是线程，它的作用是可以在每个线程中存储数据。</p><h3 id="Looper-方法"><a href="#Looper-方法" class="headerlink" title="Looper 方法"></a>Looper 方法</h3><p>准备方法，将当前线程初始化为Looper。退出时要调用quit<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">prepare</span><span class="hljs-params">()</span> &#123;<br>    prepare(<span class="hljs-literal">true</span>);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">prepare</span><span class="hljs-params">(<span class="hljs-type">boolean</span> quitAllowed)</span> &#123;<br>    <span class="hljs-keyword">if</span> (sThreadLocal.get() != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Only one Looper may be created per thread&quot;</span>);<br>    &#125;<br>    sThreadLocal.set(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Looper</span>(quitAllowed)); <span class="hljs-comment">// Looper实例存入了sThreadLocal</span><br>&#125;<br></code></pre></td></tr></table></figure></p><p><code>prepare</code>方法新建 Looper 并存入 sThreadLocal <code>sThreadLocal.set(new Looper(quitAllowed))</code><br><code>ThreadLocal&lt;T&gt;</code>类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(T value)</span> &#123;<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>    <span class="hljs-type">ThreadLocalMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> getMap(t);<br>    <span class="hljs-keyword">if</span> (map != <span class="hljs-literal">null</span>)<br>        map.set(<span class="hljs-built_in">this</span>, value);<br>    <span class="hljs-keyword">else</span><br>        createMap(t, value);<br>&#125;<br><br><span class="hljs-keyword">public</span> T <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>    <span class="hljs-type">ThreadLocalMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> getMap(t);<br>    <span class="hljs-keyword">if</span> (map != <span class="hljs-literal">null</span>) &#123;<br>        ThreadLocalMap.<span class="hljs-type">Entry</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> map.getEntry(<span class="hljs-built_in">this</span>);<br>        <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">return</span> (T)e.value;<br>    &#125;<br>    <span class="hljs-keyword">return</span> setInitialValue();<br>&#125;<br></code></pre></td></tr></table></figure></p><p>当要获取Looper对象时，从<code>sThreadLocal</code>获取<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取与当前线程关联的Looper，返回可以为null</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-meta">@Nullable</span> Looper <span class="hljs-title function_">myLooper</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> sThreadLocal.get();<br>&#125;<br></code></pre></td></tr></table></figure></p><p>在当前线程运行一个消息队列。结束后要调用退出方法<code>quit()</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">()</span><br></code></pre></td></tr></table></figure></p><p>准备主线程Looper。Android环境会创建主线程Looper，开发者不应该自己调用这个方法。<br>UI线程，它就是ActivityThread，ActivityThread被创建时就会初始化Looper，这也是在主线程中默认可以使用Handler的原因。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">prepareMainLooper</span><span class="hljs-params">()</span> &#123;<br>    prepare(<span class="hljs-literal">false</span>); <span class="hljs-comment">// 这里表示了主线程Looper不能由开发者来退出</span><br>    <span class="hljs-keyword">synchronized</span> (Looper.class) &#123;<br>        <span class="hljs-keyword">if</span> (sMainLooper != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;The main Looper has already been prepared.&quot;</span>);<br>        &#125;<br>        sMainLooper = myLooper();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>获取主线程的Looper。我们开发者想操作主线程时，可调用此方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Looper <span class="hljs-title function_">getMainLooper</span><span class="hljs-params">()</span><br></code></pre></td></tr></table></figure></p><h3 id="同一个Thread的不同Handler"><a href="#同一个Thread的不同Handler" class="headerlink" title="同一个Thread的不同Handler"></a>同一个Thread的不同Handler</h3><p>与UI线程对应的MainLooper，可以关联多个Handler。<br>多个Handler之间的计划任务不会互相影响。比如有2个关联了UI线程的handler。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">Handler mMainHandler1;<br>Handler mMainHandler2;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initUtils</span><span class="hljs-params">()</span> &#123;<br>    mMainHandler1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Handler</span>(Looper.getMainLooper());<br>    mMainHandler2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Handler</span>(Looper.getMainLooper());<br>    Log.d(TAG, <span class="hljs-string">&quot;mMainHandler1 post 任务&quot;</span>);<br>    mMainHandler1.postDelayed(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            Log.d(TAG, <span class="hljs-string">&quot;mMainHandler1的演示任务已执行&quot;</span>);<br>        &#125;<br>    &#125;, <span class="hljs-number">1500</span>);<br>    mMainHandler2.removeCallbacksAndMessages(<span class="hljs-literal">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure><br>mMainHandler2取消它的任务并不会影响mMainHandler1。</p>]]></content>
    
    
    <categories>
      
      <category>Android_note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android源码</tag>
      
      <tag>Handler</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 操作 MySQL</title>
    <link href="/Python/Python-mysql_use/"/>
    <url>/Python/Python-mysql_use/</url>
    
    <content type="html"><![CDATA[<p>本文链接<a href="https://rustfisher.com/2017/05/25/Python/Python-mysql_use/">Python 操作 MySQL</a></p><p>开发环境与配置</p><ul><li>win_x64</li><li>Ubuntu14.04</li><li>Python3.x</li></ul><h3 id="pip安装pymysql模块"><a href="#pip安装pymysql模块" class="headerlink" title="pip安装pymysql模块"></a>pip安装pymysql模块</h3><p>直接使用pip安装 <code>pip install pymysql</code><br>win64上直接在cmd中执行</p><h3 id="连接本地数据库"><a href="#连接本地数据库" class="headerlink" title="连接本地数据库"></a>连接本地数据库</h3><p>使用模块<code>pymysql</code>连接数据库<br>本地数据库相关配置请参阅： </p><ul><li><a href="https://rustfisher.com/2019/02/26/Database/MySQL-install_and_config_Mac/">https://rustfisher.com/2019/02/26/Database/MySQL-install_and_config_Mac/</a></li><li><a href="https://rustfisher.com/2017/02/25/Database/MySQL-install_and_config_Windows/">https://rustfisher.com/2017/02/25/Database/MySQL-install_and_config_Windows/</a></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># coding=utf-8</span><br><span class="hljs-keyword">import</span> pymysql<br><br><span class="hljs-comment"># 连接本地数据库</span><br>conn = pymysql.connect(host=<span class="hljs-string">&#x27;localhost&#x27;</span>, port=<span class="hljs-number">3306</span>, user=<span class="hljs-string">&#x27;root&#x27;</span>, passwd=<span class="hljs-string">&#x27;yourpwd&#x27;</span>, db=<span class="hljs-string">&#x27;samp_db1&#x27;</span>, charset=<span class="hljs-string">&#x27;utf8&#x27;</span>)<br>cursor = conn.cursor()<br>cursor.execute(<span class="hljs-string">&#x27;select * from bigstu&#x27;</span>)<br><span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> cursor.fetchall():<br>    <span class="hljs-built_in">print</span>(row)<br><br><span class="hljs-comment"># 查</span><br>cursor.execute(<span class="hljs-string">&#x27;select id, name from bigstu where age &gt; 22&#x27;</span>)<br><span class="hljs-keyword">for</span> res <span class="hljs-keyword">in</span> cursor.fetchall():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(res[<span class="hljs-number">0</span>]) + <span class="hljs-string">&quot;, &quot;</span> + res[<span class="hljs-number">1</span>])<br><br>cursor.close()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-- end --&#x27;</span>)<br></code></pre></td></tr></table></figure><p>输出：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">24</span>, datetime.<span class="hljs-built_in">date</span>(<span class="hljs-number">2017</span>, <span class="hljs-number">3</span>, <span class="hljs-number">29</span>), <span class="hljs-string">&#x27;13666665555&#x27;</span>)<br>(<span class="hljs-number">6</span>, <span class="hljs-string">&#x27;小刚&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">23</span>, datetime.<span class="hljs-built_in">date</span>(<span class="hljs-number">2017</span>, <span class="hljs-number">3</span>, <span class="hljs-number">11</span>), <span class="hljs-string">&#x27;778899888&#x27;</span>)<br>(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;小霞&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">20</span>, datetime.<span class="hljs-built_in">date</span>(<span class="hljs-number">2017</span>, <span class="hljs-number">3</span>, <span class="hljs-number">13</span>), <span class="hljs-string">&#x27;13712345678&#x27;</span>)<br>(<span class="hljs-number">12</span>, <span class="hljs-string">&#x27;小智&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">21</span>, datetime.<span class="hljs-built_in">date</span>(<span class="hljs-number">2017</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>), <span class="hljs-string">&#x27;13787654321&#x27;</span>)<br><span class="hljs-number">1</span>, 张三<br><span class="hljs-number">6</span>, 小刚<br><span class="hljs-comment">-- end --</span><br></code></pre></td></tr></table></figure></p><p>可以直接执行sql语句。获得的结果是元组。</p><p>sql相似条件查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> anindex.subject_basic_table <span class="hljs-keyword">where</span> season_id <span class="hljs-keyword">having</span> <span class="hljs-string">&#x27;2018&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><h4 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h4><p>插入一条数据，接上面的代码</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py">insertSql = <span class="hljs-string">&quot;insert into bigstu (name, sex, age,  mobile) values (&#x27;%s&#x27;,&#x27;%s&#x27;,%d,&#x27;%s&#x27;) &quot;</span><br>xiuji = (<span class="hljs-string">&#x27;秀吉&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">15</span>, <span class="hljs-string">&#x27;13400001111&#x27;</span>)<br>cursor.execute(insertSql % xiuji)<br>conn.commit() <span class="hljs-comment"># 别忘了提交</span><br></code></pre></td></tr></table></figure><h4 id="添加列"><a href="#添加列" class="headerlink" title="添加列"></a>添加列</h4><p>在mobile后面添加一列cash<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py">addCo = <span class="hljs-string">&quot;alter table bigstu add cash int after mobile&quot;</span><br>cursor.execute(addCo)<br></code></pre></td></tr></table></figure></p><p>如果要设置默认值<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py">addCo = <span class="hljs-string">&quot;alter table bigstu add cash int default 0 after mobile&quot;</span><br>cursor.execute(addCo)<br></code></pre></td></tr></table></figure></p><h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><p>删除 name=秀吉 的数据<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py">deleteSql = <span class="hljs-string">&quot;delete from bigstu where name = &#x27;%s&#x27;&quot;</span><br>cursor.execute(deleteSql % <span class="hljs-string">&#x27;秀吉&#x27;</span>)<br></code></pre></td></tr></table></figure></p><h4 id="删除列"><a href="#删除列" class="headerlink" title="删除列"></a>删除列</h4><p>删除cash列<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py">dropCo = <span class="hljs-string">&quot;alter table bigstu drop cash&quot;</span><br>cursor.execute(dropCo)<br></code></pre></td></tr></table></figure></p><h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3><h4 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h4><p>更新符合条件的数据</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py">updateSql = <span class="hljs-string">&quot;update bigstu set sex = &#x27;%s&#x27; where name = &#x27;%s&#x27;&quot;</span><br>updateXiuji = (<span class="hljs-string">&#x27;秀吉&#x27;</span>, <span class="hljs-string">&#x27;秀吉&#x27;</span>) <span class="hljs-comment"># 秀吉的性别是秀吉</span><br>cursor.execute(updateSql % updateXiuji)<br>conn.commit()<br></code></pre></td></tr></table></figure><h3 id="事物处理"><a href="#事物处理" class="headerlink" title="事物处理"></a>事物处理</h3><p>给某个记录的cash增加<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py">table = <span class="hljs-string">&quot;bigstu&quot;</span><br>addCash = <span class="hljs-string">&quot;update &quot;</span> + table + <span class="hljs-string">&quot; set cash = cash + &#x27;%d&#x27; where name = &#x27;%s&#x27;&quot;</span><br>lucky = (<span class="hljs-number">1000</span>, <span class="hljs-string">&quot;秀吉&quot;</span>)<br><br><span class="hljs-keyword">try</span>:<br>    cursor.execute(addCash % lucky)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    conn.rollback()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;加钱失败了&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    conn.commit()<br></code></pre></td></tr></table></figure></p><p>直接执行SQL语句，十分方便</p><h2 id="代码片段"><a href="#代码片段" class="headerlink" title="代码片段"></a>代码片段</h2><h3 id="给数据库添加列"><a href="#给数据库添加列" class="headerlink" title="给数据库添加列"></a>给数据库添加列</h3><p>从json中读取需要添加的列名，获取当前2个表中所有的列名<br>整理得出需要插入的列名，然后将列插入到相应的表中</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> pymysql<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> secureUtils<br><br>mapping_keys = json.load(<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;key_mapping_db.json&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>))<br>db_keys = []  <span class="hljs-comment"># json中所有的key</span><br><br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> mapping_keys.values():<br>    db_keys.append(k)<br><br>conn = pymysql.connect(host=<span class="hljs-string">&#x27;localhost&#x27;</span>, port=<span class="hljs-number">3306</span>, user=<span class="hljs-string">&#x27;root&#x27;</span>,<br>                       passwd=<span class="hljs-string">&#x27;*****&#x27;</span>, db=<span class="hljs-string">&#x27;db_name&#x27;</span>, charset=<span class="hljs-string">&#x27;utf8&#x27;</span>)<br><br>cursor = conn.cursor()<br>table_main = <span class="hljs-string">&quot;table_main&quot;</span><br>main_table_keys = []  <span class="hljs-comment"># 主表的列名</span><br>cursor.execute(<span class="hljs-string">&quot;show columns from &quot;</span> + table_main)<br><span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> cursor.fetchall():<br>    main_table_keys.append(row[<span class="hljs-number">0</span>])<br><br>staff_table_keys = []<br>cursor.execute(<span class="hljs-string">&quot;show columns from table_second&quot;</span>)<br><span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> cursor.fetchall():<br>    staff_table_keys.append(row[<span class="hljs-number">0</span>])<br><br>need_to_insert_keys = []<br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> db_keys:<br>    <span class="hljs-keyword">if</span> k <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> staff_table_keys <span class="hljs-keyword">and</span> k <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> main_table_keys <span class="hljs-keyword">and</span> k <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> need_to_insert_keys:<br>        need_to_insert_keys.append(k)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;need to insert &quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(need_to_insert_keys)))<br><span class="hljs-built_in">print</span>(need_to_insert_keys)<br><span class="hljs-keyword">for</span> kn <span class="hljs-keyword">in</span> need_to_insert_keys:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;add key to db &quot;</span> + kn)<br>    cursor.execute(<span class="hljs-string">&quot;alter table staff_table add &quot;</span> + kn +<span class="hljs-string">&quot; text&quot;</span>)<br><br>conn.close()<br></code></pre></td></tr></table></figure><h3 id="将字段字符改变"><a href="#将字段字符改变" class="headerlink" title="将字段字符改变"></a>将字段字符改变</h3><p>这里将main_table_keys中的所有字段改为utf8<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># change column character set to utf8</span><br><span class="hljs-keyword">for</span> co <span class="hljs-keyword">in</span> main_table_keys:<br>    change_sql = <span class="hljs-string">&quot;alter table &quot;</span> + table_main + <span class="hljs-string">&quot; modify &quot;</span> + co + <span class="hljs-string">&quot; text character set utf8&quot;</span><br>    <span class="hljs-built_in">print</span>(change_sql)<br>    cursor.execute(change_sql)<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python3 Dictionary与JSON</title>
    <link href="/Python/Python-dictionary-JSON-file/"/>
    <url>/Python/Python-dictionary-JSON-file/</url>
    
    <content type="html"><![CDATA[<h2 id="JSON与Dictionary简介"><a href="#JSON与Dictionary简介" class="headerlink" title="JSON与Dictionary简介"></a>JSON与Dictionary简介</h2><ul><li>Python3</li><li>PyCharm CE</li></ul><h3 id="JSON简介"><a href="#JSON简介" class="headerlink" title="JSON简介"></a>JSON简介</h3><p>JSON(JavaScript Object Notation)是一种轻量级的数据交换格式。<br>它是一种<strong>文本格式</strong>。它的结构主要由键值对来构成。<br>一个键（key）对应一个值（value）。最外围用大括号<code>&#123; &#125;</code>包围起来。<br>例如<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;firstName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Rust&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;lastName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Fisher&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></p><p>大括号括起来的叫做<strong>对象结构</strong>。</p><p>JSON里也可以放数组。用中括号<code>[ ]</code>括起来。叫做<strong>数组结构</strong>。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;desc&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;这个是一个简单的例子&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;userInfo&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;firstName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Rust&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;lastName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Fisher&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;books&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;Python入门&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;Python进阶&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;数据分析&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;可视化&quot;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></p><p>对象结构和数组结构可以同时存在，只要满足键值对的要求即可。</p><p>最外层也可以是中括号括起来的，里面存放着多个对象。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;firstName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Tom&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;lastName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Hanks&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;movies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;Cast Away&quot;</span><span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;userInfo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;firstName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Rust&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;lastName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Fisher&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;books&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;Python入门&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Python进阶&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;desc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;可以直接添加一个key-value进去&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure></p><h3 id="Python的Dictionary（字典）简介"><a href="#Python的Dictionary（字典）简介" class="headerlink" title="Python的Dictionary（字典）简介"></a>Python的Dictionary（字典）简介</h3><p>Dictionary（以下简称为dict或字典）是一种键值对数据结构。<br>有点像Java里的Map和Set。</p><p>初始化一个dict可以直接用大括号。里面写上key和value。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">use_dict</span>():<br>    user_info = &#123;<span class="hljs-string">&#x27;firstName&#x27;</span>: <span class="hljs-string">&#x27;Rust&#x27;</span>, <span class="hljs-string">&#x27;lastName&#x27;</span>: <span class="hljs-string">&#x27;Fisher&#x27;</span>&#125;<br>    books = [<span class="hljs-string">&#x27;Python入门&#x27;</span>]<br>    books.append(<span class="hljs-string">&#x27;Python进阶&#x27;</span>)<br>    result = &#123;<span class="hljs-string">&#x27;userInfo&#x27;</span>: user_info, <span class="hljs-string">&#x27;books&#x27;</span>: books&#125;<br>    result[<span class="hljs-string">&#x27;desc&#x27;</span>] = <span class="hljs-string">&#x27;可以直接添加一个key-value进去&#x27;</span><br>    <span class="hljs-built_in">print</span>(result)<br><br><span class="hljs-comment"># 运行结果</span><br><span class="hljs-comment"># &#123;&#x27;userInfo&#x27;: &#123;&#x27;firstName&#x27;: &#x27;Rust&#x27;, &#x27;lastName&#x27;: &#x27;Fisher&#x27;&#125;, &#x27;books&#x27;: [&#x27;Python入门&#x27;, &#x27;Python进阶&#x27;], &#x27;desc&#x27;: &#x27;可以直接添加一个key-value进去&#x27;&#125;</span><br></code></pre></td></tr></table></figure><br>可以看到，dict和JSON有些类似。都是键值对，都有数组结构。<br>从Python语法上来看，dict操作起来也比较简单。找到确定的key后，可以直接赋值。</p><h2 id="Dictionary-转为JSON"><a href="#Dictionary-转为JSON" class="headerlink" title="Dictionary 转为JSON"></a>Dictionary 转为JSON</h2><p>Python中的dict是一种键值对的数据结构。<br>JSON是一种轻量级的数据交换格式，它是一种<strong>文本格式</strong>。<br>它们都是以键值对为基础。那么它们应该能相互转换。</p><p>将dict转为JSON，这里利用<code>json</code>包里提供的<code>dumps</code>方法。</p><p><code>dumps</code>方法将传入的dict转换成JSON格式的文本。</p><p>引入<code>json</code>包<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br></code></pre></td></tr></table></figure></p><p>我们写出了第一个dict转JSON的方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">to_json1</span>(<span class="hljs-params">input_dict</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;input:&#x27;</span>, input_dict)<br>    jsonTxt = json.dumps(input_dict)<br>    <span class="hljs-built_in">print</span>(jsonTxt)<br></code></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">input</span>: &#123;<span class="hljs-string">&#x27;userInfo&#x27;</span>: &#123;<span class="hljs-string">&#x27;firstName&#x27;</span>: <span class="hljs-string">&#x27;Rust&#x27;</span>, <span class="hljs-string">&#x27;lastName&#x27;</span>: <span class="hljs-string">&#x27;Fisher&#x27;</span>&#125;, <span class="hljs-string">&#x27;books&#x27;</span>: <span class="hljs-selector-attr">[<span class="hljs-string">&#x27;Python入门&#x27;</span>, <span class="hljs-string">&#x27;Python进阶&#x27;</span>]</span>, <span class="hljs-string">&#x27;desc&#x27;</span>: <span class="hljs-string">&#x27;可以直接添加一个key-value进去&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&quot;userInfo&quot;</span>: &#123;<span class="hljs-string">&quot;firstName&quot;</span>: <span class="hljs-string">&quot;Rust&quot;</span>, <span class="hljs-string">&quot;lastName&quot;</span>: <span class="hljs-string">&quot;Fisher&quot;</span>&#125;, <span class="hljs-string">&quot;books&quot;</span>: <span class="hljs-selector-attr">[<span class="hljs-string">&quot;Python\u5165\u95e8&quot;</span>, <span class="hljs-string">&quot;Python\u8fdb\u9636&quot;</span>]</span>, <span class="hljs-string">&quot;desc&quot;</span>: <span class="hljs-string">&quot;\u53ef\u4ee5\u76f4\u63a5\u6dfb\u52a0\u4e00\u4e2akey-value\u8fdb\u53bb&quot;</span>&#125;<br></code></pre></td></tr></table></figure></p><p>中文字符都变成了字母和数字符号。这有点出乎我们意料。</p><p>涉及到中文字符的时候，需要<code>dumps</code>方法里指定<code>ensure_ascii=False</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">to_json2</span>(<span class="hljs-params">input_dict</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;input:&#x27;</span>, input_dict)<br>    jsonTxt = json.dumps(input_dict, ensure_ascii=<span class="hljs-literal">False</span>)<br>    <span class="hljs-built_in">print</span>(jsonTxt)<br></code></pre></td></tr></table></figure><p>输出:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">input</span>: &#123;<span class="hljs-string">&#x27;userInfo&#x27;</span>: &#123;<span class="hljs-string">&#x27;firstName&#x27;</span>: <span class="hljs-string">&#x27;Rust&#x27;</span>, <span class="hljs-string">&#x27;lastName&#x27;</span>: <span class="hljs-string">&#x27;Fisher&#x27;</span>&#125;, <span class="hljs-string">&#x27;books&#x27;</span>: <span class="hljs-selector-attr">[<span class="hljs-string">&#x27;Python入门&#x27;</span>, <span class="hljs-string">&#x27;Python进阶&#x27;</span>]</span>, <span class="hljs-string">&#x27;desc&#x27;</span>: <span class="hljs-string">&#x27;可以直接添加一个key-value进去&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&quot;userInfo&quot;</span>: &#123;<span class="hljs-string">&quot;firstName&quot;</span>: <span class="hljs-string">&quot;Rust&quot;</span>, <span class="hljs-string">&quot;lastName&quot;</span>: <span class="hljs-string">&quot;Fisher&quot;</span>&#125;, <span class="hljs-string">&quot;books&quot;</span>: <span class="hljs-selector-attr">[<span class="hljs-string">&quot;Python入门&quot;</span>, <span class="hljs-string">&quot;Python进阶&quot;</span>]</span>, <span class="hljs-string">&quot;desc&quot;</span>: <span class="hljs-string">&quot;可以直接添加一个key-value进去&quot;</span>&#125;<br></code></pre></td></tr></table></figure><br>这样中文字符就ok了。</p><h2 id="list转为JSON"><a href="#list转为JSON" class="headerlink" title="list转为JSON"></a>list转为JSON</h2><p>list中存储着多个dict。可以直接把list转为JSON。</p><p>接上面的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">list_json_demo</span>():<br>    tom_hanks = &#123;<span class="hljs-string">&#x27;firstName&#x27;</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;lastName&#x27;</span>: <span class="hljs-string">&#x27;Hanks&#x27;</span>, <span class="hljs-string">&#x27;movies&#x27;</span>: [<span class="hljs-string">&#x27;Cast Away&#x27;</span>]&#125;<br>    info = use_dict()<br>    <span class="hljs-built_in">list</span> = [tom_hanks, info]<br>    jsonTxt = json.dumps(<span class="hljs-built_in">list</span>, ensure_ascii=<span class="hljs-literal">False</span>)<br>    <span class="hljs-built_in">print</span>(jsonTxt)<br>    <span class="hljs-keyword">return</span> jsonTxt<br></code></pre></td></tr></table></figure><p>输出的JSON部分：<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs prolog">[&#123;<span class="hljs-string">&quot;firstName&quot;</span>: <span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-string">&quot;lastName&quot;</span>: <span class="hljs-string">&quot;Hanks&quot;</span>, <span class="hljs-string">&quot;movies&quot;</span>: [<span class="hljs-string">&quot;Cast Away&quot;</span>]&#125;, &#123;<span class="hljs-string">&quot;userInfo&quot;</span>: &#123;<span class="hljs-string">&quot;firstName&quot;</span>: <span class="hljs-string">&quot;Rust&quot;</span>, <span class="hljs-string">&quot;lastName&quot;</span>: <span class="hljs-string">&quot;Fisher&quot;</span>&#125;, <span class="hljs-string">&quot;books&quot;</span>: [<span class="hljs-string">&quot;Python入门&quot;</span>, <span class="hljs-string">&quot;Python进阶&quot;</span>], <span class="hljs-string">&quot;desc&quot;</span>: <span class="hljs-string">&quot;可以直接添加一个key-value进去&quot;</span>&#125;]<br></code></pre></td></tr></table></figure></p><h2 id="读取JSON文本"><a href="#读取JSON文本" class="headerlink" title="读取JSON文本"></a>读取JSON文本</h2><p>用<code>json.loads</code>方法将输入的JSON文本转为对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">json_to_dict1</span>(<span class="hljs-params">jsonTxt</span>):<br>    obj1 = json.loads(jsonTxt)<br>    <span class="hljs-built_in">print</span>(obj1)<br></code></pre></td></tr></table></figure><p>得到的对象可能是数组或者是dict。</p><h3 id="读取JSON文件"><a href="#读取JSON文件" class="headerlink" title="读取JSON文件"></a>读取JSON文件</h3><p>先打开文件，用<code>json.load</code>方法，读取JSON内容<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(json_file_path) <span class="hljs-keyword">as</span> json_file:<br>    json_content = json.load(json_file) <span class="hljs-comment"># 读取出来的是dict</span><br>    <span class="hljs-comment"># ...</span><br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>pip 相关</title>
    <link href="/Python/Python-pip-solution/"/>
    <url>/Python/Python-pip-solution/</url>
    
    <content type="html"><![CDATA[<ul><li>Ubuntu 14.04</li></ul><h2 id="pip-使用国内镜像源"><a href="#pip-使用国内镜像源" class="headerlink" title="pip 使用国内镜像源"></a>pip 使用国内镜像源</h2><p>使用pip install 的时候总是出现read timeout 之类的错误</p><p>使用国内镜像  <code>https://pypi.tuna.tsinghua.edu.cn/simple</code><br>例如我要安装 scrapy<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">pip install -i https:<span class="hljs-regexp">//</span>pypi.tuna.tsinghua.edu.cn/simple scrapy<br></code></pre></td></tr></table></figure></p><p>添加源的配置</p><p>Linux下，修改 ~/.pip/pip.conf (没有就创建一个)， 修改 index-url至tuna，内容如下：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[global]</span><br><span class="hljs-attr">index-url</span> = https://pypi.tuna.tsinghua.edu.cn/simple<br></code></pre></td></tr></table></figure></p><p>windows下，直接在user目录中创建一个pip目录，如：C:\Users\xx\pip，新建文件pip.ini，内容如下<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[global]</span><br><span class="hljs-attr">index-url</span> = https://pypi.tuna.tsinghua.edu.cn/simple<br></code></pre></td></tr></table></figure></p><h2 id="pip-install-出错"><a href="#pip-install-出错" class="headerlink" title="pip install 出错"></a><code>pip install</code> 出错</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ pip install pycairo<br>Collecting pycairo<br>  Downloading https://files.pythonhosted.org/packages/e8/9d/c8be300fc6b1298559d37a071c3833b0b251e0fff334d2e4c408d5789162/pycairo-1.19.1.tar.gz (205kB)<br>    100% |████████████████████████████████| 215kB 644kB/s <br>Installing collected packages: pycairo<br>  Running setup.py install <span class="hljs-keyword">for</span> pycairo ... error<br>    Complete output from <span class="hljs-built_in">command</span> /Users/rustfisher/Desktop/intGo/studySR/venv/bin/python -u -c <span class="hljs-string">&quot;import setuptools, tokenize;__file__=&#x27;/private/var/folders/ds/b1cvbdm97dz7bynp0xzr3f7c0000gn/T/pip-install-jhvl5plj/pycairo/setup.py&#x27;;f=getattr(tokenize, &#x27;open&#x27;, open)(__file__);code=f.read().replace(&#x27;\r\n&#x27;, &#x27;\n&#x27;);f.close();exec(compile(code, __file__, &#x27;exec&#x27;))&quot;</span> install --record /private/var/folders/ds/b1cvbdm97dz7bynp0xzr3f7c0000gn/T/pip-record-dqg8zbp0/install-record.txt --single-version-externally-managed --compile --install-headers /Users/rustfisher/Desktop/intGo/studySR/venv/include/site/python3.7/pycairo:<br>    running install<br>    running build<br>    running build_py<br>    creating build<br>    creating build/lib.macosx-10.9-x86_64-3.7<br>    creating build/lib.macosx-10.9-x86_64-3.7/cairo<br>    copying cairo/__init__.py -&gt; build/lib.macosx-10.9-x86_64-3.7/cairo<br>    copying cairo/__init__.pyi -&gt; build/lib.macosx-10.9-x86_64-3.7/cairo<br>    copying cairo/py.typed -&gt; build/lib.macosx-10.9-x86_64-3.7/cairo<br>    running build_ext<br>    [Errno 20] Not a directory: <span class="hljs-string">&#x27;pkg-config&#x27;</span><br>    <br>    ----------------------------------------<br>Command <span class="hljs-string">&quot;/Users/rustfisher/Desktop/intGo/studySR/venv/bin/python -u -c &quot;</span>import setuptools, tokenize;__file__=<span class="hljs-string">&#x27;/private/var/folders/ds/b1cvbdm97dz7bynp0xzr3f7c0000gn/T/pip-install-jhvl5plj/pycairo/setup.py&#x27;</span>;f=getattr(tokenize, <span class="hljs-string">&#x27;open&#x27;</span>, open)(__file__);code=f.read().replace(<span class="hljs-string">&#x27;\r\n&#x27;</span>, <span class="hljs-string">&#x27;\n&#x27;</span>);f.close();<span class="hljs-built_in">exec</span>(compile(code, __file__, <span class="hljs-string">&#x27;exec&#x27;</span>))<span class="hljs-string">&quot; install --record /private/var/folders/ds/b1cvbdm97dz7bynp0xzr3f7c0000gn/T/pip-record-dqg8zbp0/install-record.txt --single-version-externally-managed --compile --install-headers /Users/rustfisher/Desktop/intGo/studySR/venv/include/site/python3.7/pycairo&quot;</span> failed with error code 1 <span class="hljs-keyword">in</span> /private/var/folders/ds/b1cvbdm97dz7bynp0xzr3f7c0000gn/T/pip-install-jhvl5plj/pycairo/<br>You are using pip version 10.0.1, however version 20.2.2 is available.<br>You should consider upgrading via the <span class="hljs-string">&#x27;pip install --upgrade pip&#x27;</span> <span class="hljs-built_in">command</span>.<br></code></pre></td></tr></table></figure><p>用brew安装<code>pkg-config</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"> $ brew install pkg-config<br>==&gt; Downloading https://mirrors.ustc.edu.cn/homebrew-bottles/bottles/pkg-config-0.29.2_3.mojave.bottle.tar.g<br><span class="hljs-comment">######################################################################## 100.0%</span><br>==&gt; Pouring pkg-config-0.29.2_3.mojave.bottle.tar.gz<br>🍺  /usr/local/Cellar/pkg-config/0.29.2_3: 11 files, 623.6KB<br></code></pre></td></tr></table></figure></p><p>然后再运行<code>pip install pycairo</code>。<br>出现错误</p><blockquote><p>Collecting pycairo<br>  Using cached pycairo-1.19.1.tar.gz (205 kB)<br>Using legacy setup.py install for pycairo, since package ‘wheel’ is not installed.<br>Installing collected packages: pycairo<br>    Running setup.py install for pycairo … error<br>    ERROR: Command errored out with exit status 1:<br>     command: /Library/Frameworks/Python.framework/Versions/3.7/bin/python3.7 -u -c ‘import sys, setuptools, tokenize; sys.argv[0] = ‘“‘“‘/private/var/folders/ds/b1cvbdm97dz7bynp0xzr3f7c0000gn/T/pip-install-_fvz20yx/pycairo/setup.py’”‘“‘; <strong>file</strong>=’”‘“‘/private/var/folders/ds/b1cvbdm97dz7bynp0xzr3f7c0000gn/T/pip-install-_fvz20yx/pycairo/setup.py’”‘“‘;f=getattr(tokenize, ‘“‘“‘open’”‘“‘, open)(<strong>file</strong>);code=f.read().replace(‘“‘“‘\r\n’”‘“‘, ‘“‘“‘\n’”‘“‘);f.close();exec(compile(code, <strong>file</strong>, ‘“‘“‘exec’”‘“‘))’ install –record /private/var/folders/ds/b1cvbdm97dz7bynp0xzr3f7c0000gn/T/pip-record-0xkj4in4/install-record.txt –single-version-externally-managed –compile –install-headers /Library/Frameworks/Python.framework/Versions/3.7/include/python3.7m/pycairo<br>         cwd: /private/var/folders/ds/b1cvbdm97dz7bynp0xzr3f7c0000gn/T/pip-install-_fvz20yx/pycairo/<br>    Complete output (15 lines):<br>    running install<br>    running build<br>    running build_py<br>    creating build<br>    creating build/lib.macosx-10.9-x86_64-3.7<br>    creating build/lib.macosx-10.9-x86_64-3.7/cairo<br>    copying cairo/<strong>init</strong>.py -&gt; build/lib.macosx-10.9-x86_64-3.7/cairo<br>    copying cairo/<strong>init</strong>.pyi -&gt; build/lib.macosx-10.9-x86_64-3.7/cairo<br>    copying cairo/py.typed -&gt; build/lib.macosx-10.9-x86_64-3.7/cairo<br>    running build_ext<br>    Package cairo was not found in the pkg-config search path.<br>    Perhaps you should add the directory containing `cairo.pc’<br>    to the PKG_CONFIG_PATH environment variable<br>    No package ‘cairo’ found</p></blockquote><pre><code class="hljs">Command &apos;[&apos;pkg-config&apos;, &apos;--print-errors&apos;, &apos;--exists&apos;, &apos;cairo &gt;= 1.13.1&apos;]&apos; returned non-zero exit status 1.----------------------------------------</code></pre><p>ERROR: Command errored out with exit status 1: /Library/Frameworks/Python.framework/Versions/3.7/bin/python3.7 -u -c ‘import sys, setuptools, tokenize; sys.argv[0] = ‘“‘“‘/private/var/folders/ds/b1cvbdm97dz7bynp0xzr3f7c0000gn/T/pip-install-_fvz20yx/pycairo/setup.py’”‘“‘; <strong>file</strong>=’”‘“‘/private/var/folders/ds/b1cvbdm97dz7bynp0xzr3f7c0000gn/T/pip-install-_fvz20yx/pycairo/setup.py’”‘“‘;f=getattr(tokenize, ‘“‘“‘open’”‘“‘, open)(<strong>file</strong>);code=f.read().replace(‘“‘“‘\r\n’”‘“‘, ‘“‘“‘\n’”‘“‘);f.close();exec(compile(code, <strong>file</strong>, ‘“‘“‘exec’”‘“‘))’ install –record /private/var/folders/ds/b1cvbdm97dz7bynp0xzr3f7c0000gn/T/pip-record-0xkj4in4/install-record.txt –single-version-externally-managed –compile –install-headers /Library/Frameworks/Python.framework/Versions/3.7/include/python3.7m/pycairo Check the logs for full command output.</p><p>执行<code>brew install cairo pkg-config freetype harfbuzz</code>，把这几个包安装一下。<br>然后再<code>pip install pycairo</code>，安装成功。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>适配器模式 Adapter Pattern - Java实现</title>
    <link href="/DesignPattern/Adapter-Pattern/"/>
    <url>/DesignPattern/Adapter-Pattern/</url>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>将一个类的接口变换成客户端锁期待的另一种接口，从而使原本因接口不匹配而无法工作在一起的两个类能够在一起工作。<br>也叫作变压器模式，亦称包装模式，但包装模式不止一个。<br>简单而言，适配器模式就是把一个接口或类转换成其他的接口或类。</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>优点：</p><ul><li>可以让没有任何关系的类在一起运行</li><li>增加了类的透明性</li><li>提高了类的复用度</li><li>灵活度好</li></ul><p>注意事项：在详细阶段不要考虑适配器模式，它主要是用来解决正在服役的项目问题</p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><h3 id="向已运行的系统添加新增的用户类型"><a href="#向已运行的系统添加新增的用户类型" class="headerlink" title="向已运行的系统添加新增的用户类型"></a>向已运行的系统添加新增的用户类型</h3><p>文件目录如下<br><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">adapter/<br>├── sadapter  <span class="hljs-comment">// 新增的适配器代码</span><br>│   ├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SecondUserAdapter</span>.</span></span>java<br>│   ├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SecondUserAddress</span>.</span></span>java<br>│   └── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SecondUser</span>.</span></span>java<br>├── stable    <span class="hljs-comment">// 已经在运行的代码，不可变</span><br>│   ├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">FirstUser</span>.</span></span>java<br>│   └── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">IFirstUser</span>.</span></span>java<br>├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TestAdapter</span>.</span></span>java <span class="hljs-comment">// 测试代码</span><br>└── updated   <span class="hljs-comment">// 第三方提供的接口，不可变</span><br>    ├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ISecondUserAddress</span>.</span></span>java<br>    └── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ISecondUser</span>.</span></span>java<br></code></pre></td></tr></table></figure></p><p>首先看已经在运行的部分 （stable）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IFirstUser</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">printInfo</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FirstUser</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IFirstUser</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String username;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">FirstUser</span><span class="hljs-params">(String username)</span> &#123;<br>        <span class="hljs-built_in">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printInfo</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-built_in">this</span>.username);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>再看按需求添加的部分 （updated）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ISecondUser</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">printUsername</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ISecondUserAddress</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">printAddress</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>为此新建的适配器 （sadapter）<br>分别新建2个类来实现接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecondUser</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ISecondUser</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String username;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SecondUser</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.username = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printUsername</span><span class="hljs-params">()</span> &#123;<br>        System.out.print(username + <span class="hljs-string">&quot; &quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecondUserAddress</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ISecondUserAddress</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String addr;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SecondUserAddress</span><span class="hljs-params">(String address)</span> &#123;<br>        <span class="hljs-built_in">this</span>.addr = address;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printAddress</span><span class="hljs-params">()</span> &#123;<br>        System.out.print(<span class="hljs-built_in">this</span>.addr);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>适配器持有这两个接口的引用，并实现原有的接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecondUserAdapter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IFirstUser</span> &#123;<br><br>    <span class="hljs-keyword">private</span> ISecondUser iSecondUser;<br>    <span class="hljs-keyword">private</span> ISecondUserAddress iSecondUserAddress;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SecondUserAdapter</span><span class="hljs-params">(ISecondUser iSecondUser, ISecondUserAddress iSecondUserAddress)</span> &#123;<br>        <span class="hljs-built_in">this</span>.iSecondUser = iSecondUser;<br>        <span class="hljs-built_in">this</span>.iSecondUserAddress = iSecondUserAddress;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printInfo</span><span class="hljs-params">()</span> &#123;<br>        iSecondUser.printUsername();<br>        iSecondUserAddress.printAddress();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>适配器构建完毕，测试代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">IFirstUser</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FirstUser</span>(<span class="hljs-string">&quot;User1&quot;</span>);<br>user1.printInfo();<br><span class="hljs-type">SecondUserAdapter</span> <span class="hljs-variable">userAdapter</span> <span class="hljs-operator">=</span> <br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecondUserAdapter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SecondUser</span>(<span class="hljs-string">&quot;SUser2&quot;</span>),<span class="hljs-keyword">new</span> <span class="hljs-title class_">SecondUserAddress</span>(<span class="hljs-string">&quot;5 street&quot;</span>));<br>userAdapter.printInfo();<br></code></pre></td></tr></table></figure><br>output<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">User1</span><br><span class="hljs-attribute">SUser2</span> <span class="hljs-number">5</span> street<br></code></pre></td></tr></table></figure><br>最吸引人的地方就是适配器实现了原有的接口。需求变化时，可尽量少的改动已有代码。</p><p>参考：《设计模式之禅》  秦小波</p>]]></content>
    
    
    <categories>
      
      <category>Design_pattern</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android NDK 读写文件</title>
    <link href="/Android/NDK-read_write_file/"/>
    <url>/Android/NDK-read_write_file/</url>
    
    <content type="html"><![CDATA[<p>开发环境与工具： win7_x64，Android Studio 2.2.3, Cygwin</p><p>使用NDK，就进入了Linux的世界。理解了这一点，很多事情就好办了。需要熟悉C语言操作文件的方式。</p><h2 id="准备事项"><a href="#准备事项" class="headerlink" title="准备事项"></a>准备事项</h2><h3 id="申请权限"><a href="#申请权限" class="headerlink" title="申请权限"></a>申请权限</h3><p>申请SD卡的读写权限<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.READ_EXTERNAL_STORAGE&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure></p><p>6.0开始需要动态申请权限。</p><h3 id="使用Linux中的文件绝对路径"><a href="#使用Linux中的文件绝对路径" class="headerlink" title="使用Linux中的文件绝对路径"></a>使用Linux中的文件绝对路径</h3><p>手机sd卡中存放着文件。目录为 <code>/sdcard/hello.txt</code>和<code>/sdcard/egdir/csv/eg_data.csv</code>。</p><h2 id="读写示例"><a href="#读写示例" class="headerlink" title="读写示例"></a>读写示例</h2><h3 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ada">jni/<br>|<span class="hljs-comment">-- Android.mk</span><br>|<span class="hljs-comment">-- com_rustfisher_ndkalgo_RWFile.h</span><br>`<span class="hljs-comment">-- RWFile.c</span><br></code></pre></td></tr></table></figure><h3 id="Java文件"><a href="#Java文件" class="headerlink" title="Java文件"></a>Java文件</h3><p><code>RWFile.java</code> 里面写了多个native方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RWFile</span> &#123;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        System.loadLibrary(<span class="hljs-string">&quot;NDKMan&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">readIn</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> nativeRead();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">writeToFile</span><span class="hljs-params">(String msg)</span> &#123;<br>        <span class="hljs-keyword">return</span> nativeWrite(msg);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">readSDFile</span><span class="hljs-params">(String fileName)</span> &#123;<br>        <span class="hljs-keyword">return</span> nativeReadSDFile(fileName);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">native</span> String <span class="hljs-title function_">nativeRead</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> fileName e.g. FolderName/textFile.txt</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">native</span> String <span class="hljs-title function_">nativeReadSDFile</span><span class="hljs-params">(String fileName)</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">native</span> String <span class="hljs-title function_">nativeWrite</span><span class="hljs-params">(String msg)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>RWFile.c</code>编译出<code>.h</code>文件后，里面的方法名。可以看出编译后的方法名和原来的native方法是一一对应的。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">join</span><span class="hljs-params">(<span class="hljs-type">char</span> *s1, <span class="hljs-type">char</span> *s2,<span class="hljs-type">char</span> *result)</span>          <span class="hljs-comment">// 拼接char的函数</span><br>Java_com_rustfisher_ndkalgo_RWFile_nativeRead       <span class="hljs-comment">// 读取固定文件的内容</span><br>Java_com_rustfisher_ndkalgo_RWFile_nativeReadSDFile <span class="hljs-comment">// 根据文件名读取文件内容</span><br>Java_com_rustfisher_ndkalgo_RWFile_nativeWrite      <span class="hljs-comment">// 将内容写入文件</span><br></code></pre></td></tr></table></figure></p><h3 id="C文件"><a href="#C文件" class="headerlink" title="C文件"></a>C文件</h3><p>C文件是我们具体实现功能的地方。<code>RWFile.c</code>代码如下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;com_rustfisher_ndkalgo_RWFile.h&quot;</span></span><br><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *sdcardDir = <span class="hljs-string">&quot;/sdcard/&quot;</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">join</span><span class="hljs-params">(<span class="hljs-type">char</span> *s1, <span class="hljs-type">char</span> *s2,<span class="hljs-type">char</span> *result)</span> &#123;<br>    result = (<span class="hljs-type">char</span> *) <span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">strlen</span>(s1)+<span class="hljs-built_in">strlen</span>(s2)+<span class="hljs-number">1</span>);<span class="hljs-comment">// +1 for the zero-terminator</span><br>    <span class="hljs-keyword">if</span> (result == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">strcpy</span>(result, s1);<br>    <span class="hljs-built_in">strcat</span>(result, s2);<br>&#125;<br><br>JNIEXPORT jstring JNICALL <span class="hljs-title function_">Java_com_rustfisher_ndkalgo_RWFile_nativeRead</span><br><span class="hljs-params">(JNIEnv *env, jobject jObj)</span> &#123;<br>    FILE* file = fopen(<span class="hljs-string">&quot;/sdcard/hello.txt&quot;</span>,<span class="hljs-string">&quot;r+&quot;</span>);<br>    <span class="hljs-type">char</span> myStr[<span class="hljs-number">128</span>];<br>    <span class="hljs-keyword">if</span> (file != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-type">char</span>* readInPtr = fgets(myStr, <span class="hljs-number">128</span>, file);<br>        fclose(file);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> != readInPtr) &#123;<br>            <span class="hljs-keyword">return</span> (*env)-&gt;NewStringUTF(env, myStr);<br>        &#125;<br>        <span class="hljs-keyword">return</span> (*env)-&gt;NewStringUTF(env, <span class="hljs-string">&quot;JNI read file fail!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> (*env)-&gt;NewStringUTF(env, <span class="hljs-string">&quot;JNI read file fail!&quot;</span>);<br>&#125;<br><br>JNIEXPORT jstring JNICALL <span class="hljs-title function_">Java_com_rustfisher_ndkalgo_RWFile_nativeReadSDFile</span><br><span class="hljs-params">(JNIEnv *env, jobject jObj, jstring fileName)</span> &#123;<br>    <span class="hljs-type">char</span> *fileNamePtr = (*env)-&gt;GetStringUTFChars(env, fileName, <span class="hljs-number">0</span>);<br>    <span class="hljs-type">char</span> * result;<br>    join(sdcardDir,fileNamePtr,result);<br><br>    FILE* file = fopen(result,<span class="hljs-string">&quot;r+&quot;</span>);<br><br>    <span class="hljs-keyword">if</span> (file != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-type">char</span> myStr[<span class="hljs-number">128</span>];<br>        <span class="hljs-type">char</span>* readInPtr = fgets(myStr, <span class="hljs-number">128</span>, file);<br>        fclose(file);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> != readInPtr) &#123;<br>            <span class="hljs-keyword">return</span> (*env)-&gt;NewStringUTF(env, myStr);<br>        &#125;<br>        <span class="hljs-keyword">return</span> (*env)-&gt;NewStringUTF(env, <span class="hljs-string">&quot;JNI read fail - NULL == readInPtr&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> (*env)-&gt;NewStringUTF(env, <span class="hljs-string">&quot;JNI read file fail! - file is NULL &quot;</span>);<br>&#125;<br><br><br>JNIEXPORT jstring JNICALL <span class="hljs-title function_">Java_com_rustfisher_ndkalgo_RWFile_nativeWrite</span><br><span class="hljs-params">(JNIEnv *env, jobject jObj, jstring msg)</span> &#123;<br><br>    FILE* file = fopen(<span class="hljs-string">&quot;/sdcard/hello.txt&quot;</span>,<span class="hljs-string">&quot;w+&quot;</span>);<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *nativeMsg = (*env)-&gt;GetStringUTFChars(env, msg, <span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">if</span> (file != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">fputs</span>(nativeMsg, file);<br>        fflush(file);<br>        fclose(file);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> (*env)-&gt;NewStringUTF(env, <span class="hljs-string">&quot;Write finished.&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="需关注的函数"><a href="#需关注的函数" class="headerlink" title="需关注的函数"></a>需关注的函数</h2><p>要特别关心函数的返回值，返回值往往代表着调用的结果。</p><h3 id="打开文件-fopen"><a href="#打开文件-fopen" class="headerlink" title="打开文件 fopen"></a>打开文件 <code>fopen</code></h3><p><code>FILE * fopen(const char * path,const char * mode);</code><br>mode模式选择，例如<code>&quot;r&quot;</code>  </p><ul><li>r(read): 读</li><li>w(write): 写</li><li>a(append): 追加</li><li>t(text): 文本文件，可省略不写</li><li>b(banary): 二进制文件</li><li>+: 读和写</li></ul><p>凡用“r”打开一个文件时，该文件必须已经存在，且只能从该文件读出。</p><p>用“w”打开的文件只能向该文件写入。若打开的文件不存在，则以指定的文件名建立该文件，若打开的文件已<br>经存在，则将该文件删去，重建一个新文件。这个方法保证目标文件里写入的只有我们要的数据。</p><p>若要向一个已存在的文件追加新的信息，只能用“a”方式打开文件。但此时该文件必须是存在的，否则将会出错。</p><p>在打开一个文件时，如果出错，fopen将返回一个空指针值NULL。在程序中可以用这一信息来判别是否完成<br>打开文件的工作，并作相应的处理。</p><p>如果成功的打开一个文件, fopen()函数返回文件指针, 否则返回空指针</p><h3 id="从文件中读取数据-fgets"><a href="#从文件中读取数据-fgets" class="headerlink" title="从文件中读取数据 fgets"></a>从文件中读取数据 <code>fgets</code></h3><p><code>char *fgets(char *s, int n, FILE *stream);</code><br>从文件指针stream中读取n-1个字符，存到以s为起始地址的空间里，直到读完一行，如果成功则返回s的指<br>针，否则返回NULL。</p><h3 id="NDK中生成jstring的函数-env-gt-NewStringUTF-env-char"><a href="#NDK中生成jstring的函数-env-gt-NewStringUTF-env-char" class="headerlink" title="NDK中生成jstring的函数  (*env)-&gt;NewStringUTF(env, char *);"></a>NDK中生成jstring的函数  <code>(*env)-&gt;NewStringUTF(env, char *);</code></h3><p><code>(*env)-&gt;NewStringUTF(env, char *);</code><br>如果传入的char*是一个空值，在一些平台上会报错。<br>比如红米手机会直接崩溃，而魅族手机能得到一个空的String。</p>]]></content>
    
    
    <categories>
      
      <category>Android_note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NDK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL 增删查改</title>
    <link href="/Database/MySQL-use_add_del_check_update/"/>
    <url>/Database/MySQL-use_add_del_check_update/</url>
    
    <content type="html"><![CDATA[<p>环境： win7_x64， Navicat for MySQL</p><p><a href="https://rustfisher.com/2017/02/25/Database/MySQL-use_add_del_check_update/">本文链接</a></p><h2 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h2><p>前面已经将MySQL服务跑起来了。</p><ul><li><a href="https://rustfisher.com/2019/02/26/Database/MySQL-install_and_config_Mac/">Mac安装MySQL</a></li><li><a href="https://rustfisher.com/2017/02/25/Database/MySQL-install_and_config_Windows/">Windows安装MySQL</a></li></ul><p>现在我们以root身份进行MySQL操作<br>进入MySQL<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">C:</span>\Users\Administrator&gt;mysql -uroot -p<br></code></pre></td></tr></table></figure></p><h3 id="新建数据库"><a href="#新建数据库" class="headerlink" title="新建数据库"></a>新建数据库</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">mysql&gt; <span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> samp_db1 <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> gbk;<br>Query OK, <span class="hljs-number">1</span> <span class="hljs-keyword">row</span> affected (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><p>数据库字符编码指定为 gbk</p><h3 id="选择要操作的数据库"><a href="#选择要操作的数据库" class="headerlink" title="选择要操作的数据库"></a>选择要操作的数据库</h3><p>已经登录后可以直接选择数据库</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">mysql&gt; use samp_db1<span class="hljs-comment">;</span><br>Database changed<br></code></pre></td></tr></table></figure><h4 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h4><p>以建立person_t数据表为例<br><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">mysql&gt; <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> person_t (<br>    -&gt; id <span class="hljs-type">int</span> unsigned <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment <span class="hljs-keyword">primary key</span>,<br>    -&gt; <span class="hljs-type">name</span> <span class="hljs-type">char</span>(<span class="hljs-number">14</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    -&gt; sex <span class="hljs-type">char</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    -&gt; age tinyint unsigned <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    -&gt; tell <span class="hljs-type">char</span>(<span class="hljs-number">13</span>) <span class="hljs-keyword">null</span> <span class="hljs-keyword">default</span> &quot;-&quot;<br>    -&gt; );<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.22</span> sec)<br></code></pre></td></tr></table></figure><br>打开Navicat for MySQL，可以看到我们新建的表</p><p>输入这么长的文本很容易出错，我们可以直接先写好SQL语句，再导进来</p><p>新建文件<code>create_student_table.sql</code>，输入SQL语句</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student (<br>id <span class="hljs-type">int</span> unsigned <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment <span class="hljs-keyword">primary key</span>,<br><span class="hljs-type">name</span> <span class="hljs-type">char</span>(<span class="hljs-number">14</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>sex <span class="hljs-type">char</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>age tinyint unsigned <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>tell <span class="hljs-type">char</span>(<span class="hljs-number">13</span>) <span class="hljs-keyword">null</span> <span class="hljs-keyword">default</span> &quot;-&quot;<br>);<br></code></pre></td></tr></table></figure><p>直接执行SQL文件，操作samp_db1数据库<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-built_in">C</span><span class="hljs-operator">:</span>\<span class="hljs-variable">Users</span>\<span class="hljs-variable">Administrator</span><span class="hljs-operator">&gt;</span><span class="hljs-variable">mysql</span> <span class="hljs-operator">-</span><span class="hljs-built_in">D</span> <span class="hljs-type">samp_db1</span> <span class="hljs-operator">-</span><span class="hljs-variable">u</span> <span class="hljs-variable">root</span> <span class="hljs-operator">-</span><span class="hljs-variable">p</span> <span class="hljs-operator">&lt;</span> <span class="hljs-variable">H</span><span class="hljs-operator">:</span>\<span class="hljs-type">create_student</span><span class="hljs-type">_table</span><span class="hljs-operator">.</span><span class="hljs-variable">sq</span><br><span class="hljs-variable">l</span><br><span class="hljs-built_in">Enter</span> <span class="hljs-variable">password</span><span class="hljs-operator">:</span> <span class="hljs-operator">****</span><br></code></pre></td></tr></table></figure></p><h4 id="操作数据库-1"><a href="#操作数据库-1" class="headerlink" title="操作数据库"></a>操作数据库</h4><p>选定要操作的数据库<code>use samp_db1;</code></p><h5 id="增-插入数据"><a href="#增-插入数据" class="headerlink" title="增 - 插入数据"></a>增 - 插入数据</h5><p>insert [into] 表名 [(列名1, 列名2, 列名3, …)] values (值1, 值2, 值3, …);</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">mysql&gt; <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student <span class="hljs-keyword">values</span>(<span class="hljs-keyword">null</span>,&quot;张三&quot;,&quot;男&quot;,<span class="hljs-number">23</span>,&quot;13666665555&quot;);<br>mysql&gt; <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student (<span class="hljs-type">name</span>,sex,age) <span class="hljs-keyword">values</span>(&quot;李四&quot;,&quot;女&quot;,<span class="hljs-number">20</span>);<br></code></pre></td></tr></table></figure><h5 id="查-查询表中的数据"><a href="#查-查询表中的数据" class="headerlink" title="查 - 查询表中的数据"></a>查 - 查询表中的数据</h5><p>select 列名称 from 表名称 [查询条件];</p><p>多插入了一些数据后</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">mysql&gt; select name, age from student;</span><br><span class="hljs-section">+-------+-----+</span><br><span class="hljs-section">| name  | age |</span><br><span class="hljs-section">+-------+-----+</span><br>| 张三  |  23 |<br>| 李四  |  20 |<br>| Tom   |  13 |<br>| Jerry |  12 |<br><span class="hljs-section">| 王五  |  32 |</span><br><span class="hljs-section">+-------+-----+</span><br>5 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h6 id="使用通配符-来查询"><a href="#使用通配符-来查询" class="headerlink" title="使用通配符*来查询"></a>使用通配符*来查询</h6><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">mysql&gt; select <span class="hljs-symbol">*</span> from student;<br>+----+-------+-----+-----+-------------+<br>|<span class="hljs-string"> id </span>|<span class="hljs-string"> name  </span>|<span class="hljs-string"> sex </span>|<span class="hljs-string"> age </span>|<span class="hljs-string"> tell        </span>|<br>+----+-------+-----+-----+-------------+<br>|<span class="hljs-string">  1 </span>|<span class="hljs-string"> 张三  </span>|<span class="hljs-string"> 男  </span>|<span class="hljs-string">  23 </span>|<span class="hljs-string"> 13666665555 </span>|<br>|<span class="hljs-string">  2 </span>|<span class="hljs-string"> 李四  </span>|<span class="hljs-string"> 女  </span>|<span class="hljs-string">  20 </span>|<span class="hljs-string"> -           </span>|<br>|<span class="hljs-string">  3 </span>|<span class="hljs-string"> Tom   </span>|<span class="hljs-string"> 男  </span>|<span class="hljs-string">  13 </span>|<span class="hljs-string"> 13111115555 </span>|<br>|<span class="hljs-string">  4 </span>|<span class="hljs-string"> Jerry </span>|<span class="hljs-string"> 男  </span>|<span class="hljs-string">  12 </span>|<span class="hljs-string"> 2333333     </span>|<br>|<span class="hljs-string">  5 </span>|<span class="hljs-string"> 王五  </span>|<span class="hljs-string"> 男  </span>|<span class="hljs-string">  32 </span>|<span class="hljs-string"> 666666666   </span>|<br>+----+-------+-----+-----+-------------+<br>5 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h6 id="特定条件查询"><a href="#特定条件查询" class="headerlink" title="特定条件查询"></a>特定条件查询</h6><p>where 关键词用于指定查询条件, 用法形式为: select 列名称 from 表名称 where 条件;</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-comment">// 查询所有性别为女的记录</span><br><span class="hljs-section">mysql&gt; select * from student where sex=&quot;女&quot;;</span><br><span class="hljs-section">+----+------+-----+-----+------+</span><br><span class="hljs-section">| id | name | sex | age | tell |</span><br><span class="hljs-section">+----+------+-----+-----+------+</span><br><span class="hljs-section">|  2 | 李四 | 女  |  20 | -    |</span><br><span class="hljs-section">+----+------+-----+-----+------+</span><br>1 row in set (0.04 sec)<br><br><span class="hljs-comment">// age大于20的记录</span><br><span class="hljs-section">mysql&gt; select * from student where age&gt;20;</span><br><span class="hljs-section">+----+------+-----+-----+-------------+</span><br><span class="hljs-section">| id | name | sex | age | tell        |</span><br><span class="hljs-section">+----+------+-----+-----+-------------+</span><br>|  1 | 张三 | 男  |  23 | 13666665555 |<br><span class="hljs-section">|  5 | 王五 | 男  |  32 | 666666666   |</span><br><span class="hljs-section">+----+------+-----+-----+-------------+</span><br>2 rows in set (0.00 sec)<br><br><span class="hljs-comment">// age小于等于20的记录</span><br><span class="hljs-section">mysql&gt; select * from student where age&lt;=20;</span><br><span class="hljs-section">+----+-------+-----+-----+-------------+</span><br><span class="hljs-section">| id | name  | sex | age | tell        |</span><br><span class="hljs-section">+----+-------+-----+-----+-------------+</span><br>|  2 | 李四  | 女  |  20 | -           |<br>|  3 | Tom   | 男  |  13 | 13111115555 |<br><span class="hljs-section">|  4 | Jerry | 男  |  12 | 2333333     |</span><br><span class="hljs-section">+----+-------+-----+-----+-------------+</span><br>3 rows in set (0.00 sec)<br><br><span class="hljs-comment">// age小于等于20并且id大于等于3的记录</span><br><span class="hljs-section">mysql&gt; select * from student where age&lt;=20 and id &gt;=3;</span><br><span class="hljs-section">+----+-------+-----+-----+-------------+</span><br><span class="hljs-section">| id | name  | sex | age | tell        |</span><br><span class="hljs-section">+----+-------+-----+-----+-------------+</span><br>|  3 | Tom   | 男  |  13 | 13111115555 |<br><span class="hljs-section">|  4 | Jerry | 男  |  12 | 2333333     |</span><br><span class="hljs-section">+----+-------+-----+-----+-------------+</span><br>2 rows in set (0.03 sec)<br><br><span class="hljs-comment">// 按名字特征查询</span><br><span class="hljs-section">mysql&gt; select * from student where name like &quot;%三%&quot;;</span><br><span class="hljs-section">+----+------+-----+-----+-------------+</span><br><span class="hljs-section">| id | name | sex | age | tell        |</span><br><span class="hljs-section">+----+------+-----+-----+-------------+</span><br><span class="hljs-section">|  1 | 张三 | 男  |  23 | 13666665555 |</span><br><span class="hljs-section">+----+------+-----+-----+-------------+</span><br>1 row in set (0.00 sec)<br><br><span class="hljs-section">mysql&gt; select * from student where name like &quot;%o%&quot;;</span><br><span class="hljs-section">+----+------+-----+-----+-------------+</span><br><span class="hljs-section">| id | name | sex | age | tell        |</span><br><span class="hljs-section">+----+------+-----+-----+-------------+</span><br><span class="hljs-section">|  3 | Tom  | 男  |  13 | 13111115555 |</span><br><span class="hljs-section">+----+------+-----+-----+-------------+</span><br>1 row in set (0.00 sec)<br><br><span class="hljs-comment">// tell 以5结尾的记录</span><br><span class="hljs-section">mysql&gt; select * from student where tell like &quot;%5&quot;;</span><br><span class="hljs-section">+----+------+-----+-----+-------------+</span><br><span class="hljs-section">| id | name | sex | age | tell        |</span><br><span class="hljs-section">+----+------+-----+-----+-------------+</span><br>|  1 | 张三 | 男  |  23 | 13666665555 |<br><span class="hljs-section">|  3 | Tom  | 男  |  13 | 13111115555 |</span><br><span class="hljs-section">+----+------+-----+-----+-------------+</span><br>2 rows in set (0.00 sec)<br><br><span class="hljs-section">mysql&gt; select * from student where tell like &quot;131%&quot;;</span><br><span class="hljs-section">+----+------+-----+-----+-------------+</span><br><span class="hljs-section">| id | name | sex | age | tell        |</span><br><span class="hljs-section">+----+------+-----+-----+-------------+</span><br><span class="hljs-section">|  3 | Tom  | 男  |  13 | 13111115555 |</span><br><span class="hljs-section">+----+------+-----+-----+-------------+</span><br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>按条件查询非常的灵活，运用得当会节省运行时间</p><h5 id="改-修改表中的数据"><a href="#改-修改表中的数据" class="headerlink" title="改 - 修改表中的数据"></a>改 - 修改表中的数据</h5><p>基本的使用形式为:</p><p>update 表名称 set 列名称=新值 where 更新条件;</p><p>我们终于拿到了李四的联系方式，将数据库中的tell更新</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">mysql&gt; update student set tell=&quot;13900001111&quot; where name=&quot;李四&quot;;<br>Query OK, 1 row affected (0.05 sec)<br>Rows matched: 1  Changed: 1  Warnings: 0<br><br><span class="hljs-section">mysql&gt; select * from student where name=&quot;李四&quot;;</span><br><span class="hljs-section">+----+------+-----+-----+-------------+</span><br><span class="hljs-section">| id | name | sex | age | tell        |</span><br><span class="hljs-section">+----+------+-----+-----+-------------+</span><br><span class="hljs-section">|  2 | 李四 | 女  |  20 | 13900001111 |</span><br><span class="hljs-section">+----+------+-----+-----+-------------+</span><br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>过了一年，大家都长了一岁，修改表中的age值</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">mysql&gt; update student set age=age+1;<br>Query OK, 5 rows affected (0.05 sec)<br>Rows matched: 5  Changed: 5  Warnings: 0<br><br>mysql&gt; select <span class="hljs-symbol">*</span> from student;<br>+----+-------+-----+-----+-------------+<br>|<span class="hljs-string"> id </span>|<span class="hljs-string"> name  </span>|<span class="hljs-string"> sex </span>|<span class="hljs-string"> age </span>|<span class="hljs-string"> tell        </span>|<br>+----+-------+-----+-----+-------------+<br>|<span class="hljs-string">  1 </span>|<span class="hljs-string"> 张三  </span>|<span class="hljs-string"> 男  </span>|<span class="hljs-string">  24 </span>|<span class="hljs-string"> 13666665555 </span>|<br>|<span class="hljs-string">  2 </span>|<span class="hljs-string"> 李四  </span>|<span class="hljs-string"> 女  </span>|<span class="hljs-string">  21 </span>|<span class="hljs-string"> 13900001111 </span>|<br>|<span class="hljs-string">  3 </span>|<span class="hljs-string"> Tom   </span>|<span class="hljs-string"> 男  </span>|<span class="hljs-string">  14 </span>|<span class="hljs-string"> 13111115555 </span>|<br>|<span class="hljs-string">  4 </span>|<span class="hljs-string"> Jerry </span>|<span class="hljs-string"> 男  </span>|<span class="hljs-string">  13 </span>|<span class="hljs-string"> 2333333     </span>|<br>|<span class="hljs-string">  5 </span>|<span class="hljs-string"> 王五  </span>|<span class="hljs-string"> 男  </span>|<span class="hljs-string">  33 </span>|<span class="hljs-string"> 666666666   </span>|<br>+----+-------+-----+-----+-------------+<br>5 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>修改多个信息，Jerry有了中文名“赵六”，换了tell</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">mysql&gt; update student set name=<span class="hljs-string">&quot;赵六&quot;</span>,tell=<span class="hljs-string">&quot;10001-1001&quot;</span> where name=<span class="hljs-string">&quot;Jerry&quot;</span>;<br>Query OK, 1 row affected (0.05 sec)<br>Rows matched: 1  Changed: 1  Warnings: 0<br><br>mysql&gt; select <span class="hljs-symbol">*</span> from student;<br>+----+------+-----+-----+-------------+<br>|<span class="hljs-string"> id </span>|<span class="hljs-string"> name </span>|<span class="hljs-string"> sex </span>|<span class="hljs-string"> age </span>|<span class="hljs-string"> tell        </span>|<br>+----+------+-----+-----+-------------+<br>|<span class="hljs-string">  1 </span>|<span class="hljs-string"> 张三 </span>|<span class="hljs-string"> 男  </span>|<span class="hljs-string">  24 </span>|<span class="hljs-string"> 13666665555 </span>|<br>|<span class="hljs-string">  2 </span>|<span class="hljs-string"> 李四 </span>|<span class="hljs-string"> 女  </span>|<span class="hljs-string">  21 </span>|<span class="hljs-string"> 13900001111 </span>|<br>|<span class="hljs-string">  3 </span>|<span class="hljs-string"> Tom  </span>|<span class="hljs-string"> 男  </span>|<span class="hljs-string">  14 </span>|<span class="hljs-string"> 13111115555 </span>|<br>|<span class="hljs-string">  4 </span>|<span class="hljs-string"> 赵六 </span>|<span class="hljs-string"> 男  </span>|<span class="hljs-string">  13 </span>|<span class="hljs-string"> 10001-1001  </span>|<br>|<span class="hljs-string">  5 </span>|<span class="hljs-string"> 王五 </span>|<span class="hljs-string"> 男  </span>|<span class="hljs-string">  33 </span>|<span class="hljs-string"> 666666666   </span>|<br>+----+------+-----+-----+-------------+<br>5 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h5 id="删-删除表中的数据"><a href="#删-删除表中的数据" class="headerlink" title="删 - 删除表中的数据"></a>删 - 删除表中的数据</h5><p>基本用法为:</p><p>delete from 表名称 where 删除条件;</p><p>年龄太小不能入学</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">mysql&gt; delete from student where age &lt; 18;<br>Query OK, 2 rows affected (0.04 sec)<br><br><span class="hljs-section">mysql&gt; select * from student;</span><br><span class="hljs-section">+----+------+-----+-----+-------------+</span><br><span class="hljs-section">| id | name | sex | age | tell        |</span><br><span class="hljs-section">+----+------+-----+-----+-------------+</span><br>|  1 | 张三 | 男  |  24 | 13666665555 |<br>|  2 | 李四 | 女  |  21 | 13900001111 |<br><span class="hljs-section">|  5 | 王五 | 男  |  33 | 666666666   |</span><br><span class="hljs-section">+----+------+-----+-----+-------------+</span><br>3 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h4 id="修改现有的表"><a href="#修改现有的表" class="headerlink" title="修改现有的表"></a>修改现有的表</h4><p>alter table 语句用于修改现有表</p><h5 id="添加列"><a href="#添加列" class="headerlink" title="添加列"></a>添加列</h5><p>alter table 表名 add 列名 列数据类型 [after 插入位置];</p><p>在表的最后添加address列<br><code>mysql&gt; alter table student add address char(70);</code>   </p><p>在名为 age 的列后插入列 birthday<br><code>mysql&gt; alter table student add birthday date after age;</code></p><p>此时的表<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">mysql&gt; select <span class="hljs-symbol">*</span> from student;<br>+----+------+-----+-----+----------+-------------+---------+<br>|<span class="hljs-string"> id </span>|<span class="hljs-string"> name </span>|<span class="hljs-string"> sex </span>|<span class="hljs-string"> age </span>|<span class="hljs-string"> birthday </span>|<span class="hljs-string"> tell        </span>|<span class="hljs-string"> address </span>|<br>+----+------+-----+-----+----------+-------------+---------+<br>|<span class="hljs-string">  1 </span>|<span class="hljs-string"> 张三 </span>|<span class="hljs-string"> 男  </span>|<span class="hljs-string">  24 </span>|<span class="hljs-string"> NULL     </span>|<span class="hljs-string"> 13666665555 </span>|<span class="hljs-string"> NULL    </span>|<br>|<span class="hljs-string">  2 </span>|<span class="hljs-string"> 李四 </span>|<span class="hljs-string"> 女  </span>|<span class="hljs-string">  21 </span>|<span class="hljs-string"> NULL     </span>|<span class="hljs-string"> 13900001111 </span>|<span class="hljs-string"> NULL    </span>|<br>|<span class="hljs-string">  5 </span>|<span class="hljs-string"> 王五 </span>|<span class="hljs-string"> 男  </span>|<span class="hljs-string">  33 </span>|<span class="hljs-string"> NULL     </span>|<span class="hljs-string"> 666666666   </span>|<span class="hljs-string"> NULL    </span>|<br>+----+------+-----+-----+----------+-------------+---------+<br></code></pre></td></tr></table></figure></p><p>列的名字不能是mysql的关键字，比如不能是<code>index</code></p><h5 id="修改列"><a href="#修改列" class="headerlink" title="修改列"></a>修改列</h5><p>基本形式: alter table 表名 change 列名称 列新名称 新数据类型;</p><p>将tell列名修改为mobile<br><code>alter table student change tell mobile char(13) default &quot;-&quot;;</code></p><p>修改name列的类型为<code>char(11) not null</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mysql</span>&gt; alter table student change name name char(<span class="hljs-number">11</span>) not null;<br><span class="hljs-attribute">Query</span> OK, <span class="hljs-number">3</span> rows affected (<span class="hljs-number">0</span>.<span class="hljs-number">54</span> sec)<br><span class="hljs-attribute">Records</span>: <span class="hljs-number">3</span>  Duplicates: <span class="hljs-number">0</span>  Warnings: <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h5 id="删除列"><a href="#删除列" class="headerlink" title="删除列"></a>删除列</h5><p>alter table 表名 drop 列名称;</p><p>删除address列 <code>alter table student drop address;</code></p><h5 id="重命名表"><a href="#重命名表" class="headerlink" title="重命名表"></a>重命名表</h5><p>alter table 表名 rename 新表名;</p><p>重命名表student -&gt; bigstu  <code>alter table student rename bigstu;</code></p><h5 id="删除整张表"><a href="#删除整张表" class="headerlink" title="删除整张表"></a>删除整张表</h5><p>drop table 表名;<br>删掉前面我们创建的<code>person_t</code><br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mysql</span>&gt; drop table person_t;<br><span class="hljs-attribute">Query</span> OK, <span class="hljs-number">0</span> rows affected (<span class="hljs-number">0</span>.<span class="hljs-number">12</span> sec)<br></code></pre></td></tr></table></figure></p><h5 id="删除整个数据库"><a href="#删除整个数据库" class="headerlink" title="删除整个数据库"></a>删除整个数据库</h5><p>drop database 数据库名;</p><p>新建一个数据库samp_4_delete，再删除它<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mysql</span>&gt; create database samp_4_delete;<br><span class="hljs-attribute">Query</span> OK, <span class="hljs-number">1</span> row affected (<span class="hljs-number">0</span>.<span class="hljs-number">00</span> sec)<br><br><span class="hljs-attribute">mysql</span>&gt; drop database samp_4_delete;<br><span class="hljs-attribute">Query</span> OK, <span class="hljs-number">0</span> rows affected (<span class="hljs-number">0</span>.<span class="hljs-number">01</span> sec)<br></code></pre></td></tr></table></figure></p><h2 id="复制schema"><a href="#复制schema" class="headerlink" title="复制schema"></a>复制schema</h2><p>没有特定的复制命令。思路是新建一个目标schema，然后把原数据库中的表全部复制到新建的库中去。</p><p>参考：</p><ul><li><a href="https://stackoverflow.com/questions/67093/how-do-i-quickly-rename-a-mysql-database-change-schema-name">https://stackoverflow.com/questions/67093/how-do-i-quickly-rename-a-mysql-database-change-schema-name</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Database</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL Windows 安装与简单配置</title>
    <link href="/Database/MySQL-install_and_config_Windows/"/>
    <url>/Database/MySQL-install_and_config_Windows/</url>
    
    <content type="html"><![CDATA[<p>记录一些操作。</p><h2 id="win7-x64-下安装配置MySQL"><a href="#win7-x64-下安装配置MySQL" class="headerlink" title="win7_x64 下安装配置MySQL"></a>win7_x64 下安装配置MySQL</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>下载了绿色免安装版本，目录为<code>E:\mysql-5.7.17-winx64</code></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>新建data目录  <code>E:\mysql-5.7.17-winx64\data</code></p><p>把<code>E:\mysql-5.7.17-winx64\bin</code>添加到环境变量</p><h4 id="配置文件my-ini"><a href="#配置文件my-ini" class="headerlink" title="配置文件my.ini"></a>配置文件my.ini</h4><p>新建配置文件<code>my.ini</code>放在<code>E:\mysql-5.7.17-winx64</code>，内容如下：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mysqld]</span><br><span class="hljs-attr">basedir</span>=E:/mysql-<span class="hljs-number">5.7</span>.<span class="hljs-number">17</span>-winx64<br><span class="hljs-attr">datadir</span>=E:/mysql-<span class="hljs-number">5.7</span>.<span class="hljs-number">17</span>-winx64/data<br><span class="hljs-attr">tmpdir</span>=E:/mysql-<span class="hljs-number">5.7</span>.<span class="hljs-number">17</span>-winx64/data<br><span class="hljs-attr">port</span> = <span class="hljs-number">3306</span><br></code></pre></td></tr></table></figure></p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>打开CMD，进入目录<code>E:\mysql-5.7.17-winx64\bin&gt;</code>，执行初始化命令，如下</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">E:\mysql<span class="hljs-number">-5.7</span><span class="hljs-number">.17</span>-winx64\bin&gt;mysqld <span class="hljs-comment">--initialize --user=mysql --console</span><br>// *******<br><span class="hljs-number">2017</span><span class="hljs-number">-02</span><span class="hljs-number">-25</span>T07:<span class="hljs-number">35</span>:<span class="hljs-number">47.155727</span>Z <span class="hljs-number">1</span> [Note] A <span class="hljs-keyword">temporary</span> <span class="hljs-keyword">password</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">generated</span> <span class="hljs-keyword">for</span> root@<br>localhost: s/KKIaag+<span class="hljs-number">3</span><span class="hljs-keyword">iS</span><br></code></pre></td></tr></table></figure><p>获得了一个随机密码<code>s/KKIaag+3iS</code></p><p>打开另一个CMD，执行<code>C:\Users\Administrator&gt;mysqld --console</code>，目的是让MySQL跑起来</p><p>回到刚才的CMD，还在<code>E:\mysql-5.7.17-winx64\bin&gt;</code><br>登录root <code>mysql -uroot -p</code> ，用的是上面生成的密码</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs smali">E:\mysql-5.7.17-winx64\bin&gt;mysql -uroot -p<br>Enter password: ************<br>Welcome to the MySQ<span class="hljs-class">L monitor.  Commands end with ;</span><span class="hljs-built_in"> or </span>\g.<br>Your MySQL connection id is 3<br>Server version: 5.7.17<br><br>Copyright (c) 2000, 2016, Oracle<span class="hljs-built_in"> and/or </span>its affiliates. All rights reserved.<br><br>Oracle is a registered trademark of Oracle Corporation<span class="hljs-built_in"> and/or </span>its<br>affiliates. Other names may be trademarks of their respective<br>owners.<br><br>Type &#x27;help;&#x27;<span class="hljs-built_in"> or </span>&#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.<br><br>mysql&gt;<br></code></pre></td></tr></table></figure><p>在MySQL的命令行里修改root的密码，记得打分号</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">mysql&gt; set password = password(<span class="hljs-string">&#x27;youPwd&#x27;</span>);<br>Query OK, <span class="hljs-number">0</span> rows affected, <span class="hljs-number">1</span> warning (<span class="hljs-number">0.00</span> sec)<br><br>mysql&gt; <span class="hljs-keyword">exit</span><br>Bye<br></code></pre></td></tr></table></figure><p>退出用新密码重新登录。可以发现密码已经修改成功。<br>在这整个过程中，另一个CMD一直在运行MySQL。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2017</span>-<span class="hljs-number">02</span>-<span class="hljs-number">25</span>T07:<span class="hljs-number">37</span>:<span class="hljs-number">41</span>.<span class="hljs-number">643275</span>Z <span class="hljs-number">0</span><span class="hljs-meta"> [Note] mysqld: ready for connections.</span><br><span class="hljs-meta">Version: &#x27;5.7.17&#x27;  socket: &#x27;&#x27;  port: 3306  MySQL Community Server (GPL)</span><br></code></pre></td></tr></table></figure><h3 id="启动与停止服务"><a href="#启动与停止服务" class="headerlink" title="启动与停止服务"></a>启动与停止服务</h3><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><p>杀掉CMD里面的MySQL进程。安装并开启服务。</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-attribute">E</span>:\mysql-5.7.17-winx64\bin&gt;mysqld install MySQL --defaults-file=&quot;E:\mysql-5.7.17<br><span class="hljs-literal">-</span>winx64\my.ini&quot;<br>Service successfully installed.<br><br><span class="hljs-attribute">E</span>:\mysql-5.7.17-winx64\bin&gt;net start mysql<br>MySQL 服务正在启动 .<br>MySQL 服务已经启动成功。<br></code></pre></td></tr></table></figure><h4 id="停止服务"><a href="#停止服务" class="headerlink" title="停止服务"></a>停止服务</h4><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">C:</span>\Users\Administrator&gt;net <span class="hljs-keyword">stop</span> MySQL<br>MySQL 服务正在停止.<br>MySQL 服务已成功停止。<br></code></pre></td></tr></table></figure><h4 id="查看所有Windows服务"><a href="#查看所有Windows服务" class="headerlink" title="查看所有Windows服务"></a>查看所有Windows服务</h4><p>在CMD中使用net命令，可以查看所有服务</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">C:\Users\Administrator&gt;net start<br>已经启动以下 Windows 服务:<br><br><span class="hljs-regexp">//</span> ****<br>IPsec Policy Agent<br>MySQL<br>Network Connections<br><span class="hljs-regexp">//</span> ****<br></code></pre></td></tr></table></figure><h4 id="删除服务"><a href="#删除服务" class="headerlink" title="删除服务"></a>删除服务</h4><p>sc delete 服务名</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stata">C:\Users\Administrator&gt;<span class="hljs-keyword">sc</span> delete mysql<br>[<span class="hljs-keyword">SC</span>] DeleteService 成功<br><br>C:\Users\Administrator&gt;<span class="hljs-keyword">net</span> start mysql<br>服务名无效。<br><br>请键入 <span class="hljs-keyword">NET</span> HELPMSG 2185 以获得更多的帮助。<br></code></pre></td></tr></table></figure><h3 id="删除服务后，重新初始化并建立服务"><a href="#删除服务后，重新初始化并建立服务" class="headerlink" title="删除服务后，重新初始化并建立服务"></a>删除服务后，重新初始化并建立服务</h3><p>前面已经删除服务，此时直接建立服务并启动会报错<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livescript">C:<span class="hljs-string">\Users\Administrator&gt;mysqld</span> install MySQL --defaults-file=<span class="hljs-string">&quot;E:\mysql-5.7.17-win</span><br><span class="hljs-string">x64\my.ini&quot;</span><br>Service successfully installed.<br><br>C:<span class="hljs-string">\Users\Administrator&gt;net</span> start mysql<br>发生系统错误 <span class="hljs-number">2</span>。<br><br>系统找不到指定的文件。<br></code></pre></td></tr></table></figure></p><p>此时要把mysql这个服务删除<code>sc delete mysql</code></p><p>然后把data目录内的文件全部删除，回到bin目录重新初始化一次。又获得了一个随机密码。<br>再新建服务并启动即可。</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-attribute">E</span>:\mysql-5.7.17-winx64\bin&gt;mysqld --initialize --user=mysql --console<br>// **********<br>2017-02-25T08:11:51.156501Z 1 [Note] A temporary password is generated for root@<br><span class="hljs-attribute">localhost</span>: gp/L/3<span class="hljs-comment">#ayeo/</span><br><br><span class="hljs-attribute">E</span>:\mysql-5.7.17-winx64\bin&gt;mysqld install MySQL --defaults-file=&quot;E:\mysql-5.7.17<br><span class="hljs-literal">-</span>winx64\my.ini&quot;<br>Service successfully installed.<br><br><span class="hljs-attribute">E</span>:\mysql-5.7.17-winx64\bin&gt;net start mysql<br>MySQL 服务正在启动 .<br>MySQL 服务已经启动成功。<br></code></pre></td></tr></table></figure><p>MySQL的服务正在运行，此时将随机密码修改成自己的密码youPwd</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">E:\mysql<span class="hljs-number">-5.7</span><span class="hljs-number">.17</span>-winx64\bin&gt;mysql -uroot -p<br>Enter <span class="hljs-keyword">password</span>: ************<br>Welcome <span class="hljs-keyword">to</span> the MySQL monitor.  Commands <span class="hljs-keyword">end</span> <span class="hljs-keyword">with</span> ; <span class="hljs-keyword">or</span> \g.<br>// ******<br>mysql&gt; <span class="hljs-keyword">set</span> <span class="hljs-keyword">password</span> = <span class="hljs-keyword">password</span>(<span class="hljs-string">&#x27;youPwd&#x27;</span>);<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected, <span class="hljs-number">1</span> <span class="hljs-built_in">warning</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Database</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Gradle 构建多种版本</title>
    <link href="/Android/Gradle_for_android_Creating_Build_Variants/"/>
    <url>/Android/Gradle_for_android_Creating_Build_Variants/</url>
    
    <content type="html"><![CDATA[<p>本章目的</p><ul><li>Build types 构建类型</li><li>Product flavors</li><li>Build variants 构建不同种类</li><li>Signing configurations</li></ul><p>开发APP时，会有生成不同版本的需求。比如测试版本和发布版本。不同版本之间通常有不同的设置。</p><h2 id="Build-types"><a href="#Build-types" class="headerlink" title="Build types"></a>Build types</h2><p>定义APP或者模块该被如何构建。</p><p>可以用<code>buildTypes</code>来定义构建类型。例如：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs groovy">buildTypes &#123;<br>    release &#123;<br>        minifyEnabled <span class="hljs-literal">false</span><br>        proguardFiles getDefaultProguardFile(<span class="hljs-string">&#x27;proguard-android.txt&#x27;</span>), <span class="hljs-string">&#x27;proguard-rules.pro&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>默认的<code>build.gradle</code>文件会包含一个<code>release</code>构建类型</p><h3 id="创建构建类型"><a href="#创建构建类型" class="headerlink" title="创建构建类型"></a>创建构建类型</h3><p>比如创建一个<code>staging</code>构建类型<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs groovy">buildTypes &#123;<br>    <span class="hljs-comment">// staging 是一个自定义名字</span><br>    <span class="hljs-comment">// 生成signed App时可以选择这个类型</span><br>    staging.initWith(buildTypes.debug)<br>    staging &#123;<br>        applicationIdSuffix <span class="hljs-string">&quot;.staging&quot;</span><br>        versionNameSuffix <span class="hljs-string">&quot;-staging&quot;</span><br>        buildConfigField(<span class="hljs-string">&quot;String&quot;</span>, <span class="hljs-string">&quot;BASE_URL&quot;</span>, <span class="hljs-string">&quot;\&quot;http://www.staging.com\&quot;&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>这里定义了<code>applicationIdSuffix</code>，让staging版本的applicationId和release版本的不同。</p><p><code>initWith()</code>创建一个新的构建类型并复制现有的构建类型。用这个方法可以复写已有的构建类型。</p><h3 id="资源目录"><a href="#资源目录" class="headerlink" title="资源目录"></a>资源目录</h3><p>创建了新的构建类型后，可以建立新的资源文件。例如我们已经有了staging构建类型</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-attribute">src</span><br>├── androidTest<br>├── debug<br>├── greenRelease<br>├── <span class="hljs-selector-tag">main</span><br>├── redDebug<br>├── staging<span class="hljs-comment">// 可以新建资源目录</span><br>└── test<br></code></pre></td></tr></table></figure><p>不同资源目录里的文件可以用相同的文件名。</p><p>main目录里的strings.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">string</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;app_name&quot;</span>&gt;</span>GDemo<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br></code></pre></td></tr></table></figure></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- staging strings.xml --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">string</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;app_name&quot;</span>&gt;</span>GStaging<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br></code></pre></td></tr></table></figure><p>生成不同版本的app时，会自动去找相应的资源文件</p><h3 id="依赖包管理"><a href="#依赖包管理" class="headerlink" title="依赖包管理"></a>依赖包管理</h3><p>每一种构建类型可以有自己的依赖。Gradle自动为每个类型创建依赖配置。<br>下面就是单独为debug版本添加logging模块的依赖</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs groovy">dependencies &#123;<br>    compile fileTree(<span class="hljs-attr">dir:</span> <span class="hljs-string">&#x27;libs&#x27;</span>, <span class="hljs-attr">include:</span> [<span class="hljs-string">&#x27;*.jar&#x27;</span>])<br>    androidTestCompile(<span class="hljs-string">&#x27;com.android.support.test.espresso:espresso-core:2.2.2&#x27;</span>, &#123;<br>        exclude <span class="hljs-attr">group:</span> <span class="hljs-string">&#x27;com.android.support&#x27;</span>, <span class="hljs-attr">module:</span> <span class="hljs-string">&#x27;support-annotations&#x27;</span><br>    &#125;)<br>    compile <span class="hljs-string">&#x27;com.android.support:appcompat-v7:25.1.1&#x27;</span><br>    testCompile <span class="hljs-string">&#x27;junit:junit:4.12&#x27;</span><br><br>    debugCompile <span class="hljs-string">&#x27;de.mindpipe.android:android-logging-log4j:1.0.3&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Product-flavors-产品特征"><a href="#Product-flavors-产品特征" class="headerlink" title="Product flavors 产品特征"></a>Product flavors 产品特征</h2><p>product flavors用于创建同一个APP的不同版本。最直接的例子就是免费和付费版APP。</p><p>当我们要发布APP时，可以选择release或者staging（上面的例子）版。但是对同一个构建类型，比如对<br>于release版，我们可以用Product flavors打包出有各自特征的APP。比如：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-comment">// 多渠道打包可以用在这里配置</span><br><span class="hljs-comment">// 一旦配置了productFlavors，生成apk时会默认选其中一个选项</span><br>productFlavors &#123;<br>    red &#123;<br>        versionName <span class="hljs-string">&quot;1.0-red&quot;</span><br>    &#125;<br>    green &#123;<br>        applicationId <span class="hljs-string">&quot;com.rustfisher.gradletest.green&quot;</span> <span class="hljs-comment">// 使用另一个签名</span><br>        versionNameSuffix <span class="hljs-string">&quot;-green&quot;</span><span class="hljs-comment">// 版本名添加后缀</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="资源文件"><a href="#资源文件" class="headerlink" title="资源文件"></a>资源文件</h3><p>新建了productFlavors类型后，我们可以新建相应的资源目录。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">src<br>├── androidTest<br>├── debug<br>├── greenRelease <span class="hljs-regexp">//</span> release版本  采用green<br>├── main<br>├── redDebug <span class="hljs-regexp">//</span> debug版本   采用red<br>├── staging<br>└── test<br></code></pre></td></tr></table></figure><h3 id="多种特种的变量-Multiflavor-variants"><a href="#多种特种的变量-Multiflavor-variants" class="headerlink" title="多种特种的变量 Multiflavor variants"></a>多种特种的变量 Multiflavor variants</h3><p>在Product flavors中可以进行组合，例如</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs groovy">android &#123;<br><br>    flavorDimensions(<span class="hljs-string">&quot;color&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>) <span class="hljs-comment">// 新建了2种类型</span><br><br>    <span class="hljs-comment">// 多渠道打包可以用在这里配置</span><br>    <span class="hljs-comment">// 一旦配置了productFlavors，debug时会默认选一个选项</span><br>    productFlavors &#123;<br>        red &#123;<br>            versionName <span class="hljs-string">&quot;1.0-red&quot;</span><br>            dimension <span class="hljs-string">&quot;color&quot;</span><br>        &#125;<br>        green &#123;<br>            applicationId <span class="hljs-string">&quot;com.rustfisher.gradletest.green&quot;</span> <span class="hljs-comment">// 使用另一个签名</span><br>            versionNameSuffix <span class="hljs-string">&quot;-green&quot;</span><br>            dimension <span class="hljs-string">&quot;color&quot;</span><br>        &#125;<br>        freeApp &#123;<br>            dimension <span class="hljs-string">&quot;price&quot;</span><br>        &#125;<br>        paidApp &#123;<br>            dimension <span class="hljs-string">&quot;price&quot;</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>那么在打包apk时，可以有如下4种版本  </p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-built_in">green</span>-freeApp <br><span class="hljs-built_in">green</span>-paidApp <br><span class="hljs-built_in">red</span>-freeApp <br><span class="hljs-built_in">red</span>-paidApp<br></code></pre></td></tr></table></figure><p>一旦添加flavorDimensions，就必须为每一个flavor制定dimension。<br>就像上面的<code>color</code>和<code>price</code>必须出现在下面4种productFlavors之中。否则会报错。</p><h2 id="Build-Variants"><a href="#Build-Variants" class="headerlink" title="Build Variants"></a>Build Variants</h2><p>Android Studio左下角可以打开Build Variants窗口。选择模块和<code>Build Variants</code>。<br>前面配置的构建类型都会在这个列表中出现。</p><h3 id="Tasks-任务"><a href="#Tasks-任务" class="headerlink" title="Tasks 任务"></a>Tasks 任务</h3><p>Android plugin for Gradle 会自动为每个配置的构建类型创建任务。<br>新建项目时，会有默认的assembleDebug 和 assembleRelease。<br>经过上面的配置以后，会有产生相对应的任务<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">assemble</span><br><span class="hljs-attribute">assembleAndroidTest</span><br><span class="hljs-attribute">assembleDebug</span><br><span class="hljs-attribute">assembleFreeApp</span><br><span class="hljs-attribute">assembleGreen</span><br><span class="hljs-attribute">assembleGreenFreeApp</span><br><span class="hljs-attribute">assembleGreenPaidApp</span><br><span class="hljs-attribute">assemblePaidApp</span><br><span class="hljs-attribute">assembleRed</span><br><span class="hljs-attribute">assembleRedFreeApp</span><br><span class="hljs-attribute">assembleRedPaidApp</span><br><span class="hljs-attribute">assembleRelease</span><br><span class="hljs-attribute">assembleStaging</span><br></code></pre></td></tr></table></figure></p><h3 id="Resource-and-manifest-merging"><a href="#Resource-and-manifest-merging" class="headerlink" title="Resource and manifest merging"></a>Resource and manifest merging</h3><p>Android的Gradle插件会在打包app前将主要资源和构建类型资源合在一起。另外，lib工程也可以提供<br>额外可被合并的资源文件。manifest文件也可被合并。比如在debug版本中申请正式版中不需要的权限。</p><h3 id="定义构建变量"><a href="#定义构建变量" class="headerlink" title="定义构建变量"></a>定义构建变量</h3><p>给productFlavors中的类型添加资源</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs fsharp"><span class="hljs-keyword">productFlavors</span> &#123;<br>    <span class="hljs-keyword">red</span> &#123;<br>        versionName <span class="hljs-string">&quot;1.0-red&quot;</span><br>        dimension <span class="hljs-string">&quot;color&quot;</span><br>        resValue(<span class="hljs-string">&quot;color&quot;</span>, <span class="hljs-string">&quot;flavor_color&quot;</span>, <span class="hljs-string">&quot;#ff0000&quot;</span>)<br>    &#125;<br>    <span class="hljs-keyword">green</span> &#123;<br>        applicationId <span class="hljs-string">&quot;com.rustfisher.gradletest.green&quot;</span> <span class="hljs-comment">// 使用另一个签名</span><br>        versionNameSuffix <span class="hljs-string">&quot;-green&quot;</span><br>        resValue(<span class="hljs-string">&quot;color&quot;</span>, <span class="hljs-string">&quot;flavor_color&quot;</span>, <span class="hljs-string">&quot;#00ff00&quot;</span>)<br>        dimension <span class="hljs-string">&quot;color&quot;</span><br>    &#125;<br><span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>上面的flavor_color可以在代码中通过R文件找到<code>R.color.flavor_color</code></p><p>参考：<em>Gradle for Android</em>  Kevin Pelgrims</p>]]></content>
    
    
    <categories>
      
      <category>Android_note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>gradle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Gradle 基础自定义构建</title>
    <link href="/Android/Gradle_for_android_Basic_Build_Customization/"/>
    <url>/Android/Gradle_for_android_Basic_Build_Customization/</url>
    
    <content type="html"><![CDATA[<p>win7  Android Studio 2.1.3</p><p>基础自定义构建 Basic Build Customization</p><p>本章目的</p><ul><li>理解Gradle文件</li><li>build tasks入门</li><li>自定义构建</li></ul><h2 id="理解Gradle文件"><a href="#理解Gradle文件" class="headerlink" title="理解Gradle文件"></a>理解Gradle文件</h2><p>在Android Studio中新建一个项目后，会自动创建3个Gradle文件。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">MyApp<br>├── build<span class="hljs-selector-class">.gradle</span><br>├── settings<span class="hljs-selector-class">.gradle</span><br>└── app<br>    └── build.gradle<br></code></pre></td></tr></table></figure><p>每个文件都有自己的作用</p><h3 id="settings-gradle文件"><a href="#settings-gradle文件" class="headerlink" title="settings.gradle文件"></a>settings.gradle文件</h3><p>新建工程的settings文件类似下面这样</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs groovy">include <span class="hljs-string">&#x27;:app&#x27;</span><br></code></pre></td></tr></table></figure><p>Gradle为每个settings文件创建<code>Settings</code>对象，并调用其中的方法。</p><h3 id="The-top-level-build-file-最外层的构建文件"><a href="#The-top-level-build-file-最外层的构建文件" class="headerlink" title="The top-level build file 最外层的构建文件"></a>The top-level build file 最外层的构建文件</h3><p>能对工程中所有模块进行配置。如下</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs groovy">buildscript &#123;<br>    repositories &#123;<br>        jcenter()<br>    &#125;<br>    dependencies &#123;<br>        classpath <span class="hljs-string">&#x27;com.android.tools.build:gradle:2.1.3&#x27;</span><br><br>        <span class="hljs-comment">// <span class="hljs-doctag">NOTE:</span> Do not place your application dependencies here; they belong</span><br>        <span class="hljs-comment">// in the individual module build.gradle files</span><br>    &#125;<br>&#125;<br><br>allprojects &#123;<br>    repositories &#123;<br>        jcenter()<br>        maven &#123; url <span class="hljs-string">&quot;https://jitpack.io&quot;</span> &#125;<br>    &#125;<br>&#125;<br><br>task clean(<span class="hljs-attr">type:</span> Delete) &#123;<br>    delete rootProject.buildDir<br>&#125;<br></code></pre></td></tr></table></figure><p><code>buildscript</code>代码块是具体配置的地方，引用JCenter仓库。<br>本例中，一个仓库代表着依赖库，换句话说是app可以从中下载使用库文件。<br>JCenter是一个有名的 Maven 仓库。</p><p><code>dependencies</code>代码块用来配置依赖。上面注释说明了，不要在此添加依赖，而应该到独立的模块<br>中去配置依赖。</p><p><code>allprojects</code>能对所有模块进行配置。</p><h3 id="模块中的build文件"><a href="#模块中的build文件" class="headerlink" title="模块中的build文件"></a>模块中的build文件</h3><p>模块中的独立配置文件，会覆盖掉top-level的<code>build.gradle</code>文件</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs groovy">apply <span class="hljs-attr">plugin:</span> <span class="hljs-string">&#x27;com.android.application&#x27;</span><br><br>android &#123;<br>    compileSdkVersion <span class="hljs-number">25</span><br>    buildToolsVersion <span class="hljs-string">&quot;25.0.2&quot;</span><br><br>    defaultConfig &#123;<br>        applicationId <span class="hljs-string">&quot;com.xxx.rust.newproj&quot;</span><br>        minSdkVersion <span class="hljs-number">18</span><br>        targetSdkVersion <span class="hljs-number">25</span><br>        versionCode <span class="hljs-number">1</span><br>        versionName <span class="hljs-string">&quot;1.0&quot;</span><br>    &#125;<br>    buildTypes &#123;<br>        release &#123;<br>            minifyEnabled <span class="hljs-literal">false</span><br>            proguardFiles getDefaultProguardFile(<span class="hljs-string">&#x27;proguard-android.txt&#x27;</span>), <span class="hljs-string">&#x27;proguard-rules.pro&#x27;</span><br>        &#125;<br>    &#125;<br>&#125;<br><br>dependencies &#123;<br>    compile fileTree(<span class="hljs-attr">dir:</span> <span class="hljs-string">&#x27;libs&#x27;</span>, <span class="hljs-attr">include:</span> [<span class="hljs-string">&#x27;*.jar&#x27;</span>])<br>    testCompile <span class="hljs-string">&#x27;junit:junit:4.12&#x27;</span><br>    compile <span class="hljs-string">&#x27;com.android.support:appcompat-v7:25.1.0&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>下面来看3个主要的代码块。</p><h4 id="plugin"><a href="#plugin" class="headerlink" title="plugin"></a>plugin</h4><p>第一行应用了Android 应用插件。Android插件由Google团队开发维护。该插件提供构建，测试，打包应用和模块需要的所有的task。</p><h4 id="android"><a href="#android" class="headerlink" title="android"></a>android</h4><p>最大的一个区域。defaultConfig区域对app核心进行配置，会配置覆盖AndroidManifest.xml中的配置。</p><p>applicationId复写掉manifest文件中的包名。但applicationId和包名有区别。<br>manifest中的包名，在源代码和R文件中使用。所以package name在android studio中理解为一个查询类的路径比较合理。<br>applicationId在Android系统中是作为应用的唯一标识，即在一个Android设备中所有的应用程序的applicationId都是唯一的。</p><h4 id="dependencies"><a href="#dependencies" class="headerlink" title="dependencies"></a>dependencies</h4><p>是Gradle标准配置的一部分。<br>Android中用来配置使用到的库。</p><h2 id="定制化构建-Customizing-the-build"><a href="#定制化构建-Customizing-the-build" class="headerlink" title="定制化构建 Customizing the build"></a>定制化构建 Customizing the build</h2><h3 id="BuildConfig-and-resources"><a href="#BuildConfig-and-resources" class="headerlink" title="BuildConfig and resources"></a>BuildConfig and resources</h3><p>自从SDK17以来，构建工具会生成一个BuildConfig类，包含着静态变量DEBUG和一些信息。<br>如果你想在区分debug和正式版，比如打log，这个BuildConfig类很有用。<br>可以通过Gradle来扩展这个类，让它拥有更多的静态变量。</p><p>以NewProj工程为例，<code>app\build.gradle</code></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs groovy">android &#123;<br>    compileSdkVersion <span class="hljs-number">25</span><br>    buildToolsVersion <span class="hljs-string">&quot;25.0.2&quot;</span><br><br>    defaultConfig &#123;<br>        applicationId <span class="hljs-string">&quot;com.xxx.rust.newproj&quot;</span><br>        minSdkVersion <span class="hljs-number">18</span><br>        targetSdkVersion <span class="hljs-number">25</span><br>        versionCode <span class="hljs-number">1</span><br>        versionName <span class="hljs-string">&quot;1.0&quot;</span><br>    &#125;<br>    buildTypes &#123;<br>        debug &#123;<br>            buildConfigField(<span class="hljs-string">&quot;String&quot;</span>, <span class="hljs-string">&quot;BASE_URL&quot;</span>, <span class="hljs-string">&quot;\&quot;http://www.baidu.com\&quot;&quot;</span>)<br>            buildConfigField(<span class="hljs-string">&quot;String&quot;</span>, <span class="hljs-string">&quot;A_CONTENT&quot;</span>, <span class="hljs-string">&quot;\&quot;debug content\&quot;&quot;</span>)<br>            resValue(<span class="hljs-string">&quot;string&quot;</span>, <span class="hljs-string">&quot;str_version&quot;</span>, <span class="hljs-string">&quot;debug_ver&quot;</span>)<br>        &#125;<br>        release &#123;<br>            buildConfigField(<span class="hljs-string">&quot;String&quot;</span>, <span class="hljs-string">&quot;BASE_URL&quot;</span>, <span class="hljs-string">&quot;\&quot;http://www.qq.com\&quot;&quot;</span>)<br>            buildConfigField(<span class="hljs-string">&quot;String&quot;</span>, <span class="hljs-string">&quot;A_CONTENT&quot;</span>, <span class="hljs-string">&quot;\&quot;release content\&quot;&quot;</span>)<br>            resValue(<span class="hljs-string">&quot;string&quot;</span>, <span class="hljs-string">&quot;str_version&quot;</span>, <span class="hljs-string">&quot;release_ver&quot;</span>)<br><br>            minifyEnabled <span class="hljs-literal">false</span><br>            proguardFiles getDefaultProguardFile(<span class="hljs-string">&#x27;proguard-android.txt&#x27;</span>), <span class="hljs-string">&#x27;proguard-rules.pro&#x27;</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的<code>buildConfigField</code>和<code>resValue</code>在编译后，能在源代码中使用<br>注意上面那个转义的分号不可少；注意里面的大小写，这里传入的参数就像是直接填入的代码一样</p><p>下面是编译后生成的BuildConfig文件，可以看到buildConfigField的东西已经在里面了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BuildConfig</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">DEBUG</span> <span class="hljs-operator">=</span> Boolean.parseBoolean(<span class="hljs-string">&quot;true&quot;</span>);<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">APPLICATION_ID</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.xxx.rust.newproj&quot;</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">BUILD_TYPE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;debug&quot;</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">FLAVOR</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">VERSION_CODE</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">VERSION_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1.0&quot;</span>;<br>  <span class="hljs-comment">// Fields from build type: debug</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">A_CONTENT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;debug content&quot;</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">BASE_URL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://www.baidu.com&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>resValue会被添加到资源文件中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">mTv2.setText(R.string.str_version);<br></code></pre></td></tr></table></figure><h3 id="通过-build-gradle-增加获取-applicationId-的方式"><a href="#通过-build-gradle-增加获取-applicationId-的方式" class="headerlink" title="通过 build.gradle 增加获取 applicationId 的方式"></a>通过 build.gradle 增加获取 applicationId 的方式</h3><p>模块<code>build.gradle</code>中添加属性<code>applicationId</code>，会被编译到BuildConfig中<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs groovy">project.afterEvaluate &#123;<br>    project.android.applicationVariants.all &#123; variant -&gt;<br>        <span class="hljs-keyword">def</span> applicationId = [variant.mergedFlavor.applicationId, variant.buildType.applicationIdSuffix].findAll().join()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>在代码中可以直接使用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">appID</span> <span class="hljs-operator">=</span> BuildConfig.APPLICATION_ID;<br></code></pre></td></tr></table></figure></p><h3 id="获取时间的方法"><a href="#获取时间的方法" class="headerlink" title="获取时间的方法"></a>获取时间的方法</h3><p>模块<code>build.gradle</code>中添加方法<code>getTime()</code>，并在<code>buildTypes</code>中添加域。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-comment">// 获取当前时间</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">def</span> getTime() &#123;<br>    String timeNow = <span class="hljs-keyword">new</span> Date().format(<span class="hljs-string">&#x27;YYYYMMdd-HHmmss&#x27;</span>)<br>    <span class="hljs-keyword">return</span> timeNow<br>&#125;<br><br>android &#123;<br>    <span class="hljs-comment">// ...</span><br>    buildTypes &#123;<br>        debug &#123;<br>            buildConfigField <span class="hljs-string">&quot;String&quot;</span>, <span class="hljs-string">&quot;BUILD_TIME&quot;</span>, <span class="hljs-string">&quot;\&quot;&quot;</span> + getTime() + <span class="hljs-string">&quot;\&quot;&quot;</span><br>        &#125;<br>        release &#123;<br>            buildConfigField <span class="hljs-string">&quot;String&quot;</span>, <span class="hljs-string">&quot;BUILD_TIME&quot;</span>, <span class="hljs-string">&quot;\&quot;&quot;</span> + getTime() + <span class="hljs-string">&quot;\&quot;&quot;</span><br>            <span class="hljs-comment">// ...</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p><code>BuildConfig.java</code>中得到这个域。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Fields from build type: debug</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">BUILD_TIME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;20180912-100335&quot;</span>;<br></code></pre></td></tr></table></figure></p><h3 id="修改release-apk文件名的方法"><a href="#修改release-apk文件名的方法" class="headerlink" title="修改release apk文件名的方法"></a>修改release apk文件名的方法</h3><p>gradle版本3.1.4。使用了上面的方法<code>getTime()</code>。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs groovy">android &#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-comment">// 修改release的apk名字</span><br>    applicationVariants.all &#123; variant -&gt;<br>        variant.outputs.all &#123;<br>            <span class="hljs-keyword">if</span> (variant.buildType.name == <span class="hljs-string">&#x27;release&#x27;</span>) &#123;<br>                outputFileName = <span class="hljs-string">&quot;xxx_release_$&#123;defaultConfig.versionName&#125;_$&#123;getTime()&#125;.apk&quot;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以前的方法可能会遇到问题：<code>Cannot set the value of read-only property &#39;outputFile&#39; for ApkVariantOutputImpl_Decorated</code>。<br>参考：<a href="https://stackoverflow.com/questions/44239235/android-gradle-3-0-0-alpha2-plugin-cannot-set-the-value-of-read-only-property">https://stackoverflow.com/questions/44239235/android-gradle-3-0-0-alpha2-plugin-cannot-set-the-value-of-read-only-property</a></p><h3 id="工程范围的设置"><a href="#工程范围的设置" class="headerlink" title="工程范围的设置"></a>工程范围的设置</h3><p>如果一个工程中有多个模块，可以对整个工程应用设置，而不用去修改每一个模块。</p><p><code>NewProj\build.gradle</code><br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs groovy">allprojects &#123;<br>    repositories &#123;<br>        jcenter()<br>    &#125;<br>&#125;<br><br>ext &#123;<br>    compileSDKVersion = <span class="hljs-number">25</span><br>    local = <span class="hljs-string">&#x27;Hello from the top-level build&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure></p><p>每一个<code>build.gradle</code>文件都能定义额外的属性，在ext代码块中。</p><p>在一个模块的<code>libmodule\build.gradle</code>文件中，可以引用rootProject的ext属性</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs groovy">android &#123;<br>    compileSdkVersion rootProject.ext.compileSDKVersion<br>    buildToolsVersion <span class="hljs-string">&quot;25.0.2&quot;</span><br>    <span class="hljs-comment">// ....</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="工程属性-Project-properties"><a href="#工程属性-Project-properties" class="headerlink" title="工程属性 Project properties"></a>工程属性 Project properties</h3><p>定义properties的地方</p><ul><li>ext代码块</li><li>gradle.properties文件</li><li>命令行 -P 参数</li></ul><p>工程<code>build.gradle</code>文件<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs groovy">ext &#123;<br>    compileSDKVersion = <span class="hljs-number">25</span><br>    local = <span class="hljs-string">&#x27;Hello from the top-level build&#x27;</span><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Print properties info</span><br><span class="hljs-comment"> */</span><br>task aPrintSomeInfo &#123;<br>    println(local)<br>    println(<span class="hljs-string">&#x27;project dir: &#x27;</span> + projectDir)<br>    println(projectPropertiesFileText)<br>&#125;<br><br>task aPrintAllProperites() &#123;<br>    println(<span class="hljs-string">&#x27;\nthis is aPrintAllProperites task\n&#x27;</span>)<br>    Iterator pIt = properties.iterator()<br>    <span class="hljs-keyword">while</span> (pIt.hasNext()) &#123;<br>        println(pIt.next())<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>gradle.properties文件中增加<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">projectPropertiesFileText</span> <span class="hljs-operator">=</span> Hello there from gradle.properties<br></code></pre></td></tr></table></figure></p><p>在as的Gradle栏上双击执行aPrintSomeInfo，会连带下一个task也执行</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-number">13</span>:<span class="hljs-number">08</span>:<span class="hljs-number">10</span>: Executing external <span class="hljs-keyword">task</span> <span class="hljs-string">&#x27;aPrintSomeInfo&#x27;</span>...<br>Hello <span class="hljs-keyword">from</span> the top-level build<br><span class="hljs-keyword">project</span> dir: G:\openSourceProject\NewProj<br>Hello there <span class="hljs-keyword">from</span> gradle.properties<br><br><span class="hljs-keyword">this</span> is aPrintAllProperites <span class="hljs-keyword">task</span><br>......<br>BUILD SUCCESSFUL<br><br>Total time: <span class="hljs-number">1.025</span> secs<br><span class="hljs-number">13</span>:<span class="hljs-number">08</span>:<span class="hljs-number">11</span>: External <span class="hljs-keyword">task</span> execution finished <span class="hljs-string">&#x27;aPrintSomeInfo&#x27;</span>.<br></code></pre></td></tr></table></figure><p>参考：<em>Gradle for Android</em>  Kevin Pelgrims</p>]]></content>
    
    
    <categories>
      
      <category>Android_note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>gradle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Gradle for Android 开始</title>
    <link href="/Android/Gradle_for_android_Start/"/>
    <url>/Android/Gradle_for_android_Start/</url>
    
    <content type="html"><![CDATA[<h1 id="Gradle-for-Android开始"><a href="#Gradle-for-Android开始" class="headerlink" title="Gradle for Android开始"></a>Gradle for Android开始</h1><p>Google在Gradle中的目标：能复用代码，创建构建变量，能配置和定制构建过程。</p><h2 id="Gradle基础"><a href="#Gradle基础" class="headerlink" title="Gradle基础"></a>Gradle基础</h2><p>Gradle构建脚本并不是用XML来写的，而是基于Groovy的一种（domain-specifc language）<br>DSL语言。这是一种运行在JVM上的动态语言。</p><p>如果要构建新的任务和插件，我们需要了解这门语言。</p><h2 id="Projects-and-tasks"><a href="#Projects-and-tasks" class="headerlink" title="Projects and tasks"></a>Projects and tasks</h2><p>这是Gradle种最重要的两个概念。每个构建（build）至少包含一个project，每一个project包含<br>一个或多个task。每个<code>build.gradle</code>代表一个project。task被定义在这个构建脚本中。<br>一个task对象包含一列需要被执行的Action对象。一个Action对象就是一块被执行的代码，就像<br>Java中的方法。</p><p>当初始化构建进程时，Gradle收集build文件中的project和task对象。</p><h2 id="构建的生命周期（The-build-lifecycle）"><a href="#构建的生命周期（The-build-lifecycle）" class="headerlink" title="构建的生命周期（The build lifecycle）"></a>构建的生命周期（The build lifecycle）</h2><p>为简化构建过程，构建工具创造了一种工作流的动态模型DAG（Directed Acyclic Graph）。<br>这意味着所有的任务会一个接一个地执行，不会出现循环的情况。<br>一个任务一旦被执行就不会再被调用。没有依赖的任务永远是最优先执行的。<br>在配置过程中生成依赖关系。</p><p>一个Gradle构建过程有3个步骤：</p><ul><li>初始化：工程实例被创建时初始化。如果有多个模块，每个模块有自己的<code>build.gradle</code>文件，<br>多个project被创建。</li><li>配置：这一步执行build脚本，创建并配置每个project的task。</li><li>执行：Gradle决定执行那些任务。根据当前目录和传入参数执行task。</li></ul><h2 id="build配置文件"><a href="#build配置文件" class="headerlink" title="build配置文件"></a>build配置文件</h2><p><code>build.gradle</code>文件。配置build的地方。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs groovy">buildscript &#123;<br>    repositories &#123;<br>        jcenter()<br>    &#125;<br>    dependencies &#123;<br>        classpath <span class="hljs-string">&#x27;com.android.tools.build:gradle:2.2.2&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>repositories块中，指定JCenter作为依赖仓库。<br>这个脚本获取了Android构建工具。这个Android插件提供了构建和测试应用所需的功能。</p><p>插件被用来扩展Gradle构建脚本的功能。在project中使用插件，就可以定义属性和任务。</p><h2 id="Gradle-Wrapper初步"><a href="#Gradle-Wrapper初步" class="headerlink" title="Gradle Wrapper初步"></a>Gradle Wrapper初步</h2><p>Gradle是一个开发中的工具。使用Gradle Wrapper可以避免一些问题，确保能构建顺利。<br>Gradle在Windows系统上提供了batch文件，在其他系统上提供了shell脚本。试图运行脚本时，会<br>自动检查并下载Gradle。但在我们的网络比较令人着急。可以尝试在网络上找资源。</p><p>比如我下载了一个<code>gradle-2.14.1-all.zip</code>，将其放到Android工程的gradle/wrapper下</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ada">gradle<br>`<span class="hljs-comment">-- wrapper</span><br>    |<span class="hljs-comment">-- gradle-2.14.1-all.zip</span><br>    |<span class="hljs-comment">-- gradle-wrapper.jar</span><br>    `<span class="hljs-comment">-- gradle-wrapper.properties</span><br></code></pre></td></tr></table></figure><p>然后修改<code>gradle-wrapper.properties</code>文件，把Url修改成<br><code>distributionUrl=gradle-2.14.1-all.zip</code></p><p>在Android Studio提供的Terminal中运行<code>grawdlew</code>，先unzipping，然后开始下载依赖文件。<br>这些文件在windows中默认存放到<br><code>C:\Users\UserName\.gradle\wrapper\dists\gradle-2.14.1-all</code>，还是很占空间的。<br>此时你可以在项目下的命令行中使用grawdlew命令。比如查看版本。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">G:\rust_proj\NDKProj&gt;gradlew -v<br><br><span class="hljs-code">------------------------------------------------------------</span><br><span class="hljs-code">Gradle 2.14.1</span><br><span class="hljs-code">------------------------------------------------------------</span><br><br>Build time:   2016-07-18 06:38:37 UTC<br>Revision:     d9e2113d9fb05a5caabba61798bdb8dfdca83719<br><br>Groovy:       2.4.4<br>Ant:          Apache Ant(TM) version 1.9.6 compiled on June 29 2015<br>JVM:          1.8.0_77 (Oracle Corporation 25.77-b03)<br>OS:           Windows 7 6.1 amd64<br></code></pre></td></tr></table></figure><p>如果在另一个Android项目下同样复制了<code>gradle-2.14.1-all.zip</code>，并且尝试运行gradlew，<br>C盘里相应目录下又会多一个文件夹。</p><h2 id="获取Gradle-Wrapper"><a href="#获取Gradle-Wrapper" class="headerlink" title="获取Gradle Wrapper"></a>获取Gradle Wrapper</h2><p>打开Windows CMD，进入前面配置好的Android工程目录，同样可以运行gradlew。</p><p>此时我们的C盘里已经有<code>gradle-2.14.1-all.zip</code>了。找到<code>gradle.bat</code>的路径，将其添加到<br>电脑PATH中。这里添加到用户的环境变量中。</p><p>在G盘新建一个目录<code>gradleTest</code>，然后创建一个<code>build.gradle</code>文件；其中填写如下代码</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">task <span class="hljs-keyword">wrapper</span>(<span class="hljs-keyword">type</span>: <span class="hljs-keyword">Wrapper</span>) &#123;<br>    gradleVersion = <span class="hljs-string">&#x27;2.4&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>进入刚才的目录，在CMD中直接运行gradle</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros">G:\gradleTest&gt;gradle<br>:help<br>Welcome <span class="hljs-keyword">to</span> Gradle 2.14.1.<br><span class="hljs-keyword">To</span> <span class="hljs-built_in">run</span> a build, <span class="hljs-built_in">run</span> gradle &lt;task&gt; <span class="hljs-built_in">..</span>.<br><span class="hljs-keyword">To</span> see a list of available tasks, <span class="hljs-built_in">run</span> gradle tasks<br><span class="hljs-keyword">To</span> see a list of command-line options, <span class="hljs-built_in">run</span> gradle --help<br><span class="hljs-keyword">To</span> see more detail about a task, <span class="hljs-built_in">run</span> gradle help --task &lt;task&gt;<br>BUILD SUCCESSFUL<br>Total time: 1.714 secs<br></code></pre></td></tr></table></figure><p>此时目录下生成了一个<code>.gradle</code>目录</p><p>如果当前目录下没有<code>build.gradle</code>文件，gradle也会执行并生成<code>.gradle</code>目录。</p><p>我们来观察Android项目里Gradle Wrapper的情况<br><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">NDKProj/<br>├── gradlew<br>├── gradlew.bat<br>└── gradle/<span class="hljs-keyword">wrapper</span>/<br>    ├── gradle-<span class="hljs-keyword">wrapper</span>.jar<br>    └── gradle-<span class="hljs-keyword">wrapper</span>.properties<br></code></pre></td></tr></table></figure><br>Gradle Wrapper包含3个部分：</p><ul><li>MS可执行的gradlew.bat和Linux， Mac OS X可执行的gradlew</li><li>脚本需要的Jar文件</li><li>一个properties文件</li></ul><p>在前面我们已经把properties文件修改成了这样：<br><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-meta">#Mon Aug 29 19:26:36 CST 2016</span><br>distributionBase=GRADLE_USER_HOME<br>distributionPath=<span class="hljs-keyword">wrapper</span>/dists<br>zipStoreBase=GRADLE_USER_HOME<br>zipStorePath=<span class="hljs-keyword">wrapper</span>/dists<br>distributionUrl=gradle<span class="hljs-number">-2.14</span><span class="hljs-number">.1</span>-<span class="hljs-keyword">all</span>.zip<br></code></pre></td></tr></table></figure></p><p>原distributionUrl如下：<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">distributionUrl</span>=https\://services.gradle.org/distributions/gradle-<span class="hljs-number">2</span>.<span class="hljs-number">14</span>.<span class="hljs-number">1</span>-<span class="hljs-literal">all</span>.zip<br></code></pre></td></tr></table></figure></p><p>这意味着我们可以使用不同的URL和Gradle。我们前面已经这么做了。</p><h2 id="运行基本的构建任务（task）"><a href="#运行基本的构建任务（task）" class="headerlink" title="运行基本的构建任务（task）"></a>运行基本的构建任务（task）</h2><p>进入Android工程目录下，用命令行执行gradlew<br><code>gradlew tasks</code>会打印出任务列表；<code>gradlew tasks --all</code>打印出所有的任务</p><p><code>gradlew assembleDebug</code>编译当前项目，创建一个debug版本的apk</p><p><code>gradlew clean</code>清理当前项目的output</p><p><code>gradlew check</code>运行所有的检查，通常是在真机或者模拟器上运行测试</p><p><code>gradlew build</code>触发assemble 和 check</p><p>这些功能在Android Studio上都有相应按键</p><p>参考：<em>Gradle for Android</em>  Kevin Pelgrims</p>]]></content>
    
    
    <categories>
      
      <category>Android_note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>gradle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PyQt QMainWindow 简单使用</title>
    <link href="/PyQt_note/PyQt-QMainWindow_simple_practice/"/>
    <url>/PyQt_note/PyQt-QMainWindow_simple_practice/</url>
    
    <content type="html"><![CDATA[<p>QMainWindow继承自QWidget<br>QMainWindow相当于程序的主界面，内置了menu和toolBar。<br>使用 Qt Designer 可以很方便地添加menu选项。</p><p>对于较大型的界面，用Qt Designer比较方便。<code>.ui</code>文件就像Android中使用xml一样。<br>画出的ui文件可以用PyQt中的PyUIC转换成py文件。转换后的py文件中有一个class。<br>新建一个继承自QMainWindow的类，来调用生成的这个类。</p><p>主窗口关闭时，会调用<code>closeEvent(self, *args, **kwargs)</code>，可复写这个方法，加上一些关闭时的操作。<br>比如终止子线程，关闭数据库接口，释放资源等等操作。</p><h2 id="PyQt5-手写-QMainWindow-示例"><a href="#PyQt5-手写-QMainWindow-示例" class="headerlink" title="PyQt5 手写 QMainWindow 示例"></a>PyQt5 手写 QMainWindow 示例</h2><p>Win7  PyCharm  Python3.5.1  PyQt5</p><p>手写一个main window，主要使用了菜单栏、文本编辑框、工具栏和状态栏<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ada">|<span class="hljs-comment">-- main.py</span><br>|<span class="hljs-comment">-- res</span><br>|   `<span class="hljs-comment">-- sword.png</span><br>`<span class="hljs-comment">-- ui</span><br>    `<span class="hljs-comment">-- app_main_window.py</span><br></code></pre></td></tr></table></figure></p><p><code>main.py</code>主文件<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">from</span> PyQt5.QtWidgets <span class="hljs-keyword">import</span> QApplication<br><span class="hljs-keyword">from</span> ui.app_main_window <span class="hljs-keyword">import</span> AppMainWindow<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app = QApplication(sys.argv)<br>    window = AppMainWindow()<br>    window.show()<br>    sys.exit(app.exec_())<br></code></pre></td></tr></table></figure></p><p><code>app_main_window.py</code>窗口实现文件<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PyQt5.QtCore <span class="hljs-keyword">import</span> QCoreApplication<br><span class="hljs-keyword">from</span> PyQt5.QtGui <span class="hljs-keyword">import</span> QIcon<br><span class="hljs-keyword">from</span> PyQt5.QtWidgets <span class="hljs-keyword">import</span> QAction<br><span class="hljs-keyword">from</span> PyQt5.QtWidgets <span class="hljs-keyword">import</span> QMainWindow<br><span class="hljs-keyword">from</span> PyQt5.QtWidgets <span class="hljs-keyword">import</span> QTextEdit<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AppMainWindow</span>(<span class="hljs-title class_ inherited__">QMainWindow</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    菜单栏、文本编辑框、工具栏和状态栏</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        self.init_ui()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">init_ui</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 菜单栏</span><br>        self.statusBar().showMessage(<span class="hljs-string">&#x27;Main window is ready&#x27;</span>)<br>        self.setGeometry(<span class="hljs-number">500</span>, <span class="hljs-number">500</span>, <span class="hljs-number">450</span>, <span class="hljs-number">220</span>)<br>        self.setMinimumSize(<span class="hljs-number">150</span>, <span class="hljs-number">120</span>)<br>        self.setWindowTitle(<span class="hljs-string">&#x27;MainWindow&#x27;</span>)<br><br>        <span class="hljs-comment"># 文本编辑框</span><br>        text_edit = QTextEdit()<br>        self.setCentralWidget(text_edit)  <span class="hljs-comment"># 填充剩下的位置</span><br><br>        <span class="hljs-comment"># 定义退出动作</span><br>        exit_action = QAction(QIcon(<span class="hljs-string">&#x27;res/sword.png&#x27;</span>), <span class="hljs-string">&#x27;Exit&#x27;</span>, self)<br>        exit_action.setShortcut(<span class="hljs-string">&#x27;Ctrl+Q&#x27;</span>)<br>        exit_action.setStatusTip(<span class="hljs-string">&#x27;Exit App&#x27;</span>)  <span class="hljs-comment"># 鼠标指向选项时在窗口状态栏出现的提示</span><br>        <span class="hljs-comment"># exit_action.triggered.connect(QCoreApplication.instance().quit)</span><br>        exit_action.triggered.connect(self.close)  <span class="hljs-comment"># 关闭app</span><br><br>        <span class="hljs-comment"># 定义菜单栏，添加一个选项</span><br>        menu_bar = self.menuBar()<br>        file_menu = menu_bar.addMenu(<span class="hljs-string">&#x27;&amp;File&#x27;</span>)<br>        file_menu.addAction(exit_action)<br><br>        <span class="hljs-comment"># 定义工具栏，添加一个退出动作</span><br>        toolbar = self.addToolBar(<span class="hljs-string">&#x27;&amp;Exit&#x27;</span>)<br>        toolbar.addAction(exit_action)<br><br></code></pre></td></tr></table></figure></p><p>有的时候PyCharm给的代码提示不完全。网上说PyCharm配合vim插件来使用能带来很好的体验。<br>生成的界面中，工具栏可以自由的拖动，可以放在上下左右4个地方。</p><p>同样的代码，可以很方便地移植到PyQt4中。</p><h2 id="使用designer画出来的界面"><a href="#使用designer画出来的界面" class="headerlink" title="使用designer画出来的界面"></a>使用designer画出来的界面</h2><p>Ubuntu</p><p>使用designer绘制好界面后，讲ui文件转换成py代码。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">from</span> PyQt5.QtWidgets <span class="hljs-keyword">import</span> QMainWindow, QApplication<br><span class="hljs-keyword">from</span> ui_main_window <span class="hljs-keyword">import</span> Ui_UAppMainWindow<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RustMainWindow</span>(<span class="hljs-title class_ inherited__">QMainWindow</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;主界面类&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(RustMainWindow, self).__init__()<br>        self.ma = Ui_UAppMainWindow()  <span class="hljs-comment"># designer画的界面</span><br>        self.ma.setupUi(self)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app = QApplication(sys.argv)<br>    main_window = RustMainWindow()<br>    main_window.show()<br>    sys.exit(app.exec_())<br><br></code></pre></td></tr></table></figure></p><p>复写<code>__init__</code>初始化方法时需要调用父类方法</p><h2 id="PyQt4手写窗口代码"><a href="#PyQt4手写窗口代码" class="headerlink" title="PyQt4手写窗口代码"></a>PyQt4手写窗口代码</h2><p>和上面那个功能类似。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">from</span> PyQt4.QtGui <span class="hljs-keyword">import</span> QMainWindow, QTextEdit, QAction, QIcon, QApplication<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AppMainWindow</span>(<span class="hljs-title class_ inherited__">QMainWindow</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(AppMainWindow, self).__init__()<br>        self.init_ui()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">init_ui</span>(<span class="hljs-params">self</span>):<br>        self.statusBar().showMessage(<span class="hljs-string">&#x27;Main window is ready&#x27;</span>)<br>        self.setGeometry(<span class="hljs-number">500</span>, <span class="hljs-number">500</span>, <span class="hljs-number">450</span>, <span class="hljs-number">220</span>)<br>        self.setMinimumSize(<span class="hljs-number">150</span>, <span class="hljs-number">120</span>)<br>        self.setWindowTitle(<span class="hljs-string">&#x27;MainWindow&#x27;</span>)<br><br>        text_edit = QTextEdit()<br>        self.setCentralWidget(text_edit)<br><br>        exit_action = QAction(QIcon(<span class="hljs-string">&#x27;res/ic_s1.png&#x27;</span>), <span class="hljs-string">&#x27;Exit&#x27;</span>, self)<br>        exit_action.setShortcut(<span class="hljs-string">&#x27;Ctrl+Q&#x27;</span>)<br>        exit_action.setStatusTip(<span class="hljs-string">&#x27;Exit App&#x27;</span>)<br>        exit_action.triggered.connect(self.close)<br><br>        menu_bar = self.menuBar()<br>        file_menu = menu_bar.addMenu(<span class="hljs-string">&#x27;&amp;File&#x27;</span>)<br>        file_menu.addAction(exit_action)<br><br>        toolbar = self.addToolBar(<span class="hljs-string">&#x27;&amp;Exit&#x27;</span>)<br>        toolbar.addAction(exit_action)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app = QApplication(sys.argv)<br>    window = AppMainWindow()<br>    window.show()<br>    sys.exit(app.exec_())<br><br></code></pre></td></tr></table></figure><p>可以看出，PyQt4 和 5 的代码基本上是通用的。复写<code>__init__</code>的方法不同。</p>]]></content>
    
    
    <categories>
      
      <category>PyQt</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>PyQt 创建自定义QWidget</title>
    <link href="/PyQt_note/PyQt5-Custom_QWidget/"/>
    <url>/PyQt_note/PyQt5-Custom_QWidget/</url>
    
    <content type="html"><![CDATA[<h2 id="PyQt5-QtWidgets-示例"><a href="#PyQt5-QtWidgets-示例" class="headerlink" title="PyQt5.QtWidgets 示例"></a>PyQt5.QtWidgets 示例</h2><p>Win7  PyCharm  Python3.5.1  PyQt5</p><p>主要文件：<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ada">|<span class="hljs-comment">-- main.py</span><br>|<span class="hljs-comment">-- res</span><br>|   `<span class="hljs-comment">-- fish.jpg</span><br>`<span class="hljs-comment">-- ui</span><br>    `<span class="hljs-comment">-- app_widget.py</span><br></code></pre></td></tr></table></figure></p><p><code>main.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">from</span> PyQt5.QtWidgets <span class="hljs-keyword">import</span> QApplication<br><br><span class="hljs-keyword">from</span> ui.app_widget <span class="hljs-keyword">import</span> AppQWidget<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app = QApplication(sys.argv)<br>    w = AppQWidget()<br>    w.show()<br><br>    sys.exit(app.exec_())<br><br></code></pre></td></tr></table></figure></p><p><code>app_main_window.py</code>自定义了一个居中显示的窗口，关闭时弹确认框</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PyQt5.QtCore <span class="hljs-keyword">import</span> QCoreApplication<br><span class="hljs-keyword">from</span> PyQt5.QtGui <span class="hljs-keyword">import</span> QIcon<br><span class="hljs-keyword">from</span> PyQt5.QtWidgets <span class="hljs-keyword">import</span> QWidget, QPushButton, QDesktopWidget, QMessageBox<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AppQWidget</span>(<span class="hljs-title class_ inherited__">QWidget</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    A custom QWidget by Rust Fisher</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        self.init_ui()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">init_ui</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># self.setGeometry(300, 300, 400, 200)  # 相当于move和resize</span><br>        self.resize(<span class="hljs-number">300</span>, <span class="hljs-number">200</span>)<br>        self.move_to_center()<br>        self.setWindowTitle(<span class="hljs-string">&#x27;Demo1&#x27;</span>)<br>        self.setWindowIcon(QIcon(<span class="hljs-string">&#x27;res/fish.jpg&#x27;</span>))<br><br>        btn1 = QPushButton(<span class="hljs-string">&#x27;Quit&#x27;</span>, self)<br>        btn1.setToolTip(<span class="hljs-string">&#x27;Click to quit&#x27;</span>)<br>        btn1.resize(btn1.sizeHint())<br>        btn1.move(<span class="hljs-number">200</span>, <span class="hljs-number">150</span>)<br>        btn1.clicked.connect(QCoreApplication.instance().quit)  <span class="hljs-comment"># cannot locate function connect</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">closeEvent</span>(<span class="hljs-params">self, event</span>):<br>        reply = QMessageBox.question(self, <span class="hljs-string">&#x27;Message&#x27;</span>,<br>                                     <span class="hljs-string">&#x27;Are you sure to quit now?&#x27;</span>,<br>                                     QMessageBox.Yes | QMessageBox.No,<br>                                     QMessageBox.No)<br>        <span class="hljs-keyword">if</span> reply == QMessageBox.Yes:<br>            event.accept()<br>        <span class="hljs-keyword">else</span>:<br>            event.ignore()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">move_to_center</span>(<span class="hljs-params">self</span>):<br>        qr = self.frameGeometry()<br>        cp = QDesktopWidget().availableGeometry().center()  <span class="hljs-comment"># got center info here</span><br>        qr.moveCenter(cp)<br>        self.move(qr.topLeft())  <span class="hljs-comment"># 应用窗口的左上方的点到qr矩形的左上方的点，因此居中显示在我们的屏幕上</span><br><br></code></pre></td></tr></table></figure><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><h3 id="多控件可以存在list中"><a href="#多控件可以存在list中" class="headerlink" title="多控件可以存在list中"></a>多控件可以存在list中</h3><p>存在一起，需要对整体操作时直接遍历列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python">    <span class="hljs-comment"># 同组的控件可以存在同一个list中</span><br>    self.cb_list = [<br>        self.ma.i2cCB,<br>        self.ma.mipiCB,<br>        self.ma.eepromCB,<br>        self.ma.tem_sensorCB,<br>        self.ma.lensCB,<br>        self.ma.vcmCB,<br>        self.ma.mirrorCB,<br>        self.ma.mirrorCaliCB, ]<br><br>    self.test_count_et_list = [<br>        self.ma.i2cCountEt,<br>        self.ma.mipiCountEt,<br>        self.ma.eepromCountEt,<br>        self.ma.tem_sensorCountEt,<br>        self.ma.lensCountEt,<br>        self.ma.vcmCountEt,<br>        self.ma.mirrorCountEt,<br>        self.ma.mirrorCaliCountEt,<br>    ]<br><br><span class="hljs-comment"># 需要操作某组控件时  直接遍历列表</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_click_test_item_cb</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-string">&quot;&quot;&quot; Update [choose all checkbox] by all test item state &quot;&quot;&quot;</span><br>    choose_all = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">for</span> cb <span class="hljs-keyword">in</span> self.cb_list:<br>        choose_all = choose_all &amp; cb.isChecked()<br>    self.ma.selecteAllCB.setChecked(choose_all)<br><br></code></pre></td></tr></table></figure><h2 id="QApplication与QWidget"><a href="#QApplication与QWidget" class="headerlink" title="QApplication与QWidget"></a><code>QApplication</code>与<code>QWidget</code></h2><p><code>QApplication</code>是一个单例，在<code>QWidget</code>中可以通过<code>QApplication.instance()</code>获取到对象</p><p>实际上在实例化QApplication前就使用<code>QtGui.QWidget()</code>是会报错的<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>QtGui.QWidget()<br>QWidget: Must construct a QApplication before a QPaintDevice<br></code></pre></td></tr></table></figure><br>参考 <a href="https://stackoverflow.com/questions/17601896/how-qapplication-and-qwidget-objects-are-connected-in-pyside-pyqt">How QApplication() and QWidget() objects are connected in PySide/PyQt?</a></p><p>在我们自定义的<code>QMainWindow</code>中，也可以直接获取到<code>QApplication</code>的实例。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">RustMainWindow</span>(<span class="hljs-title class_ inherited__">QMainWindow</span>):<br>    <span class="hljs-string">&quot;&quot;&quot; This is the main class &quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_trigger_english</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Change to English&quot;</span>, QApplication.instance()<br><br><span class="hljs-comment"># Change to English &lt;PyQt4.QtGui.QApplication object at 0x02ABE3A0&gt;</span><br></code></pre></td></tr></table></figure></p><h3 id="注意widget持有外部对象引用的问题"><a href="#注意widget持有外部对象引用的问题" class="headerlink" title="注意widget持有外部对象引用的问题"></a>注意widget持有外部对象引用的问题</h3><p>如果在程序启动的地方将引用交给widget，退出时会造成应用无法关闭的问题（类似内存泄漏）。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app = QApplication(sys.argv)<br>    <span class="hljs-comment"># 这里把app交给了MainWindow，MainWindow关闭时是无法正常退出应用的</span><br>    main_d = RustMainWindow(app)  <span class="hljs-comment"># 不建议这么做</span><br>    main_d.show()<br>    sys.exit(app.exec_())<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>PyQt</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>PyCharm 安装和配置</title>
    <link href="/PyQt_note/PyCharm-Install_and_config/"/>
    <url>/PyQt_note/PyCharm-Install_and_config/</url>
    
    <content type="html"><![CDATA[<p>安装和配置PyCharm<br>修改默认配置，修改config和system的路径，避免占据C盘太多的空间<br>将PyQt中的工具<code>PyUIC</code>安装到PyCharm中，使用更便捷（Windows和Ubuntu平台）</p><ul><li>win7</li><li>Python3.5.1</li><li>PyQt5-5.6</li></ul><p>PyCharm版本： JetBrains PyCharm Community Edition 2016.3.1(64)</p><p>安装路径： <code>E:\IntelliJ IDEA Community Edition 2016.1.1</code></p><h2 id="PyCharm默认配置"><a href="#PyCharm默认配置" class="headerlink" title="PyCharm默认配置"></a>PyCharm默认配置</h2><p>和Android Studio类似，可以自定义IDE的配置</p><p>在第一次启动前，找到<code>bin\idea.properties</code>，修改一下路径</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">idea.config.path=E:<span class="hljs-regexp">/IntelliJIDEAPath/</span>config<br><br>idea.system.path=E:<span class="hljs-regexp">/IntelliJIDEAPath/</span>system<br></code></pre></td></tr></table></figure><p>启动后，可以发现config和system都在<code>E:/IntelliJIDEAPath</code>下<br>此举是为了避免C盘挤爆</p><h2 id="PyCharm工程配置"><a href="#PyCharm工程配置" class="headerlink" title="PyCharm工程配置"></a>PyCharm工程配置</h2><p>打开Settings<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Build</span>, Execution, Deployment<br>    <span class="hljs-attribute">Console</span><br>        <span class="hljs-attribute">Python</span> Console<br>            <span class="hljs-attribute">Python</span> interpreter 选择 Python <span class="hljs-number">3</span>.<span class="hljs-number">5</span>.<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></p><p>假设有一个工程<code>gui_app</code>，同样要检查一下设置<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">Project</span>: gui_app<br>    <span class="hljs-keyword">Project</span> interpreter<br>        选择<span class="hljs-number">3.5</span>.<span class="hljs-number">1</span>  后面会显示路径<br></code></pre></td></tr></table></figure></p><h2 id="安装扩展工具"><a href="#安装扩展工具" class="headerlink" title="安装扩展工具"></a>安装扩展工具</h2><p>打开Settings &gt; Tools &gt; External Tools</p><p>选择新建<code>+</code>，或者编辑</p><h3 id="安装QtDesigner"><a href="#安装QtDesigner" class="headerlink" title="安装QtDesigner"></a>安装QtDesigner</h3><p>Name: QtDesigner<br><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">Tool Settings<br>    <span class="hljs-name">Program</span>: <span class="hljs-name">E</span>:\Python351\Lib\site-packages\PyQt5\designer.exe<br>    ## 选择安装好的PyQt5\designer.exe<br><br>    Working <span class="hljs-name">directory</span>: $FileDir$<br></code></pre></td></tr></table></figure></p><h3 id="安装PyUIC"><a href="#安装PyUIC" class="headerlink" title="安装PyUIC"></a>安装PyUIC</h3><p>将designer生成的ui文件转为py文件的工具；这是Python自带的工具</p><p>Name: PyUIC<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell">Tool Settings<br>    Program: E:\Python351\python.exe<br>    <span class="hljs-comment">## 选择安装好的python.exe</span><br><br>    Parameters: <span class="hljs-literal">-m</span> PyQt5.uic.pyuic  <span class="hljs-variable">$FileName</span><span class="hljs-variable">$</span> <span class="hljs-literal">-o</span> <span class="hljs-variable">$FileNameWithoutExtension</span><span class="hljs-variable">$</span>.py<br>    Working directory: <span class="hljs-variable">$FileDir</span><span class="hljs-variable">$</span><br></code></pre></td></tr></table></figure></p><h4 id="Ubuntu下PyCharm配置"><a href="#Ubuntu下PyCharm配置" class="headerlink" title="Ubuntu下PyCharm配置"></a>Ubuntu下PyCharm配置</h4><p>将designer生成的ui文件转为py文件的工具<br>需要<code>sudo apt-get install pyqt5-dev-tools</code><br>配置工具[Tool Settings]<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">Program: pyuic5<br>Parameters: <span class="hljs-literal">-o</span> <span class="hljs-variable">$FileNameWithoutExtension</span><span class="hljs-variable">$</span>.py <span class="hljs-variable">$FileNameWithoutExtension</span><span class="hljs-variable">$</span>.ui<br>Working directory: <span class="hljs-variable">$FileDir</span><span class="hljs-variable">$</span><br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>PyQt</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Python3.5 PyQt5 安装</title>
    <link href="/PyQt_note/Python-PyQt5_Python351_install/"/>
    <url>/PyQt_note/Python-PyQt5_Python351_install/</url>
    
    <content type="html"><![CDATA[<p>在Windows和Ubuntu下安装PyQt5<br>需要先安装并配置好Python，Windows下需要配置环境变量。PyQt需要对应上Python版本。</p><h2 id="Windows环境"><a href="#Windows环境" class="headerlink" title="Windows环境"></a>Windows环境</h2><h3 id="用pip3安装PyQt5"><a href="#用pip3安装PyQt5" class="headerlink" title="用pip3安装PyQt5"></a>用pip3安装PyQt5</h3><p>先确认Python相关环境变量已经配置好，比如：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">D:\python36;D:\python36\Scripts;D:\python36\libs;<br></code></pre></td></tr></table></figure><br>然后运行pip3，<a href="https://riverbankcomputing.com/software/pyqt/download5">参考 PyQt5 Download</a><br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip3 <span class="hljs-keyword">install</span> PyQt5<br></code></pre></td></tr></table></figure><br>从网上下载相关文件并安装，等待过程比较长。</p><h3 id="PyQt5-5-6-gpl-exe-安装方式"><a href="#PyQt5-5-6-gpl-exe-安装方式" class="headerlink" title="PyQt5-5.6-gpl exe 安装方式"></a>PyQt5-5.6-gpl exe 安装方式</h3><p>Win7  Python3.5.1</p><p>PyQt5-5.6-gpl-Py3.5-Qt5.6.0-x64-2.exe  （最新版本已经不再提供exe版本）</p><p>先安装Python3.5.1到 <code>E:\Python351</code><br>再去官网下载PyQt5，翻墙后下载速度更快。双击安装，PyQt5会自动找到Python35的目录。<br>本例中PyQt5安装到 <code>E:\Python351\Lib\site-packages\PyQt5</code></p><p>现在就可以使用PyQt5了。</p><p><code>&gt;&gt;&gt; from PyQt5.QtWidgets import *</code></p><p>在命令行显示一个label试一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> sys<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PyQt5 <span class="hljs-keyword">import</span> QtWidgets<br><span class="hljs-meta">&gt;&gt;&gt; </span>app = QtWidgets.QApplication(sys.argv)<br><span class="hljs-meta">&gt;&gt;&gt; </span>label = QtWidgets.QLabel(<span class="hljs-string">&#x27;Label&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>label.resize(<span class="hljs-number">150</span>,<span class="hljs-number">100</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>label.show()<br></code></pre></td></tr></table></figure><h2 id="Ubuntu-16-04"><a href="#Ubuntu-16-04" class="headerlink" title="Ubuntu 16.04"></a>Ubuntu 16.04</h2><p>Python3.5<br>直接安装<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> install python3-dev<br>sudo apt-<span class="hljs-built_in">get</span> install python3-pyqt5<br>sudo apt-<span class="hljs-built_in">get</span> install qt5-default qttools5-dev-tools<br>designer # 启动designer<br></code></pre></td></tr></table></figure></p><p>安装pyuic5<br><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs q">sudo apt-<span class="hljs-built_in">get</span> install pyqt5-<span class="hljs-built_in">dev</span>-tools<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>PyQt</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Python3 读写csv文件中的数字</title>
    <link href="/Python/Python-rw_in_csv/"/>
    <url>/Python/Python-rw_in_csv/</url>
    
    <content type="html"><![CDATA[<p>环境与工具</p><ul><li>Python3</li><li>PyCharm CE</li></ul><h2 id="csv简介"><a href="#csv简介" class="headerlink" title="csv简介"></a>csv简介</h2><p>什么是csv？csv是逗号分隔的一种文件格式。<br>例如下面这个csv格式的文本。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs csv">姓名,年龄,标签<br>Rust Fisher,18,Python<br>Tom Hanks,29,Java<br></code></pre></td></tr></table></figure></p><p>这样的<code>.csv</code>文件可以用Excel或者WPS打开，会给出表格的形式。</p><p><img src="py_csv_demo1.png" alt=""></p><p>要注意的是，csv是文本格式，并不是Excel的格式。我们用文本编辑器（例如xcode，记事本）是可以直接编辑它的。</p><h2 id="读写csv文件"><a href="#读写csv文件" class="headerlink" title="读写csv文件"></a>读写csv文件</h2><p>读文件时先产生str的列表，把最后的换行符删掉；然后一个个str转换成int<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">## 读写csv文件</span><br>csv_file = <span class="hljs-string">&#x27;datas.csv&#x27;</span><br><br>csv = <span class="hljs-built_in">open</span>(csv_file,<span class="hljs-string">&#x27;w&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">20</span>):<br>    csv.write(<span class="hljs-built_in">str</span>(i) + <span class="hljs-string">&#x27;,&#x27;</span>)<br>    <span class="hljs-keyword">if</span> i % <span class="hljs-number">10</span> == <span class="hljs-number">0</span>:<br>        csv.write(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>csv.close()<br><br>result = []<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(csv_file,<span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f:<br>        linelist = line.split(<span class="hljs-string">&#x27;,&#x27;</span>)<br>        linelist.pop()<span class="hljs-comment"># delete: \n</span><br>        <span class="hljs-keyword">for</span> index, item <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(linelist):<br>            result.append(<span class="hljs-built_in">int</span>(item))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\nResult is \n&#x27;</span> , result)<br></code></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">Result <span class="hljs-keyword">is</span><br><span class="hljs-string"> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]</span><br></code></pre></td></tr></table></figure></p><h3 id="检查目录是否存在"><a href="#检查目录是否存在" class="headerlink" title="检查目录是否存在"></a>检查目录是否存在</h3><p>若目标目录不存在，则新建一个目录<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> os<br>json_dir = <span class="hljs-string">&quot;../dir_json/2017-04/&quot;</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(json_dir):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;json dir not found&quot;</span>)<br>    os.makedirs(json_dir)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Create dir  &quot;</span> + json_dir)<br></code></pre></td></tr></table></figure></p><h3 id="写文件时指定格式"><a href="#写文件时指定格式" class="headerlink" title="写文件时指定格式"></a>写文件时指定格式</h3><p>参考下面的代码，打开文件时指定utf8，转换成json时指定<code>ensure_ascii=False</code><br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> json<br>json_file = <span class="hljs-built_in">open</span>(json_dir + <span class="hljs-built_in">id</span> + <span class="hljs-string">&#x27;.json&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf8&#x27;</span>)<br>json_file.write(json.dumps(data_dict, ensure_ascii=<span class="hljs-literal">False</span>))<br></code></pre></td></tr></table></figure><br>避免写成的json文件乱码</p><h3 id="函数-enumerate-iterable-start-0"><a href="#函数-enumerate-iterable-start-0" class="headerlink" title="函数 enumerate(iterable, start=0)"></a>函数 enumerate(iterable, start=0)</h3><p>返回一个enumerate对象。iterable必须是一个句子，迭代器或者支持迭代的对象。</p><p>enumerate示例1：<br><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">data = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">for</span> i, item <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(data):</span><br>print(i,item)<br><br><br>0 1<br>1 2<br>2 3<br></code></pre></td></tr></table></figure><br>示例2：<br><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">line = <span class="hljs-string">&#x27;one&#x27;</span></span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">for</span> i, item <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(line,<span class="hljs-number">4</span>):</span><br>print(i,item)<br><br><br>4 o<br>5 n<br>6 e<br></code></pre></td></tr></table></figure><br>参考： <a href="https://docs.python.org/3/library/functions.html?highlight=enumerate#enumerate">https://docs.python.org/3/library/functions.html?highlight=enumerate#enumerate</a></p><h3 id="class-int-x-0"><a href="#class-int-x-0" class="headerlink" title="class int(x=0)"></a>class int(x=0)</h3><p>class int(x, base=10)<br>返回一个Integer对象。对于浮点数，会截取成整数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;-100&#x27;</span>),<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;0&#x27;</span>),<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;3&#x27;</span>))<br>-<span class="hljs-number">100</span> <span class="hljs-number">0</span> <span class="hljs-number">3</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">int</span>(<span class="hljs-number">7788</span>)<br><span class="hljs-number">7788</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">int</span>(<span class="hljs-number">7.98</span>)<br><span class="hljs-number">7</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;2.33&#x27;</span>)<br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;pyshell#27&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    <span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;2.33&#x27;</span>)<br>ValueError: invalid literal <span class="hljs-keyword">for</span> <span class="hljs-built_in">int</span>() <span class="hljs-keyword">with</span> base <span class="hljs-number">10</span>: <span class="hljs-string">&#x27;2.33&#x27;</span><br></code></pre></td></tr></table></figure></p><h2 id="读取binary文件"><a href="#读取binary文件" class="headerlink" title="读取binary文件"></a>读取binary文件</h2><p>逐个byte读取，注意用<code>b&#39;&#39;</code>来判断是否读到文件尾部<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@staticmethod</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">convert_bin_to_csv</span>(<span class="hljs-params">bin_file_path, csv_file_path</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(bin_file_path):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Binary file is not exist! &quot;</span> + bin_file_path)<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(bin_file_path, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> bin_f:<br>        cur_byte = bin_f.read(<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">while</span> cur_byte != <span class="hljs-string">b&#x27;&#x27;</span>:<br>            <span class="hljs-comment"># Do stuff with byte.</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>.from_bytes(cur_byte, byteorder=<span class="hljs-string">&#x27;big&#x27;</span>, signed=<span class="hljs-literal">True</span>))<br>            cur_byte = bin_f.read(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure></p><p>读取到的byte可以转换为int，<a href="https://docs.python.org/3/library/stdtypes.html#int.from_bytes">参考文档</a></p><p>这里 <code>cur_byte</code> 类似于 <code>b&#39;\x08&#39;</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>.from_bytes(cur_byte, byteorder=<span class="hljs-string">&#x27;big&#x27;</span>, signed=<span class="hljs-literal">True</span>))<br></code></pre></td></tr></table></figure></p><h3 id="从bin中读取数据并存入CSV文件中"><a href="#从bin中读取数据并存入CSV文件中" class="headerlink" title="从bin中读取数据并存入CSV文件中"></a>从bin中读取数据并存入CSV文件中</h3><p>先从bin中读取byte，规定好几个字节凑成1个数字。<br>按每行一个数字的格式写入CSV文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@staticmethod</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">convert_bin_to_csv</span>(<span class="hljs-params">bin_file_path, csv_file_path, byte_count=<span class="hljs-number">1</span>, byte_order=<span class="hljs-string">&#x27;big&#x27;</span>, digit_signed=<span class="hljs-literal">True</span></span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(bin_file_path):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Binary file is not exist! &quot;</span> + bin_file_path)<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(csv_file_path, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> csv_f:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(bin_file_path, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> bin_f:<br>            cur_byte = bin_f.read(byte_count)<br>            <span class="hljs-keyword">while</span> cur_byte != <span class="hljs-string">b&#x27;&#x27;</span>:<br>                csv_f.write(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>.from_bytes(cur_byte, byteorder=byte_order, signed=digit_signed)) + <span class="hljs-string">&quot;,\n&quot;</span>)<br>                cur_byte = bin_f.read(byte_count)<br><br></code></pre></td></tr></table></figure><p>bin存储的数据格式一定要商量好。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Android NDK 示例-返回字符串，数组，Java对象；兼容性问题</title>
    <link href="/Android/NDK-use_sample_1/"/>
    <url>/Android/NDK-use_sample_1/</url>
    
    <content type="html"><![CDATA[<p>Android Studio 2.2.3 创建工程 NDKProj</p><h3 id="工程准备"><a href="#工程准备" class="headerlink" title="工程准备"></a>工程准备</h3><p>在<code>SmartAlgorithm.java</code>中加载了库文件<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ada">java<br>`<span class="hljs-comment">-- com</span><br>    `<span class="hljs-comment">-- rustfisher</span><br>        `<span class="hljs-comment">-- ndkproj</span><br>            |<span class="hljs-comment">-- MainActivity.java</span><br>            `<span class="hljs-comment">-- SmartAlgorithm.java</span><br></code></pre></td></tr></table></figure><br>JNI目录，需要mk文件，头文件和源文件。这里头文件和源文件故意不统一文件名，也可实现效果。<br>但还是建议用同样的文件名，方便定位。<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ada">jni/<br>|<span class="hljs-comment">-- Android.mk</span><br>|<span class="hljs-comment">-- Application.mk</span><br>|<span class="hljs-comment">-- com_rustfisher_ndkproj_SmartAlgorithm.h</span><br>`<span class="hljs-comment">-- com_rustfisher_ndkproj_SmartAlgorithm_if_not_the_same.cpp</span><br></code></pre></td></tr></table></figure></p><h3 id="NDK返回值"><a href="#NDK返回值" class="headerlink" title="NDK返回值"></a>NDK返回值</h3><p>加载<code>SmartAlgorithm</code>；这个是统一标示。LOCAL_MODULE 与 APP_MODULES 均为此标示。<br>NDK中的方法要声明为native。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.rustfisher.ndkproj;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SmartAlgorithm</span> &#123;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        System.loadLibrary(<span class="hljs-string">&quot;SmartAlgorithm&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">native</span> String <span class="hljs-title function_">getMsg</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">native</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><strong>注意</strong>，Java文件生成头文件后，Java文件的路径不能轻易改动。</p><p>编写Android.mk文件；ABI 选择all，编译出支持多个平台的so文件。<br>填入源文件的文件名。<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs makefile">LOCAL_PATH:= <span class="hljs-variable">$(<span class="hljs-built_in">call</span> my-<span class="hljs-built_in">dir</span>)</span><br><span class="hljs-keyword">include</span> <span class="hljs-variable">$(CLEAR_VARS)</span><br>LOCAL_MODULE := SmartAlgorithm<br>TARGET_ARCH_ABI := all<br>LOCAL_SRC_FILES := com_rustfisher_ndkproj_SmartAlgorithm_if_not_the_same.cpp<br><span class="hljs-keyword">include</span> <span class="hljs-variable">$(BUILD_SHARED_LIBRARY)</span><br></code></pre></td></tr></table></figure></p><p>编写Application.mk文件（网上copy来的）。同样ABI 选择all。<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs makefile">APP_PLATFORM := android-16<br>APP_MODULES := SmartAlgorithm<br>APP_ABI := all<br>APP_STL := stlport_static<br>APP_CPPFLAGS += -fexceptions<br><span class="hljs-comment"># for using c++ features,you need to enable these in your Makefile</span><br>APP_CPP_FEATURES += exceptions rtti<br></code></pre></td></tr></table></figure></p><p>修改工程build.gradle文件，添加jni的配置。<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">sourceSets</span> &#123;<br>    main &#123;<br>        jni.srcDirs = []<br>        jniLibs.srcDirs = [<span class="hljs-string">&#x27;src/main/libs&#x27;</span>]<span class="hljs-comment">// 指定so库的位置</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>编译出头文件，得到 <code>com_rustfisher_ndkproj_SmartAlgorithm.h</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">Administrator@rust-PC /cygdrive/g/rust_proj/NDKProj/app/src/main/java<br>javah com.rustfisher.ndkproj.SmartAlgorithm<br></code></pre></td></tr></table></figure><p>将头文件放到jni目录下，与源文件一起。</p><p>生成的头文件不要手动去修改，直接使用即可。<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs h"><span class="hljs-comment">/* DO NOT EDIT THIS FILE - it is machine generated */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;jni.h&gt;</span></span><br><span class="hljs-comment">/* Header for class com_rustfisher_ndkproj_SmartAlgorithm */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> _Included_com_rustfisher_ndkproj_SmartAlgorithm</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _Included_com_rustfisher_ndkproj_SmartAlgorithm</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __cplusplus</span><br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Class:     com_rustfisher_ndkproj_SmartAlgorithm</span><br><span class="hljs-comment"> * Method:    getMsg</span><br><span class="hljs-comment">* Signature: ()Ljava/lang/String;</span><br><span class="hljs-comment">*/</span><br>JNIEXPORT jstring JNICALL <span class="hljs-title function_">Java_com_rustfisher_ndkproj_SmartAlgorithm_getMsg</span><br>  <span class="hljs-params">(JNIEnv *, jobject)</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Class:     com_rustfisher_ndkproj_SmartAlgorithm</span><br><span class="hljs-comment"> * Method:    add</span><br><span class="hljs-comment">* Signature: (II)I</span><br><span class="hljs-comment">*/</span><br>JNIEXPORT jint JNICALL <span class="hljs-title function_">Java_com_rustfisher_ndkproj_SmartAlgorithm_add</span><br>  <span class="hljs-params">(JNIEnv *, jobject, jint, jint)</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __cplusplus</span><br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure></p><p>编写源文件，实现头文件中的方法。一个是返回字符串，一个是加法。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;jni.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;android/log.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;com_rustfisher_ndkproj_SmartAlgorithm.h&quot;</span></span><br><br><span class="hljs-comment">/* Already define in com_rustfisher_ndkproj_SmartAlgorithm.h, no need to extern C here.</span><br><span class="hljs-comment">extern &quot;C&quot; &#123;</span><br><span class="hljs-comment">    JNIEXPORT jstring JNICALL Java_com_rustfisher_ndkproj_SmartAlgorithm_getMsg(JNIEnv *env, jobject obj);</span><br><span class="hljs-comment">    JNIEXPORT jint JNICALL Java_com_rustfisher_ndkproj_SmartAlgorithm_add(JNIEnv *env, jobject obj, jint a, jint b);</span><br><span class="hljs-comment">&#125;;*/</span><br><br>JNIEXPORT jstring JNICALL <span class="hljs-title function_">Java_com_rustfisher_ndkproj_SmartAlgorithm_getMsg</span><span class="hljs-params">(JNIEnv *env, jobject obj)</span> &#123;<br><br>    <span class="hljs-keyword">return</span> env-&gt;NewStringUTF(<span class="hljs-string">&quot;Hello from the JNI.&quot;</span>);<br>&#125;<br><br>JNIEXPORT jint JNICALL <span class="hljs-title function_">Java_com_rustfisher_ndkproj_SmartAlgorithm_add</span><span class="hljs-params">(JNIEnv *env, jobject obj, jint a, jint b)</span> &#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<span class="hljs-comment">//*</span><br></code></pre></td></tr></table></figure></p><p>然后在命令行 ndk-build。这里是win7下的Cygwin。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">Administrator@rust-PC /cygdrive/g/rust_proj/NDKProj/app/src/main/jni<br>$ ndk-build.cmd<br>[all] Compile++      : SmartAlgorithm &lt;= com_rustfisher_ndkproj_SmartAlgorithm_if_not_the_same.cpp<br>[all] SharedLibrary  : libSmartAlgorithm.so<br>[all] Install        : libSmartAlgorithm.so =&gt; libs/arm64-v8a/libSmartAlgorithm.so<br><span class="hljs-comment"># ...... 后面还有很多</span><br></code></pre></td></tr></table></figure></p><p>在libs目录下出现了对应的so库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">Administrator@rust-PC /cygdrive/g/rust_proj/NDKProj/app/src/main/libs<br>$ tree<br>.<br>|-- arm64-v8a<br>|   `-- libSmartAlgorithm.so<br>|-- armeabi<br>|   `-- libSmartAlgorithm.so<br>|-- armeabi-v7a<br>|   `-- libSmartAlgorithm.so<br>|-- mips<br>|   `-- libSmartAlgorithm.so<br>|-- mips64<br>|   `-- libSmartAlgorithm.so<br>|-- x86<br>|   `-- libSmartAlgorithm.so<br>`-- x86_64<br>    `-- libSmartAlgorithm.so<br><br>7 directories, 7 files<br></code></pre></td></tr></table></figure></p><p>在MainActivity中调用这两个方法。<br>运行apk到机器上，查看log。发现调用成功。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">com<span class="hljs-selector-class">.rustfisher</span><span class="hljs-selector-class">.ndkproj</span> D/MainActivity: onCreate: Hello from the JNI.<br>com<span class="hljs-selector-class">.rustfisher</span><span class="hljs-selector-class">.ndkproj</span> D/MainActivity: onCreate: <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="处理数组的方法"><a href="#处理数组的方法" class="headerlink" title="处理数组的方法"></a>处理数组的方法</h3><p>1.不要直接操作输入的数组；<br>2.注意释放本地引用，防止溢出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">native</span> <span class="hljs-type">short</span>[] getConvertedArray(<span class="hljs-type">short</span>[] data, <span class="hljs-type">int</span> dataLen);<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">JNIEXPORT jshortArray JNICALL <span class="hljs-title">Java_com_rustfisher_ndkproj_SmartAlgorithm_getConvertedArray</span><span class="hljs-params">(JNIEnv *env, jobject obj, jshortArray input, jint len)</span> </span>&#123;<br>    jshort* inputPtr;<br>    inputPtr = env-&gt;<span class="hljs-built_in">GetShortArrayElements</span>(input,<span class="hljs-number">0</span>);<span class="hljs-comment">// 直接操作指针会改变Android Dalvik中的值</span><br>    jshort* resPtr;<br>    jshortArray result;<br>    result = env-&gt;<span class="hljs-built_in">NewShortArray</span>(len);<span class="hljs-comment">// 创建新的数组</span><br>    resPtr = env-&gt;<span class="hljs-built_in">GetShortArrayElements</span>(result,<span class="hljs-number">0</span>);<span class="hljs-comment">// 指针</span><br><br>    <span class="hljs-keyword">for</span>(jint i = <span class="hljs-number">0</span>;i &lt; len;i++) &#123;<br>        resPtr[i] = inputPtr[i] * <span class="hljs-number">2</span>;<br>    &#125;<br>    env-&gt;<span class="hljs-built_in">ReleaseShortArrayElements</span>(input, inputPtr, <span class="hljs-number">0</span>);<span class="hljs-comment">// 释放本地引用</span><br>    env-&gt;<span class="hljs-built_in">SetShortArrayRegion</span>(result,<span class="hljs-number">0</span>,len,resPtr);     <span class="hljs-comment">// 存入数据</span><br>    env-&gt;<span class="hljs-built_in">ReleaseShortArrayElements</span>(result, resPtr, <span class="hljs-number">0</span>); <span class="hljs-comment">// 释放本地引用</span><br>    <span class="hljs-keyword">return</span> result;<span class="hljs-comment">// 返回结果</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="JNI层-unsigned-char-与-jbyte-数组转换"><a href="#JNI层-unsigned-char-与-jbyte-数组转换" class="headerlink" title="JNI层 unsigned char 与 jbyte 数组转换"></a>JNI层 unsigned char 与 jbyte 数组转换</h3><p>本例说明的是unsigned char 与 jbyte之间互相转换<br>注意方法：<code>(*env)-&gt;SetByteArrayRegion(env, jbyte_arr, 0, len, uc_ptr);</code><br>java代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] getByteArrayFromJNI() &#123;<br>    <span class="hljs-keyword">return</span> nativeGetByteArray();<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] byteArrayTravelJNI(<span class="hljs-type">byte</span>[] input) &#123;<br>    <span class="hljs-keyword">return</span> nativeSendByteArray(input, input.length);<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">native</span> <span class="hljs-type">byte</span>[] nativeGetByteArray(); <span class="hljs-comment">// 从JNI中获取byte数组</span><br><br><span class="hljs-comment">// 输入byte数组，在JNI中转换后再获取回来</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">native</span> <span class="hljs-type">byte</span>[] nativeSendByteArray(<span class="hljs-type">byte</span>[] input, <span class="hljs-type">int</span> len);<br></code></pre></td></tr></table></figure></p><p>JNI C代码<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// return byte array from unsigned char array.  jbytes:  1 2 0 7f 80 81 ff 0 1</span><br>JNIEXPORT jbyteArray JNICALL <span class="hljs-title function_">Java_com_rustfisher_ndkalgo_NDKUtils_nativeGetByteArray</span><span class="hljs-params">(JNIEnv *env, jobject jObj)</span><br>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> uc_arr[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">127</span>, <span class="hljs-number">128</span>, <span class="hljs-number">129</span>, <span class="hljs-number">255</span>, <span class="hljs-number">256</span>, <span class="hljs-number">257</span>&#125;;<br>    <span class="hljs-type">int</span> uc_arr_len = <span class="hljs-keyword">sizeof</span>(uc_arr) / <span class="hljs-keyword">sizeof</span>(uc_arr[<span class="hljs-number">0</span>]);<br>    jbyte byte_array[uc_arr_len];<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(;i &lt; uc_arr_len; i++) &#123;<br>        byte_array[i] = uc_arr[i];<br>    &#125;<br>    jbyteArray jbyte_arr = (*env)-&gt;NewByteArray(env, uc_arr_len);<br>    (*env)-&gt;SetByteArrayRegion(env, jbyte_arr, <span class="hljs-number">0</span>, uc_arr_len, byte_array);<br>    <span class="hljs-keyword">return</span> jbyte_arr;<br>&#125;<br><br><span class="hljs-comment">// jbyte -&gt; unsigned char -&gt; jbyte</span><br>JNIEXPORT jbyteArray JNICALL <span class="hljs-title function_">Java_com_rustfisher_ndkalgo_NDKUtils_nativeSendByteArray</span><br>    <span class="hljs-params">(JNIEnv *env, jobject jObj, jbyteArray input_byte_arr, jint input_len)</span><br>&#123;<br>    <span class="hljs-type">int</span> len = (<span class="hljs-type">int</span>)input_len;<br>    jbyte *jbyte_ptr = (*env)-&gt;GetByteArrayElements(env, input_byte_arr, <span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *uc_ptr = (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *)jbyte_ptr;<br><br>    jbyteArray jbyte_arr = (*env)-&gt;NewByteArray(env, len);<br>    jbyte byte_array[input_len];<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(;i &lt; input_len; i++) &#123;<br>        byte_array[i] = uc_ptr[i];<br>    &#125;<br>    (*env)-&gt;SetByteArrayRegion(env, jbyte_arr, <span class="hljs-number">0</span>, len, byte_array);<br>    (*env)-&gt;ReleaseByteArrayElements(env, input_byte_arr, jbyte_ptr, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> jbyte_arr;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>关于<code>SetByteArrayRegion</code>这个方法<br>方法说明：<code>void SetXxxArrayRegion(JNIEnv *env, jarray array, jint start, jint length, Xxx elems[])</code><br>将C数组的元素复制到Java数组中。注意最后一个参数要和前面的对应上。</p><p><code>void ReleaseXxxArrayElements(JNIEnv *env, jarray array, Xxx elems[], jint mode)</code><br>通知虚拟机通过GetXxxArrayElements获得的一个指针已经不再需要了。Mode是0，更新数组<br>元素后释放elems缓存。</p><p>在这里遇到过一个bug，同样的代码在armeabi上正常运行，但是到了v7a或v8a平台上就闪退。<br>使用<code>SetXxxArrayRegion</code>这个方法时，传入的参数一定要和方法名中的<code>Xxx</code>对应上<br>详细可以参考<em>Core Java</em>中的Java Native和Android Develop上关于abi的解释</p><p>测试调用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">NDKUtils</span> <span class="hljs-variable">ndkUtils</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NDKUtils</span>();<br><span class="hljs-type">byte</span>[] res = ndkUtils.getByteArrayFromJNI(); <span class="hljs-comment">// 从JNI中获取byte数组</span><br>logBytes(res);<br>Log.d(TAG, <span class="hljs-string">&quot;-------------------------------------------------------------&quot;</span>);<br><span class="hljs-type">byte</span>[] inputBytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">127</span>, (<span class="hljs-type">byte</span>) <span class="hljs-number">128</span>, (<span class="hljs-type">byte</span>) <span class="hljs-number">255</span>, -<span class="hljs-number">120</span>&#125;;<br><span class="hljs-type">byte</span>[] tRes = ndkUtils.byteArrayTravelJNI(inputBytes); <span class="hljs-comment">// 让byte数组在JNI中旅游一圈</span><br>logBytes(inputBytes);<br>logBytes(tRes);<br></code></pre></td></tr></table></figure></p><p>输出<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">bytes:  1 2 0 7f 80 81 ff 0 1 </span><br><span class="hljs-section">-------------------------------------------------------------</span><br>bytes:  1 2 7f 80 ff 88 <br>bytes:  1 2 7f 80 ff 88 <br></code></pre></td></tr></table></figure></p><h3 id="直接操作输入的数组"><a href="#直接操作输入的数组" class="headerlink" title="直接操作输入的数组"></a>直接操作输入的数组</h3><p>以int数组为例<br>输入一个数组后，获取数组然后直接改变数组中的元素，最后释放掉本地引用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">JNIEXPORT <span class="hljs-type">void</span> JNICALL <span class="hljs-title function_">Java_com_rustfisher_ndkalgo_NDKUtils_nativeModifyArray</span><br>  <span class="hljs-params">(JNIEnv *env, jobject jObj, jintArray input_arr, jint input_len)</span> &#123;<br>    <span class="hljs-type">int</span> * input_ptr = (*env)-&gt;GetIntArrayElements(env, input_arr, <span class="hljs-number">0</span>);<br>    input_ptr[input_len - <span class="hljs-number">1</span>] =  input_ptr[input_len - <span class="hljs-number">1</span>] - <span class="hljs-number">1</span>;<br>    (*env)-&gt;ReleaseIntArrayElements(env, input_arr, input_ptr, <span class="hljs-number">0</span>);<br>  &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">NDKUtils</span> <span class="hljs-variable">moUtil</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NDKUtils</span>();<br><span class="hljs-type">int</span>[] origin = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>&#125;;<br>Log.d(TAG, <span class="hljs-string">&quot;origin before: &quot;</span> + Arrays.toString(origin));<br>moUtil.modifyArray(origin);<br>Log.d(TAG, <span class="hljs-string">&quot;origin after:  &quot;</span> + Arrays.toString(origin));<br></code></pre></td></tr></table></figure><p>观察输出可以看出，输入的数组直接被改变了<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">origin </span><span class="hljs-keyword">before: </span>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]<br><span class="hljs-keyword">origin </span>after:  [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">6</span>]<br></code></pre></td></tr></table></figure></p><p>或者<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">JNIEXPORT <span class="hljs-type">void</span> JNICALL <span class="hljs-title">Java_com_rustfisher_face_1detect_1lib_CalHelper_cvtNV21</span></span><br><span class="hljs-function">  <span class="hljs-params">(JNIEnv *env, jclass jcls, jbyteArray input_arr,jint in_arr_len,</span></span><br><span class="hljs-params"><span class="hljs-function">   jbyteArray target_arr, jint nv21_size, jint y_size, jint yuv_gap)</span> </span>&#123;<br>    jbyte *in_ptr = env-&gt;<span class="hljs-built_in">GetByteArrayElements</span>(input_arr, <span class="hljs-literal">false</span>);<br>    jbyte *target_ptr = env-&gt;<span class="hljs-built_in">GetByteArrayElements</span>(target_arr, <span class="hljs-literal">false</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = y_size; i &lt; nv21_size; i+=<span class="hljs-number">2</span>)&#123;<br>        target_ptr[i] = in_ptr[i + yuv_gap + <span class="hljs-number">1</span>];<br>        target_ptr[i + <span class="hljs-number">1</span>] = in_ptr[i + yuv_gap];<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure></p><h3 id="返回Java对象"><a href="#返回Java对象" class="headerlink" title="返回Java对象"></a>返回Java对象</h3><p>NDK中可以创建Java对象并返回。<br>例如我们新建一个<code>JavaUser</code>类。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaUser</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">JavaUser</span><span class="hljs-params">(<span class="hljs-type">int</span> age, String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name + <span class="hljs-string">&quot;, &quot;</span> + age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>native方法返回一个JavaUser对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NDKUtils</span> &#123;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        System.loadLibrary(<span class="hljs-string">&quot;NDKMan&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> JavaUser <span class="hljs-title function_">createUser</span><span class="hljs-params">(<span class="hljs-type">int</span> age, String name)</span> &#123;<br>        <span class="hljs-keyword">return</span> nativeGetUser(age, name);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">native</span> JavaUser <span class="hljs-title function_">nativeGetUser</span><span class="hljs-params">(<span class="hljs-type">int</span> age, String name)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></p><p>c文件实现代码。注意参数签名的写法，要参照标准。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">JNIEXPORT jobject JNICALL <span class="hljs-title function_">Java_com_rustfisher_ndkalgo_NDKUtils_nativeGetUser</span><br>    <span class="hljs-params">(JNIEnv *env, jobject jObj, jint age, jstring name)</span><br>&#123;<br>    jclass userClass = (*env)-&gt;FindClass(env, <span class="hljs-string">&quot;com/rustfisher/ndkalgo/JavaUser&quot;</span>);<br>    jmethodID userConstruct = (*env)-&gt;GetMethodID(env, userClass, <span class="hljs-string">&quot;&lt;init&gt;&quot;</span>, <span class="hljs-string">&quot;(ILjava/lang/String;)V&quot;</span>);<br>    <span class="hljs-keyword">return</span> (*env)-&gt;NewObject(env, userClass, userConstruct, age, name);<br>&#125;<br></code></pre></td></tr></table></figure></p><p>调用native方法生成对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testJavaUserNDK</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">NDKUtils</span> <span class="hljs-variable">ndkUtils</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NDKUtils</span>();<br>    <span class="hljs-type">JavaUser</span> <span class="hljs-variable">tom</span> <span class="hljs-operator">=</span> ndkUtils.createUser(<span class="hljs-number">20</span>, <span class="hljs-string">&quot;Tom&quot;</span>);<br>    Log.d(TAG, tom.toString());<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="NDK兼容性问题"><a href="#NDK兼容性问题" class="headerlink" title="NDK兼容性问题"></a>NDK兼容性问题</h3><p>Vivo x6plus 兼容性问题。Vivo x6plus 打开Parrot界面即崩溃。但是Parrot官方APP能够正常使用。<br>我自己的so库与Parrot的so库不兼容，出现</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">java.lang.UnsatisfiedLinkError:<br>dalvik.system.PathClassLoader<span class="hljs-literal">[D<span class="hljs-identifier">exPathList</span>[[<span class="hljs-identifier">zip</span> <span class="hljs-identifier">file</span> &quot;<span class="hljs-operator">/</span><span class="hljs-identifier">data</span><span class="hljs-operator">/</span><span class="hljs-identifier">app</span><span class="hljs-operator">/</span><span class="hljs-identifier">com</span>.<span class="hljs-identifier">xx</span>.<span class="hljs-identifier">xx</span>.<span class="hljs-identifier">xxx</span>-<span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-identifier">base</span>.<span class="hljs-identifier">apk</span>&quot;]</span>,nativeLibraryDirectories=<span class="hljs-literal">[<span class="hljs-operator">/</span><span class="hljs-identifier">data</span><span class="hljs-operator">/</span><span class="hljs-identifier">app</span><span class="hljs-operator">/</span><span class="hljs-identifier">com</span>.<span class="hljs-identifier">xx</span>.<span class="hljs-identifier">xx</span>.<span class="hljs-identifier">xxx</span>-<span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-identifier">lib</span><span class="hljs-operator">/</span><span class="hljs-identifier">arm64</span>, <span class="hljs-operator">/</span><span class="hljs-identifier">vendor</span><span class="hljs-operator">/</span><span class="hljs-identifier">lib64</span>, <span class="hljs-operator">/</span><span class="hljs-identifier">system</span><span class="hljs-operator">/</span><span class="hljs-identifier">lib64</span>]</span>]] couldn&#x27;t find <span class="hljs-string">&quot;libjson.so&quot;</span><br>    at java.lang.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Runtime</span>.</span></span>load<span class="hljs-constructor">Library(Runtime.<span class="hljs-params">java</span>:366)</span><br>    at java.lang.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>load<span class="hljs-constructor">Library(System.<span class="hljs-params">java</span>:988)</span><br>    at com.parrot.arsdk.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ARSDK</span>.</span></span>load<span class="hljs-constructor">SDKLibs(ARSDK.<span class="hljs-params">java</span>:20)</span><br>    at com.parrot.sdk.activity.DronesListActivity.&lt;clinit&gt;(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DronesListActivity</span>.</span></span>java:<span class="hljs-number">44</span>)<br>    at java.lang.reflect.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Constructor</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(Native Method)</span><br></code></pre></td></tr></table></figure><h4 id="分析处理兼容性问题"><a href="#分析处理兼容性问题" class="headerlink" title="分析处理兼容性问题"></a>分析处理兼容性问题</h4><p>将Parrot官方apk解包后，找到so库文件。发现只有x86、mips、armeabi_v7a、armeabi 这4个。<br>而我加载了有更多的库。</p><p>将我自己的so文件删除至只剩下Parrot那4个即可。</p><p>Android.mk<br><code>TARGET_ARCH_ABI := x86 mips armeabi armeabi-v7a</code></p><h3 id="同名so文件引起UnsatisfiedLinkError"><a href="#同名so文件引起UnsatisfiedLinkError" class="headerlink" title="同名so文件引起UnsatisfiedLinkError"></a>同名so文件引起UnsatisfiedLinkError</h3><p>主工程<code>app</code>中带有C工程与so文件。现需要将所有的C工程移到新的模块<code>mylib</code>中。</p><p>新建模块<code>mylib</code>，将C工程复制进来。gradle中配置jni，因为修改了文件路径，重新生成头文件并修改cpp文件。<br>在模块中进行ndk-build，获得so库。</p><p>安装运行app，出现UnsatisfiedLinkError：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.UnsatisfiedLinkError</span>: No implementation found <span class="hljs-keyword">for</span> void com<span class="hljs-selector-class">.xx</span><span class="hljs-selector-class">.jni</span><span class="hljs-selector-class">.MyJNI</span><span class="hljs-selector-class">.init</span>(java<span class="hljs-selector-class">.lang</span>.String) <br>(tried Java_com_xx_jni_MyJNI_init and Java_com_xx_jni_MyJNI_init__Ljava_lang_String_2)<br></code></pre></td></tr></table></figure><br>分析原因，app能够正常加载库文件，但未找到实现方法。app使用的so库，究竟是不是我们指定的那个。</p><p>尝试进行修复，原app工程的<code>Android.mk</code>中<br><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fix"><span class="hljs-attr">LOCAL_MODULE :</span>=<span class="hljs-string"> main</span><br></code></pre></td></tr></table></figure><br>移动到模块后，新的<code>Android.mk</code>修改为<br><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fix"><span class="hljs-attr">LOCAL_MODULE :</span>=<span class="hljs-string"> mynewmain</span><br></code></pre></td></tr></table></figure><br>库改了名字后，修改Java代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> &#123;<br>    System.loadLibrary(<span class="hljs-string">&quot;mynewmain&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><br>重装app即可正常使用。</p><p>经过分析与尝试，删除原app工程中所有的so文件，再次重装app即可正常运行。不需要修改so库的名字。</p><p>错误原因猜想：app主工程与模块<code>mylib</code>中有同名的so文件，安装app时会优先使用app主工程中的so库。</p><h3 id="jstring转为char的方法-jstring-gt-char"><a href="#jstring转为char的方法-jstring-gt-char" class="headerlink" title="jstring转为char的方法 jstring -&gt; char"></a>jstring转为char的方法 jstring -&gt; char</h3><p>jstring转为char的方法<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">char</span> *<span class="hljs-title">jstringToChar</span><span class="hljs-params">(JNIEnv *env, jstring jstr)</span> </span>&#123;<br>    <span class="hljs-type">char</span> *rtn = <span class="hljs-literal">NULL</span>;<br>    jclass clsstring = env-&gt;<span class="hljs-built_in">FindClass</span>(<span class="hljs-string">&quot;java/lang/String&quot;</span>);<br>    jstring strencode = env-&gt;<span class="hljs-built_in">NewStringUTF</span>(<span class="hljs-string">&quot;GB2312&quot;</span>);<br>    jmethodID mid = env-&gt;<span class="hljs-built_in">GetMethodID</span>(clsstring, <span class="hljs-string">&quot;getBytes&quot;</span>, <span class="hljs-string">&quot;(Ljava/lang/String;)[B&quot;</span>);<br>    jbyteArray barr = (jbyteArray) env-&gt;<span class="hljs-built_in">CallObjectMethod</span>(jstr, mid, strencode);<br>    jsize alen = env-&gt;<span class="hljs-built_in">GetArrayLength</span>(barr);<br>    jbyte *ba = env-&gt;<span class="hljs-built_in">GetByteArrayElements</span>(barr, JNI_FALSE);<br>    <span class="hljs-keyword">if</span> (alen &gt; <span class="hljs-number">0</span>) &#123;<br>        rtn = (<span class="hljs-type">char</span> *) <span class="hljs-built_in">malloc</span>(alen + <span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">memcpy</span>(rtn, ba, alen);<br>        rtn[alen] = <span class="hljs-number">0</span>;<br>    &#125;<br>    env-&gt;<span class="hljs-built_in">ReleaseByteArrayElements</span>(barr, ba, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> rtn;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>参考 <a href="https://blog.csdn.net/xlxxcc/article/details/51106721">JNI中string 、 char* 和 jstring 两种转换 - CSDN xlxxcc</a></p>]]></content>
    
    
    <categories>
      
      <category>Android_note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NDK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android NDK 初步</title>
    <link href="/Android/NDK-use_sample_2/"/>
    <url>/Android/NDK-use_sample_2/</url>
    
    <content type="html"><![CDATA[<ul><li>开发环境： win7 64，Android Studio 2.1</li></ul><p>需要工具：NDK，Cygwin</p><h3 id="使用adb查看手机CPU架构信息"><a href="#使用adb查看手机CPU架构信息" class="headerlink" title="使用adb查看手机CPU架构信息"></a>使用adb查看手机CPU架构信息</h3><p>将手机通过USB连接到电脑，adb shell进入手机根目录，执行<code>cat /proc/cpuinfo</code><br><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs tcl">shell@hnCHE-H:/ $ cat /<span class="hljs-keyword">proc</span>/cpuinfo<span class="hljs-title"></span><br><span class="hljs-title">cat</span> /<span class="hljs-keyword">proc</span>/cpuinfo<span class="hljs-title"></span><br><span class="hljs-title">Processor</span>       :<span class="hljs-title"> AArch64</span> Processor<span class="hljs-title"> rev</span> 3 (aarch64)<span class="hljs-title"></span><br><span class="hljs-title">processor</span>       : 0<span class="hljs-title"></span><br><span class="hljs-title">processor</span>       : 1<span class="hljs-title"></span><br><span class="hljs-title">processor</span>       : 2<span class="hljs-title"></span><br><span class="hljs-title">processor</span>       : 3<span class="hljs-title"></span><br><span class="hljs-title">processor</span>       : 4<span class="hljs-title"></span><br><span class="hljs-title">processor</span>       : 5<span class="hljs-title"></span><br><span class="hljs-title">processor</span>       : 6<span class="hljs-title"></span><br><span class="hljs-title">processor</span>       : 7<span class="hljs-title"></span><br><span class="hljs-title">Features</span>        :<span class="hljs-title"> fp</span> asimd<span class="hljs-title"> evtstrm</span> aes<span class="hljs-title"> pmull</span> sha1<span class="hljs-title"> sha2</span> crc32<span class="hljs-title"></span><br><span class="hljs-title">CPU</span> implementer : 0x41<span class="hljs-title"></span><br><span class="hljs-title">CPU</span> architecture:<span class="hljs-title"> AArch64</span><br>CPU<span class="hljs-title"> variant</span>     : 0x0<span class="hljs-title"></span><br><span class="hljs-title">CPU</span> part        : 0xd03<span class="hljs-title"></span><br><span class="hljs-title">CPU</span> revision    : 3<span class="hljs-title"></span><br><span class="hljs-title"></span><br><span class="hljs-title">Hardware</span>        :<span class="hljs-title"> hi6210sft</span><br></code></pre></td></tr></table></figure><br>可以看到手机处理器的信息</p><h3 id="使用-SDK-Manager-配置安装-NDK"><a href="#使用-SDK-Manager-配置安装-NDK" class="headerlink" title="使用 SDK Manager 配置安装 NDK"></a>使用 SDK Manager 配置安装 NDK</h3><p>添加系统环境变量 <code>G:\SDK\ndk-bundle;G:\SDK\platform-tools</code></p><p>下载并安装Cygwin：<a href="https://cygwin.com/install.html">https://cygwin.com/install.html</a></p><p>Cygwin 安装NDK需要的工具包（如果第一次安装时没有选择工具包，可以再次启动安装）：<br>make, gcc, gdb, mingw64-x86_64-gcc, binutils<br><img src="https://raw.githubusercontent.com/RustFisher/RustNotes/master/Android_note/pics/Cygwin_tools.png" alt="tools"></p><p>配置<code>G:\soft\Cygwin\home\Administrator\.bashrc</code>，添加下面的指令，使用英文界面。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">LANG</span>=<span class="hljs-string">&#x27;en_US&#x27;</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">LC_ALL</span>=<span class="hljs-string">&#x27;en_US.GBK&#x27;</span><br></code></pre></td></tr></table></figure><br>配置text选项，在option里的text可设置。<br>可以在<code>G:\soft\Cygwin\home\Administrator\.minttyrc</code>中看到。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">Locale</span><span class="hljs-operator">=</span>zh_CN<br><span class="hljs-attribute">Charset</span><span class="hljs-operator">=</span>GBK<br></code></pre></td></tr></table></figure><p>设置完字体后可以避免中文乱码。</p><p>配置 <code>G:\soft\Cygwin\home\Administrator\.bash_profile</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">NDK=<span class="hljs-regexp">/cygdrive/</span>G<span class="hljs-regexp">/SDK/</span>ndk-bundle/ndk-build.cmd<br>export NDK<br></code></pre></td></tr></table></figure><p>在Cygwin中查找NDK位置，可以看到在SDK目录里面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">Administrator@rust-PC /cygdrive/g/soft/Cygwin/home/Administrator<br>$ <span class="hljs-built_in">echo</span> <span class="hljs-variable">$NDK</span><br>/cygdrive/G/SDK/ndk-bundle/ndk-build.cmd<br></code></pre></td></tr></table></figure><h3 id="操作示例NDK工程"><a href="#操作示例NDK工程" class="headerlink" title="操作示例NDK工程"></a>操作示例NDK工程</h3><p><em>JDK10已经不提供<code>javah</code>这个工具了，我们可以使用as支持c++的功能；详情见下文</em></p><p>生成一次试试。从github上获取android-ndk-android-mk，进入hello-jni工程。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">Administrator@rust-PC /cygdrive/g/rust_proj/android-ndk-android-mk/hello-jni<br>$ ndk-build.cmd<br><span class="hljs-comment"># 输出很多信息</span><br></code></pre></td></tr></table></figure><p>编译成功后，自动生成一个libs目录，编译生成的.so文件放在里面。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">Administrator@rust-PC <span class="hljs-regexp">/cygdrive/g</span><span class="hljs-regexp">/rust_proj/</span>NDKTest<span class="hljs-regexp">/app/</span>src/main<br>$ ndk-build.cmd<br>[armeabi] Install        : librust_ndk.so =&gt; libs<span class="hljs-regexp">/armeabi/</span>librust_ndk.so<br><span class="hljs-comment"># 进入java目录，编译.h文件</span><br>Administrator@rust-PC <span class="hljs-regexp">/cygdrive/g</span><span class="hljs-regexp">/rust_proj/</span>NDKTest<span class="hljs-regexp">/app/</span>src<span class="hljs-regexp">/main/</span>java<br>$ javah com.rustfisher.ndktest.HelloJNI<br><span class="hljs-comment"># 会生成一个.h文件</span><br></code></pre></td></tr></table></figure><p>将它复制到jni文件夹下；这个就是JNI层的代码。</p><p>Ubuntu下javah报错。需要添加参数</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">javah -cp <span class="hljs-regexp">/home/</span>rust<span class="hljs-regexp">/Android/</span>Sdk<span class="hljs-regexp">/platforms/</span>android-<span class="hljs-number">25</span>/android.jar:. com.example.LibUtil<br></code></pre></td></tr></table></figure><h3 id="使用C-C-实现JNI"><a href="#使用C-C-实现JNI" class="headerlink" title="使用C/C++实现JNI"></a>使用C/C++实现JNI</h3><p>遇到错误： Error:Execution failed for task ‘:app:compileDebugNdk’.</p><blockquote><p>Error: NDK integration is deprecated in the current plugin.  Consider trying the new experimental plugin.  For details, see <a href="http://tools.android.com/tech-docs/new-build-system/gradle-experimental">http://tools.android.com/tech-docs/new-build-system/gradle-experimental</a>.  Set “android.useDeprecatedNdk=true” in gradle.properties to continue using the current NDK integration.</p></blockquote><p>解决办法：在<code>app\build.gradle</code>文件中添加<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">sourceSets<span class="hljs-selector-class">.main</span> &#123;<br>    jniLibs<span class="hljs-selector-class">.srcDir</span> <span class="hljs-string">&#x27;src/main/libs&#x27;</span><br>    jni<span class="hljs-selector-class">.srcDirs</span> = <span class="hljs-selector-attr">[]</span> <span class="hljs-comment">//disable automatic ndk-build call</span><br>&#125;<br></code></pre></td></tr></table></figure></p><p>文件有3种：接口文件<code>.h</code>； 实现文件<code>.c</code>，注意与前面的<code>.h</code>文件同名； <code>.h</code>与<code>.c</code>生成的库文件<code>.so</code></p><h3 id="操作步骤小结"><a href="#操作步骤小结" class="headerlink" title="操作步骤小结"></a>操作步骤小结</h3><p>From Java to C/C++<br>Step 1 定义Java接口文件，里面定义好native方法。<br>Step 2 javah生成.h接口文件 。<br>Step 3 复制.h文件的文件名，编写C/C++文件。注意要实现.h中的接口。  </p><h3 id="NDK遇到的问题与注意事项"><a href="#NDK遇到的问题与注意事项" class="headerlink" title="NDK遇到的问题与注意事项"></a>NDK遇到的问题与注意事项</h3><h4 id="文件关联问题"><a href="#文件关联问题" class="headerlink" title="文件关联问题"></a>文件关联问题</h4><p>写cpp源文件的时候，忘记include头文件。产生<code>java.lang.UnsatisfiedLinkError: No implementation found for</code> 之类的错误<br>stackoverflow上有关于<code>Android NDK C++ JNI (no implementation found for native…)</code>的问题。</p><h4 id="NDK本地对象数量溢出问题-Local-ref-table-overflow"><a href="#NDK本地对象数量溢出问题-Local-ref-table-overflow" class="headerlink" title="NDK本地对象数量溢出问题 Local ref table overflow"></a>NDK本地对象数量溢出问题 <code>Local ref table overflow</code></h4><p>NDK本地只允许持有512个本地对象，return后会销毁这些对象。必须注意，在循环中创建的本地对象要在使用后销毁掉。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">env-&gt;<span class="hljs-built_in">DeleteLocalRef</span>(local_ref);<span class="hljs-comment">// local_ref 是本地创建的对象</span><br></code></pre></td></tr></table></figure><h4 id="调用Java方法时，注意指定返回值"><a href="#调用Java方法时，注意指定返回值" class="headerlink" title="调用Java方法时，注意指定返回值"></a>调用Java方法时，注意指定返回值</h4><p><code>env-&gt;CallBooleanMethod(resArrayList,arrayList_add, javaObject);</code> ArrayList的add方法返回Boolean</p><p>参考：<a href="https://www3.ntu.edu.sg/home/ehchua/programming/java/JavaNativeInterface.html">https://www3.ntu.edu.sg/home/ehchua/programming/java/JavaNativeInterface.html</a></p><h4 id="C-调用C方法"><a href="#C-调用C方法" class="headerlink" title="C++调用C方法"></a>C++调用C方法</h4><p>C++文件中，需要调用C里面的方法。如果未经任何处理，会出现无引用错误<br><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">error: </span>undefined reference to &#x27;......<br></code></pre></td></tr></table></figure></p><p>因此在C++文件中涉及到C方法，需要声明。<br>例如<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __cplusplus</span><br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;c_file_header.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __cplusplus</span><br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-comment">// ___ 结束声明</span><br></code></pre></td></tr></table></figure></p><p>javah生成的JNI头文件中也有extern，可作为参考</p><h3 id="NDK中使用logcat"><a href="#NDK中使用logcat" class="headerlink" title="NDK中使用logcat"></a>NDK中使用logcat</h3><p>配置：Cygwin， NDK 14.1…<br>可以在NDK中使用logcat，方便调试<br>需要在mk文件中添加<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">LOCAL_LDLIBS := -L$(SYSROOT)<span class="hljs-regexp">/usr/</span>lib -llog<br></code></pre></td></tr></table></figure></p><p>代码中添加头文件，即可调用logcat的方法<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;android/log.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LOG_TAG    <span class="hljs-string">&quot;rustApp&quot;</span></span><br><br>__android_log_write(ANDROID_LOG_VERBOSE, LOG_TAG, <span class="hljs-string">&quot;My Log&quot;</span>);<br></code></pre></td></tr></table></figure></p><p>此时编译出现了错误：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">G:<span class="hljs-regexp">/SDK/</span>ndk-bundle<span class="hljs-regexp">/build/</span><span class="hljs-regexp">/../</span>toolchains<span class="hljs-regexp">/x86_64-4.9/</span>prebuilt<span class="hljs-regexp">/windows-x86_64/</span>lib<span class="hljs-regexp">/gcc/</span>x86_64-linux-android<span class="hljs-regexp">/4.9.x/</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>x86_64-linux-android<span class="hljs-regexp">/bin\ld: warning: skipping incompatible G:/</span>SDK<span class="hljs-regexp">/ndk-bundle/</span>build<span class="hljs-regexp">//</span>..<span class="hljs-regexp">/platforms/</span>android-<span class="hljs-number">21</span><span class="hljs-regexp">/arch-x86_64/u</span>sr<span class="hljs-regexp">/lib/</span>libc.a <span class="hljs-keyword">while</span> searching <span class="hljs-keyword">for</span> c<br>G:<span class="hljs-regexp">/SDK/</span>ndk-bundle<span class="hljs-regexp">/build/</span><span class="hljs-regexp">/../</span>toolchains<span class="hljs-regexp">/x86_64-4.9/</span>prebuilt<span class="hljs-regexp">/windows-x86_64/</span>lib<span class="hljs-regexp">/gcc/</span>x86_64-linux-android<span class="hljs-regexp">/4.9.x/</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>x86_64-linux-android/bin\ld: error: treating warnings as errors<br>clang++.exe: error: linker command failed with <span class="hljs-keyword">exit</span> code <span class="hljs-number">1</span> (use -v to see invocation)<br>make: *** [G:<span class="hljs-regexp">/openSourceProject/</span>NDKAlgo<span class="hljs-regexp">/app/</span>src<span class="hljs-regexp">/main/</span>obj<span class="hljs-regexp">/local/</span>x86_64/libNDKMan.so] Error <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></p><p>出现了<code>error: treating warnings as errors</code><br>处理方法，在mk文件中添加<code>LOCAL_DISABLE_FATAL_LINKER_WARNINGS=true</code><br>再次编译即可</p><p>我们可以使用宏定义简化打log的写法<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> LOG_TAG    <span class="hljs-string">&quot;rustApp&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LOGV(...) __android_log_write(ANDROID_LOG_VERBOSE, LOG_TAG, __VA_ARGS__)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LOGD(...) __android_log_print(ANDROID_LOG_DEBUG , LOG_TAG, __VA_ARGS__)  </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LOGI(...) __android_log_print(ANDROID_LOG_INFO , LOG_TAG, __VA_ARGS__)  </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LOGW(...) __android_log_print(ANDROID_LOG_WARN , LOG_TAG, __VA_ARGS__)  </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LOGE(...) __android_log_print(ANDROID_LOG_ERROR , LOG_TAG, __VA_ARGS__)  </span><br><br><span class="hljs-comment">// 调用</span><br>LOGV(<span class="hljs-string">&quot;This is my log&quot;</span>);<br></code></pre></td></tr></table></figure></p><h3 id="Android-Studio-3-为library-module添加C-支持"><a href="#Android-Studio-3-为library-module添加C-支持" class="headerlink" title="Android Studio 3 为library module添加C++支持"></a>Android Studio 3 为library module添加C++支持</h3><p>as在新建project的时候可以选择支持C++，可以新建一个支持C++的项目来参考。<br>可以不用自己javah来生成头文件。</p><p>在工程中新建android library，将<code>CMakeLists.txt</code>添加到模块中。这里模块名是<code>native-lib</code><br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.4</span>.<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">add_library</span>( <span class="hljs-comment"># Sets the name of the library.</span><br>             native-lib<br><br>             <span class="hljs-comment"># Sets the library as a shared library.</span><br>             SHARED<br><br>             <span class="hljs-comment"># Provides a relative path to your source file(s).</span><br>             src/main/cpp/native-lib.cpp<br>             src/main/cpp/imagetool.cpp)<br><br><span class="hljs-keyword">find_library</span>( <span class="hljs-comment"># Sets the name of the path variable.</span><br>              log-lib<br><br>              <span class="hljs-comment"># Specifies the name of the NDK library that</span><br>              <span class="hljs-comment"># you want CMake to locate.</span><br>              log )<br><br><span class="hljs-keyword">target_link_libraries</span>( <span class="hljs-comment"># Specifies the target library.</span><br>                       native-lib<br><br>                       <span class="hljs-comment"># Links the target library to the log library</span><br>                       <span class="hljs-comment"># included in the NDK.</span><br>                       <span class="hljs-variable">$&#123;log-lib&#125;</span> )<br></code></pre></td></tr></table></figure></p><p>修改模块的<code>build.gradle</code><br><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs fsharp"><span class="hljs-keyword">android</span> &#123;<br>    compileSdkVersion <span class="hljs-number">26</span><br>    <span class="hljs-keyword">defaultConfig</span> &#123;<br>        minSdkVersion <span class="hljs-number">19</span><br>        targetSdkVersion <span class="hljs-number">26</span><br>        versionCode <span class="hljs-number">1</span><br>        versionName <span class="hljs-string">&quot;1.0&quot;</span><br><br>        testInstrumentationRunner <span class="hljs-string">&quot;android.support.test.runner.AndroidJUnitRunner&quot;</span><br>        <span class="hljs-comment">// 添加</span><br>        <span class="hljs-keyword">externalNativeBuild</span> &#123;<br>            <span class="hljs-keyword">cmake</span> &#123;<br>                cppFlags <span class="hljs-string">&quot;&quot;</span><br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">buildTypes</span> &#123;<br>        <span class="hljs-keyword">release</span> &#123;<br>            minifyEnabled <span class="hljs-literal">false</span><br>            proguardFiles getDefaultProguardFile(<span class="hljs-symbol">&#x27;proguard</span><span class="hljs-operator">-</span>android.txt&#x27;), <span class="hljs-symbol">&#x27;proguard</span><span class="hljs-operator">-</span>rules.pro&#x27;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 添加</span><br>    <span class="hljs-keyword">externalNativeBuild</span> &#123;<br>        <span class="hljs-keyword">cmake</span> &#123;<br>            path <span class="hljs-string">&quot;CMakeLists.txt&quot;</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>新建Java文件和C++文件，大致目录如下<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ada">main<br>|<span class="hljs-comment">-- AndroidManifest.xml</span><br>|<span class="hljs-comment">-- cpp</span><br>|   |<span class="hljs-comment">-- imagetool.cpp   // cpp文件</span><br>|   `<span class="hljs-comment">-- native-lib.cpp</span><br>|<span class="hljs-comment">-- java</span><br>|   `<span class="hljs-comment">-- com</span><br>|       `<span class="hljs-comment">-- example</span><br>|           `<span class="hljs-comment">-- myclib</span><br>|               `<span class="hljs-comment">-- ImageDetect.java // Java文件</span><br>`<span class="hljs-comment">-- res</span><br></code></pre></td></tr></table></figure></p><p>ImageDetect.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ImageDetect</span> &#123;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        System.loadLibrary(<span class="hljs-string">&quot;native-lib&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">inputPath</span><span class="hljs-params">(String path)</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> String <span class="hljs-title function_">stringFromJNI</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getOne</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>native-lib.cpp<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;jni.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> &#123;<br><br><span class="hljs-function">JNIEXPORT jstring</span><br><span class="hljs-function">JNICALL</span><br><span class="hljs-function"><span class="hljs-title">Java_com_example_myclib_ImageDetect_stringFromJNI</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        JNIEnv *env,</span></span><br><span class="hljs-params"><span class="hljs-function">        jobject <span class="hljs-comment">/* this */</span>)</span> </span>&#123;<br>    std::string hello = <span class="hljs-string">&quot;In myclib Hello from C++&quot;</span>;<br>    <span class="hljs-keyword">return</span> env-&gt;<span class="hljs-built_in">NewStringUTF</span>(hello.<span class="hljs-built_in">c_str</span>());<br>&#125;<br><br><span class="hljs-function">JNIEXPORT jint</span><br><span class="hljs-function">JNICALL</span><br><span class="hljs-function"><span class="hljs-title">Java_com_example_myclib_ImageDetect_getOne</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        JNIEnv *env,</span></span><br><span class="hljs-params"><span class="hljs-function">        jobject <span class="hljs-comment">/* this */</span>)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">9257</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>imagetool.cpp<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;jni.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span><br><span class="hljs-function">JNIEXPORT <span class="hljs-type">void</span></span><br><span class="hljs-function"></span><br><span class="hljs-function">JNICALL</span><br><span class="hljs-function"><span class="hljs-title">Java_com_example_myclib_ImageDetect_inputPath</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        JNIEnv *env,</span></span><br><span class="hljs-params"><span class="hljs-function">        jobject <span class="hljs-comment">/* this */</span>jobj, jstring inputPath)</span> </span>&#123;<br>            <span class="hljs-comment">// just test</span><br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>编译运行即可。</p>]]></content>
    
    
    <categories>
      
      <category>Android_note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NDK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>监听者模式 - 在Java与Android中的使用</title>
    <link href="/DesignPattern/Listener_pattern_practice_in_Java_Android/"/>
    <url>/DesignPattern/Listener_pattern_practice_in_Java_Android/</url>
    
    <content type="html"><![CDATA[<p>监听者模式（观察者模式）能降低对象之间耦合程度。为两个相互依赖调用的类进行解耦。<br>便于进行模块化开发工作。不同模块的开发者可以专注于自身的代码。<br>监听者用来监听自已感兴趣的事件，当收到自已感兴趣的事件时执行自定义的操作。<br>在某些数据变化时，其他的类做出一些响应。处理数据（或者分发事件）的类主动投送消息，感兴趣的类主动“订阅”消息。</p><p>监听者模式在Android中有大量的运用，相信大家都不会感到陌生。在Android开发中，Button控件的点击事件就是监听者模式最常见的例子。<br>当Button被点击，执行了 <code>OnClickListener.onClick</code>。<br>Activity中给这个Button设置了自己实现的<code>OnClickListener</code>，并复写了<code>onClick</code>方法，就能执行自定义操作了。</p><h3 id="Java代码实例"><a href="#Java代码实例" class="headerlink" title="Java代码实例"></a>Java代码实例</h3><p>下面来用Java来实现监听者模式。<br>这个例子是给“计算类”持续地传入数据，处理好数据后，发出结果。感兴趣的类接收结果。<br>2个文件：<code>AlgoCalculator.java</code>；<code>MainUser.java</code>  </p><ul><li><code>AlgoCalculator.java</code>是计算部分，接收数据并进行计算。并将结果传递出去。</li><li><code>MainUser.java</code>是调用方，将基本数据传入AlgoCalculator并监听结果。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.algo;<br><br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AlgoCalculator</span> &#123;<br><br>    <span class="hljs-keyword">private</span> List&lt;<span class="hljs-type">short</span>[]&gt; mDataBuffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AlgoCalculator</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-comment">// 定义一个Listener接口；可将一个boolean值传递出去</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ResultChangeListener</span> &#123;<br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">onChange</span><span class="hljs-params">(<span class="hljs-type">boolean</span> found)</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> ResultChangeListener resultChangeListener;<br>    <span class="hljs-comment">// 调用方能够设置并实现这个接口</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setResultChangedListener</span><span class="hljs-params">(ResultChangeListener resultChangedListener)</span> &#123;<br>        <span class="hljs-built_in">this</span>.resultChangeListener = resultChangedListener;<br>    &#125;<br>    <span class="hljs-comment">// 传输数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDataStream</span><span class="hljs-params">(<span class="hljs-type">short</span>[] data)</span> &#123;<br>        checkData(data);<span class="hljs-comment">// 处理数据方法</span><br>    &#125;<br><br>    <span class="hljs-comment">// 处理数据，并送出结果</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkData</span><span class="hljs-params">(<span class="hljs-type">short</span>[] data)</span> &#123;<br>        <span class="hljs-keyword">if</span> (data.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">short</span> b : data) &#123;<br>            sum += b;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (sum &gt; <span class="hljs-number">40</span>) &#123;<br>            resultChangeListener.onChange(<span class="hljs-literal">true</span>); <span class="hljs-comment">// 数据处理结果</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            resultChangeListener.onChange(<span class="hljs-literal">false</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>主程序；调用方传入数据，获取结果<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.algo.AlgoCalculator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainUser</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">AlgoCalculator</span> <span class="hljs-variable">algoCalculator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AlgoCalculator</span>(); <span class="hljs-comment">// 初始化</span><br><br>        <span class="hljs-comment">// 设置监听器，并在里面增加要执行的动作</span><br>        algoCalculator.setResultChangedListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AlgoCalculator</span>.ResultChangeListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onChange</span><span class="hljs-params">(<span class="hljs-type">boolean</span> found)</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;result: &quot;</span> + found);<br>            &#125;<br>        &#125;);<br>        <span class="hljs-type">short</span>[] data1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>,&#125;;<br>        <span class="hljs-type">short</span>[] data2 = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>&#125;;<br>        <span class="hljs-type">short</span>[] data3 = &#123;<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>&#125;;<br>        <span class="hljs-type">short</span>[] data4 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;;<br>        <span class="hljs-comment">// 传入数据</span><br>        algoCalculator.setDataStream(data1);    <span class="hljs-comment">// output false</span><br>        algoCalculator.setDataStream(data2);    <span class="hljs-comment">// output true</span><br>        algoCalculator.setDataStream(data3);    <span class="hljs-comment">// output false</span><br>        algoCalculator.setDataStream(data4);    <span class="hljs-comment">// output false</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>在另外的类里，能够很方便地调用<code>AlgoCalculator</code>的计算能力并获取计算结果。<br>在这里，每传入一次数据，就能获取一个结果。如果每秒钟传入一次数据，每秒钟就能获取一个结果。<br>我们可以把复杂的算法封装起来，客户端只需要传入数据，即可获得（监听到）结果。  </p><p>很多场景中都使用了监听者模式。开发者也可能在不知不觉中就运用了这个模式。</p><h3 id="Android中使用监听器"><a href="#Android中使用监听器" class="headerlink" title="Android中使用监听器"></a>Android中使用监听器</h3><p>最常见的例子是给Button设置点击事件监听器。<br>类似上个例子，设计一个接口当做监听器。Android中回调时可以利用handler，控制调用的线程。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Handler mMainHandler;<br><br>mMainHandler = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Handler</span>(Looper.getMainLooper());<span class="hljs-comment">// 在主线程中运行</span><br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">notifySthChange</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-type">int</span> state)</span> &#123;<br>    mMainHandler.post(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            ArrayList&lt;SListener&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(mListeners);<br>            <span class="hljs-keyword">for</span> (SListener l : list) &#123;<br>                l.OnSthChanged(state);<br>            &#125;<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><br>在回调中可以直接更新UI。</p>]]></content>
    
    
    <categories>
      
      <category>Design_pattern</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>aboutView 开发记录</title>
    <link href="/Dev-note/dev-note-aboutView/"/>
    <url>/Dev-note/dev-note-aboutView/</url>
    
    <content type="html"><![CDATA[<p>工程地址 <a href="https://github.com/RustFisher/aboutView">https://github.com/RustFisher/aboutView</a></p><h2 id="虚拟键盘-VKeyboard"><a href="#虚拟键盘-VKeyboard" class="headerlink" title="虚拟键盘 - VKeyboard"></a>虚拟键盘 - VKeyboard</h2><p>VKeyboard - Virtual keyboard</p><h3 id="定义按键类"><a href="#定义按键类" class="headerlink" title="定义按键类"></a>定义按键类</h3><p>定义Key类，代表按键。属性有ascii码，是否使用TextView，是否使用ImageView，按键类别（功能键，普通键）等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Key</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> keyType; <span class="hljs-comment">// 按键种类 是普通按键或者是功能按键</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">uiType</span> <span class="hljs-operator">=</span> UI_TEXT_VIEW; <span class="hljs-comment">// UI使用的View类型</span><br>    <span class="hljs-keyword">private</span> String keyText; <span class="hljs-comment">// 显示的文字</span><br>    <span class="hljs-comment">// ....</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="UI控制器实现"><a href="#UI控制器实现" class="headerlink" title="UI控制器实现"></a>UI控制器实现</h3><p>实现一个虚拟键盘。采用给LinearLayout添加子view的方式。<br>做一个UI控制器（Widget），需要传入一个LinearLayout作为根view。根据设置的键盘宽度动态调整每个按键的大小。</p><p>这种方式不太适合组件化。</p><h3 id="创建组件的方式"><a href="#创建组件的方式" class="headerlink" title="创建组件的方式"></a>创建组件的方式</h3><p>将「按键」装配到键盘上。采用适配器模式，将View添加到ViewGroup中。</p><p>VKey代表按键，VKeyboardBody代表键盘，VRow代表键盘上的一行，VKeyboardListener是监听器。<br>VKeyboard继承Framelayout，创建适配器VKeyboard.Adapter，将「按键」装配到键盘上。</p><p><img src="https://raw.githubusercontent.com/RustFisher/aboutView/master/pics/vk-1.png" alt="vk"></p><h4 id="VKey-按键"><a href="#VKey-按键" class="headerlink" title="VKey - 按键"></a>VKey - 按键</h4><p>代表按键。装载着keyCode，背景资源等等属性值。</p><h4 id="VKeyboardBody-键盘"><a href="#VKeyboardBody-键盘" class="headerlink" title="VKeyboardBody - 键盘"></a>VKeyboardBody - 键盘</h4><p>代表键盘的显示样式。比如UI的padding值和margin值。</p><h4 id="VRow-行"><a href="#VRow-行" class="headerlink" title="VRow - 行"></a>VRow - 行</h4><p>一行按键。实际上是一个LinearLayout的属性值合集。</p><h4 id="VKeyboardListener-监听器"><a href="#VKeyboardListener-监听器" class="headerlink" title="VKeyboardListener - 监听器"></a>VKeyboardListener - 监听器</h4><p>事件监听器。例如点击事件等等。</p><h4 id="VKeyboard-键盘UI类"><a href="#VKeyboard-键盘UI类" class="headerlink" title="VKeyboard - 键盘UI类"></a>VKeyboard - 键盘UI类</h4><p>实际上继承了FrameLayout。通过VKeyboard.Adapter获取到键盘的按键配置信息。<br>创建对应的子View，并添加到FrameLayout中。</p><h5 id="VKeyboard构造函数"><a href="#VKeyboard构造函数" class="headerlink" title="VKeyboard构造函数"></a>VKeyboard构造函数</h5><p>构造函数中有<code>AttributeSet</code>。attrs里面有id，layout_width，layout_height等等信息。</p><p>想在View的构造器中获取到定义中xml中的属性，需要从AttributeSet中获取。可能会获取到-1或-2，分别代表MATCH_PARENT和WRAP_CONTENT。<br>因此要判断获取到的数字是否大于0，如果大于0则表明是一个指定的宽度，直接记下这个宽度值。<br>获取到xml中指定的宽度后，再计算子view的宽度。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">VKeyboard</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Context context, <span class="hljs-meta">@Nullable</span> AttributeSet attrs, <span class="hljs-type">int</span> defStyleAttr)</span> &#123;<br>    <span class="hljs-built_in">super</span>(context, attrs, defStyleAttr);<br>    <span class="hljs-type">int</span>[] attrsArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<br>            android.R.attr.id, <span class="hljs-comment">// 0</span><br>            android.R.attr.background, <span class="hljs-comment">// 1</span><br>            android.R.attr.layout_width, <span class="hljs-comment">// 2</span><br>            android.R.attr.layout_height <span class="hljs-comment">// 3</span><br>    &#125;;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">TypedArray</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> context.obtainStyledAttributes(attrs, attrsArray);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">layoutWidth</span> <span class="hljs-operator">=</span> a.getLayoutDimension(<span class="hljs-number">2</span>, ViewGroup.LayoutParams.MATCH_PARENT);<br>    <span class="hljs-keyword">if</span> (layoutWidth &gt; <span class="hljs-number">0</span>) &#123;<br>        keyboardWidthPx = layoutWidth;<br>    &#125;<br>    a.recycle();<br>    initKeyboardUI(context);<br>&#125;<br></code></pre></td></tr></table></figure></p><p>参考 <a href="https://stackoverflow.com/questions/8037101/how-to-get-attributeset-properties">https://stackoverflow.com/questions/8037101/how-to-get-attributeset-properties</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">MapView</span><span class="hljs-params">(Context context, AttributeSet attrs)</span> &#123;<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-type">int</span>[] attrsArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[] &#123;<br>        android.R.attr.id, <span class="hljs-comment">// 0</span><br>        android.R.attr.background, <span class="hljs-comment">// 1</span><br>        android.R.attr.layout_width, <span class="hljs-comment">// 2</span><br>        android.R.attr.layout_height <span class="hljs-comment">// 3</span><br>    &#125;;<br>    <span class="hljs-type">TypedArray</span> <span class="hljs-variable">ta</span> <span class="hljs-operator">=</span> context.obtainStyledAttributes(attrs, attrsArray);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> ta.getResourceId(<span class="hljs-number">0</span> <span class="hljs-comment">/* index of attribute in attrsArray */</span>, View.NO_ID);<br>    <span class="hljs-type">Drawable</span> <span class="hljs-variable">background</span> <span class="hljs-operator">=</span> ta.getDrawable(<span class="hljs-number">1</span>);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">layout_width</span> <span class="hljs-operator">=</span> ta. getLayoutDimension(<span class="hljs-number">2</span>, ViewGroup.LayoutParams.MATCH_PARENT);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">layout_height</span> <span class="hljs-operator">=</span> ta. getLayoutDimension(<span class="hljs-number">3</span>, ViewGroup.LayoutParams.MATCH_PARENT);<br>    ta.recycle();<br>&#125;<br></code></pre></td></tr></table></figure></p><p>给Keyboard添加按键（key）。在activity onCreate的时候，Keyboard已经执行了构造函数。<br>之后我们通过setAdapter的方式给它添加key。</p>]]></content>
    
    
    <categories>
      
      <category>Android_note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>awk命令的使用</title>
    <link href="/Linux/awk-use/"/>
    <url>/Linux/awk-use/</url>
    
    <content type="html"><![CDATA[<p>Ubuntu14.04</p><h2 id="目的：想用awk来统计某个文本中单词出现的次数，并以一定的格式输出结构"><a href="#目的：想用awk来统计某个文本中单词出现的次数，并以一定的格式输出结构" class="headerlink" title="目的：想用awk来统计某个文本中单词出现的次数，并以一定的格式输出结构"></a>目的：想用awk来统计某个文本中单词出现的次数，并以一定的格式输出结构</h2><p>通常，awk逐行处理文本。awk每接收文件的一行，然后执行相应的命令来处理。</p><p>用legal文件来做示例<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">$ cat <span class="hljs-operator">/</span>etc<span class="hljs-operator">/</span>legal<br><br>The programs included <span class="hljs-keyword">with</span> the Ubuntu <span class="hljs-keyword">system</span> <span class="hljs-keyword">are</span> <span class="hljs-keyword">free</span> software;<br>the exact distribution terms <span class="hljs-keyword">for</span> <span class="hljs-keyword">each</span> program <span class="hljs-keyword">are</span> described <span class="hljs-keyword">in</span> the<br>individual files <span class="hljs-keyword">in</span> <span class="hljs-operator">/</span>usr<span class="hljs-operator">/</span>share<span class="hljs-operator">/</span>doc<span class="hljs-comment">/*/copyright.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by</span><br><span class="hljs-comment">applicable law.</span><br></code></pre></td></tr></table></figure></p><h3 id="搜索统计单词“law”的个数"><a href="#搜索统计单词“law”的个数" class="headerlink" title="搜索统计单词“law”的个数"></a>搜索统计单词“law”的个数</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">$ awk -F : &#x27;/law/&#123;<span class="hljs-built_in">count</span>++&#125; END&#123;print <span class="hljs-string">&quot;the count is &quot;</span>,<span class="hljs-built_in">count</span>&#125;&#x27; /etc/legal<br><span class="hljs-keyword">the</span> <span class="hljs-built_in">count</span> <span class="hljs-keyword">is</span>  <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="统计单词“the”的个数"><a href="#统计单词“the”的个数" class="headerlink" title="统计单词“the”的个数"></a>统计单词“the”的个数</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">$ awk -F : &#x27;/<span class="hljs-keyword">the</span>/&#123;<span class="hljs-built_in">count</span>++&#125; END&#123;print <span class="hljs-string">&quot;the count is &quot;</span>,<span class="hljs-built_in">count</span>&#125;&#x27; /etc/legal<br><span class="hljs-keyword">the</span> <span class="hljs-built_in">count</span> <span class="hljs-keyword">is</span>  <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>找到指定单词，自定义变量count自增，最后输出语句和count值</p><p>命令sort，把各行按首字母排列顺序重新排列起来</p><ul><li>sort -nr，每行都以数字开头，按数字从达到小，排列各行</li><li>uniq -c，统计各行出现的次数，并把次数打印在每行前端</li><li>awk参数 NF - 浏览记录的域的个数</li></ul><p>综合起来，命令就是<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">awk -F<span class="hljs-string">&#x27; &#x27;</span> <span class="hljs-string">&#x27;&#123;for(i=1;i&lt;=NF;i=i+1)&#123;print $i&#125;&#125;&#x27;</span> /etc/legal |<br><span class="hljs-built_in">sort</span>|<span class="hljs-built_in">uniq</span> -c|<span class="hljs-built_in">sort</span> -nr|awk -F<span class="hljs-string">&#x27; &#x27;</span> <span class="hljs-string">&#x27;&#123;printf(&quot;%s %s\n&quot;,$2,$1)&#125;&#x27;</span><br></code></pre></td></tr></table></figure><br>统计/etc/legal中单词出现次数，并以“单词 次数”格式输出结果</p>]]></content>
    
    
    <categories>
      
      <category>Linux_note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>grep 搜索字符串</title>
    <link href="/Linux/grep_note/"/>
    <url>/Linux/grep_note/</url>
    
    <content type="html"><![CDATA[<h2 id="grep-搜索，怎样排除某些目录？"><a href="#grep-搜索，怎样排除某些目录？" class="headerlink" title="grep 搜索，怎样排除某些目录？"></a>grep 搜索，怎样排除某些目录？</h2><p>使用 <code>--exclude-dir</code> 选项。</p><p>语法:<br><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">--exclude-<span class="hljs-built_in">dir</span>=<span class="hljs-built_in">DIR</span><br></code></pre></td></tr></table></figure></p><blockquote><p>Exclude directories matching the pattern DIR from recursive searches.</p></blockquote><h3 id="单个目录示例"><a href="#单个目录示例" class="headerlink" title="单个目录示例"></a>单个目录示例</h3><p><code>-R</code>是表示启用正则<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">grep -E <span class="hljs-string">&quot;http&quot;</span>  <span class="hljs-string">./</span> -R <span class="hljs-params">--exclude-dir=</span><span class="hljs-string">.git</span><br></code></pre></td></tr></table></figure></p><h3 id="多个目录示例"><a href="#多个目录示例" class="headerlink" title="多个目录示例"></a>多个目录示例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep -E <span class="hljs-string">&quot;http&quot;</span>  . -R --exclude-dir=&#123;.git,res,bin&#125;<br></code></pre></td></tr></table></figure><h3 id="多个文件示例"><a href="#多个文件示例" class="headerlink" title="多个文件示例"></a>多个文件示例</h3><h4 id="排除扩展名为-java-和-js-的文件"><a href="#排除扩展名为-java-和-js-的文件" class="headerlink" title="排除扩展名为 java 和 js 的文件"></a>排除扩展名为 java 和 js 的文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep -E <span class="hljs-string">&quot;http&quot;</span>  . -R --exclude=*.&#123;java,js&#125;<br></code></pre></td></tr></table></figure><h4 id="排除扩展名为-java，md-和-js-的文件"><a href="#排除扩展名为-java，md-和-js-的文件" class="headerlink" title="排除扩展名为 java，md~ 和 js 的文件"></a>排除扩展名为 java，md~ 和 js 的文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">~/wd/rustNote/Linux_note$ grep -E DIR -R --exclude=*.&#123;java,js,md~&#125;<br>grep_note.md:    --exclude-dir=DIR<br>grep_note.md:    Exclude directories matching the pattern DIR from recursive searches.<br></code></pre></td></tr></table></figure><p>排除扩展名为java， js 和 md~ 的文件</p><p>排除一些文件，并且显示行号<code>-n</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep -n -E <span class="hljs-string">&quot;org/webrtc/&quot;</span> . -R --exclude=*.&#123;java,ninja,TOC,so,o,jar&#125;<br></code></pre></td></tr></table></figure></p><h2 id="如何在-Linux-系统和类-Unix-的操作系统中使用带正则表达式的-grep-命令呢？"><a href="#如何在-Linux-系统和类-Unix-的操作系统中使用带正则表达式的-grep-命令呢？" class="headerlink" title="如何在 Linux 系统和类 Unix 的操作系统中使用带正则表达式的 grep 命令呢？"></a>如何在 Linux 系统和类 Unix 的操作系统中使用带正则表达式的 grep 命令呢？</h2><p>Linux 系统自带了支持拓展正则表达式的 GNU 版本 grep 工具。所有的 Linux 系统中默认安装的都是 GNU 版 grep 。<br>grep 命令被用来检索一台服务器或工作站上任何位置的文本信息。</p><h3 id="快速了解正则表达式"><a href="#快速了解正则表达式" class="headerlink" title="快速了解正则表达式"></a>快速了解正则表达式</h3><h4 id="如何匹配你要查找的内容？"><a href="#如何匹配你要查找的内容？" class="headerlink" title="如何匹配你要查找的内容？"></a>如何匹配你要查找的内容？</h4><p>正则表达式只不过是每个输入行匹配的模式。模式是一个字符序列。下面都是范例：</p><p>例如：<code>^w1”、“w1|w2”、“[^ ]</code>。</p><p>在 <code>/etc/passswd</code> 中检索 <code>vivek</code> ： <code>grep vivek /etc/passwd</code></p><p>输出结果案例：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">vivek:x:1000:1000:Vivek Gite,,,:/home/vivek:/bin/bash<br>vivekgite:x:1001:1001::/home/vivekgite:/bin/sh<br>gitevivek:x:1002:1002::/home/gitevivek:/bin/sh<br></code></pre></td></tr></table></figure><br>在任何情况下都搜索 ‘vivek’  (即不区分大小)：<code>grep -i -w vivek /etc/passwd</code><br>不区分大小写地检索 ‘vivek’ 和 ‘raj’ ： <code>grep -E -i -w &#39;vivek|raj&#39; /etc/passwd</code><br>在最后一个例子中，使用了扩展正则表达式的模式。</p><p>固定检索内容的位置：<br>你可以使用 ^ 和 $ 符号强制一个正则表达式分别匹配一行的开始或结束的位置。<br>下面的示例显示以 ‘vivek’ 开头的文本： <code>grep ^vivek /etc/passwd</code><br>输出结果示例：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-symbol">vivek:</span><span class="hljs-symbol">x:</span><span class="hljs-number">1000</span><span class="hljs-symbol">:</span><span class="hljs-number">1000</span><span class="hljs-symbol">:Vivek</span> <span class="hljs-title class_">Gite</span>,,,<span class="hljs-symbol">:/home/vivek</span><span class="hljs-symbol">:/bin/bash</span><br><span class="hljs-symbol">vivekgite:</span><span class="hljs-symbol">x:</span><span class="hljs-number">1001</span><span class="hljs-symbol">:</span><span class="hljs-number">1001</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:/home/vivekgite</span><span class="hljs-symbol">:/bin/sh</span><br></code></pre></td></tr></table></figure></p><p>以<code>#!</code>开头的行<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle">rust@rust-pc:~<span class="hljs-regexp">/note/</span>Linux_note$ <span class="hljs-keyword">grep</span> <span class="hljs-string">&#x27;^#!&#x27;</span> *<br>organize_so_names.sh:#! <span class="hljs-regexp">/bin/</span>sh<br>sort_ranking_solution.md:#! <span class="hljs-regexp">/bin/</span>sh<br></code></pre></td></tr></table></figure></p><p>你可以只显示以 vivek 开头的文本行。举例说就是不显示 vivekgite , vivekg 这样单词开头的。<br><code>grep -w ^vivek /etc/passwd</code></p><p>检索以 ‘foo’ 结尾的文本格式：<code>grep &#39;foo$&#39; FILENAME</code></p><p>你还可以用下面这样的方式搜索空白行：<code>grep &#39;^$&#39; FILENAME</code></p><h4 id="如何匹配具体字符？"><a href="#如何匹配具体字符？" class="headerlink" title="如何匹配具体字符？"></a>如何匹配具体字符？</h4><p>匹配 ‘Vivek’ 或 ‘vivek’ ：<code>grep &#39;[vV]ivek&#39; FILENAME</code></p><p>或者可以这样：<code>grep &#39;[vV][iI][Vv][Ee][kK]&#39; FILENAME</code></p><p>你可以匹配数字（例如匹配 vivek1 或 Vivek2 ）：<code>grep -w &#39;[vV]ivek[0-9]&#39; FILENAME</code></p><p>你可以匹配两位数（例如匹配 foo11 ， foo12 ）：<code>grep &#39;foo[0-9][0-9]&#39; FILENAME</code></p><p>不仅仅是数字，你可以匹配字母：<code>grep &#39;[A-Za-z]&#39; FILENAME</code></p><p>显示所有包含 “w” 或 “n” 字母的文本行：<code>grep [wn] FILENAME</code></p><p>在括号内的表达式中，在“ [: ”和“ :] ”中所附的字符类的名称：代表属于该类的所有字符的列表。标准字符类名称：</p><ul><li>[:alnum:] – 字母数字字符</li><li>[:alpha:] – 字母顺序</li><li>[:blank:] – 空格和制表符</li><li>[:digit:] – 数字： ‘0 1 2 3 4 5 6 7 8 9’</li><li>[:lower:] – 小写字母：‘a b c d e f ’</li><li>[:space:] – 特殊字符：制表符，换行符，垂直制表符、换页，回车，和空间</li><li>[:upper:] – 大写字母：‘A B C D E F G H I J K L M N O P Q R S T U V W X Y Z’</li></ul><p>在下面这个例子中，匹配所有大写字母：<code>grep &#39;[:upper:]&#39; FILENAME</code></p><h4 id="如何使用通配符？"><a href="#如何使用通配符？" class="headerlink" title="如何使用通配符？"></a>如何使用通配符？</h4><p>你可以用 “.” 来代替单个字符。在下面的例子中，查询了所有以字母 “b” 开头、字母 “t” 结尾的三个字符的单词。<br><code>grep &#39;\&lt;b.t\&gt;&#39; FILENAME</code><br>在上面的例子中，<br><code>\&lt;</code> 在单词的开始位置匹配空格字符串<br><code>\&gt;</code> 在单词的结尾匹配空格字符串<br>检索并输出所有两个字母的结果：<code>grep &#39;^..$&#39; FILENAME</code><br>检索并显示所有以 ‘.’ 和数字开头的结果：<code>grep &#39;^\.[0-9]&#39; FILENAME</code><br>转义字符’.’<br>正则表达式查找 IP 地址 192.168.1.254 将不能获得预期的结果：<code>grep &#39;192.168.1.254&#39; /etc/hosts</code><br>其中三个点都需要被转义：<code>grep &#39;192\.168\.1\.254&#39; /etc/hosts</code></p><p>以下示例将只匹配一个地址：<br><code>egrep &#39;[[:digit:]]&#123;1,3&#125;\.[[:digit:]]&#123;1,3&#125;\.[[:digit:]]&#123;1,3&#125;\.[[:digit:]]&#123;1,3&#125;&#39; FILENAME</code></p><p>以下将不分大小写地匹配单词 Linux 或 Unix ：<code>egrep -i &#39;^(linux|unix)&#39; FILENAME</code></p><h3 id="深入探索-grep-高级查找模式"><a href="#深入探索-grep-高级查找模式" class="headerlink" title="深入探索 grep 高级查找模式"></a>深入探索 grep 高级查找模式</h3><h4 id="如何检索一个具有以-‘-‘-开头的的模式？"><a href="#如何检索一个具有以-‘-‘-开头的的模式？" class="headerlink" title="如何检索一个具有以 ‘-‘ 开头的的模式？"></a>如何检索一个具有以 ‘-‘ 开头的的模式？</h4><p>使用 -e 选项搜索所有匹配 ‘–test–‘ 的结果。grep 会尝试把 ‘–test–‘ 作为一个选项解析：<br><code>grep -e &#39;--test--&#39; FILENAME</code></p><h4 id="如何在grep中使用-OR-的逻辑运算-？"><a href="#如何在grep中使用-OR-的逻辑运算-？" class="headerlink" title="如何在grep中使用 OR 的逻辑运算 ？"></a>如何在grep中使用 OR 的逻辑运算 ？</h4><p><code>grep -E &#39;word1|word2&#39; FILENAME</code> 或者 <code>egrep &#39;word1|word2&#39; FILENAME</code><br>或者可以这样做<code>grep &#39;word1\|word2&#39; FILENAME</code></p><h4 id="如何在grep中使用-AND-的逻辑运算-？"><a href="#如何在grep中使用-AND-的逻辑运算-？" class="headerlink" title="如何在grep中使用 AND 的逻辑运算 ？"></a>如何在grep中使用 AND 的逻辑运算 ？</h4><p>按照下面的语法显示所有包含了单词 ‘word1′ 和 ‘word2′ 的结果：<br><code>grep &#39;word1&#39; FILENAME | grep &#39;word2&#39;</code></p><p>或者可以这样：<code>grep &#39;foo.*bar\|word3.*word4&#39; FILENAME</code></p><h4 id="如何测试序列？"><a href="#如何测试序列？" class="headerlink" title="如何测试序列？"></a>如何测试序列？</h4><p>你可以使用下面的语法测试一个字符在序列中的重复的次数：</p><ul><li>{N}</li><li>{N,}</li><li>{min,max}</li></ul><p>匹配包含两个字母 v 的字符串结果：<code>egrep &quot;v&#123;2&#125;&quot; FILENAME</code></p><p>下面的例子中将检索文件内包含 “col” 和 “cool” 的字符串结果：<code>egrep &#39;co&#123;1,2&#125;l&#39; FILENAME</code></p><p>搜索<code>pattern</code>或<code>patern</code><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">rust<span class="hljs-variable">@rust</span><span class="hljs-operator">-</span>pc:<span class="hljs-operator">~</span><span class="hljs-operator">/</span>note<span class="hljs-operator">/</span>Linux_note$ egrep <span class="hljs-string">&#x27;pat&#123;1,2&#125;ern&#x27;</span> <span class="hljs-operator">*</span><br>grep_note.md:Exclude directories matching the <span class="hljs-keyword">pattern</span> DIR <span class="hljs-keyword">from</span> <span class="hljs-keyword">recursive</span> searches.<br>grep_note.md:grep_note.md:    Exclude directories matching the <span class="hljs-keyword">pattern</span> DIR <span class="hljs-keyword">from</span> <span class="hljs-keyword">recursive</span> searches.<br></code></pre></td></tr></table></figure><br>下面的例子中将匹配至少含有3个字母 c 的结果：<code>egrep &#39;c&#123;3,&#125;&#39; FILENAME</code></p><p>下面的示例将匹配 “91-1234567890″ 格式的手机号码（即 “两位数字-十位数字”）<br><code>grep &quot;[[:digit:]]\&#123;2\&#125;[ -]\?[[:digit:]]\&#123;10\&#125;&quot; FILENAME</code></p><h4 id="如何使-grep-的输出结果高亮标注？"><a href="#如何使-grep-的输出结果高亮标注？" class="headerlink" title="如何使 grep 的输出结果高亮标注？"></a>如何使 grep 的输出结果高亮标注？</h4><p>使用下面例子的语法：<code>grep --color regex FILENAME</code></p><h4 id="如何使-grep-的输出只显示匹配的部分而不是整行？"><a href="#如何使-grep-的输出只显示匹配的部分而不是整行？" class="headerlink" title="如何使 grep 的输出只显示匹配的部分而不是整行？"></a>如何使 grep 的输出只显示匹配的部分而不是整行？</h4><p>使用下面例子的语法：<code>grep -o regex FILENAME</code></p><h2 id="统计行数"><a href="#统计行数" class="headerlink" title="统计行数"></a>统计行数</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">grep <span class="hljs-string">&quot;&quot;</span> -r . <span class="hljs-string">| wc -l</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux_note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android 广播机制（Broadcast）介绍与使用</title>
    <link href="/Android/Android-Broadcast_intro_use/"/>
    <url>/Android/Android-Broadcast_intro_use/</url>
    
    <content type="html"><![CDATA[<p>Android应用可以通过广播从系统或其他App接收或发送消息。类似于订阅-发布设计模式。当某些事件发生时，可以发出广播。<br>系统在某些状态改变时会发出广播，例如开机、充电。App也可发送自定义广播。广播可用于应用间的通讯，是IPC的一种方式。</p><h2 id="广播的种类"><a href="#广播的种类" class="headerlink" title="广播的种类"></a>广播的种类</h2><p>广播的种类也可以看成是广播的属性。</p><h3 id="标准广播（Normal-Broadcasts）"><a href="#标准广播（Normal-Broadcasts）" class="headerlink" title="标准广播（Normal Broadcasts）"></a>标准广播（Normal Broadcasts）</h3><p>完全异步的广播。广播发出后，所有的广播接收器几乎同时接收到这条广播。<br>不同的App可以注册并接到标准广播。例如系统广播。</p><h3 id="有序广播（Ordered-Broadcasts）"><a href="#有序广播（Ordered-Broadcasts）" class="headerlink" title="有序广播（Ordered Broadcasts）"></a>有序广播（Ordered Broadcasts）</h3><p>同步广播。同一时刻只有一个广播接收器能接收到这条广播。这个接收器处理完后，广播才会继续传递。<br>有序广播是全局的广播。</p><h3 id="本地广播（Local-Broaddcasts）"><a href="#本地广播（Local-Broaddcasts）" class="headerlink" title="本地广播（Local Broaddcasts）"></a>本地广播（Local Broaddcasts）</h3><p>只在本App发送和接收的广播。注册为本地广播的接收器无法收到标准广播。</p><h3 id="带权限的广播"><a href="#带权限的广播" class="headerlink" title="带权限的广播"></a>带权限的广播</h3><p>发送广播时可以带上相关权限，申请了权限的App或广播接收器才能收到相应的带权限的广播。<br>如果在manifest中申请了相应权限，接收器可以不用再申请一次权限即可接到相应广播。</p><h2 id="接收广播"><a href="#接收广播" class="headerlink" title="接收广播"></a>接收广播</h2><p>创建广播接收器，调用<code>onReceive()</code>方法，需要一个继承BroadcastReceiver的类。</p><h3 id="注册广播"><a href="#注册广播" class="headerlink" title="注册广播"></a>注册广播</h3><p>代码中注册称为动态注册。在AndroidManifest.xml中注册称为静态注册。动态注册的刚波接收器一定要取消注册。在onDestroy()方法中调用unregisterReceiver()方法来取消注册。</p><p>不要在onReceive()方法中添加过多的逻辑操作或耗时的操作。因为在广播接收器中不允许开启线程，当onReceive()方法运行较长时间而没结束时，程序会报错。因此广播接收器一般用来打开其他组件，比如创建一条状态栏通知或启动一个服务。</p><p>新建一个MyExampleReceiver继承自BroadcastReceiver。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyExampleReceiver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BroadcastReceiver</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onReceive</span><span class="hljs-params">(Context context, Intent intent)</span> &#123;<br>        Toast.makeText(context,<span class="hljs-string">&quot;Got it&quot;</span>,Toast.LENGTH_SHORT).show();<br>        <span class="hljs-comment">//abortBroadcast();</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><code>abortBroadcast()</code>可以截断有序广播</p><p>在AndroidManifest.xml中注册广播接收器；name里填接收器的名字。<br>可以设置广播接收器优先级：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">intent-filter</span> <span class="hljs-attr">android:priority</span>=<span class="hljs-string">&quot;100&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">receiver</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;.MyExampleReceiver&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">intent-filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.rust.broadcasttest.MY_BROADCAST&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">intent-filter</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">receiver</span>&gt;</span><br></code></pre></td></tr></table></figure></p><p>让接收器接收到一条“com.rust.broadcasttest.MY_BROADCAST”广播。<br>发送自定义广播（标准广播）时，要传送这个值。例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-string">&quot;com.rust.broadcasttest.MY_BROADCAST&quot;</span>);<br>sendBroadcast(intent);<br></code></pre></td></tr></table></figure></p><p>发送有序广播，应当调用sendOrderedBroadcast()；<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-string">&quot;com.rust.broadcasttest.MY_BROADCAST&quot;</span>);<br>sendOrderedBroadcast(intent，<span class="hljs-literal">null</span>);<br></code></pre></td></tr></table></figure></p><h2 id="发送广播"><a href="#发送广播" class="headerlink" title="发送广播"></a>发送广播</h2><p>App有3种发送广播的方式。发送广播需要使用Intent类。</p><h3 id="sendOrderedBroadcast-Intent-String"><a href="#sendOrderedBroadcast-Intent-String" class="headerlink" title="sendOrderedBroadcast(Intent, String)"></a>sendOrderedBroadcast(Intent, String)</h3><p>发送有序广播。每次只有1个广播接收器能接到广播。<br>接收器接到有序广播后，可以完全地截断广播，或者传递一些信息给下一个接收器。<br>有序广播的顺序可受<code>android:priority</code>标签影响。同等级的接收器收到广播的顺序是随机的。</p><h3 id="sendBroadcast-Intent"><a href="#sendBroadcast-Intent" class="headerlink" title="sendBroadcast(Intent)"></a>sendBroadcast(Intent)</h3><p>以一个未定义的顺序向所有接收器发送广播。也称作普通广播。<br>这种方式更高效，但是接收器不能给下一个接收器传递消息。这类广播也无法截断。</p><h3 id="LocalBroadcastManager-sendBroadcast"><a href="#LocalBroadcastManager-sendBroadcast" class="headerlink" title="LocalBroadcastManager.sendBroadcast"></a>LocalBroadcastManager.sendBroadcast</h3><p>广播只能在应用程序内部进行传递，并且广播接收器也只能接收到来自本应用程序发出的广播。<br>这个方法比全局广播更高效（不需要Interprocess communication，IPC），而且不需要担心其它App会收到你的广播以及其他安全问题。</p><h2 id="广播与权限"><a href="#广播与权限" class="headerlink" title="广播与权限"></a>广播与权限</h2><h3 id="发送带着权限的广播"><a href="#发送带着权限的广播" class="headerlink" title="发送带着权限的广播"></a>发送带着权限的广播</h3><p>当你调用<code>sendBroadcast(Intent, String)</code>或<code>sendOrderedBroadcast(Intent, String, BroadcastReceiver, Handler, int, String, Bundle)</code>时，你可以指定一个权限。<br>接收器在manifest中申请了相应权限时才能收到这个广播。</p><p>例如发送一个带着权限的广播<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">sendBroadcast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-string">&quot;com.example.NOTIFY&quot;</span>),<br>              Manifest.permission.SEND_SMS);<br></code></pre></td></tr></table></figure></p><p>接收广播的app必须注册相应的权限<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.SEND_SMS&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></p><p>当然也可以使用自定义<a href="https://developer.android.com/guide/topics/manifest/permission-element.html">permission</a>。在manifest中使用permission标签<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;custom_permission&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><br>添加后编译一下。即可调用<code>Manifest.permission.custom_permission</code></p><h3 id="接收带权限的广播"><a href="#接收带权限的广播" class="headerlink" title="接收带权限的广播"></a>接收带权限的广播</h3><p>若注册广播接收器时申明了权限，那么只会接收到带着相应权限的广播。</p><p>在配置文件中声明权限，程序才能访问一些关键信息。<br>例如允许查询系统网络状态。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.ACCESS_NETWORK_STATE&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!-- 机器开机广播 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.BOOT_COMPLETED&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><br>如果没有申请权限，程序可能会意外关闭。</p><h2 id="示例-使用标准广播，本地广播，带权限的广播，有序广播"><a href="#示例-使用标准广播，本地广播，带权限的广播，有序广播" class="headerlink" title="示例 - 使用标准广播，本地广播，带权限的广播，有序广播"></a>示例 - 使用标准广播，本地广播，带权限的广播，有序广播</h2><p>发送和接收广播。分为发送和接收方2个App。</p><p>使用带权限的广播。系统权限与自定义权限。<br>使用权限需要在AndroidManifest.xml中声明。如果是自定义权限，需要先添加自定义权限。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 自定义的权限  给广播用 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.rust.permission_rust_1&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.rust.permission_rust_1&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure></p><p>发送广播时带上权限声明。接收方（不论是否己方App）需要在<code>AndroidManifest.xml</code>中申请权限。<br>注册接收器时也需要声明权限。</p><p>发送不带权限的有序广播<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendStandardOrderBroadcast</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(MSG_PHONE);<br>    sendOrderedBroadcast(intent, <span class="hljs-literal">null</span>);<br>    Log.d(TAG, <span class="hljs-string">&quot;[App1] 发送不带权限的有序广播, &quot;</span> + intent.getAction());<br>&#125;<br></code></pre></td></tr></table></figure></p><p>发送方App1代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;rustApp&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">MSG_PHONE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;msg_phone&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">PERMISSION_RUST_1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.rust.permission_rust_1&quot;</span>;<br><br>    <span class="hljs-comment">// 注册广播接收器</span><br>    registerReceiver(mStandardReceiver1, makeIF());<br>    registerReceiver(mStandardReceiver2, makeIF());<br>    registerReceiver(mStandardReceiver3, makeIF());<br><br>    registerReceiver(mStandardReceiverWithPermission, makeIF(),<br>            Manifest.permission.permission_rust_1, <span class="hljs-literal">null</span>);  <span class="hljs-comment">// 带上权限</span><br><br>    LocalBroadcastManager.getInstance(getApplicationContext())<br>            .registerReceiver(mLocalReceiver1, makeIF());<br>    LocalBroadcastManager.getInstance(getApplicationContext())<br>            .registerReceiver(mLocalReceiver2, makeIF());<br>    LocalBroadcastManager.getInstance(getApplicationContext())<br>            .registerReceiver(mLocalReceiver3, makeIF());<br><br>    <span class="hljs-comment">// 解除接收器</span><br>    unregisterReceiver(mStandardReceiver1);<br>    unregisterReceiver(mStandardReceiver2);<br>    unregisterReceiver(mStandardReceiver3);<br><br>    unregisterReceiver(mStandardReceiverWithPermission);<br><br>    LocalBroadcastManager.getInstance(getApplicationContext())<br>            .unregisterReceiver(mLocalReceiver1);<br>    LocalBroadcastManager.getInstance(getApplicationContext())<br>            .unregisterReceiver(mLocalReceiver2);<br>    LocalBroadcastManager.getInstance(getApplicationContext())<br>            .unregisterReceiver(mLocalReceiver3);<br><br><br><span class="hljs-comment">// 发送标准广播</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendStandardBroadcast</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(MSG_PHONE);<br>    sendBroadcast(intent);<br>    Log.d(TAG, <span class="hljs-string">&quot;[App1] Dispatcher 发送标准广播&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 发送带权限的标准广播</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendStandardBroadcastWithPermission</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(MSG_PHONE);<br>    sendBroadcast(intent, PERMISSION_RUST_1);<br>    Log.d(TAG, <span class="hljs-string">&quot;[App1] Dispatcher 发送带权限的标准广播&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 发送本地广播</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendAppLocalBroadcast</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(MSG_PHONE);<br>    LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);<br>    Log.d(TAG, <span class="hljs-string">&quot;[App1] Dispatcher 发送本地广播&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">private</span> IntentFilter <span class="hljs-title function_">makeIF</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">IntentFilter</span> <span class="hljs-variable">intentFilter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntentFilter</span>(MSG_PHONE);<br>    intentFilter.addAction(Intent.ACTION_TIME_TICK);<br>    intentFilter.addAction(Intent.ACTION_TIME_CHANGED);<br>    <span class="hljs-keyword">return</span> intentFilter;<br>&#125;<br><br><span class="hljs-comment">// 标准接收器  用context来注册</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">BroadcastReceiver</span> <span class="hljs-variable">mStandardReceiver1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BroadcastReceiver</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onReceive</span><span class="hljs-params">(Context context, Intent intent)</span> &#123;<br>        Log.d(TAG, <span class="hljs-string">&quot;[App1] 标准接收器1 收到: &quot;</span> + intent.getAction());<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">// 标准接收器  用context来注册</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">BroadcastReceiver</span> <span class="hljs-variable">mStandardReceiver2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BroadcastReceiver</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onReceive</span><span class="hljs-params">(Context context, Intent intent)</span> &#123;<br>        Log.d(TAG, <span class="hljs-string">&quot;[App1] 标准接收器2 收到: &quot;</span> + intent.getAction());<br>        <span class="hljs-keyword">if</span> (intent.getAction().endsWith(MSG_PHONE)) &#123;<br>            abortBroadcast(); <span class="hljs-comment">// 截断有序广播</span><br>            Log.d(TAG, <span class="hljs-string">&quot;[App1] 标准接收器2截断有序广播 &quot;</span> + intent.getAction());<br>        &#125;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">// 标准接收器  用context来注册</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">BroadcastReceiver</span> <span class="hljs-variable">mStandardReceiver3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BroadcastReceiver</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onReceive</span><span class="hljs-params">(Context context, Intent intent)</span> &#123;<br>        Log.d(TAG, <span class="hljs-string">&quot;[App1] 标准接收器3 收到: &quot;</span> + intent.getAction());<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">// 注册的时候给它带权限  标准接收器</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">BroadcastReceiver</span> <span class="hljs-variable">mStandardReceiverWithPermission</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BroadcastReceiver</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onReceive</span><span class="hljs-params">(Context context, Intent intent)</span> &#123;<br>        Log.d(TAG, <span class="hljs-string">&quot;[App1] 带权限的标准接收器收到: &quot;</span> + intent.getAction());<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用LocalBroadcastManager来注册成为本地接收器</span><br><span class="hljs-comment"> * 收不到标准广播 - 不论是本app发出的还是别的地方发出来的</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">BroadcastReceiver</span> <span class="hljs-variable">mLocalReceiver1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BroadcastReceiver</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onReceive</span><span class="hljs-params">(Context context, Intent intent)</span> &#123;<br>        Log.d(TAG, <span class="hljs-string">&quot;[App1] 本地接收器1 收到: &quot;</span> + intent.getAction());<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">BroadcastReceiver</span> <span class="hljs-variable">mLocalReceiver2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BroadcastReceiver</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onReceive</span><span class="hljs-params">(Context context, Intent intent)</span> &#123;<br>        Log.d(TAG, <span class="hljs-string">&quot;[App1] 本地接收器2 收到: &quot;</span> + intent.getAction());<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">BroadcastReceiver</span> <span class="hljs-variable">mLocalReceiver3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BroadcastReceiver</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onReceive</span><span class="hljs-params">(Context context, Intent intent)</span> &#123;<br>        Log.d(TAG, <span class="hljs-string">&quot;[App1] 本地接收器3 收到: &quot;</span> + intent.getAction());<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure></p><p>接收方App2代码<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 自定义的权限  给广播用 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.rust.permission_rust_1&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.rust.permission_rust_1&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">MSG_PHONE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;msg_phone&quot;</span>;<br>        registerReceiver(mDefaultReceiver, makeIF());<br>        LocalBroadcastManager.getInstance(getApplicationContext())<br>                .registerReceiver(mLocalReceiver, makeIF());<br><br>        unregisterReceiver(mDefaultReceiver);<br>        LocalBroadcastManager.getInstance(getApplicationContext())<br>                .unregisterReceiver(mLocalReceiver);<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">BroadcastReceiver</span> <span class="hljs-variable">mDefaultReceiver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BroadcastReceiver</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onReceive</span><span class="hljs-params">(Context context, Intent intent)</span> &#123;<br>            Log.d(TAG, <span class="hljs-string">&quot;[App2] standard receive: &quot;</span> + intent.getAction());<br>        &#125;<br>    &#125;;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">BroadcastReceiver</span> <span class="hljs-variable">mLocalReceiver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BroadcastReceiver</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onReceive</span><span class="hljs-params">(Context context, Intent intent)</span> &#123;<br>            Log.d(TAG, <span class="hljs-string">&quot;[App2] local receive: &quot;</span> + intent.getAction());<br>        &#125;<br>    &#125;;<br><br>    <span class="hljs-keyword">private</span> IntentFilter <span class="hljs-title function_">makeIF</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">IntentFilter</span> <span class="hljs-variable">intentFilter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntentFilter</span>(MSG_PHONE);<br>        intentFilter.addAction(Intent.ACTION_TIME_TICK);<br>        intentFilter.addAction(Intent.ACTION_TIME_CHANGED);<br>        <span class="hljs-keyword">return</span> intentFilter;<br>    &#125;<br></code></pre></td></tr></table></figure><p>使用<code>LocalBroadcastManager</code>发出的本地广播，另一个App是接收不到的。<br>要收到本地广播，同样需要<code>LocalBroadcastManager</code>来注册接收器。</p><p>可以把本地广播看成是一个局部的，App内的广播体系。</p><p>实验中我们注意到，<code>Intent.ACTION_TIME_TICK</code>广播是可以截断的。</p>]]></content>
    
    
    <categories>
      
      <category>Android_note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android_Broadcast</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android AIDL 了解与使用</title>
    <link href="/Android/Android-AIDL_intro_and_use/"/>
    <url>/Android/Android-AIDL_intro_and_use/</url>
    
    <content type="html"><![CDATA[<h2 id="AIDL简介"><a href="#AIDL简介" class="headerlink" title="AIDL简介"></a>AIDL简介</h2><p>AIDL（Android Interface Definition Language, Android 接口定义语言）<br>用于定义C/S体系结构中Server端可以提供的服务调用接口，框架层提供的Java系统服务接口大多由AIDL语言定义。<br>Android提供了AIDL工具，可将AIDL文件编译成Java文件。提高服务开发的效率</p><p>程序员可以利用AIDL自定义编程接口，在客户端和服务端之间实现进程间通信（IPC）。<br>在Android平台上，一个进程通常不能访问另外一个进程的内存空间，因此，Android平台将这些跨进程访问的对象分解成操作系统能够识别的简单对象。<br>并为跨应用访问而特殊编排和整理这些对象。用于编排和整理这些对象的代码编写起来十分冗长，所以Android的AIDL提供了相关工具来自动生成这些代码。</p><p>开发人员只需要在AIDL文件中定义Server端可以提供的服务方法，AIDL工具便可将其转化为Java文件。转化后的Java文件包含C/S体系结构的以下内容：</p><ul><li>服务接口 （IPowerManager）</li><li>服务在Client端的代理（Proxy）</li><li>服务存根（Stub）</li><li>Binder类型与IIterface类型的转换接口（asInterface 和 asBinder 方法）</li><li>服务方法请求码</li></ul><h2 id="AIDL意义"><a href="#AIDL意义" class="headerlink" title="AIDL意义"></a>AIDL意义</h2><p>AIDL工具建立了基于Binder的C/S体系结构的通用组件；开发者可以专注于开发服务的功能，而不需理会具体的通信结构，提高效率。</p><h2 id="应用示例"><a href="#应用示例" class="headerlink" title="应用示例"></a>应用示例</h2><p>根据上文我们可以知道，我们创建两个apk，一个作为服务提供方，一个作为AIDL服务调用方。</p><h3 id="AIDL服务提供方代码"><a href="#AIDL服务提供方代码" class="headerlink" title="AIDL服务提供方代码"></a>AIDL服务提供方代码</h3><p>首先是AIDL服务提供方主要文件目录<br><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">main/aidl/<br>`<span class="hljs-comment">-- com</span><br>    `<span class="hljs-comment">-- rustfisher</span><br>        `<span class="hljs-comment">-- ndkproj</span><br>            `<span class="hljs-comment">-- ITomInterface.aidl // AIDL代码</span><br><br>main/java<br>`<span class="hljs-comment">-- com</span><br>    `<span class="hljs-comment">-- rustfisher</span><br>        |<span class="hljs-comment">-- tom</span><br>        |   `<span class="hljs-comment">-- TomService.java // 对应的Service</span><br><br>build/<span class="hljs-keyword">generated</span>/source/aidl/<br>`<span class="hljs-comment">-- debug</span><br>    `<span class="hljs-comment">-- com</span><br>        `<span class="hljs-comment">-- rustfisher</span><br>            `<span class="hljs-comment">-- ndkproj</span><br>                `<span class="hljs-comment">-- ITomInterface.java // 工程编译后AIDL生成的Java文件 提供给调用方</span><br></code></pre></td></tr></table></figure></p><h4 id="新建AIDL文件并写好接口"><a href="#新建AIDL文件并写好接口" class="headerlink" title="新建AIDL文件并写好接口"></a>新建AIDL文件并写好接口</h4><p>进入服务方的工程，右键新建AIDL文件<code>ITomInterface.aidl</code>。<br>文件会默认生成在<code>main/aidl/com/rustfisher/ndkproj</code>下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// ITomInterface.aidl</span><br><span class="hljs-keyword">package</span> com.rustfisher.ndkproj;<br><br><span class="hljs-comment">// 文件名应该和接口名相同</span><br><span class="hljs-comment">// 编写好AIDL文件后可以先编译一次</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ITomInterface</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">basicTypes</span><span class="hljs-params">(<span class="hljs-type">int</span> anInt, <span class="hljs-type">long</span> aLong, <span class="hljs-type">boolean</span> aBoolean, <span class="hljs-type">float</span> aFloat,</span><br><span class="hljs-params">            <span class="hljs-type">double</span> aDouble, String aString)</span>;<br>    String <span class="hljs-title function_">helloAIDL</span><span class="hljs-params">(String name)</span>; <span class="hljs-comment">// 此次使用的方法</span><br>&#125;<br></code></pre></td></tr></table></figure></p><h4 id="编写服务方的接口实现代码"><a href="#编写服务方的接口实现代码" class="headerlink" title="编写服务方的接口实现代码"></a>编写服务方的接口实现代码</h4><p>在<code>com.rustfisher.tom</code>包内创建<code>TomService.java</code>文件；建立内部类<code>TomServiceImpl</code>实现接口的功能<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.rustfisher.ndkproj.ITomInterface;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TomService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Service</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;rustApp&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TomServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ITomInterface</span>.Stub &#123;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">basicTypes</span><span class="hljs-params">(<span class="hljs-type">int</span> anInt, <span class="hljs-type">long</span> aLong, <span class="hljs-type">boolean</span> aBoolean, <span class="hljs-type">float</span> aFloat, <span class="hljs-type">double</span> aDouble, String aString)</span> <span class="hljs-keyword">throws</span> RemoteException &#123;<br><br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">helloAIDL</span><span class="hljs-params">(String name)</span> <span class="hljs-keyword">throws</span> RemoteException &#123;<br>            Log.d(TAG, name + <span class="hljs-string">&quot; requires helloAIDL()&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello &quot;</span> + name + <span class="hljs-string">&quot;, nice to meet you!&quot;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Nullable</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> IBinder <span class="hljs-title function_">onBind</span><span class="hljs-params">(Intent intent)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TomServiceImpl</span>(); <span class="hljs-comment">// 绑定服务则返回 TomServiceImpl 实例</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h4 id="服务方在AndroidManifest-xml文件中配置"><a href="#服务方在AndroidManifest-xml文件中配置" class="headerlink" title="服务方在AndroidManifest.xml文件中配置"></a>服务方在<code>AndroidManifest.xml</code>文件中配置</h4><p>实现了<code>TomService</code>类后，对此AIDL服务进行配置；在<code>AndroidManifest.xml</code>文件中配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">service</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.rustfisher.tom.TomService&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">intent-filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.rustfisher.ndkproj.ITomInterface&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">intent-filter</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">service</span>&gt;</span><br></code></pre></td></tr></table></figure><br>action里面写上AIDL文件</p><h4 id="安装运行此apk到手机上"><a href="#安装运行此apk到手机上" class="headerlink" title="安装运行此apk到手机上"></a>安装运行此apk到手机上</h4><p>让服务方运行起来</p><h3 id="AIDL调用方代码（客户端）"><a href="#AIDL调用方代码（客户端）" class="headerlink" title="AIDL调用方代码（客户端）"></a>AIDL调用方代码（客户端）</h3><p>建立（或进入）AIDL调用方的工程，这里是aidlcaller工程。</p><p>主要文件目录<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ada">java/<br>`<span class="hljs-comment">-- com</span><br>    |<span class="hljs-comment">-- rust</span><br>    |   `<span class="hljs-comment">-- aidlcaller</span><br>    |       `<span class="hljs-comment">-- MainActivity.java // 演示用的</span><br>    `<span class="hljs-comment">-- rustfisher</span><br>        `<span class="hljs-comment">-- ndkproj // 这个路径尽量保持与服务提供方那里的一致</span><br>            `<span class="hljs-comment">-- ITomInterface.java // 从服务方那里copy来的</span><br></code></pre></td></tr></table></figure></p><p>有如下3个步骤：</p><ul><li>1.将AIDL服务端生成的Java文件复制到调用方工程里，尽量保持这个Java文件的路径与服务端的一致，便于识别</li><li>2.写代码绑定服务，获取AIDL服务对象</li><li>3.通过AIDL服务对象完成AIDL接口调用</li></ul><p>编写调用方<code>MainActivity.java</code>代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.rustfisher.ndkproj.ITomInterface;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;rustApp&quot;</span>;<br>    ITomInterface mTomService; <span class="hljs-comment">// AIDL 服务</span><br>    TextView mTv1;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">ServiceConnection</span> <span class="hljs-variable">serviceConnection</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceConnection</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onServiceConnected</span><span class="hljs-params">(ComponentName name, IBinder service)</span> &#123;<br>            mTomService = ITomInterface.Stub.asInterface(service);<span class="hljs-comment">// 获取服务对象</span><br>            mTv1.setClickable(<span class="hljs-literal">true</span>); <span class="hljs-comment">// 需要等服务绑定好  再允许点击</span><br>            Log.d(TAG, <span class="hljs-string">&quot;[aidlcaller] onServiceConnected&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onServiceDisconnected</span><span class="hljs-params">(ComponentName name)</span> &#123;<br>            Log.d(TAG, <span class="hljs-string">&quot;onServiceDisconnected &quot;</span> + name);<br>        &#125;<br>    &#125;;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>        initAIDLService();<br>        initUI();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initUI</span><span class="hljs-params">()</span> &#123;<br>        mTv1 = (TextView) findViewById(R.id.tv1);<br>        mTv1.setOnClickListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">View</span>.OnClickListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View v)</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">hello</span> <span class="hljs-operator">=</span> mTomService.helloAIDL(<span class="hljs-string">&quot;Jerry&quot;</span>);<br>                    Log.d(TAG, hello);<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    Log.e(TAG, <span class="hljs-string">&quot;mTomService initAIDLService: Fail &quot;</span>, e);<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initAIDLService</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 这个是服务提供方的AndroidManifest action</span><br>        <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-string">&quot;com.rustfisher.ndkproj.ITomInterface&quot;</span>);<br>        intent.setPackage(<span class="hljs-string">&quot;com.rustfisher.ndkproj&quot;</span>); <span class="hljs-comment">// 服务提供者的包名</span><br>        bindService(intent, serviceConnection, Context.BIND_AUTO_CREATE);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h4 id="测试和效果"><a href="#测试和效果" class="headerlink" title="测试和效果"></a>测试和效果</h4><p>点击调用端的View，打出log <code>Hello Jerry, nice to meet you!</code><br>服务端apk打印log：<code>Jerry requires helloAIDL()</code></p><p>如果调用失败则抛出 <code>android.os.DeadObjectException</code></p><p>当服务提供方App没有在运行时，调用方去请求服务会失败。</p><p>服务端更新后，如果aidl文件没改动，不需要更新生成的Java文件<br>如果服务端apk被卸载，调用端使用此服务时会出错</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://rustfisher.com/2019/08/08/Android/Android-Binder_mechanism_intro/">Android Binder 机制介绍</a></p>]]></content>
    
    
    <categories>
      
      <category>Android_note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AIDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android NDK 使用.a</title>
    <link href="/Android/NDK-compile_import_a_file/"/>
    <url>/Android/NDK-compile_import_a_file/</url>
    
    <content type="html"><![CDATA[<h2 id="Android-NDK-使用-a"><a href="#Android-NDK-使用-a" class="headerlink" title="Android NDK 使用.a"></a>Android NDK 使用.a</h2><p>一个编译时使用.a文件的例子。流程是准备好库文件以及对应的头文件，编写makefile，编译。</p><h3 id="准备库文件与头文件"><a href="#准备库文件与头文件" class="headerlink" title="准备库文件与头文件"></a>准备库文件与头文件</h3><p>先准备头文件和<code>.a</code>文件。这里以ncnn目录为例。</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string">-- Android.mk</span><br><span class="hljs-string"></span>|<span class="hljs-string">-- Application.mk</span><br><span class="hljs-string"></span>|<span class="hljs-string">-- ncnn</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- include</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- benchmark.h</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- ....h # 对应的头文件</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- lib</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   `-- libncnn.a</span><br></code></pre></td></tr></table></figure><h3 id="编写makefile"><a href="#编写makefile" class="headerlink" title="编写makefile"></a>编写makefile</h3><p>在<code>Android.mk</code>中声明库文件。<br>这里是引入opencv的库。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs makefile">LOCAL_PATH := <span class="hljs-variable">$(<span class="hljs-built_in">call</span> my-<span class="hljs-built_in">dir</span>)</span><br><br><span class="hljs-keyword">include</span> <span class="hljs-variable">$(CLEAR_VARS)</span><br>LOCAL_MODULE    := ncnn<br>LOCAL_SRC_FILES := ncnn/lib/libncnn.a<br><span class="hljs-keyword">include</span> <span class="hljs-variable">$(PREBUILT_STATIC_LIBRARY)</span><br><br>LOCAL_STATIC_LIBRARIES := ncnn<br><br>OPENCVROOT:=<span class="hljs-variable">$(LOCAL_PATH)</span>/../../../../../../OpenCV-android-sdk<br>OPENCV_CAMERA_MODULES:=off<br>OPENCV_INSTALL_MODULES:=on<br><span class="hljs-comment">#OPENCV_LIB_TYPE:=SHARED</span><br>OPENCV_LIB_TYPE:=STATIC<br><span class="hljs-keyword">include</span> $&#123;OPENCVROOT&#125;/sdk/native/jni/OpenCV.mk<br><br><span class="hljs-comment"># v20 with sse</span><br>LOCAL_SRC_FILES := v20/fdssttracker.cpp v20/fhog.cpp v20/runtracker.cpp \<br>                     jni_eman.cpp \<br>                     ncnn/ssdmobilenet.cpp jni_encnn.cpp<br><br><span class="hljs-comment"># 后面是模块的配置</span><br></code></pre></td></tr></table></figure><p>这里要注意，头文件和.a文件必须是对应的。否则编译时会报错<code>error: undefined reference to</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">E:/projects/myProj/myProject/f1/src/main/jni/ncnn/lib/libncnn.a(net.cpp.o):net.cpp:<span class="hljs-keyword">function</span> ncnn::Net::load_model(__STDIO_FILE_STRUCT*): error: undefined reference to <span class="hljs-string">&#x27;stderr&#x27;</span><br>E:/projects/myProj/myProject/f1/src/main/jni/ncnn/lib/libncnn.a(net.cpp.o):net.cpp:<span class="hljs-keyword">function</span> ncnn::Net::load_model(char const*): `error: undefined reference to`<br><span class="hljs-string">&#x27;stderr&#x27;</span><br>E:/projects/myProj/myProject/f1/src/main/jni/ncnn/lib/libncnn.a(net.cpp.o):net.cpp:<span class="hljs-keyword">function</span> ncnn::Net::load_model(unsigned char const*): error: undefined reference to <span class="hljs-string">&#x27;stderr&#x27;</span><br>E:/projects/myProj/myProject/f1/src/main/jni/ncnn/lib/libncnn.a(net.cpp.o):net.cpp:<span class="hljs-keyword">function</span> ncnn::Net::find_blob_index_by_name(char const*) const: error: undefined reference to <span class="hljs-string">&#x27;stderr&#x27;</span><br>clang++.exe: error: linker <span class="hljs-built_in">command</span> failed with <span class="hljs-built_in">exit</span> code 1 (use -v to see invocation)<br>make: *** [E:/projects/myProj/myProject/f1/src/main/obj/local/armeabi-v7a/libf1.so] Error 1<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android_note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NDK</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
